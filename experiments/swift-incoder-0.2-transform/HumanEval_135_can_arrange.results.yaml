language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7hn99y9a/tmp7hn99y9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bf3d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bf3a8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bf3a8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bf3a8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hn99y9a                        0x00005604bf0d9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1bf3f80460 __libc_start_main +
    245

    6    tmp7hn99y9a                        0x00005604bf0d91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count {\n      \
    \  if arr[i] > largest {\n            largest = i\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2w6pbtwv/tmp2w6pbtwv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb45dccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb45ac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb45ac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb45ac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2w6pbtwv                        0x000055a15bfd1552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb45fb8460 __libc_start_main +
    245

    6    tmp2w6pbtwv                        0x000055a15bfd11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = Int()\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n        }\n    }\n    if largest == Int64(min) {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp41gw84t0.swift:19:19: error: no exact matches in call to initializer\
    \ \n    if largest == Int64(min) {\n                  ^\n/tmp/tmp41gw84t0.swift:19:19:\
    \ note: found candidate with type '(@escaping (_, _) -> _) -> Int64'\n    if largest\
    \ == Int64(min) {\n                  ^\n/tmp/tmp41gw84t0.swift:19:25: error: generic\
    \ parameter 'T' could not be inferred\n    if largest == Int64(min) {\n      \
    \                  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var largestIndex = -1\n    for\
    \ idx in 0..<arr.count {\n        if arr[idx] > largest {\n            largest\
    \ = arr[idx]\n            largestIndex = idx\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9k7y42ln/tmp9k7y42ln.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b404add0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b404aac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b404aac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b404aac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k7y42ln                        0x0000560b05c56552 <unavailable> + 5458

    5    libc.so.6                          0x00002b404afbc460 __libc_start_main +
    245

    6    tmp9k7y42ln                        0x0000560b05c561a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for idx in 0..<arr.count {\n    \
    \    if idx > 0 && arr[idx] > arr[idx-1] {\n            largest = idx\n      \
    \  }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdhqw55dz/tmpdhqw55dz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b638986dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6389564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6389564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63895637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhqw55dz                        0x00005584851e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6389a59460 __libc_start_main +
    245

    6    tmpdhqw55dz                        0x00005584851e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in arr {\n        if i >= maxValue {\n            maxValue = i\n           \
    \ maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpc5u5aj5g/tmpc5u5aj5g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abef754cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abef7243b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abef7243988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abef72427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5u5aj5g                        0x000055bd993214d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abef7738460 __libc_start_main +
    245

    6    tmpc5u5aj5g                        0x000055bd99321129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = 0\n    for element\
    \ in arr {\n        if element > largest {\n            largest = element\n  \
    \          index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi46af0r_/tmpi46af0r_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eae1bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eadeb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eadeb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eadeb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi46af0r_                        0x000055c5a5c19482 <unavailable> + 5250

    5    libc.so.6                          0x00002b1eae3a7460 __libc_start_main +
    245

    6    tmpi46af0r_                        0x000055c5a5c190d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    for idx in 0..<arr.count {\n \
    \       if idx > 0 && arr[idx] > arr[idx - 1] {\n            largest = idx\n \
    \       }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpqine0vd2/tmpqine0vd2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47bc50dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47bc204b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47bc204988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47bc2037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqine0vd2                        0x0000555c195e9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b47bc6f9460 __libc_start_main +
    245

    6    tmpqine0vd2                        0x0000555c195e91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = 0\n    for element\
    \ in arr {\n        if element > largest {\n            largest = element\n  \
    \          index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi46af0r_/tmpi46af0r_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eae1bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eadeb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eadeb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eadeb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi46af0r_                        0x000055c5a5c19482 <unavailable> + 5250

    5    libc.so.6                          0x00002b1eae3a7460 __libc_start_main +
    245

    6    tmpi46af0r_                        0x000055c5a5c190d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var largestIndex = -1\n    for\
    \ index in 0..<arr.count {\n        if arr[index] > largest {\n            largest\
    \ = arr[index]\n            largestIndex = index\n        }\n    }\n    return\
    \ largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5b_8tj7c/tmp5b_8tj7c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7cc0cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7cbdc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7cbdc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7cbdc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b_8tj7c                        0x00005616bb932552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae7cc2b7460 __libc_start_main +
    245

    6    tmp5b_8tj7c                        0x00005616bb9321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in arr {\n        if i > maxValue {\n            maxIndex = i\n            maxValue\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpc1awe45g/tmpc1awe45g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97b592fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97b5626b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97b5626988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97b56257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc1awe45g                        0x0000557855bd64d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b97b5b1b460 __libc_start_main +
    245

    6    tmpc1awe45g                        0x0000557855bd6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu23jtlcj/tmpu23jtlcj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e5a81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e5778b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e5778988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e57777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu23jtlcj                        0x0000560cc0d93552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab4e5c6d460 __libc_start_main +
    245

    6    tmpu23jtlcj                        0x0000560cc0d931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7f2mgi5n.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    for index in 0..<arr.count {\n\
    \        if arr[index] > largest {\n            largest = index\n        }\n \
    \   }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuv_iw7aq/tmpuv_iw7aq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b368bcf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b368b9edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b368b9ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b368b9ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuv_iw7aq                        0x00005650bbf4d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b368bee2460 __libc_start_main +
    245

    6    tmpuv_iw7aq                        0x00005650bbf4d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = arr[0]\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > largest {\n            largest = arr[i]\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm_slebv/tmpbm_slebv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad875797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87548eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87548e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87548d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm_slebv                        0x000055f7a73c3552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad875983460 __libc_start_main +
    245

    6    tmpbm_slebv                        0x000055f7a73c31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu23jtlcj/tmpu23jtlcj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e5a81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e5778b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e5778988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e57777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu23jtlcj                        0x0000560cc0d93552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab4e5c6d460 __libc_start_main +
    245

    6    tmpu23jtlcj                        0x0000560cc0d931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = arr[0]\n    var index = 0\n    for value\
    \ in arr {\n        if value > largest {\n            largest = value\n      \
    \      index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpifz0j85v/tmpifz0j85v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b414e054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414dd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414dd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414dd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifz0j85v                        0x000055942477b59f <unavailable> + 5535

    5    libc.so.6                          0x00002b414e240460 __libc_start_main +
    245

    6    tmpifz0j85v                        0x000055942477b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxIndex = maxIndex + 1\n\
    \            maxValue = value\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpc7x5knh4/tmpc7x5knh4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b449f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b446e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b446e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b446e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7x5knh4                        0x0000562970a844d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b2b44bde460 __libc_start_main +
    245

    6    tmpc7x5knh4                        0x0000562970a84129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var index = 0\n    for element in arr\
    \ {\n        if element > max {\n            max = element\n            index\
    \ = index + 1\n        }\n    }\n    if index == 0 {\n        return -1\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxtwi8ooz/tmpxtwi8ooz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1e3786c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1e347db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1e347d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1e347c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxtwi8ooz                        0x00005612518e5482 <unavailable> + 5250

    5    libc.so.6                          0x00002ac1e3972460 __libc_start_main +
    245

    6    tmpxtwi8ooz                        0x00005612518e50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9rej5nim/tmp9rej5nim.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98b8c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98b5c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98b5c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98b5bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rej5nim                        0x000055e99c131552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad98bab5460 __libc_start_main +
    245

    6    tmp9rej5nim                        0x000055e99c1311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpv3l5wu7o/tmpv3l5wu7o.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a6a94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a6a641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a6a641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a6a6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3l5wu7o                        0x000055972f5fb552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4a6ab36460 __libc_start_main +
    245

    6    tmpv3l5wu7o                        0x000055972f5fb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var largestIndex = -1\n    for\
    \ index in 0..<arr.count {\n        if arr[index] > largest {\n            largest\
    \ = arr[index]\n            largestIndex = index\n        }\n    }\n    return\
    \ largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5b_8tj7c/tmp5b_8tj7c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7cc0cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7cbdc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7cbdc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7cbdc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b_8tj7c                        0x00005616bb932552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae7cc2b7460 __libc_start_main +
    245

    6    tmp5b_8tj7c                        0x00005616bb9321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0mwesdin.swift:17:24: error: cannot find 'i' in scope\n       \
    \     maxIndex = i\n                       ^\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n           \
    \ maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu23jtlcj/tmpu23jtlcj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e5a81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e5778b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e5778988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e57777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu23jtlcj                        0x0000560cc0d93552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab4e5c6d460 __libc_start_main +
    245

    6    tmpu23jtlcj                        0x0000560cc0d931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n     \
    \   if arr[i] > arr[maxIndex] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2599d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2596ca561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2596ca286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2596ca13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2596c9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2594c9e83 <unavailable> + 188035

    6    tmpmfzv8kr1                        0x000056193d066a28 <unavailable> + 6696

    7    tmpmfzv8kr1                        0x000056193d0664d4 <unavailable> + 5332

    8    libc.so.6                          0x00002ad259bbf460 __libc_start_main +
    245

    9    tmpmfzv8kr1                        0x000056193d0661a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpu56m5nym/tmpu56m5nym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d4be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d48d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d48d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d48d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu56m5nym                        0x00005651819e2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab0d4dce460 __libc_start_main +
    245

    6    tmpu56m5nym                        0x00005651819e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978455
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for value\
    \ in arr {\n        if value > maxValue {\n            maxValue = value\n    \
    \        maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3uxvbk18.swift:17:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659978455
