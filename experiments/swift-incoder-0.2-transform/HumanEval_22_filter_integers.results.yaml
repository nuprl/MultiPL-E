language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in values {\n        if let i = Int(v) {\n     \
    \       result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5k0jipz2.swift:10:24: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let i = Int(v) {\n          \
    \             ^\n                         as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_yc5vikz.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x where x is Int:\n \
    \           return true\n        default:\n            return false\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp964y4j7j.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmp964y4j7j.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for v in values {\n        if let i = Int(v) {\n   \
    \         filtered.append(i)\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaziwh5vq.swift:10:24: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let i = Int(v) {\n          \
    \             ^\n                         as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }).map({ $0 as! Int })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = Int(value)\
    \ {\n            result.append(intValue)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpp7aegh7z.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphxbzwvnp.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphxbzwvnp.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x as Int:\n         \
    \   return true\n        default:\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgv64ci1z.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmpgv64ci1z.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: -4
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmpzofessmq/tmpzofessmq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2094b78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b209486fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b209486f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b209486e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzofessmq                        0x0000563a2855ce0b <unavailable> + 7691

    5    libc.so.6                          0x00002b2094d64460 __libc_start_main +
    245

    6    tmpzofessmq                        0x0000563a2855c719 <unavailable> + 5913

    '
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        case let value as\
    \ [AnyHashable]:\n            for v in value {\n                result.append(Int(v))\n\
    \            }\n        case let value as [Any]:\n            for v in value {\n\
    \                result.append(Int(v))\n            }\n        case let value\
    \ as [AnyHashable : AnyHashable]:\n            for v in value {\n            \
    \    result.append(Int(v))\n            }\n        case let value as [AnyHashable]:\n\
    \            for v in value {\n                result.append(Int(v))\n       \
    \     }\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpko5z8lnk.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmpko5z8lnk.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmpko5z8lnk.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n/tmp/tmpko5z8lnk.swift:19:31: error: no exact\
    \ matches in call to initializer \n                result.append(Int(v))\n   \
    \                           ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float80)\n \
    \          ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _v: Builtin.Word)\n\
    \           ^\n/tmp/tmpko5z8lnk.swift:23:31: error: no exact matches in call to\
    \ initializer \n                result.append(Int(v))\n                      \
    \        ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that 'Any'\
    \ conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: T) where T :"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphxbzwvnp.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        guard let intValue =\
    \ value as? Int else {\n            throw PythonError.newError(\n            \
    \    format: \"Cannot filter integers from %@\",\n                value: value\n\
    \            )\n        }\n        result.append(intValue)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4a_5gaa1.swift:11:19: error: cannot find 'PythonError' in scope\n\
    \            throw PythonError.newError(\n                  ^~~~~~~~~~~\n/tmp/tmp4a_5gaa1.swift:11:13:\
    \ error: error is not handled because the enclosing function is not declared 'throws'\n\
    \            throw PythonError.newError(\n            ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphxbzwvnp.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in values {\n        if let i = Int(v) {\n     \
    \       result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5k0jipz2.swift:10:24: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let i = Int(v) {\n          \
    \             ^\n                         as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x where x is Int:\n \
    \           return true\n        default:\n            return false\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp964y4j7j.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmp964y4j7j.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            filtered.append(value)\n        case\
    \ let value as Double:\n            filtered.append(Int(value))\n        case\
    \ let value as String:\n            filtered.append(Int(value))\n        case\
    \ let value as [AnyHashable]:\n            filtered.append(filter_integers(values))\n\
    \        default:\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnkctkenq.swift:16:29: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            filtered.append(Int(value))\n\
    \                            ^\n/tmp/tmpnkctkenq.swift:16:29: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   filtered.append(Int(value))\n                            ^\n             \
    \                          ?? <#default value#>\n/tmp/tmpnkctkenq.swift:16:29:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            filtered.append(Int(value))\n                           \
    \ ^\n                                      !\n/tmp/tmpnkctkenq.swift:18:22: error:\
    \ no exact matches in call to instance method 'append'\n            filtered.append(filter_integers(values))\n\
    \                     ^\n/tmp/tmpnkctkenq.swift:18:22: note: candidate expects\
    \ value of type '[Int]' for parameter #1 (got '[AnyHashable]')\n            filtered.append(filter_integers(values))\n\
    \                     ^\n/tmp/tmpnkctkenq.swift:18:22: note: candidate expects\
    \ value of type '[Int]' for parameter #1 (got '[AnyHashable]')\n            filtered.append(filter_integers(values))\n\
    \                     ^\n/tmp/tmpnkctkenq.swift:18:45: error: missing argument\
    \ label 'values:' in call\n            filtered.append(filter_integers(values))\n\
    \                                            ^\n                             \
    \               values: \n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            if let int = Int(value) {\n                result.append(int)\n\
    \            }\n        case let value as [AnyHashable]:\n            for item\
    \ in value {\n                if let int = Int(item) {\n                    result.append(int)\n\
    \                }\n            }\n        case let value as [Any]:\n        \
    \    for item in value {\n                if let int = Int(item) {\n         \
    \           result.append(int)\n                }\n            }\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk3h_c5ef.swift:21:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n                if let int = Int(item) {\n\
    \                                 ^\n                                      as!\
    \ String\n/tmp/tmpk3h_c5ef.swift:27:30: error: initializer 'init(_:radix:)' requires\
    \ that 'S' conform to 'StringProtocol'\n                if let int = Int(item)\
    \ {\n                             ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = Int(value)\
    \ {\n            result.append(intValue)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf2deusu6.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            filtered.append(int)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx758ofpe.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        case let value as\
    \ [AnyHashable]:\n            for v in value {\n                result.append(Int(v))\n\
    \            }\n        case let value as [Any]:\n            for v in value {\n\
    \                result.append(Int(v))\n            }\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpejezz1bs.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmpejezz1bs.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmpejezz1bs.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n/tmp/tmpejezz1bs.swift:19:31: error: no exact\
    \ matches in call to initializer \n                result.append(Int(v))\n   \
    \                           ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float80)\n \
    \          ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _v: Builtin.Word)\n\
    \           ^\n/tmp/tmpejezz1bs.swift:23:31: error: no exact matches in call to\
    \ initializer \n                result.append(Int(v))\n                      \
    \        ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that 'Any'\
    \ conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: T) where T :"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let value as Int:\n     \
    \       return true\n        default:\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc8_eg4zm.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmpc8_eg4zm.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmp5jqejx3l/tmp5jqejx3l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaca9eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaca6e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaca6e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaca6e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jqejx3l                        0x0000564942cd4dab <unavailable> + 7595

    5    libc.so.6                          0x00002afacabd6460 __libc_start_main +
    245

    6    tmp5jqejx3l                        0x0000564942cd46b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_yc5vikz.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as String:\n            if let value = Int(value) {\n                result.append(value)\n\
    \            }\n        default:\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x where x is Int:\n \
    \           return true\n        default:\n            return false\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp964y4j7j.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmp964y4j7j.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = Int(value)\
    \ {\n            result.append(intValue)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf2deusu6.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            filtered.append(int)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfourfes_.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_yc5vikz.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            filtered.append(value)\n        default:\n\
    \            break\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        guard let intValue\
    \ = Int(value) else {\n            throw PythonError.newError(\n             \
    \   format: \"Cannot filter integers from non-integers value %@\", value)\n  \
    \      }\n        filtered.append(intValue)\n    }\n    return filtered\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbunyc4ci.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n/tmp/tmpbunyc4ci.swift:11:19: error: cannot find 'PythonError'\
    \ in scope\n            throw PythonError.newError(\n                  ^~~~~~~~~~~\n\
    /tmp/tmpbunyc4ci.swift:11:13: error: error is not handled because the enclosing\
    \ function is not declared 'throws'\n            throw PythonError.newError(\n\
    \            ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let intValue = Int(value)\
    \ {\n            filtered.append(intValue)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprfefdvg2.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: -4
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmp5jqejx3l/tmp5jqejx3l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaca9eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaca6e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaca6e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaca6e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jqejx3l                        0x0000564942cd4dab <unavailable> + 7595

    5    libc.so.6                          0x00002afacabd6460 __libc_start_main +
    245

    6    tmp5jqejx3l                        0x0000564942cd46b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }).map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }).map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        case let value as\
    \ [AnyHashable]:\n            for element in value {\n                result.append(Int(element))\n\
    \            }\n        case let value as [Any]:\n            for element in value\
    \ {\n                result.append(Int(element))\n            }\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5smkg8yq.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmp5smkg8yq.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmp5smkg8yq.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n/tmp/tmp5smkg8yq.swift:19:31: error: no exact\
    \ matches in call to initializer \n                result.append(Int(element))\n\
    \                              ^\nSwift.Int:7:12: note: candidate expects value\
    \ of type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float80)\n \
    \          ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _v: Builtin.Word)\n\
    \           ^\n/tmp/tmp5smkg8yq.swift:23:31: error: no exact matches in call to\
    \ initializer \n                result.append(Int(element))\n                \
    \              ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that\
    \ 'Any' conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: "
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }).map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Int64:\n            result.append(value)\n        case let value as\
    \ Double:\n            result.append(value)\n        case let value as String:\n\
    \            result.append(value)\n        default:\n            break\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4mitzcoj.swift:14:27: error: cannot convert value of type 'Int64'\
    \ to expected argument type 'Int'\n            result.append(value)\n        \
    \                  ^\n                          Int( )\n/tmp/tmp4mitzcoj.swift:16:27:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \            result.append(value)\n                          ^\n             \
    \             Int( )\n/tmp/tmp4mitzcoj.swift:18:20: error: no exact matches in\
    \ call to instance method 'append'\n            result.append(value)\n       \
    \            ^\nSwift.Array:6:37: note: candidate expects value of type 'Int'\
    \ for parameter #1 (got 'String')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp4mitzcoj.swift:18:20: note: found\
    \ candidate with type '(__owned String) -> ()'\n            result.append(value)\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        guard let intValue =\
    \ value as? Int else {\n            continue\n        }\n        result.append(intValue)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            filtered.append(int)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfourfes_.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        default:\n      \
    \      result.append(0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf0kldauv.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmpf0kldauv.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmpf0kldauv.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        case let value as\
    \ [AnyHashable]:\n            for item in value {\n                result.append(Int(item))\n\
    \            }\n        case let value as [Any]:\n            for item in value\
    \ {\n                result.append(Int(item))\n            }\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_u4l03db.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmp_u4l03db.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmp_u4l03db.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n/tmp/tmp_u4l03db.swift:19:31: error: no exact\
    \ matches in call to initializer \n                result.append(Int(item))\n\
    \                              ^\nSwift.Int:7:12: note: candidate expects value\
    \ of type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float80)\n \
    \          ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _v: Builtin.Word)\n\
    \           ^\n/tmp/tmp_u4l03db.swift:23:31: error: no exact matches in call to\
    \ initializer \n                result.append(Int(item))\n                   \
    \           ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that 'Any'\
    \ conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: T) whe"
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        switch value {\n    \
    \    case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        case let value as\
    \ [AnyHashable]:\n            for item in value {\n                result.append(Int(item))\n\
    \            }\n        case let value as [Any]:\n            for item in value\
    \ {\n                result.append(Int(item))\n            }\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpucz76_v7.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmpucz76_v7.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmpucz76_v7.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n/tmp/tmpucz76_v7.swift:19:31: error: no exact\
    \ matches in call to initializer \n                result.append(Int(item))\n\
    \                              ^\nSwift.Int:7:12: note: candidate expects value\
    \ of type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float80)\n \
    \          ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _v: Builtin.Word)\n\
    \           ^\n/tmp/tmpucz76_v7.swift:23:31: error: no exact matches in call to\
    \ initializer \n                result.append(Int(item))\n                   \
    \           ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that 'Any'\
    \ conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: T) whe"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_yc5vikz.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter{ $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_vs1das3.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter{ $0 is\
    \ Int }\n                  ^\n/tmp/tmp_vs1das3.swift:8:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter{ $0 is Int }\n                  ^\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }).map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphxbzwvnp.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Double:\n            result.append(Int(value))\n        case let value\
    \ as String:\n            result.append(Int(value))\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2a8r978q.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmp2a8r978q.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmp2a8r978q.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n"
  stdout: ''
  timestamp: 1660009084
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009084
