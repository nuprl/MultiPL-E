language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in values {\n        if let i = Int(v) {\n     \
    \       result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5k0jipz2.swift:10:24: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let i = Int(v) {\n          \
    \             ^\n                         as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_yc5vikz.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x where x is Int:\n \
    \           return true\n        default:\n            return false\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp964y4j7j.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmp964y4j7j.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for v in values {\n        if let i = Int(v) {\n   \
    \         filtered.append(i)\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaziwh5vq.swift:10:24: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let i = Int(v) {\n          \
    \             ^\n                         as! String\n"
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }).map({ $0 as! Int })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824830
