language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdjf5zb41.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count())\n           ^~~~~~~~~~~~~\n/tmp/tmpdjf5zb41.swift:10:31:\
    \ error: cannot call value of non-function type 'Int'\n    return monotonicImpl(l,\
    \ l.count())\n                              ^    ~~\n                        \
    \           \n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1w14ik7x.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp1w14ik7x.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp1w14ik7x.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp1w14ik7x.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = l[i]\n    var n = l[j]\n    var o = l[k]\n    while i < j {\n   \
    \     if m > n {\n            return false\n        }\n        if o < n {\n  \
    \          return true\n        }\n        if m < o {\n            return false\n\
    \        }\n        if m == o {\n            i += 1\n            j = k\n     \
    \       k = j - 1\n            m = l[i]\n            n = l[j]\n            o =\
    \ l[k]\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9sl_lfkk/tmp9sl_lfkk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ae0f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98addecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98addec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98addeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sl_lfkk                        0x00005652644a153e <unavailable> + 5438

    5    libc.so.6                          0x00002b98ae2e1460 __libc_start_main +
    245

    6    tmp9sl_lfkk                        0x00005652644a1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpv7poabke/tmpv7poabke.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbd4fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbd4ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbd4ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbd4ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7poabke                        0x000055693816e64e <unavailable> + 5710

    5    libc.so.6                          0x00002acbd51db460 __libc_start_main +
    245

    6    tmpv7poabke                        0x000055693816e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var p = 0\n    var q = Int64(l.count)\n    var\
    \ r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpltvv1eug.swift:37:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmpltvv1eug.swift:13:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpltvv1eug.swift:38:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmpltvv1eug.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpltvv1eug.swift:39:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmpltvv1eug.swift:15:9: note: 'k' previously declared here\n    var k = j\
    \ - 1\n        ^\n/tmp/tmpltvv1eug.swift:41:21: error: value of type 'Int64' has\
    \ no member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:42:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:43:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:44:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:45:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:46:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:47:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:48:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:49:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:50:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:51:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var w = Int64(l.count)\n\
    \                "
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpyj47_nzg/tmpyj47_nzg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a3799ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a37695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a37695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a376947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj47_nzg                        0x000055d8d83654e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b3a37b8a460 __libc_start_main +
    245

    6    tmpyj47_nzg                        0x000055d8d8365149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpv7poabke/tmpv7poabke.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbd4fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbd4ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbd4ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbd4ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7poabke                        0x000055693816e64e <unavailable> + 5710

    5    libc.so.6                          0x00002acbd51db460 __libc_start_main +
    245

    6    tmpv7poabke                        0x000055693816e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var n = l.count\n\
    \    var m = n - 1\n    var a = 0\n    var b = n - 1\n    var c = 1\n    var d\
    \ = 1\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i =\
    \ 1\n    var j = n - 1\n    var k = n - 1\n    var l = 0\n    var m = n - 1\n\
    \    var n = n - 1\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n  \
    \  var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n   \
    \ var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var\
    \ M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R\
    \ = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W =\
    \ 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4zzdvxqs.swift:23:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 1\n        ^\n/tmp/tmp4zzdvxqs.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp4zzdvxqs.swift:24:9: error: invalid\
    \ redeclaration of 'j'\n    var j = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp4zzdvxqs.swift:25:9:\
    \ error: invalid redeclaration of 'k'\n    var k = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp4zzdvxqs.swift:27:9:\
    \ error: invalid redeclaration of 'm'\n    var m = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:28:9:\
    \ error: invalid redeclaration of 'n'\n    var n = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:13:9:\
    \ note: 'n' previously declared here\n    var n = l.count\n        ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph0868y5u.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else\
    \ if l[i] > l[k] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7c9d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7c6cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7c6cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7c6cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7c6ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abd7c4cce83 <unavailable> + 188035

    6    tmpkrdc4tfc                        0x000055614d272aac <unavailable> + 6828

    7    tmpkrdc4tfc                        0x000055614d27233d <unavailable> + 4925

    8    libc.so.6                          0x00002abd7cbc2460 __libc_start_main +
    245

    9    tmpkrdc4tfc                        0x000055614d272019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n     \
    \       i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            monotonic = false\n        }\n        if i == k {\n    \
    \        k = j\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpxc3fbyca/tmpxc3fbyca.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af592f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af592c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af592c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af592c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxc3fbyca                        0x0000557e32f3f53e <unavailable> + 5438

    5    libc.so.6                          0x00002af593138460 __libc_start_main +
    245

    6    tmpxc3fbyca                        0x0000557e32f3f019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i == 0 {\n   \
    \         i = x\n            continue\n        }\n        if x < i {\n       \
    \     return false\n        }\n        i = x\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj439cp6c/tmpj439cp6c.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c65940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c65637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c65637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c656367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj439cp6c                        0x00005575601a96e1 <unavailable> + 5857

    5    libc.so.6                          0x00002b0c65b2c460 __libc_start_main +
    245

    6    tmpj439cp6c                        0x00005575601a90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph0868y5u.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i-1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e4ff75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e4fc6c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e4fc6c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e4fc6c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e4fc6bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e4fa6be83 <unavailable> + 188035

    6    tmpkpiowe9j                        0x0000563cbfb04c08 <unavailable> + 7176

    7    tmpkpiowe9j                        0x0000563cbfb0444d <unavailable> + 5197

    8    libc.so.6                          0x00002b0e50161460 __libc_start_main +
    245

    9    tmpkpiowe9j                        0x0000563cbfb04129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return false\n\
    \        }\n        if i == k {\n            return true\n        }\n        if\
    \ l[i] > l[k] {\n            k += 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8baab6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba7ad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac8ba7ad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac8ba7ad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac8ba7acbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac8ba5ace83 <unavailable> + 188035

    6    tmpgbqx2jov                        0x0000561191175b85 <unavailable> + 7045

    7    tmpgbqx2jov                        0x00005611911754c7 <unavailable> + 5319

    8    libc.so.6                          0x00002ac8baca2460 __libc_start_main +
    245

    9    tmpgbqx2jov                        0x0000561191175019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwav3t2zy.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph0868y5u.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var monotonic = true\n    while i < j {\n        if l[i] < l[k] {\n       \
    \     i += 1\n        } else if l[i] > l[k] {\n            monotonic = false\n\
    \            k = j\n        } else {\n            i += 1\n            k -= 1\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0070e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0070afb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0070afb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0070afb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0070afabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00708fae83 <unavailable> + 188035

    6    tmpqg1k03pj                        0x0000556d9a94caae <unavailable> + 6830

    7    tmpqg1k03pj                        0x0000556d9a94c4c7 <unavailable> + 5319

    8    libc.so.6                          0x00002b0070ff0460 __libc_start_main +
    245

    9    tmpqg1k03pj                        0x0000556d9a94c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1w14ik7x.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp1w14ik7x.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp1w14ik7x.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp1w14ik7x.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    let (min,\
    \ max) = l.minMax()\n    return min <= max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpozc3ncsb.swift:13:24: error: value of type '[Int]' has no member\
    \ 'minMax'\n    let (min, max) = l.minMax()\n                     ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] > l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n ==\
    \ 6 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5]\n    }\n    if n == 7 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n  \
    \  if n == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3]\
    \ > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n\
    \    if n == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8]\
    \ > l[9] && l[9] > l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] &&\
    \ l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10] > l[11]\n\
    \    }\n    if n == 13 {\n        return l[0] > l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc_35d8jv.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpc_35d8jv.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpc_35d8jv.swift:48:23:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return l[0] > l\n                      ^\n/tmp/tmpc_35d8jv.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return false\n\
    \        }\n        if i < k {\n            k = j\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj8x8qzb6/tmpj8x8qzb6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba28e838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba28e52fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba28e52f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba28e52e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8x8qzb6                        0x000055847fe0653e <unavailable> + 5438

    5    libc.so.6                          0x00002ba28ea24460 __libc_start_main +
    245

    6    tmpj8x8qzb6                        0x000055847fe06019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithTolerance(l, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5g6ambtl.swift:10:12: error: cannot find 'monotonicWithTolerance'\
    \ in scope\n    return monotonicWithTolerance(l, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph0868y5u.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = l.count\n    var n = m\n    var o = Int64(m)\n    var p = Int64(n)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var A =\
    \ Int64(0)\n    var B = Int64(0)\n    var C = Int64(0)\n    var D = Int64(0)\n\
    \    var E = Int64(0)\n    var F = Int64(0)\n    var G = Int64(0)\n    var H =\
    \ Int64(0)\n    var I = Int64(0)\n    var J = Int64(0)\n    var K = Int64(0)\n\
    \    var L = Int64(0)\n    var M = Int64(0)\n    var N = Int64(0)\n    var O =\
    \ Int64(0)\n    var P = Int64(0)\n    var Q = Int64(0)\n    var R = Int64(0)\n\
    \    var S = Int64(0)\n    var T = Int64(0)\n    var U = Int64(0)\n    var V =\
    \ Int64(0)\n    var W = Int64(0)\n    var X = Int64(0)\n    var Y = Int64(0)\n\
    \    var Z = Int64(0)\n    var A = Int64(0)\n    var B = Int64(0)\n    var C =\
    \ Int64(0)\n    var D = Int64(0)\n    var E = Int64(0)\n    var F = Int64(0)\n\
    \    var G = Int64(0)\n    var H = Int64(0)\n    var I = Int64(0)\n    var J =\
    \ Int64(0)\n    var K = Int64(0)\n    var L = Int64(0)\n    var M = Int64(0)\n\
    \    var N = Int64(0)\n    var O = Int64(0)\n    var P = Int64(0)\n    var Q =\
    \ Int64(0)\n    var R = Int64(0)\n    var S = Int64(0)\n    var T = Int64(0)\n\
    \    var U = Int64(0)\n    var V = Int64(0)\n    var W = Int64(0)\n    var X =\
    \ Int64(0)\n    var Y = Int64(0)\n    var Z = Int64(0)\n    var A = Int64(0)\n\
    \    var B = Int64(0)\n    var C = Int64(0)\n    var D = Int64(0)\n    var E =\
    \ Int64(0)\n    var F = Int64(0)\n    var G = Int64(0)\n    var H = Int64(0)\n\
    \    var I = Int64(0)\n    var J = Int64(0)\n    var K = Int64(0)\n    var L =\
    \ Int64(0)\n    var M = Int64(0)\n    var N = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj7cb84_7.swift:93:12: error: expected initial value after '='\n\
    \    var N = \n           ^\n/tmp/tmpj7cb84_7.swift:14:15: error: value of type\
    \ 'Int' has no member 'count'\n    var m = l.count\n            ~ ^~~~~\n/tmp/tmpj7cb84_7.swift:54:9:\
    \ error: invalid redeclaration of 'A'\n    var A = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:28:9:\
    \ note: 'A' previously declared here\n    var A = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:55:9:\
    \ error: invalid redeclaration of 'B'\n    var B = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:29:9:\
    \ note: 'B' previously declared here\n    var B = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:56:9:\
    \ error: invalid redeclaration of 'C'\n    var C = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:30:9:\
    \ note: 'C' previously declared here\n    var C = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:57:9:\
    \ error: invalid redeclaration of 'D'\n    var D = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:31:9:\
    \ note: 'D' previously declared here\n    var D = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:58:9:\
    \ error: invalid redeclaration of 'E'\n    var E = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:32:9:\
    \ note: 'E' previously declared here\n    var E = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:59:9:\
    \ error: invalid redeclaration of 'F'\n    var F = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:33:9:\
    \ note: 'F' previously declared here\n    var F = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:60:9:\
    \ error: invalid redeclaration of 'G'\n    var G = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:34:9:\
    \ note: 'G' previously declared here\n    var G = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:61:9:\
    \ error: invalid redeclaration of 'H'\n    var H = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:35:9:\
    \ note: 'H' previously declared here\n    var H = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:62:9:\
    \ error: invalid redeclaration of 'I'\n    var I = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:36:9:\
    \ note: 'I' previously declared here\n    var I = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.swift:63:9:\
    \ error: invalid redeclaration of 'J'\n    var J = Int64(0)\n        ^\n/tmp/tmpj7cb84_7.s"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1w14ik7x.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp1w14ik7x.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp1w14ik7x.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp1w14ik7x.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithTolerance(l, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5g6ambtl.swift:10:12: error: cannot find 'monotonicWithTolerance'\
    \ in scope\n    return monotonicWithTolerance(l, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        if i < k {\n            k = j\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpuh1rwj02/tmpuh1rwj02.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeebdbd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeebd8ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeebd8cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeebd8cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh1rwj02                        0x0000555fc1a9c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002aeebddc1460 __libc_start_main +
    245

    6    tmpuh1rwj02                        0x0000555fc1a9c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, &Context.defaultContext)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplnge30bb.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, &Context.defaultContext)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplnge30bb.swift:10:37: error: cannot find\
    \ 'Context' in scope\n    return monotonicWithContext(l, &Context.defaultContext)\n\
    \                                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = l[0]\n    for _ in 0 ..< l.count {\n        if l[i] > m {\n     \
    \       k = j\n            m = l[i]\n        }\n        if l[j] < m {\n      \
    \      i = i + 1\n            m = l[j]\n        }\n        if l[k] > m {\n   \
    \         j = k\n            m = l[k]\n        }\n    }\n    return i == j\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpwe6vrijc/tmpwe6vrijc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b175defdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b175dbf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b175dbf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b175dbf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe6vrijc                        0x000055863d3ec542 <unavailable> + 5442

    5    libc.so.6                          0x00002b175e0e9460 __libc_start_main +
    245

    6    tmpwe6vrijc                        0x000055863d3ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwav3t2zy.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        if i < k {\n            k = j\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpuh1rwj02/tmpuh1rwj02.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeebdbd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeebd8ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeebd8cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeebd8cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh1rwj02                        0x0000555fc1a9c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002aeebddc1460 __libc_start_main +
    245

    6    tmpuh1rwj02                        0x0000555fc1a9c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, true)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpncdxgwws.swift:10:25: error: extra argument in call\n    return\
    \ monotonic(l, true)\n                    ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k = l.count\n    while\
    \ i < k {\n        if l[i] < l[j] {\n            j = i\n        } else {\n   \
    \         i = j\n        }\n        i += 1\n    }\n    return i == k\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028702
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    while i < j {\n        if l[i] < l[j] {\n         \
    \   if l[i] < m {\n                m = l[i]\n            }\n            i += 1\n\
    \        } else {\n            if l[j] > m {\n                m = l[j]\n     \
    \       }\n            j -= 1\n        }\n        if i == k {\n            if\
    \ l[i] < m {\n                m = l[i]\n            }\n            i += 1\n  \
    \      }\n        if j == k {\n            if l[j] > m {\n                m =\
    \ l[j]\n            }\n            j -= 1\n        }\n    }\n    return m <= Int64(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph_xw0bwo.swift:17:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = l[i]\n                    ~^~~\n      \
    \              Int64( )\n/tmp/tmph_xw0bwo.swift:22:22: error: cannot assign value\
    \ of type 'Int' to type 'Int64'\n                m = l[j]\n                  \
    \  ~^~~\n                    Int64( )\n/tmp/tmph_xw0bwo.swift:28:22: error: cannot\
    \ assign value of type 'Int' to type 'Int64'\n                m = l[i]\n     \
    \               ~^~~\n                    Int64( )\n/tmp/tmph_xw0bwo.swift:34:22:\
    \ error: cannot assign value of type 'Int' to type 'Int64'\n                m\
    \ = l[j]\n                    ~^~~\n                    Int64( )\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwav3t2zy.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkgraeqz7.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = l.count\n    while\
    \ i < k {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j += 1\n        } else {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp5gei5sdx/tmp5gei5sdx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d81763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d8145ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d8145a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d814597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gei5sdx                        0x00005609c41b53b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b5d8194f460 __libc_start_main +
    245

    6    tmp5gei5sdx                        0x00005609c41b5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n\
    \    }\n    if len == 1 {\n        return l[0] > l[1]\n    }\n    if len == 2\
    \ {\n        return l[0] > l[1] || l[0] == l[1]\n    }\n    if len == 3 {\n  \
    \      return l[0] > l[1] || l[0] == l[1] || l[0] == l[2]\n    }\n    if len ==\
    \ 4 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3]\n\
    \    }\n    if len == 5 {\n        return l[0] > l[1] || l[0] == l[1] || l[0]\
    \ == l[2] || l[0] == l[3] || l[0] == l[4]\n    }\n    if len == 6 {\n        return\
    \ l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4]\
    \ || l[0] == l[5]\n    }\n    if len == 7 {\n        return l[0] > l[1] || l[0]\
    \ == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0]\
    \ == l[6]\n    }\n    if len == 8 {\n        return l[0] > l[1] || l[0] == l[1]\
    \ || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6]\
    \ || l[0] == l[7]\n    }\n    if len == 9 {\n        return l[0] > l[1] || l[0]\
    \ == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0]\
    \ == l[6] || l[0] == l[7] || l[0] == l[8]\n    }\n    if len == 10 {\n       \
    \ return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] ==\
    \ l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8] || l[0]\
    \ == l[9]\n    }\n    if len == 11 {\n        return l[0] > l[1] || l[0] == l[1]\
    \ || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6]\
    \ || l[0] == l[7] || l[0] == l[8] || l[0] == l[9] || l[0] == l[10]\n    }\n  \
    \  if len == 12 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2]\
    \ || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7]\
    \ || l[0] == l[8] || l[0] == l[9] || l[0] == l[10] || l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp_uoubls.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpp_uoubls.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpp_uoubls.swift:48:192:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Bool'\n\
    \        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] ||\
    \ l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8]\
    \ || l[0] == l[9] || l[0] == l[10] || l\n                                    \
    \                                                                            \
    \                                                                            \
    \   ^\n/tmp/tmpp_uoubls.swift:52:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty() {\n        return true\n    }\n    let\
    \ sorted = l.sorted()\n    if sorted.first > sorted.last {\n        return false\n\
    \    }\n    let first = sorted.first\n    let last = sorted.last\n    if first\
    \ == last {\n        return true\n    }\n    if first < last {\n        return\
    \ false\n    }\n    return monotonic(sorted[1..<sorted.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3wmt0glv.swift:10:10: error: cannot call value of non-function\
    \ type 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp3wmt0glv.swift:14:21:\
    \ error: binary operator '>' cannot be applied to two 'Int?' operands\n    if\
    \ sorted.first > sorted.last {\n       ~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n/tmp/tmp3wmt0glv.swift:14:21:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sorted.first > sorted.last {\n                    ^\n/tmp/tmp3wmt0glv.swift:22:14:\
    \ error: binary operator '<' cannot be applied to two 'Int?' operands\n    if\
    \ first < last {\n       ~~~~~ ^ ~~~~\n/tmp/tmp3wmt0glv.swift:22:14: note: overloads\
    \ for '<' exist with these partially matching parameter lists: (Int, Int)\n  \
    \  if first < last {\n             ^\n/tmp/tmp3wmt0glv.swift:25:22: error: missing\
    \ argument label 'l:' in call\n    return monotonic(sorted[1..<sorted.count])\n\
    \                     ^\n                     l: \n/tmp/tmp3wmt0glv.swift:25:28:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return monotonic(sorted[1..<sorted.count])\n                  \
    \         ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2lco5zph.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp2lco5zph.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp2lco5zph.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp2lco5zph.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.count\
    \ == 1 {\n        return true\n    }\n    if l.count == 2 {\n        return l[0]\
    \ > l[1]\n    }\n    var left = 0\n    var right = l.count - 1\n    var leftIsSmaller\
    \ = true\n    var rightIsSmaller = true\n    var leftIsLarger = true\n    var\
    \ rightIsLarger = true\n    var leftIsEqual = true\n    var rightIsEqual = true\n\
    \    while left < right {\n        if leftIsSmall && rightIsSmall {\n        \
    \    leftIsSmaller = false\n            rightIsSmaller = false\n        } else\
    \ if leftIsSmall {\n            leftIsSmaller = l[left] < l[left + 1]\n      \
    \  } else if rightIsSmall {\n            rightIsSmaller = l[right] < l[right -\
    \ 1]\n        } else {\n            if l[left] > l[right] {\n                leftIsLarger\
    \ = false\n                rightIsLarger = false\n            } else {\n     \
    \           leftIsLarger = l[left] > l[right - 1]\n                rightIsLarger\
    \ = l[right] > l[right - 1]\n            }\n        }\n        if leftIsLarger\
    \ {\n            left++\n        } else if rightIsLarger {\n            right--\n\
    \        } else {\n            if leftIsEqual && rightIsEqual {\n            \
    \    leftIsEqual = false\n                rightIsEqual = false\n            }\
    \ else {\n                leftIsEqual = l[left] == l[left + 1]\n             \
    \   rightIsEqual = l[right] == l[right - 1]\n            }\n        }\n    }\n\
    \    return leftIsSmaller && rightIsSmaller\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa91fpae5.swift:28:12: error: cannot find 'leftIsSmall' in scope\n\
    \        if leftIsSmall && rightIsSmall {\n           ^~~~~~~~~~~\n/tmp/tmpa91fpae5.swift:28:27:\
    \ error: cannot find 'rightIsSmall' in scope\n        if leftIsSmall && rightIsSmall\
    \ {\n                          ^~~~~~~~~~~~\n/tmp/tmpa91fpae5.swift:31:19: error:\
    \ cannot find 'leftIsSmall' in scope\n        } else if leftIsSmall {\n      \
    \            ^~~~~~~~~~~\n/tmp/tmpa91fpae5.swift:33:19: error: cannot find 'rightIsSmall'\
    \ in scope\n        } else if rightIsSmall {\n                  ^~~~~~~~~~~~\n\
    /tmp/tmpa91fpae5.swift:45:17: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            left++\n                ^~\n/tmp/tmpa91fpae5.swift:47:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  right--\n                 ^~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n\
    \        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp6j2zz_i4/tmp6j2zz_i4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44d167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44ce5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44ce5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44ce5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6j2zz_i4                        0x000055a33cd073b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ba44d353460 __libc_start_main +
    245

    6    tmp6j2zz_i4                        0x000055a33cd07019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n\
    \    }\n    if len == 1 {\n        return l[0] > l[0]\n    }\n    var last = 0\n\
    \    for i in 0..<len - 1 {\n        if l[i] > l[i+1] {\n            return false\n\
    \        }\n        if l[i] < l[i+1] {\n            last = i\n        }\n    }\n\
    \    return l[last] > l[last-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmplsu3wccv/tmplsu3wccv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aa8052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aa7d49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aa7d49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aa7d487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsu3wccv                        0x000055a19c6d67b1 <unavailable> + 6065

    5    libc.so.6                          0x00002b7aa823e460 __libc_start_main +
    245

    6    tmplsu3wccv                        0x000055a19c6d61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k = 0\n    var l = l.count\n\
    \    while i < l {\n        if l[j] < l[k] {\n            i += 1\n        } else\
    \ {\n            j += 1\n        }\n        k += 1\n    }\n    return i == l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv6oitft9.swift:15:13: error: value of type 'Int' has no subscripts\n\
    \        if l[j] < l[k] {\n           ~^\n/tmp/tmpv6oitft9.swift:15:20: error:\
    \ value of type 'Int' has no subscripts\n        if l[j] < l[k] {\n          \
    \        ~^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv6opx1tr.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv6opx1tr.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv6opx1tr.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv6opx1tr.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    while i < j {\n        if l[i] < l[j] {\n         \
    \   if l[i] < m {\n                m = l[i]\n            }\n            i += 1\n\
    \        } else {\n            if l[j] < m {\n                m = l[j]\n     \
    \       }\n            j -= 1\n        }\n    }\n    return m >= l[k]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3cqo3_lj.swift:17:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = l[i]\n                    ~^~~\n      \
    \              Int64( )\n/tmp/tmp3cqo3_lj.swift:22:22: error: cannot assign value\
    \ of type 'Int' to type 'Int64'\n                m = l[j]\n                  \
    \  ~^~~\n                    Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    var i\
    \ = 0\n    var j = l.count - 1\n    var k = 0\n    var m = Int64(0)\n    while\
    \ i < j {\n        if l[i] < l[j] {\n            if k < i {\n                m\
    \ = m - l[k]\n            }\n            k = i\n            i = i + 1\n      \
    \  } else {\n            if k < j {\n                m = m + l[k]\n          \
    \  }\n            k = j\n            j = j - 1\n        }\n    }\n    if k < i\
    \ {\n        m = m - l[k]\n    }\n    return m <= 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpt0v1hjq_.swift:20:26: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n                m = m - l[k]\n          \
    \               ^\n                        Int64( )\n/tmp/tmpt0v1hjq_.swift:26:26:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Int64'\n\
    \                m = m + l[k]\n                         ^\n                  \
    \      Int64( )\n/tmp/tmpt0v1hjq_.swift:33:18: error: cannot convert value of\
    \ type 'Int' to expected argument type 'Int64'\n        m = m - l[k]\n       \
    \          ^\n                Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.count\
    \ == 1 {\n        return true\n    }\n    if l.count == 2 {\n        return l[0]\
    \ > l[1]\n    }\n    var left = 0\n    var right = l.count - 1\n    var middle\
    \ = l.count / 2\n    var leftIsSmaller = true\n    var rightIsSmaller = true\n\
    \    var leftIsLarger = true\n    var rightIsLarger = true\n    var leftIsEqual\
    \ = true\n    var rightIsEqual = true\n    while left < middle && right >= middle\
    \ {\n        if l[left] > l[right] {\n            leftIsSmaller = false\n    \
    \        leftIsLarger = false\n        } else {\n            leftIsSmaller = true\n\
    \            leftIsLarger = true\n        }\n        if l[right] > l[middle] {\n\
    \            rightIsSmaller = false\n            rightIsLarger = false\n     \
    \   } else {\n            rightIsSmaller = true\n            rightIsLarger = true\n\
    \        }\n        if leftIsSmaller && rightIsSmaller {\n            left++\n\
    \            right--\n        } else if leftIsSmaller {\n            left++\n\
    \        } else if rightIsSmaller {\n            right--\n        } else {\n \
    \           middle--\n        }\n    }\n    if left >= middle {\n        return\
    \ true\n    }\n    if right <= middle {\n        return false\n    }\n    if leftIsLarger\
    \ {\n        return true\n    }\n    if rightIsLarger {\n        return false\n\
    \    }\n    if leftIsEqual {\n        return true\n    }\n    if rightIsEqual\
    \ {\n        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5xlum9l.swift:44:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            left++\n                ^~\n/tmp/tmpr5xlum9l.swift:45:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  right--\n                 ^~\n/tmp/tmpr5xlum9l.swift:47:17: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            left++\n         \
    \       ^~\n/tmp/tmpr5xlum9l.swift:49:18: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            right--\n                 ^~\n/tmp/tmpr5xlum9l.swift:51:19:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  middle--\n                  ^~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    while i < j {\n  \
    \      if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54cdf67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54cdc5e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54cdc5e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54cdc5e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54cdc5dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54cda5de83 <unavailable> + 188035

    6    tmp065j9xho                        0x0000556d5b8c4a69 <unavailable> + 6761

    7    tmp065j9xho                        0x0000556d5b8c433d <unavailable> + 4925

    8    libc.so.6                          0x00002b54ce153460 __libc_start_main +
    245

    9    tmp065j9xho                        0x0000556d5b8c4019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty() {\n        return true\n    }\n    var\
    \ last = 0\n    for x in l {\n        if last < x {\n            return false\n\
    \        }\n        last = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp23beb1c_.swift:10:10: error: cannot call value of non-function\
    \ type 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ last = 0\n    for idx in 0..<l.count {\n        if l[idx] > l[last] {\n    \
    \        last = idx\n        }\n    }\n    return last == l.count - 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpom2ppube/tmpom2ppube.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2e0eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2e0babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2e0bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2e0baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpom2ppube                        0x000055affd0f57b1 <unavailable> + 6065

    5    libc.so.6                          0x00002ad2e10a0460 __libc_start_main +
    245

    6    tmpom2ppube                        0x000055affd0f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] > l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n ==\
    \ 6 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5]\n    }\n    if n == 7 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n  \
    \  if n == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3]\
    \ > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n\
    \    if n == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8]\
    \ > l[9] && l[9] > l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] &&\
    \ l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10] > l[11]\n\
    \    }\n    if n == 13 {\n        return l[0] > l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc_35d8jv.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpc_35d8jv.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpc_35d8jv.swift:48:23:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return l[0] > l\n                      ^\n/tmp/tmpc_35d8jv.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([l], options: .MatchStrictly)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplbs34c_7.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([l], options: .MatchStrictly)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplbs34c_7.swift:10:48: error: cannot infer\
    \ contextual base in reference to member 'MatchStrictly'\n    return monotonicWithOptions([l],\
    \ options: .MatchStrictly)\n                                              ~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkgraeqz7.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for x in l {\n        if x < l[0] {\n            isIncreasing = false\n \
    \       }\n        if x > l[l.count - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmphi44sjoo/tmphi44sjoo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac417b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac417850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac417850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41784f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphi44sjoo                        0x000055e8580c06ae <unavailable> + 5806

    5    libc.so.6                          0x00002ac417d45460 __libc_start_main +
    245

    6    tmphi44sjoo                        0x000055e8580c0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, lessThanOrEqual: lessThanOrEqual)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxewrb6ez.swift:10:42: error: cannot find 'lessThanOrEqual' in scope\n\
    \    return monotonic(l, lessThanOrEqual: lessThanOrEqual)\n                 \
    \                        ^~~~~~~~~~~~~~~\n/tmp/tmpxewrb6ez.swift:10:42: error:\
    \ extra argument 'lessThanOrEqual' in call\n    return monotonic(l, lessThanOrEqual:\
    \ lessThanOrEqual)\n                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n\
    \        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp6j2zz_i4/tmp6j2zz_i4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44d167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44ce5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44ce5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44ce5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6j2zz_i4                        0x000055a33cd073b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ba44d353460 __libc_start_main +
    245

    6    tmp6j2zz_i4                        0x000055a33cd07019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph0868y5u.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2lco5zph.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp2lco5zph.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp2lco5zph.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp2lco5zph.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    var prev = 0\n    for idx in 0..<n {\n        if l[idx] > prev {\n\
    \            return false\n        }\n        prev = l[idx]\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpjxnm8jz4/tmpjxnm8jz4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba13a888c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba13a57fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba13a57f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba13a57e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxnm8jz4                        0x000055bf77988542 <unavailable> + 5442

    5    libc.so.6                          0x00002ba13aa74460 __libc_start_main +
    245

    6    tmpjxnm8jz4                        0x000055bf779881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] > l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n ==\
    \ 6 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5]\n    }\n    if n == 7 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n  \
    \  if n == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3]\
    \ > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n\
    \    if n == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8]\
    \ > l[9] && l[9] > l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] &&\
    \ l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10] > l[11]\n\
    \    }\n    if n == 13 {\n        return l[0] > l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc_35d8jv.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpc_35d8jv.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpc_35d8jv.swift:48:23:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return l[0] > l\n                      ^\n/tmp/tmpc_35d8jv.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(Int.max)\n    while i < j {\n        if l[i] < m {\n      \
    \      i += 1\n        } else if l[i] > m {\n            m += Int64(Int64.max)\n\
    \            k = j\n        } else {\n            m += l[i]\n            i +=\
    \ 1\n        }\n        if k > i {\n            k = j\n        }\n        if k\
    \ < i {\n            j = k\n        }\n    }\n    return i < j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcdp97dlw.swift:21:19: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n            m += l[i]\n                 \
    \ ^\n                 Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5aktdujd.swift:96:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp5aktdujd.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp5aktdujd.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp5aktdujd.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp5aktdujd.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp5aktdujd.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = I"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var l2 = l.count\n    var m = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var n = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var o = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var p = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var q = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var r = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var s = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var t = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var u = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var v = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var w = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var x = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var y = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var z = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var a = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var b = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var c = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var d = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var e = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var f = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var g = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var h = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var i = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var j = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var k = Int64(Int64(Int64(l2))) * Int64(\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnfh_6j43.swift:39:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpnfh_6j43.swift:36:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n        ^\n/tmp/tmpnfh_6j43.swift:10:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmpnfh_6j43.swift:37:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \        ^\n/tmp/tmpnfh_6j43.swift:11:9: note: 'j' previously declared here\n\
    \    var j = l.count - 1\n        ^\n/tmp/tmpnfh_6j43.swift:38:9: error: invalid\
    \ redeclaration of 'k'\n    var k = Int64(Int64(Int64(l2))) * Int64(\n       \
    \ ^\n/tmp/tmpnfh_6j43.swift:12:9: note: 'k' previously declared here\n    var\
    \ k = 0\n        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkgraeqz7.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    if sorted.first > sorted.last\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqsm3a1ec.swift:11:21: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if sorted.first > sorted.last {\n       ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpqsm3a1ec.swift:11:21: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sorted.first >\
    \ sorted.last {\n                    ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOption(l: l, options: [])\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd32becih.swift:10:12: error: cannot find 'monotonicWithOption'\
    \ in scope\n    return monotonicWithOption(l: l, options: [])\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i - 1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1afed70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1afea67561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1afea67286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1afea6713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1afea66bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1afe866e83 <unavailable> + 188035

    6    tmpwmklts_v                        0x000056075ee4dc08 <unavailable> + 7176

    7    tmpwmklts_v                        0x000056075ee4d44d <unavailable> + 5197

    8    libc.so.6                          0x00002b1afef5c460 __libc_start_main +
    245

    9    tmpwmklts_v                        0x000056075ee4d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if i < k {\n            if l[i] < l[k]\
    \ {\n                i += 1\n            } else {\n                j -= 1\n  \
    \          }\n        }\n        if j > k {\n            if l[j] < l[k] {\n  \
    \              j -= 1\n            } else {\n                i += 1\n        \
    \    }\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp15ks3f33/tmp15ks3f33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c45b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c42acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c42ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c42ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15ks3f33                        0x000055a28c6b9621 <unavailable> + 5665

    5    libc.so.6                          0x00002b56c47a1460 __libc_start_main +
    245

    6    tmp15ks3f33                        0x000055a28c6b9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2lco5zph.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp2lco5zph.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp2lco5zph.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp2lco5zph.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, l.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1zo2wjf0.swift:10:27: error: extra argument in call\n    return\
    \ monotonic(l, l.count)\n                    ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var l1 = l\n    var l2 = l\n    var l3 = l\n    var l4 = l\n    var l5 = l\n\
    \    var l6 = l\n    var l7 = l\n    var l8 = l\n    var l9 = l\n    var l10 =\
    \ l\n    var l11 = l\n    var l12 = l\n    var l13 = l\n    var l14 = l\n    var\
    \ l15 = l\n    var l16 = l\n    var l17 = l\n    var l18 = l\n    var l19 = l\n\
    \    var l20 = l\n    var l21 = l\n    var l22 = l\n    var l23 = l\n    var l24\
    \ = l\n    var l25 = l\n    var l26 = l\n    var l27 = l\n    var l28 = l\n  \
    \  var l29 = l\n    var l30 = l\n    var l31 = l\n    var l32 = l\n    var l33\
    \ = l\n    var l34 = l\n    var l35 = l\n    var l36 = l\n    var l37 = l\n  \
    \  var l38 = l\n    var l39 = l\n    var l40 = l\n    var l41 = l\n    var l42\
    \ = l\n    var l43 = l\n    var l44 = l\n    var l45 = l\n    var l46 = l\n  \
    \  var l47 = l\n    var l48 = l\n    var l49 = l\n    var l50 = l\n    var l51\
    \ = l\n    var l52 = l\n    var l53 = l\n    var l54 = l\n    var l55 = l\n  \
    \  var l56 = l\n    var l57 = l\n    var l58 = l\n    var l59 = l\n    var l60\
    \ = l\n    var l61 = l\n    var l62 = l\n    var l63 = l\n    var l64 = l\n  \
    \  var l65 = l\n    var l66 = l\n    var l67 = l\n    var l68 = l\n    var l69\
    \ = l\n    var l70 = l\n    var l71 = l\n    var l72 = l\n    var l73 = l\n  \
    \  var l74 = l\n    var l75 = l\n    var l76 = l\n    var l77 = l\n    var l78\
    \ = l\n    var l79 = l\n    var l80 = l\n    var l81 = l\n    var l82 = l\n  \
    \  var l83 = l\n    var l84 = l\n    var l85 = l\n    var l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8wlfkf6p.swift:98:9: error: type annotation missing in pattern\n\
    \    var l\n        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdjf5zb41.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count())\n           ^~~~~~~~~~~~~\n/tmp/tmpdjf5zb41.swift:10:31:\
    \ error: cannot call value of non-function type 'Int'\n    return monotonicImpl(l,\
    \ l.count())\n                              ^    ~~\n                        \
    \           \n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpyj47_nzg/tmpyj47_nzg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a3799ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a37695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a37695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a376947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj47_nzg                        0x000055d8d83654e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b3a37b8a460 __libc_start_main +
    245

    6    tmpyj47_nzg                        0x000055d8d8365149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ left = 0\n    var right = l.count - 1\n    var leftIsSmaller = true\n    var\
    \ rightIsSmaller = true\n    var leftIsLarger = true\n    var rightIsLarger =\
    \ true\n    var leftIsEqual = true\n    var rightIsEqual = true\n    var leftIsGreater\
    \ = true\n    var rightIsGreater = true\n    while left < right {\n        if\
    \ l[left] < l[right] {\n            leftIsSmaller = false\n            leftIsLarger\
    \ = false\n            leftIsEqual = false\n            leftIsGreater = true\n\
    \            rightIsSmaller = true\n            rightIsLarger = true\n       \
    \     rightIsEqual = true\n            rightIsGreater = false\n        } else\
    \ {\n            leftIsSmaller = true\n            leftIsLarger = true\n     \
    \       leftIsEqual = true\n            leftIsGreater = false\n            rightIsSmaller\
    \ = false\n            rightIsLarger = false\n            rightIsEqual = false\n\
    \            rightIsGreater = true\n        }\n        left++\n        right--\n\
    \    }\n    return leftIsSmaller && rightIsSmaller && leftIsLarger && rightIsLarger\
    \ && leftIsEqual && rightIsEqual && leftIsGreater && rightIsGreater\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxakvkl7i.swift:43:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        left++\n            ^~\n/tmp/tmpxakvkl7i.swift:44:14:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        right--\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first > sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjt2kmzbv.swift:11:25: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    return sorted.first > sorted.last\n           ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpjt2kmzbv.swift:11:25: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    return sorted.first\
    \ > sorted.last\n                        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n\
    \    }\n    if len == 1 {\n        return l[0] >= l[1]\n    }\n    var left =\
    \ 0\n    var right = len - 2\n    while left < right {\n        let mid = left\
    \ + (right - left) / 2\n        if l[mid] < l[mid+1] {\n            left = mid\
    \ + 1\n        } else {\n            right = mid\n        }\n    }\n    return\
    \ l[left] >= l[right]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfou07sj8/tmpfou07sj8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d70dbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d70ab2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d70ab2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d70ab17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfou07sj8                        0x00005644c7cc55de <unavailable> + 5598

    5    libc.so.6                          0x00002b4d70fa7460 __libc_start_main +
    245

    6    tmpfou07sj8                        0x00005644c7cc50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 {\n    \
    \        if x < l[i-1] {\n                return false\n            }\n      \
    \  }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp36dtv8ai/tmp36dtv8ai.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf01bbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf018b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf018b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf018b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36dtv8ai                        0x000055c345459731 <unavailable> + 5937

    5    libc.so.6                          0x00002abf01dab460 __libc_start_main +
    245

    6    tmp36dtv8ai                        0x000055c345459129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, isOrdered: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gkzx7d_.swift:10:36: error: extra argument 'isOrdered' in call\n\
    \    return monotonic(l, isOrdered: true)\n                    ~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n     \
    \       i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            monotonic = false\n        }\n        if i < k {\n     \
    \       if l[i] < l[k] {\n                i += 1\n            } else {\n     \
    \           monotonic = false\n            }\n        }\n        if j < k {\n\
    \            if l[j] < l[k] {\n                j -= 1\n            } else {\n\
    \                monotonic = false\n            }\n        }\n        if i < j\
    \ {\n            if l[i] > l[j] {\n                i += 1\n            } else\
    \ {\n                monotonic = false\n            }\n        }\n        if j\
    \ < i {\n            if l[j] > l[i] {\n                j -= 1\n            } else\
    \ {\n                monotonic = false\n            }\n        }\n        if i\
    \ < k {\n            if l[i] > l[k] {\n                i += 1\n            } else\
    \ {\n                monotonic = false\n            }\n        }\n        if j\
    \ < k {\n            if l[j] > l[k] {\n                j -= 1\n            } else\
    \ {\n                monotonic = false\n            }\n        }\n    }\n    return\
    \ monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpertgb4fp/tmpertgb4fp.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0967bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0964b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0964b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0964b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpertgb4fp                        0x000055e4b49893b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ac0969a6460 __libc_start_main +
    245

    6    tmpertgb4fp                        0x000055e4b4989019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2lco5zph.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp2lco5zph.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp2lco5zph.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp2lco5zph.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithTolerance(l, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5g6ambtl.swift:10:12: error: cannot find 'monotonicWithTolerance'\
    \ in scope\n    return monotonicWithTolerance(l, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1w14ik7x.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp1w14ik7x.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp1w14ik7x.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp1w14ik7x.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    if sorted.first > sorted.last\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqsm3a1ec.swift:11:21: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if sorted.first > sorted.last {\n       ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpqsm3a1ec.swift:11:21: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sorted.first >\
    \ sorted.last {\n                    ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i == 0 {\n   \
    \         i = x\n            continue\n        }\n        if x < i {\n       \
    \     return false\n        }\n        i = x\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj439cp6c/tmpj439cp6c.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c65940c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c65637b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c65637988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c656367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj439cp6c                        0x00005575601a96e1 <unavailable> + 5857

    5    libc.so.6                          0x00002b0c65b2c460 __libc_start_main +
    245

    6    tmpj439cp6c                        0x00005575601a90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] > l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n ==\
    \ 6 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5]\n    }\n    if n == 7 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n  \
    \  if n == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3]\
    \ > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n\
    \    if n == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8]\
    \ > l[9] && l[9] > l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] &&\
    \ l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10] > l[11]\n\
    \    }\n    if n == 13 {\n        return l[0] > l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc_35d8jv.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpc_35d8jv.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpc_35d8jv.swift:48:23:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return l[0] > l\n                      ^\n/tmp/tmpc_35d8jv.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, &Context.defaultContext)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplnge30bb.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, &Context.defaultContext)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplnge30bb.swift:10:37: error: cannot find\
    \ 'Context' in scope\n    return monotonicWithContext(l, &Context.defaultContext)\n\
    \                                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(Int.max)\n    for _ in 0..<l.count {\n        if l[i] < l[j]\
    \ {\n            m = l[i]\n            i = j\n            j = k\n            k\
    \ = i\n        }\n        if l[i] > l[j] {\n            m = l[j]\n           \
    \ i = j\n            j = k\n            k = i\n        }\n    }\n    return m\
    \ == Int64(Int.max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpleqwmt2y.swift:16:18: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            m = l[i]\n                ~^~~\n              \
    \  Int64( )\n/tmp/tmpleqwmt2y.swift:22:18: error: cannot assign value of type\
    \ 'Int' to type 'Int64'\n            m = l[j]\n                ~^~~\n        \
    \        Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkgraeqz7.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpyj47_nzg/tmpyj47_nzg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a3799ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a37695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a37695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a376947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj47_nzg                        0x000055d8d83654e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b3a37b8a460 __libc_start_main +
    245

    6    tmpyj47_nzg                        0x000055d8d8365149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptionList(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpklciuqk2.swift:10:12: error: cannot find 'monotonicWithOptionList'\
    \ in scope\n    return monotonicWithOptionList(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpklciuqk2.swift:10:39: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptionList(l, nil)\n                                      ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwav3t2zy.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, l.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1zo2wjf0.swift:10:27: error: extra argument in call\n    return\
    \ monotonic(l, l.count)\n                    ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    var prev\
    \ = 0\n    var curr = l[0]\n    for curr = l[0], prev < curr {\n        prev =\
    \ curr\n    }\n    return curr < prev\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpglh_albx.swift:15:14: error: expected 'in' after for-each pattern\n\
    \    for curr = l[0], prev < curr {\n             ^\n/tmp/tmpglh_albx.swift:15:14:\
    \ error: expected Sequence expression for for-each loop\n    for curr = l[0],\
    \ prev < curr {\n             ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpv7poabke/tmpv7poabke.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbd4fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbd4ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbd4ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbd4ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7poabke                        0x000055693816e64e <unavailable> + 5710

    5    libc.so.6                          0x00002acbd51db460 __libc_start_main +
    245

    6    tmpv7poabke                        0x000055693816e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1w14ik7x.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp1w14ik7x.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp1w14ik7x.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp1w14ik7x.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8tahxs.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7n8tahxs.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(Int.max)\n    for _ in 0..<1000 {\n        if i == j {\n  \
    \          return true\n        }\n        if l[i] < l[j] {\n            if l[i]\
    \ < m {\n                m = l[i]\n            }\n            i += 1\n       \
    \ } else {\n            if l[j] < m {\n                m = l[j]\n            }\n\
    \            j -= 1\n        }\n        if i == k {\n            return false\n\
    \        }\n        if l[i] > l[k] {\n            if l[i] < m {\n            \
    \    m = l[i]\n            }\n            i -= 1\n        } else {\n         \
    \   if l[k] < m {\n                m = l[k]\n            }\n            k -= 1\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4dqnbs61.swift:20:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = l[i]\n                    ~^~~\n      \
    \              Int64( )\n/tmp/tmp4dqnbs61.swift:25:22: error: cannot assign value\
    \ of type 'Int' to type 'Int64'\n                m = l[j]\n                  \
    \  ~^~~\n                    Int64( )\n/tmp/tmp4dqnbs61.swift:34:22: error: cannot\
    \ assign value of type 'Int' to type 'Int64'\n                m = l[i]\n     \
    \               ~^~~\n                    Int64( )\n/tmp/tmp4dqnbs61.swift:39:22:\
    \ error: cannot assign value of type 'Int' to type 'Int64'\n                m\
    \ = l[k]\n                    ~^~~\n                    Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 && x > l[i-1]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpos5k0ws6/tmpos5k0ws6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabdc0a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabdbd9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabdbd9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabdbd9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos5k0ws6                        0x000055804d8dc4c2 <unavailable> + 5314

    5    libc.so.6                          0x00002aabdc290460 __libc_start_main +
    245

    6    tmpos5k0ws6                        0x000055804d8dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var m = Int64(0)\n\
    \    for k in l {\n        if i == j {\n            i = k\n            continue\n\
    \        }\n        if k > i {\n            if k > m {\n                m = k\n\
    \            }\n            j = k\n        }\n    }\n    return m <= i\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdytzva3h.swift:21:21: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = k\n                    ^\n            \
    \        Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = l[i]\n    var n = l[j]\n    while i < j {\n        if l[i] < m {\n\
    \            i += 1\n            m = l[i]\n        } else if l[j] > n {\n    \
    \        j -= 1\n            n = l[j]\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmprmz07e9o/tmprmz07e9o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b507c54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b507c241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b507c241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b507c2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmz07e9o                        0x000055cea490b53e <unavailable> + 5438

    5    libc.so.6                          0x00002b507c736460 __libc_start_main +
    245

    6    tmprmz07e9o                        0x000055cea490b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpktj2r79s.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpktj2r79s.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpktj2r79s.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpktj2r79s.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmpktj2r79s.swift:20:9:\
    \ note: 't' previously declared here"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = false\n    while i < j {\n        if l[i] < l[k] {\n    \
    \        i += 1\n        } else {\n            k = j\n            if l[i] > l[k]\
    \ {\n                monotonic = true\n            } else {\n                i\
    \ += 1\n                j -= 1\n            }\n        }\n    }\n    return monotonic\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmberkz_m/tmpmberkz_m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdbc833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdbc52ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdbc52a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdbc5297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmberkz_m                        0x0000561fefa663b2 <unavailable> + 5042

    5    libc.so.6                          0x00002afdbca1f460 __libc_start_main +
    245

    6    tmpmberkz_m                        0x0000561fefa66019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, l.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1zo2wjf0.swift:10:27: error: extra argument in call\n    return\
    \ monotonic(l, l.count)\n                    ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.first\
    \ > l.last {\n        return false\n    }\n    var prev Int = 0\n    var cur Int\
    \ = l.first\n    var isIncreasing bool = true\n    for cur < l.last {\n      \
    \  if cur > prev {\n            isIncreasing = false\n            break\n    \
    \    }\n        prev = cur\n        cur++\n    }\n    return isIncreasing\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4trfbiu4.swift:16:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var prev Int = 0\n\
    \             ^\n/tmp/tmp4trfbiu4.swift:16:14: note: join the identifiers together\n\
    \    var prev Int = 0\n        ~~~~~^~~\n        prevInt\n/tmp/tmp4trfbiu4.swift:17:13:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n    var cur Int = l.first\n            ^\n/tmp/tmp4trfbiu4.swift:17:13:\
    \ note: join the identifiers together\n    var cur Int = l.first\n        ~~~~^~~\n\
    \        curInt\n/tmp/tmp4trfbiu4.swift:18:22: error: found an unexpected second\
    \ identifier in variable declaration; is there an accidental break?\n    var isIncreasing\
    \ bool = true\n                     ^\n/tmp/tmp4trfbiu4.swift:18:22: note: join\
    \ the identifiers together\n    var isIncreasing bool = true\n        ~~~~~~~~~~~~~^~~~\n\
    \        isIncreasingbool\n/tmp/tmp4trfbiu4.swift:18:22: note: join the identifiers\
    \ together with camel-case\n    var isIncreasing bool = true\n        ~~~~~~~~~~~~~^~~~\n\
    \        isIncreasingBool\n/tmp/tmp4trfbiu4.swift:19:13: error: expected 'in'\
    \ after for-each pattern\n    for cur < l.last {\n            ^\n/tmp/tmp4trfbiu4.swift:19:13:\
    \ error: unary operator cannot be separated from its operand\n    for cur < l.last\
    \ {\n            ^~\n             \n/tmp/tmp4trfbiu4.swift:13:16: error: binary\
    \ operator '>' cannot be applied to two 'Int?' operands\n    if l.first > l.last\
    \ {\n       ~~~~~~~ ^ ~~~~~~\n/tmp/tmp4trfbiu4.swift:13:16: note: overloads for\
    \ '>' exist with these partially matching parameter lists: (Int, Int)\n    if\
    \ l.first > l.last {\n               ^\n/tmp/tmp4trfbiu4.swift:19:13: error: '<'\
    \ is not a prefix unary operator\n    for cur < l.last {\n            ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if i < k {\n            if l[i] < l[k]\
    \ {\n                i += 1\n            } else {\n                k -= 1\n  \
    \          }\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp0xaek4ri/tmp0xaek4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e760fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e75df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e75df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e75df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xaek4ri                        0x0000562dad8c853e <unavailable> + 5438

    5    libc.so.6                          0x00002b3e762e8460 __libc_start_main +
    245

    6    tmp0xaek4ri                        0x0000562dad8c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count {\n \
    \       if l[idx] > l[idx+1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b12936bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12933b1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12933b1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12933b113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12933b0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b12931b0e83 <unavailable> + 188035

    6    tmpncpvmdih                        0x000056437bdbfcf6 <unavailable> + 7414

    7    tmpncpvmdih                        0x000056437bdbf4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b12938a6460 __libc_start_main +
    245

    9    tmpncpvmdih                        0x000056437bdbf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj74f8ytk.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n \
    \           return false\n        }\n        if v > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp63ozjzio/tmp63ozjzio.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad06dba8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad06d89fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad06d89f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad06d89e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63ozjzio                        0x00005569c892664e <unavailable> + 5710

    5    libc.so.6                          0x00002ad06dd94460 __libc_start_main +
    245

    6    tmp63ozjzio                        0x00005569c8926129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithTolerance(l, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5g6ambtl.swift:10:12: error: cannot find 'monotonicWithTolerance'\
    \ in scope\n    return monotonicWithTolerance(l, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  while i < k {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b174c5e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b174c2dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b174c2dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b174c2dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b174c2dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b174c0dce83 <unavailable> + 188035

    6    tmph2zk1nsn                        0x0000562c6a925a96 <unavailable> + 6806

    7    tmph2zk1nsn                        0x0000562c6a92533d <unavailable> + 4925

    8    libc.so.6                          0x00002b174c7d2460 __libc_start_main +
    245

    9    tmph2zk1nsn                        0x0000562c6a925019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first >= sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkxhlbbq6.swift:11:25: error: binary operator '>=' cannot be applied\
    \ to two 'Int?' operands\n    return sorted.first >= sorted.last\n           ~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~\n/tmp/tmpkxhlbbq6.swift:11:25: note: overloads for '>=' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    return sorted.first\
    \ >= sorted.last\n                        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    if sorted.isEmpty {\n   \
    \     return true\n    }\n    if sorted[0] != sorted[1] {\n        return false\n\
    \    }\n    for i in 1..<sorted.count {\n        if sorted[i] < sorted[i-1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpy1myufqa/tmpy1myufqa.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba7b76dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba7b464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba7b464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba7b4637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1myufqa                        0x000055e6542cd672 <unavailable> + 5746

    5    libc.so.6                          0x00002aba7b959460 __libc_start_main +
    245

    6    tmpy1myufqa                        0x000055e6542cd2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpbifk87e8/tmpbifk87e8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd0912c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd0609b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd0609988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd06087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbifk87e8                        0x0000559f9259764e <unavailable> + 5710

    5    libc.so.6                          0x00002afbd0afe460 __libc_start_main +
    245

    6    tmpbifk87e8                        0x0000559f92597129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var m = Int64(Int.max)\n    var n = Int64(Int.min)\n    while i < j {\n   \
    \     if l[i] < m {\n            m = l[i]\n        }\n        if l[j] > n {\n\
    \            n = l[j]\n        }\n        i += 1\n        j -= 1\n    }\n    return\
    \ m <= n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz1p9410i.swift:17:18: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            m = l[i]\n                ~^~~\n              \
    \  Int64( )\n/tmp/tmpz1p9410i.swift:20:18: error: cannot assign value of type\
    \ 'Int' to type 'Int64'\n            n = l[j]\n                ~^~~\n        \
    \        Int64( )\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpci_6fj70.swift:10:21: error: extra arguments at positions #2, #3\
    \ in call\n    return monotonic(l, l, 0)\n                    ^\n/tmp/tmpci_6fj70.swift:9:6:\
    \ note: 'monotonic(l:)' declared here\nfunc monotonic(l: [Int]) -> Bool {\n  \
    \   ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, lessThanOrEqualTo: 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdeue10qc.swift:10:44: error: extra argument 'lessThanOrEqualTo'\
    \ in call\n    return monotonic(l, lessThanOrEqualTo: 0)\n                   \
    \ ~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        if i == k {\n            return false\n        }\n       \
    \ if l[i] < l[k] {\n            k += 1\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ecc6a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ecc39d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ecc39d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ecc39d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ecc39cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ecc19ce83 <unavailable> + 188035

    6    tmpy90ez1yo                        0x0000559286401b85 <unavailable> + 7045

    7    tmpy90ez1yo                        0x000055928640133d <unavailable> + 4925

    8    libc.so.6                          0x00002b0ecc892460 __libc_start_main +
    245

    9    tmpy90ez1yo                        0x0000559286401019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOption(l: l, options: [])\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd32becih.swift:10:12: error: cannot find 'monotonicWithOption'\
    \ in scope\n    return monotonicWithOption(l: l, options: [])\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var monotonic = false\n    while i < j {\n        if l[i] < l[j] {\n      \
    \      i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            k += 1\n            if k > 1 {\n                monotonic\
    \ = true\n            }\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpts6neauz/tmpts6neauz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92327d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92324cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92324cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92324cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpts6neauz                        0x000055e5f69c93b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b92329c2460 __libc_start_main +
    245

    6    tmpts6neauz                        0x000055e5f69c9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpyj47_nzg/tmpyj47_nzg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a3799ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a37695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a37695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a376947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj47_nzg                        0x000055d8d83654e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b3a37b8a460 __libc_start_main +
    245

    6    tmpyj47_nzg                        0x000055d8d8365149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzffob0l6.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if i < k {\n            if l[i] < l[k]\
    \ {\n                i += 1\n            } else {\n                k -= 1\n  \
    \          }\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp0xaek4ri/tmp0xaek4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e760fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e75df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e75df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e75df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xaek4ri                        0x0000562dad8c853e <unavailable> + 5438

    5    libc.so.6                          0x00002b3e762e8460 __libc_start_main +
    245

    6    tmp0xaek4ri                        0x0000562dad8c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkgraeqz7.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028697
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let l = l.sorted()\n    return l.first <= l.last\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpndp3kykr.swift:11:20: error: binary operator '<=' cannot be applied\
    \ to two 'Int?' operands\n    return l.first <= l.last\n           ~~~~~~~ ^ \
    \ ~~~~~~\n/tmp/tmpndp3kykr.swift:11:20: note: overloads for '<=' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    return l.first <= l.last\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n     \
    \       i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            if l[i] < l[k] {\n                monotonic = false\n  \
    \          }\n            k += 1\n        }\n    }\n    return monotonic\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmx5xfk57/tmpmx5xfk57.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad15aa4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad15a746b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad15a746988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad15a7457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmx5xfk57                        0x000055dd5521d53e <unavailable> + 5438

    5    libc.so.6                          0x00002ad15ac3b460 __libc_start_main +
    245

    6    tmpmx5xfk57                        0x000055dd5521d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var m = 0\n    var n = l.count\n    var p = 0\n    var q = 0\n    var r = l.count\n\
    \    var s = l.count\n    var t = l.count\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = l.count\n    var y = l.count\n    var z = 0\n    var aa =\
    \ 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af\
    \ = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var\
    \ ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n   \
    \ var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n\
    \    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay =\
    \ 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd\
    \ = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var\
    \ bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n   \
    \ var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n\
    \    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw =\
    \ 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb\
    \ = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var\
    \ cg = 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n   \
    \ var cl = 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n\
    \    var cq = 0\n    var cr = 0\n    var cs = 0\n    var ct = 0\n    var cu =\
    \ 0\n    var cv = 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz\
    \ = 0\n    var da = 0\n    var db = 0\n    var dc = 0\n    var dd = 0\n    var\
    \ de = 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n   \
    \ var dj = 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n\
    \    var do = 0\n    var dp = 0\n    var dq = 0\n    var dr = 0\n    var ds =\
    \ 0\n    var dt = 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n    var dx\
    \ = 0\n    var dy = 0\n    var dz = 0\n    var ea = 0\n    var eb = 0\n    var\
    \ ec = 0\n    var ed = 0\n    var ee = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuqwhv1vz.swift:44:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpuqwhv1vz.swift:44:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpuqwhv1vz.swift:118:9: error: keyword 'do' cannot be used\
    \ as an identifier here\n    var do = 0\n        ^\n/tmp/tmpuqwhv1vz.swift:118:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var do =\
    \ 0\n        ^~\n        `do`\n/tmp/tmpuqwhv1vz.swift:135:8: error: expected pattern\n\
    \    var \n       ^\n/tmp/tmpuqwhv1vz.swift:10:9: warning: initialization of variable\
    \ 'i' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var i = 0\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:11:9: warning: initialization\
    \ of variable 'j' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var j = l.count - 1\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:12:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:13:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:14:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = l.count\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:15:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:16:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:17:9:\
    \ warning: initialization of variable 'r' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var r = l.count\n    ~~~~^\n    _\n/tmp/tmpuqwhv1vz.swift:18:9:\
    \ warning: initialization of variable 's' was never used; consider "
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n       \
    \     k = i\n            i += 1\n        } else {\n            k = j\n       \
    \     j -= 1\n        }\n        if k != i {\n            monotonic = false\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpe6sw10y7/tmpe6sw10y7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a2bee3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a2bbdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a2bbda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a2bbd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6sw10y7                        0x0000559ee65203b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b1a2c0cf460 __libc_start_main +
    245

    6    tmpe6sw10y7                        0x0000559ee6520019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa4ktk4fu.swift:84:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpa4ktk4fu.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmpa4ktk4fu.swift:10:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpa4ktk4fu.swift:36:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmpa4ktk4fu.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpa4ktk4fu.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmpa4ktk4fu.swift:12:9: note: 'k' previously declared here\n    var k = j\
    \ - 1\n        ^\n/tmp/tmpa4ktk4fu.swift:39:21: error: value of type 'Int64' has\
    \ no member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:40:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:41:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:42:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:43:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:44:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:45:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:46:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:47:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:48:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpa4ktk4fu.swift:49:21:\
    \ error: value of type 'I"
  stdout: ''
  timestamp: 1660028698
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if i < k {\n            if l[i] < l[k]\
    \ {\n                i += 1\n            } else {\n                k -= 1\n  \
    \          }\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp0xaek4ri/tmp0xaek4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e760fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e75df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e75df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e75df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xaek4ri                        0x0000562dad8c853e <unavailable> + 5438

    5    libc.so.6                          0x00002b3e762e8460 __libc_start_main +
    245

    6    tmp0xaek4ri                        0x0000562dad8c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first > sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjt2kmzbv.swift:11:25: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    return sorted.first > sorted.last\n           ~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n/tmp/tmpjt2kmzbv.swift:11:25: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    return sorted.first\
    \ > sorted.last\n                        ^\n"
  stdout: ''
  timestamp: 1660028698
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, &Context{}.withValue(0))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq997puts.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, &Context{}.withValue(0))\n    \
    \       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq997puts.swift:10:37: error: cannot find\
    \ 'Context' in scope\n    return monotonicWithContext(l, &Context{}.withValue(0))\n\
    \                                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028698
