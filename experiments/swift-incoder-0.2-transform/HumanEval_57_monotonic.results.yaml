language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdjf5zb41.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count())\n           ^~~~~~~~~~~~~\n/tmp/tmpdjf5zb41.swift:10:31:\
    \ error: cannot call value of non-function type 'Int'\n    return monotonicImpl(l,\
    \ l.count())\n                              ^    ~~\n                        \
    \           \n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1w14ik7x.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp1w14ik7x.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp1w14ik7x.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp1w14ik7x.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp1w14ik7x.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = l[i]\n    var n = l[j]\n    var o = l[k]\n    while i < j {\n   \
    \     if m > n {\n            return false\n        }\n        if o < n {\n  \
    \          return true\n        }\n        if m < o {\n            return false\n\
    \        }\n        if m == o {\n            i += 1\n            j = k\n     \
    \       k = j - 1\n            m = l[i]\n            n = l[j]\n            o =\
    \ l[k]\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9sl_lfkk/tmp9sl_lfkk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ae0f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98addecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98addec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98addeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sl_lfkk                        0x00005652644a153e <unavailable> + 5438

    5    libc.so.6                          0x00002b98ae2e1460 __libc_start_main +
    245

    6    tmp9sl_lfkk                        0x00005652644a1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpv7poabke/tmpv7poabke.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbd4fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbd4ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbd4ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbd4ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7poabke                        0x000055693816e64e <unavailable> + 5710

    5    libc.so.6                          0x00002acbd51db460 __libc_start_main +
    245

    6    tmpv7poabke                        0x000055693816e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var p = 0\n    var q = Int64(l.count)\n    var\
    \ r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpltvv1eug.swift:37:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmpltvv1eug.swift:13:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpltvv1eug.swift:38:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmpltvv1eug.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpltvv1eug.swift:39:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmpltvv1eug.swift:15:9: note: 'k' previously declared here\n    var k = j\
    \ - 1\n        ^\n/tmp/tmpltvv1eug.swift:41:21: error: value of type 'Int64' has\
    \ no member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:42:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:43:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:44:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:45:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:46:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:47:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:48:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:49:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:50:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpltvv1eug.swift:51:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var w = Int64(l.count)\n\
    \                "
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpyj47_nzg/tmpyj47_nzg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a3799ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a37695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a37695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a376947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj47_nzg                        0x000055d8d83654e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b3a37b8a460 __libc_start_main +
    245

    6    tmpyj47_nzg                        0x000055d8d8365149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpv7poabke/tmpv7poabke.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbd4fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbd4ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbd4ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbd4ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7poabke                        0x000055693816e64e <unavailable> + 5710

    5    libc.so.6                          0x00002acbd51db460 __libc_start_main +
    245

    6    tmpv7poabke                        0x000055693816e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var n = l.count\n\
    \    var m = n - 1\n    var a = 0\n    var b = n - 1\n    var c = 1\n    var d\
    \ = 1\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i =\
    \ 1\n    var j = n - 1\n    var k = n - 1\n    var l = 0\n    var m = n - 1\n\
    \    var n = n - 1\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n  \
    \  var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n   \
    \ var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var\
    \ M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R\
    \ = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W =\
    \ 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4zzdvxqs.swift:23:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 1\n        ^\n/tmp/tmp4zzdvxqs.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp4zzdvxqs.swift:24:9: error: invalid\
    \ redeclaration of 'j'\n    var j = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp4zzdvxqs.swift:25:9:\
    \ error: invalid redeclaration of 'k'\n    var k = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp4zzdvxqs.swift:27:9:\
    \ error: invalid redeclaration of 'm'\n    var m = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:28:9:\
    \ error: invalid redeclaration of 'n'\n    var n = n - 1\n        ^\n/tmp/tmp4zzdvxqs.swift:13:9:\
    \ note: 'n' previously declared here\n    var n = l.count\n        ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return isMonotonic(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph0868y5u.swift:10:12: error: cannot find 'isMonotonic' in scope\n\
    \    return isMonotonic(l)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else\
    \ if l[i] > l[k] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7c9d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7c6cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7c6cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7c6cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7c6ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abd7c4cce83 <unavailable> + 188035

    6    tmpkrdc4tfc                        0x000055614d272aac <unavailable> + 6828

    7    tmpkrdc4tfc                        0x000055614d27233d <unavailable> + 4925

    8    libc.so.6                          0x00002abd7cbc2460 __libc_start_main +
    245

    9    tmpkrdc4tfc                        0x000055614d272019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1xlck44s/tmp1xlck44s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39fd3a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39fd098b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39fd098988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39fd0977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xlck44s                        0x00005651284ab64e <unavailable> + 5710

    5    libc.so.6                          0x00002b39fd58d460 __libc_start_main +
    245

    6    tmp1xlck44s                        0x00005651284ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpshqiy8f7.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpshqiy8f7.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820769
