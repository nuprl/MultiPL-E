language: swift
name: HumanEval_9_rolling_max
results:
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var rolling_max_index\
    \ = 0\n    for number in numbers {\n        if number > rolling_max[rolling_max_index]\
    \ {\n            rolling_max[rolling_max_index] = number\n            rolling_max_index\
    \ += 1\n        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af4053f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4050ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4050ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4050ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4050eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af404eeee83 <unavailable> + 188035

    6    tmpadb9szcn                        0x0000563e55bf3b1d <unavailable> + 6941

    7    tmpadb9szcn                        0x0000563e55bf3635 <unavailable> + 5685

    8    libc.so.6                          0x00002af4055e4460 __libc_start_main +
    245

    9    tmpadb9szcn                        0x0000563e55bf3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ number\n            }\n        } else {\n            max = number\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpl3jgm3j5.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmpl3jgm3j5.swift:11:23: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n                max = number\n                      ^~~~~~\n\
    /tmp/tmpl3jgm3j5.swift:14:19: error: cannot assign value of type 'Int' to type\
    \ '[Int]'\n            max = number\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers\n\
    \    for number in numbers {\n        if number > max {\n            max = number\n\
    \        } else {\n            rolling_max[rolling_max.index(of: max)!] = number\n\
    \        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d423cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d420c6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d420c6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d420c613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d420c5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d41ec5e83 <unavailable> + 188035

    6    tmpxohb_u6m                        0x0000564676e88b08 <unavailable> + 6920

    7    tmpxohb_u6m                        0x0000564676e885dd <unavailable> + 5597

    8    libc.so.6                          0x00002b0d425bb460 __libc_start_main +
    245

    9    tmpxohb_u6m                        0x0000564676e882e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if index == 0 {\n            max = n\n        } else {\n        \
    \    if n > max[index] {\n                max[index] = n\n            }\n    \
    \    }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpx3ypohhx.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = n\n                  ^\n/tmp/tmpx3ypohhx.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp3yhf0fiq/tmp3yhf0fiq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5030ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba502de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba502de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba502de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhf0fiq                        0x000055d77e4936cd <unavailable> + 5837

    5    libc.so.6                          0x00002ba5032d7460 __libc_start_main +
    245

    6    tmp3yhf0fiq                        0x000055d77e4931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var rolling_max_index\
    \ = 0\n    for number in numbers {\n        if number > rolling_max[rolling_max_index]\
    \ {\n            rolling_max[rolling_max_index] = number\n        }\n        rolling_max_index\
    \ += 1\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b494e318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494e00f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b494e00f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b494e00f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b494e00ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b494de0ee83 <unavailable> + 188035

    6    tmpasne_fyn                        0x000055c79f363b1d <unavailable> + 6941

    7    tmpasne_fyn                        0x000055c79f363635 <unavailable> + 5685

    8    libc.so.6                          0x00002b494e504460 __libc_start_main +
    245

    9    tmpasne_fyn                        0x000055c79f363239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpy90z_kxo/tmpy90z_kxo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b198706fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b198706f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b198706e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy90z_kxo                        0x00005565cb7eb6cd <unavailable> + 5837

    5    libc.so.6                          0x00002b1987564460 __libc_start_main +
    245

    6    tmpy90z_kxo                        0x00005565cb7eb1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max[index] = number\n\
    \        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp5vbpj23d.swift:13:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = numbers[0]\n\
    \    for number in numbers {\n        if number > currentMax {\n            currentMax\
    \ = number\n        }\n    }\n    max = append(max, currentMax)\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n    }\n    max = append(max, currentMax)\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmphq1sccuz.swift:14:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmphq1sccuz.swift:20:11:\
    \ error: cannot find 'append' in scope\n    max = append(max, currentMax)\n  \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max = [Int](repeating:\
    \ number, count: index + 1)\n        }\n        max[index] = number\n        index\
    \ += 1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3ca939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3ca630561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3ca630286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3ca63013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3ca62fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3ca42fe83 <unavailable> + 188035

    6    tmpjh2qgfqr                        0x00005560060d0b83 <unavailable> + 7043

    7    tmpjh2qgfqr                        0x00005560060d0695 <unavailable> + 5781

    8    libc.so.6                          0x00002ae3cab25460 __libc_start_main +
    245

    9    tmpjh2qgfqr                        0x00005560060d0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ nil\n            }\n        } else {\n            max = number\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_85ay5fl.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmp_85ay5fl.swift:11:23: error: 'nil' cannot be assigned to type\
    \ '[Int]'\n                max = nil\n                      ^\n/tmp/tmp_85ay5fl.swift:14:19:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n            max =\
    \ number\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if index == 0 {\n            max = number\n        } else\
    \ {\n            if number > max[index] {\n                max = number\n    \
    \        }\n        }\n        index += 1\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpa5mfq551.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = number\n                  ^~~~~~\n/tmp/tmpa5mfq551.swift:14:23:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n                max\
    \ = number\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n\
    \    for number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aab771edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab76ee4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab76ee4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab76ee413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab76ee3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aab76ce3e83 <unavailable> + 188035

    6    tmpu32f3c40                        0x000055c530a78a52 <unavailable> + 6738

    7    tmpu32f3c40                        0x000055c530a7852d <unavailable> + 5421

    8    libc.so.6                          0x00002aab773d9460 __libc_start_main +
    245

    9    tmpu32f3c40                        0x000055c530a78239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if n > max[index] {\n            max = [n]\n        } else {\n  \
    \          max[index] = n\n        }\n        index++\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp6cqbupfj.swift:15:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = -1\n    var\
    \ maxIndexOffset = 0\n    for index in 1..<numbers.count {\n        if numbers[index]\
    \ > max {\n            max = numbers[index]\n            maxIndex = index\n  \
    \          maxIndexOffset = 0\n        } else {\n            maxIndexOffset +=\
    \ 1\n        }\n    }\n    var result = [Int]()\n    for index in 0..<maxIndexOffset\
    \ {\n        result.append(numbers[maxIndex - index])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc892aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc88fa1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc88fa1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc88fa113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc88fa0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc88da0e83 <unavailable> + 188035

    6    tmpnvevbw4i                        0x000056534c7b8b1e <unavailable> + 6942

    7    tmpnvevbw4i                        0x000056534c7b85ad <unavailable> + 5549

    8    libc.so.6                          0x00002adc89496460 __libc_start_main +
    245

    9    tmpnvevbw4i                        0x000056534c7b82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp3yhf0fiq/tmp3yhf0fiq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5030ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba502de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba502de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba502de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhf0fiq                        0x000055d77e4936cd <unavailable> + 5837

    5    libc.so.6                          0x00002ba5032d7460 __libc_start_main +
    245

    6    tmp3yhf0fiq                        0x000055d77e4931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp3yhf0fiq/tmp3yhf0fiq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5030ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba502de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba502de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba502de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhf0fiq                        0x000055d77e4936cd <unavailable> + 5837

    5    libc.so.6                          0x00002ba5032d7460 __libc_start_main +
    245

    6    tmp3yhf0fiq                        0x000055d77e4931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        \
    \    maxIndex = numbers.indexOf(max)\n        }\n    }\n    return numbers.suffix(maxIndex).prefix(numbers.indexOf(max))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpyz8zxvac.swift:12:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(max)\n                   \
    \    ~~~~~~~ ^~~~~~~\n/tmp/tmpyz8zxvac.swift:15:44: error: missing argument label\
    \ 'while:' in call\n    return numbers.suffix(maxIndex).prefix(numbers.indexOf(max))\n\
    \                                           ^\n                              \
    \             while: \n/tmp/tmpyz8zxvac.swift:15:52: error: value of type '[Int]'\
    \ has no member 'indexOf'\n    return numbers.suffix(maxIndex).prefix(numbers.indexOf(max))\n\
    \                                           ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if index == 0 {\n            max = number\n        } else\
    \ {\n            if number > max[index] {\n                max = [Int]()\n   \
    \             max[index] = number\n            }\n        }\n        index +=\
    \ 1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpu_rmhfy2.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = number\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = Int.max\n   \
    \ for number in numbers {\n        if number > currentMax {\n            currentMax\
    \ = number\n        }\n        if number > max[0] {\n            max = number\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpfaaqggf_.swift:14:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = number\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for index\
    \ in 1..<numbers.count {\n        if numbers[index] > max {\n            max =\
    \ numbers[index]\n            maxIndex = index\n        }\n    }\n    return Array(numbers[0..<maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90a2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90726561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc90726286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc9072613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc90725bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc90525e83 <unavailable> + 188035

    6    tmpwk92fehx                        0x000055a6b6865b78 <unavailable> + 7032

    7    tmpwk92fehx                        0x000055a6b686564d <unavailable> + 5709

    8    libc.so.6                          0x00002adc90c1b460 __libc_start_main +
    245

    9    tmpwk92fehx                        0x000055a6b6865359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if index == 0 {\n            max = n\n        } else {\n        \
    \    if n > max[index] {\n                max[index] = n\n            }\n    \
    \    }\n        index += 1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpqwiu283j.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = n\n                  ^\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ nil\n            } else {\n                max = append(max, number)\n     \
    \       }\n        } else {\n            max = append(max, number)\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpwp81f7v5.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmpwp81f7v5.swift:11:23: error: 'nil' cannot be assigned to type\
    \ '[Int]'\n                max = nil\n                      ^\n/tmp/tmpwp81f7v5.swift:13:23:\
    \ error: cannot find 'append' in scope\n                max = append(max, number)\n\
    \                      ^~~~~~\n/tmp/tmpwp81f7v5.swift:16:19: error: cannot find\
    \ 'append' in scope\n            max = append(max, number)\n                 \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if index == 0 {\n            max = append(max, n)\n        } else\
    \ {\n            if n > max[index] {\n                max = append(max, n)\n \
    \           }\n        }\n        index++\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpddt_xdlb.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, n)\n                  ^~~~~~\n/tmp/tmpddt_xdlb.swift:14:23:\
    \ error: cannot find 'append' in scope\n                max = append(max, n)\n\
    \                      ^~~~~~\n/tmp/tmpddt_xdlb.swift:17:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if index == 0 {\n            max = n\n        } else {\n        \
    \    if n > max[index] {\n                max = n\n            }\n        }\n\
    \        index += 1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpnca8itg8.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = n\n                  ^\n/tmp/tmpnca8itg8.swift:14:23:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n                max\
    \ = n\n                      ^\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for index\
    \ in 1..<numbers.count {\n        if numbers[index] > max {\n            max =\
    \ numbers[index]\n            maxIndex = index\n        }\n    }\n    return Array(numbers[0..<maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90a2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90726561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc90726286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc9072613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc90725bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc90525e83 <unavailable> + 188035

    6    tmpwk92fehx                        0x000055a6b6865b78 <unavailable> + 7032

    7    tmpwk92fehx                        0x000055a6b686564d <unavailable> + 5709

    8    libc.so.6                          0x00002adc90c1b460 __libc_start_main +
    245

    9    tmpwk92fehx                        0x000055a6b6865359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max[index] = number\n\
    \        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp5vbpj23d.swift:13:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp3yhf0fiq/tmp3yhf0fiq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5030ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba502de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba502de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba502de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhf0fiq                        0x000055d77e4936cd <unavailable> + 5837

    5    libc.so.6                          0x00002ba5032d7460 __libc_start_main +
    245

    6    tmp3yhf0fiq                        0x000055d77e4931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max = append(max,\
    \ number)\n        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp3vlw__ny.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmp3vlw__ny.swift:13:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if index == 0 {\n            max = n\n        } else {\n        \
    \    if n > max[index] {\n                max = [n]\n            } else {\n  \
    \              max[index] = n\n            }\n        }\n        index++\n   \
    \ }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpj0l33ks7.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = n\n                  ^\n/tmp/tmpj0l33ks7.swift:19:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max = append(max,\
    \ number)\n        } else {\n            index = index + 1\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpw_nlrh0k.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var rolling_max_index\
    \ = 0\n    for number in numbers {\n        if number > rolling_max[rolling_max_index]\
    \ {\n            rolling_max[rolling_max_index] = number\n        }\n        rolling_max_index\
    \ += 1\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b494e318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494e00f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b494e00f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b494e00f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b494e00ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b494de0ee83 <unavailable> + 188035

    6    tmpasne_fyn                        0x000055c79f363b1d <unavailable> + 6941

    7    tmpasne_fyn                        0x000055c79f363635 <unavailable> + 5685

    8    libc.so.6                          0x00002b494e504460 __libc_start_main +
    245

    9    tmpasne_fyn                        0x000055c79f363239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ [number]\n            } else {\n                max = [number] + max\n     \
    \       }\n        } else {\n            max = [number]\n        }\n    }\n  \
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acccf1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accceedd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accceedd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accceedd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accceedcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acccecdce83 <unavailable> + 188035

    6    tmpoknxhpoh                        0x00005620506ddb57 <unavailable> + 6999

    7    tmpoknxhpoh                        0x00005620506dd635 <unavailable> + 5685

    8    libc.so.6                          0x00002acccf3d2460 __libc_start_main +
    245

    9    tmpoknxhpoh                        0x00005620506dd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers\n\
    \    for i in 1..numbers.count {\n        if numbers[i] > max {\n            max\
    \ = numbers[i]\n            rolling_max = numbers[i..<numbers.count]\n       \
    \ }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpldaufxfh.swift:9:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n\
    \        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp3ypg7y3l.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for index\
    \ in 1..<numbers.count {\n        if numbers[index] > max {\n            max =\
    \ numbers[index]\n            maxIndex = index\n        }\n    }\n    return Array(numbers[0..<maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90a2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90726561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc90726286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc9072613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc90725bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc90525e83 <unavailable> + 188035

    6    tmpwk92fehx                        0x000055a6b6865b78 <unavailable> + 7032

    7    tmpwk92fehx                        0x000055a6b686564d <unavailable> + 5709

    8    libc.so.6                          0x00002adc90c1b460 __libc_start_main +
    245

    9    tmpwk92fehx                        0x000055a6b6865359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers\
    \ {\n        if index == 0 {\n            max = append(max, n)\n        } else\
    \ {\n            if n > max[index] {\n                max[index] = n\n       \
    \     }\n        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpleuaeia5.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, n)\n                  ^~~~~~\n/tmp/tmpleuaeia5.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ nil\n            }\n        }\n        if max == nil {\n            max = number\n\
    \        } else {\n            if number > max[0] {\n                max[0] =\
    \ number\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvfjveo0m.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmpvfjveo0m.swift:11:23: error: 'nil' cannot be assigned to type\
    \ '[Int]'\n                max = nil\n                      ^\n/tmp/tmpvfjveo0m.swift:14:16:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n        if max == nil {\n           ~~~ ^  ~~~\n/tmp/tmpvfjveo0m.swift:15:19:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n            max =\
    \ number\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max[index] = number\n\
    \        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp5vbpj23d.swift:13:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if rolling_max < numbers[i] {\n            rolling_max = numbers[i]\n\
    \        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp5b4q8ysa.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var rolling_max_index\
    \ = 0\n    for number in numbers {\n        if number > rolling_max[rolling_max_index]\
    \ {\n            rolling_max[rolling_max_index] = number\n            rolling_max_index\
    \ += 1\n        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af4053f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4050ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4050ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4050ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4050eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af404eeee83 <unavailable> + 188035

    6    tmpadb9szcn                        0x0000563e55bf3b1d <unavailable> + 6941

    7    tmpadb9szcn                        0x0000563e55bf3635 <unavailable> + 5685

    8    libc.so.6                          0x00002af4055e4460 __libc_start_main +
    245

    9    tmpadb9szcn                        0x0000563e55bf3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ nil\n            }\n        }\n        if max == nil {\n            max = number\n\
    \        } else {\n            if number > max[0] {\n                max = number\n\
    \            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpbo0w_uis.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmpbo0w_uis.swift:11:23: error: 'nil' cannot be assigned to type\
    \ '[Int]'\n                max = nil\n                      ^\n/tmp/tmpbo0w_uis.swift:14:16:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n        if max == nil {\n           ~~~ ^  ~~~\n/tmp/tmpbo0w_uis.swift:15:19:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n            max =\
    \ number\n                  ^~~~~~\n/tmp/tmpbo0w_uis.swift:18:23: error: cannot\
    \ assign value of type 'Int' to type '[Int]'\n                max = number\n \
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp3yhf0fiq/tmp3yhf0fiq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5030ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba502de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba502de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba502de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhf0fiq                        0x000055d77e4936cd <unavailable> + 5837

    5    libc.so.6                          0x00002ba5032d7460 __libc_start_main +
    245

    6    tmp3yhf0fiq                        0x000055d77e4931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ nil\n            } else {\n                max = append(max, number)\n     \
    \       }\n        } else {\n            max = number\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp19_i96fh.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmp19_i96fh.swift:11:23: error: 'nil' cannot be assigned to type\
    \ '[Int]'\n                max = nil\n                      ^\n/tmp/tmp19_i96fh.swift:13:23:\
    \ error: cannot find 'append' in scope\n                max = append(max, number)\n\
    \                      ^~~~~~\n/tmp/tmp19_i96fh.swift:16:19: error: cannot assign\
    \ value of type 'Int' to type '[Int]'\n            max = number\n            \
    \      ^~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = numbers[0]\n    for number in numbers\
    \ {\n        if number > rolling_max {\n            rolling_max = number\n   \
    \     }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp_jidloq2.swift:13:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ [number]\n            } else {\n                max = [number] + max\n     \
    \       }\n        } else {\n            max = [number]\n        }\n    }\n  \
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acccf1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accceedd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accceedd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accceedd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accceedcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acccecdce83 <unavailable> + 188035

    6    tmpoknxhpoh                        0x00005620506ddb57 <unavailable> + 6999

    7    tmpoknxhpoh                        0x00005620506dd635 <unavailable> + 5685

    8    libc.so.6                          0x00002acccf3d2460 __libc_start_main +
    245

    9    tmpoknxhpoh                        0x00005620506dd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max = [number]\n\
    \        } else {\n            max = append(max, number)\n        }\n        index++\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp4mtvcsiz.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmp4mtvcsiz.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ [number]\n            } else {\n                max = [number] + max\n     \
    \       }\n        } else {\n            max = [number]\n        }\n    }\n  \
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acccf1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accceedd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accceedd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accceedd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accceedcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acccecdce83 <unavailable> + 188035

    6    tmpoknxhpoh                        0x00005620506ddb57 <unavailable> + 6999

    7    tmpoknxhpoh                        0x00005620506dd635 <unavailable> + 5685

    8    libc.so.6                          0x00002acccf3d2460 __libc_start_main +
    245

    9    tmpoknxhpoh                        0x00005620506dd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n    }\n    for number in numbers {\n        if number == max {\n  \
    \          result.append(max)\n        } else {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpyz5w60_c/tmpyz5w60_c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b53793c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b5348ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b5348a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b534897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyz5w60_c                        0x0000557a2e3b27b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b6b5397f460 __libc_start_main +
    245

    6    tmpyz5w60_c                        0x0000557a2e3b2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n\
    \    for number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aab771edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab76ee4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab76ee4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab76ee413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab76ee3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aab76ce3e83 <unavailable> + 188035

    6    tmpu32f3c40                        0x000055c530a78a52 <unavailable> + 6738

    7    tmpu32f3c40                        0x000055c530a7852d <unavailable> + 5421

    8    libc.so.6                          0x00002aab773d9460 __libc_start_main +
    245

    9    tmpu32f3c40                        0x000055c530a78239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers\n\
    \    for i in 1..numbers.count {\n        if numbers[i] > max {\n            max\
    \ = numbers[i]\n        }\n        if numbers[i] > rolling_max[i - 1].0 {\n  \
    \          rolling_max[i] = max\n        }\n    }\n    return rolling_max\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpajv8bi24.swift:9:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        if number > max[index] {\n            max = [number]\n\
    \        } else {\n            max = append(max, number)\n        }\n        index++\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp4mtvcsiz.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmp4mtvcsiz.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var rolling_max_index\
    \ = 0\n    for number in numbers {\n        if rolling_max[rolling_max_index]\
    \ < number {\n            rolling_max[rolling_max_index] = number\n        }\n\
    \        rolling_max_index += 1\n    }\n    return rolling_max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a53c5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a53956561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9a53956286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9a5395613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9a53955bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9a53755e83 <unavailable> + 188035

    6    tmpa84695fv                        0x0000563e91805b1d <unavailable> + 6941

    7    tmpa84695fv                        0x0000563e91805635 <unavailable> + 5685

    8    libc.so.6                          0x00002b9a53e4b460 __libc_start_main +
    245

    9    tmpa84695fv                        0x0000563e91805239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqpf8q4z2/tmpqpf8q4z2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaafa020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpf8q4z2                        0x000055e666f756cd <unavailable> + 5837

    5    libc.so.6                          0x00002aaafa20c460 __libc_start_main +
    245

    6    tmpqpf8q4z2                        0x000055e666f751e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var max_value = numbers[0]\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number\n        }\n    }\n    for number in numbers {\n        if number ==\
    \ max_value {\n            rolling_max.append(number)\n        }\n    }\n    return\
    \ rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bbf2dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bbefd3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6bbefd3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6bbefd313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6bbefd2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6bbedd2e83 <unavailable> + 188035

    6    tmpdvrgofnw                        0x0000555b782c1a8b <unavailable> + 6795

    7    tmpdvrgofnw                        0x0000555b782c152d <unavailable> + 5421

    8    libc.so.6                          0x00002b6bbf4c8460 __libc_start_main +
    245

    9    tmpdvrgofnw                        0x0000555b782c1239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ number\n            }\n        } else {\n            max = number\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpl3jgm3j5.swift:9:16: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns true\n        if max != nil {\n           ~~~\
    \ ^  ~~~\n/tmp/tmpl3jgm3j5.swift:11:23: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n                max = number\n                      ^~~~~~\n\
    /tmp/tmpl3jgm3j5.swift:14:19: error: cannot assign value of type 'Int' to type\
    \ '[Int]'\n            max = number\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp3yhf0fiq/tmp3yhf0fiq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5030ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba502de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba502de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba502de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yhf0fiq                        0x000055d77e4936cd <unavailable> + 5837

    5    libc.so.6                          0x00002ba5032d7460 __libc_start_main +
    245

    6    tmp3yhf0fiq                        0x000055d77e4931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmplr48td_h.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n\
    \    for number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aab771edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab76ee4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab76ee4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab76ee413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab76ee3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aab76ce3e83 <unavailable> + 188035

    6    tmpu32f3c40                        0x000055c530a78a52 <unavailable> + 6738

    7    tmpu32f3c40                        0x000055c530a7852d <unavailable> + 5421

    8    libc.so.6                          0x00002aab773d9460 __libc_start_main +
    245

    9    tmpu32f3c40                        0x000055c530a78239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var max_index = -1\n    for\
    \ index in 1..<numbers.count {\n        if numbers[index] > max {\n          \
    \  max = numbers[index]\n            max_index = index\n        }\n    }\n   \
    \ return Array(numbers[1..<max_index])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2328bccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23288c3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b23288c3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b23288c313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b23288c2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b23286c2e83 <unavailable> + 188035

    6    tmpd3aygfnj                        0x0000560654cddb78 <unavailable> + 7032

    7    tmpd3aygfnj                        0x0000560654cdd64d <unavailable> + 5709

    8    libc.so.6                          0x00002b2328db8460 __libc_start_main +
    245

    9    tmpd3aygfnj                        0x0000560654cdd359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var rolling_max = [Int]()\n    var rolling_max_index\
    \ = 0\n    for number in numbers {\n        if number > rolling_max[rolling_max_index]\
    \ {\n            rolling_max[rolling_max_index] = number\n        }\n        rolling_max_index\
    \ += 1\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b494e318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494e00f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b494e00f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b494e00f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b494e00ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b494de0ee83 <unavailable> + 188035

    6    tmpasne_fyn                        0x000055c79f363b1d <unavailable> + 6941

    7    tmpasne_fyn                        0x000055c79f363635 <unavailable> + 5685

    8    libc.so.6                          0x00002b494e504460 __libc_start_main +
    245

    9    tmpasne_fyn                        0x000055c79f363239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a66c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a63bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9a63bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9a63bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9a63bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9a61bbe83 <unavailable> + 188035

    6    tmprs8w897a                        0x000055e184f95b1d <unavailable> + 6941

    7    tmprs8w897a                        0x000055e184f95635 <unavailable> + 5685

    8    libc.so.6                          0x00002ab9a68b1460 __libc_start_main +
    245

    9    tmprs8w897a                        0x000055e184f95239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824903
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(max)\n\
    \        } else {\n            result.append(number)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmp6g0zv4dz/tmp6g0zv4dz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec140afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec13da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec13da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec13da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g0zv4dz                        0x000055d124a34816 <unavailable> + 6166

    5    libc.so.6                          0x00002aec1429b460 __libc_start_main +
    245

    6    tmp6g0zv4dz                        0x000055d124a341e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
    \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<numbers.count {\n        if numbers[index] > max[maxIndex] {\n      \
    \      max[maxIndex] = numbers[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c30c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3094b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c3094b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c3094b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c3094abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c3074ae83 <unavailable> + 188035

    6    tmpe6yz3nxd                        0x000055b7e2c92bf4 <unavailable> + 7156

    7    tmpe6yz3nxd                        0x000055b7e2c926a5 <unavailable> + 5797

    8    libc.so.6                          0x00002b6c30e40460 __libc_start_main +
    245

    9    tmpe6yz3nxd                        0x000055b7e2c922a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979972
