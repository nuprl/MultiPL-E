language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = max\n        result[(index + 1)\
    \ % result.count] = min\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpggjvnwr0/tmpggjvnwr0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea67cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea64c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea64c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea64c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjvnwr0                        0x000055658c054664 <unavailable> + 5732

    5    libc.so.6                          0x00002b3ea69bb460 __libc_start_main +
    245

    6    tmpggjvnwr0                        0x000055658c054259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825178
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n \
    \   var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp_t4d6o2k.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp_t4d6o2k.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b07cac06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07ca8fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b07ca8fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b07ca8fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b07ca8fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b07ca6fce83 <unavailable> + 188035

    6    tmp500gh4bt                        0x000055b31142c385 <unavailable> + 9093

    7    tmp500gh4bt                        0x000055b31142b57c <unavailable> + 5500

    8    libc.so.6                          0x00002b07cadf2460 __libc_start_main +
    245

    9    tmp500gh4bt                        0x000055b31142b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825178
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var result = [Int]()\n    var min = lst[0]\n    var\
    \ max = lst[0]\n    for x in lst {\n        if x < min {\n            min = x\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == min {\n            result.insert(x, 0)\n       \
    \ }\n        if x == max {\n            result.insert(x, result.count - 1)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp233pwj95.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp233pwj95.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for i\
    \ := 0; i < len(result); i++ {\n        for j := 0; j < len(result) - i; j++ {\n\
    \            if result[j] > result[j+1] {\n                let tmp = result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeha_0gmx.swift:14:12: error: expected type\n    for i := 0; i <\
    \ len(result); i++ {\n           ^\n            <#type#>\n/tmp/tmpeha_0gmx.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(result);\
    \ i++ {\n           ^\n/tmp/tmpeha_0gmx.swift:14:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(result); i++ {\n     \
    \      ^\n/tmp/tmpeha_0gmx.swift:15:16: error: expected type\n        for j :=\
    \ 0; j < len(result) - i; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpeha_0gmx.swift:15:16: error: expected 'in' after for-each pattern\n  \
    \      for j := 0; j < len(result) - i; j++ {\n               ^\n/tmp/tmpeha_0gmx.swift:15:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 0; j\
    \ < len(result) - i; j++ {\n               ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for el in lst {\n        if min\
    \ == nil || el < min {\n            min = el\n        }\n        if max == nil\
    \ || el > max {\n            max = el\n        }\n    }\n    if min == nil {\n\
    \        min = max\n    }\n    if max == nil {\n        max = min\n    }\n   \
    \ if min == max {\n        return result\n    }\n    if min < max {\n        for\
    \ el in lst {\n            if el == min {\n                result.insert(el, at:\
    \ 0)\n            }\n            if el == max {\n                result.insert(el,\
    \ at: result.count - 1)\n            }\n        }\n    } else {\n        for el\
    \ in lst {\n            if el == max {\n                result.insert(el, at:\
    \ result.count - 1)\n            }\n            if el == min {\n             \
    \   result.insert(el, at: 0)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpt4ed5zko.swift:17:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmpt4ed5zko.swift:17:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmpt4ed5zko.swift:17:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmpt4ed5zko.swift:20:31: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ if max == nil || el > max {\n                              ^\n/tmp/tmpt4ed5zko.swift:20:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                  ?? <#default value#>\n/tmp/tmpt4ed5zko.swift:20:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                 !\n/tmp/tmpt4ed5zko.swift:33:12: error: binary\
    \ operator '<' cannot be applied to two 'Int?' operands\n    if min < max {\n\
    \       ~~~ ^ ~~~\n/tmp/tmpt4ed5zko.swift:33:12: note: overloads for '<' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    if min < max\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        for index2 in minIndex..<result.count {\n            if result[index2]\
    \ < result[minIndex] {\n                minIndex = index2\n            }\n   \
    \         if result[index2] > result[maxIndex] {\n                maxIndex = index2\n\
    \            }\n        }\n        if minIndex != index {\n            let tmp\
    \ = result[index]\n            result[index] = result[minIndex]\n            result[minIndex]\
    \ = tmp\n        }\n        if maxIndex != index {\n            let tmp = result[index]\n\
    \            result[index] = result[maxIndex]\n            result[maxIndex] =\
    \ tmp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmps6f7z3gz.swift:19:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index2\n                ^~~~~~~~\n\
    /tmp/tmps6f7z3gz.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n/tmp/tmps6f7z3gz.swift:22:17:\
    \ error: cannot assign to value: 'maxIndex' is a 'let' constant\n            \
    \    maxIndex = index2\n                ^~~~~~~~\n/tmp/tmps6f7z3gz.swift:16:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let maxIndex = index\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.isEmpty() {\n      \
    \  return lst\n    }\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    var middle: Int = 0\n    for element in lst {\n        if element < min {\n\
    \            min = element\n        } else if element > max {\n            max\
    \ = element\n        } else {\n            middle = element\n        }\n    }\n\
    \    var result = [Int]()\n    for element in lst {\n        if element == min\
    \ {\n            result.insert(0, element)\n        } else if element == max {\n\
    \            result.insert(1, element)\n        } else {\n            result.insert(middle,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp456khii1.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp456khii1.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(0, element)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp456khii1.swift:33:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(1,\
    \ element)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp456khii1.swift:35:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(middle,\
    \ element)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3bi0q64e/tmp3bi0q64e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee7760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee7457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee7457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee74567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bi0q64e                        0x0000556caa135664 <unavailable> + 5732

    5    libc.so.6                          0x00002afee794c460 __libc_start_main +
    245

    6    tmp3bi0q64e                        0x0000556caa135259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        } else\
    \ {\n            result.insert(element, min)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp922lsvv_.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp922lsvv_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp12ffk3ov.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp12ffk3ov.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp12ffk3ov.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, min)\n        }\n        if el == max {\n            result.insert(el,\
    \ max)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0h54wpd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp0h54wpd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for el in lst {\n        if min\
    \ == nil || el < min {\n            min = el\n        }\n        if max == nil\
    \ || el > max {\n            max = el\n        }\n    }\n    if min == nil ||\
    \ max == nil {\n        return result\n    }\n    for el in lst {\n        if\
    \ el == min {\n            result.insert(el, min)\n        }\n        if el ==\
    \ max {\n            result.insert(el, max)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzt3xcsuk.swift:17:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmpzt3xcsuk.swift:17:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmpzt3xcsuk.swift:17:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmpzt3xcsuk.swift:20:31: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ if max == nil || el > max {\n                              ^\n/tmp/tmpzt3xcsuk.swift:20:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                  ?? <#default value#>\n/tmp/tmpzt3xcsuk.swift:20:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                 !\n/tmp/tmpzt3xcsuk.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(el, min)\n\
    \                   ^\n/tmp/tmpzt3xcsuk.swift:29:20: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n            result.insert(el,\
    \ min)\n                   ^\n/tmp/tmpzt3xcsuk.swift:29:20: note: candidate has\
    \ partially matching parameter list (__owned Int, at: Array<Int>.Index)\n    \
    \        result.insert(el, min)\n                   ^\n/tmp/tmpzt3xcsuk.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ max)\n                   ^\n/tmp/tmpzt3xcsuk.swift:32:20: note: candidate has\
    \ partially matching parameter list (__owned Int, at: Int)\n            result.insert(el,\
    \ max)\n     "
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        let tmp = result[index]\n        result[index]\
    \ = min\n        result[(index + 1) % result.count] = max\n        result[index]\
    \ = tmp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwvquajgf/tmpwvquajgf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8973ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc89431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc89431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc894307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvquajgf                        0x000055e041688664 <unavailable> + 5732

    5    libc.so.6                          0x00002abc89926460 __libc_start_main +
    245

    6    tmpwvquajgf                        0x000055e041688259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp7j2zhmbb.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp7j2zhmbb.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3ikqgbd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3ikqgbd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        let temp = result[index]\n        result[index]\
    \ = max\n        result[(index + 1) % result.count] = min\n        result[index]\
    \ = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1imjzuea/tmp1imjzuea.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee498fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee495f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee495f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee495f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1imjzuea                        0x0000556db2010664 <unavailable> + 5732

    5    libc.so.6                          0x00002aee49aea460 __libc_start_main +
    245

    6    tmp1imjzuea                        0x0000556db2010259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwxk_v475.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpwxk_v475.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpwxk_v475.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpwxk_v475.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = min\n            min =\
    \ max\n            max = temp\n        }\n        result[index] = min\n      \
    \  result[index + 1] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwf6g2f3z.swift:19:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmpwf6g2f3z.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpwf6g2f3z.swift:20:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmpwf6g2f3z.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.append(num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpquvrzr50.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpquvrzr50.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpquvrzr50.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    if lst.count\
    \ == 0 {\n        return result\n    }\n    var min: Int = 0\n    var max: Int\
    \ = lst.count - 1\n    while min < max {\n        var mid = min + ((max - min)\
    \ / 2)\n        var tmp = result\n        result = result.removeFirst()\n    \
    \    result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeLast()\n\
    \        result.append(tmp)\n        tmp = result\n        result = result.removeFirst()\n\
    \        result.append(tmp)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpawg7l18a.swift:138:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpawg7l18a.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpawg7l18a.swift:22:25: error: cannot\
    \ assign value of type 'Int' to type '[Int]'\n        result = result.removeFirst()\n\
    \                 ~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpawg7l18a.swift:23:16: error: no\
    \ exact matches in call to instance method 'append'\n        result.append(tmp)\n\
    \               ^\nSwift.Array:7:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n\
    /tmp/tmpawg7l18a.swift:25:25: error: cannot assign value of type 'Int' to type\
    \ '[Int]'\n        result = result.removeLast()\n                 ~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpawg7l18a.swift:26:16: error: no exact matches in call to instance method\
    \ 'append'\n        result.append(tmp)\n               ^\nSwift.Array:7:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n \
    \   @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n/tmp/tmpawg7l18a.swift:28:25:\
    \ error: c"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptnyunraz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptnyunraz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        } else if num == max {\n          \
    \  result.append(num)\n        } else {\n            result.insert(num, num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpjwwwloq7.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpjwwwloq7.swift:30:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        result.insert(min, num)\n        }\n        if num > max {\n        \
    \    result.insert(max, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpn9gvu6ns.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpn9gvu6ns.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(min,\
    \ x)\n        }\n        if x == max {\n            result.insert(max, x)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3k6cu28h.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3k6cu28h.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n        }\n        if x == min {\n            continue\n   \
    \     }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == max {\n            result.append(x)\n          \
    \  continue\n        }\n        if x > max {\n            result.append(x)\n \
    \           continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x > max {\n            result.append(x)\n\
    \            continue\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpjnqfqsaj.swift:17:12: error: variable 'min' used before being initialized\n\
    \        if min == 0 {\n           ^\n/tmp/tmpjnqfqsaj.swift:14:9: note: variable\
    \ defined here\n    var min: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:20:17: error:\
    \ variable 'min' used before being initialized\n        if x == min {\n      \
    \          ^\n/tmp/tmpjnqfqsaj.swift:14:9: note: variable defined here\n    var\
    \ min: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:36:16: error: variable 'min' used\
    \ before being initialized\n        if x < min {\n               ^\n/tmp/tmpjnqfqsaj.swift:14:9:\
    \ note: variable defined here\n    var min: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:40:17:\
    \ error: variable 'min' used before being initialized\n        if x == min {\n\
    \                ^\n/tmp/tmpjnqfqsaj.swift:14:9: note: variable defined here\n\
    \    var min: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:44:16: error: variable 'min'\
    \ used before being initialized\n        if x < min {\n               ^\n/tmp/tmpjnqfqsaj.swift:14:9:\
    \ note: variable defined here\n    var min: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:23:16:\
    \ error: variable 'max' used before being initialized\n        if x > max {\n\
    \               ^\n/tmp/tmpjnqfqsaj.swift:15:9: note: variable defined here\n\
    \    var max: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:28:17: error: variable 'max'\
    \ used before being initialized\n        if x == max {\n                ^\n/tmp/tmpjnqfqsaj.swift:15:9:\
    \ note: variable defined here\n    var max: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:32:16:\
    \ error: variable 'max' used before being initialized\n        if x > max {\n\
    \               ^\n/tmp/tmpjnqfqsaj.swift:15:9: note: variable defined here\n\
    \    var max: Int\n        ^\n/tmp/tmpjnqfqsaj.swift:48:16: error: variable 'max'\
    \ used before being initialized\n        if x > max {\n               ^\n/tmp/tmpjnqfqsaj.swift:15:9:\
    \ note: variable defined here\n    var max: Int\n        ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.isEmpty() {\n      \
    \  return lst\n    }\n    var min: Int = 0\n    var max: Int = 0\n    for el in\
    \ lst {\n        if el < min {\n            min = el\n        }\n        if el\
    \ > max {\n            max = el\n        }\n    }\n    var result = [Int]()\n\
    \    for el in lst {\n        if el == min {\n            result.append(self[min])\n\
    \        }\n        if el == max {\n            result.append(self[max])\n   \
    \     }\n        if el < min {\n            result.append(self[el])\n        }\n\
    \        if el > max {\n            result.append(self[el])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpkovc8zjr.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpkovc8zjr.swift:29:27: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n            result.append(self[min])\n\
    \                          ^~~~\n/tmp/tmpkovc8zjr.swift:32:27: error: cannot find\
    \ 'self' in scope; did you mean to use it in a type or extension context?\n  \
    \          result.append(self[max])\n                          ^~~~\n/tmp/tmpkovc8zjr.swift:35:27:\
    \ error: cannot find 'self' in scope; did you mean to use it in a type or extension\
    \ context?\n            result.append(self[el])\n                          ^~~~\n\
    /tmp/tmpkovc8zjr.swift:38:27: error: cannot find 'self' in scope; did you mean\
    \ to use it in a type or extension context?\n            result.append(self[el])\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for x in lst {\n        if x ==\
    \ nil {\n            continue\n        }\n        if min == nil || x < min {\n\
    \            min = x\n        }\n        if max == nil || x > max {\n        \
    \    max = x\n        }\n    }\n    if min == nil {\n        return result\n \
    \   }\n    if max == nil {\n        return result\n    }\n    for x in lst {\n\
    \        if x == nil {\n            continue\n        }\n        if x == min {\n\
    \            result.insert(x, 0)\n            continue\n        }\n        if\
    \ x == max {\n            result.insert(x, result.count - 1)\n            continue\n\
    \        }\n        if x < min {\n            result.insert(x, 0)\n          \
    \  continue\n        }\n        if x > max {\n            result.insert(x, result.count\
    \ - 1)\n            continue\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpi3kykokr.swift:17:14: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if x == nil {\n          \
    \ ~ ^  ~~~\n/tmp/tmpi3kykokr.swift:20:30: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n        if min == nil || x < min\
    \ {\n                             ^\n/tmp/tmpi3kykokr.swift:20:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpi3kykokr.swift:20:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpi3kykokr.swift:23:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpi3kykokr.swift:23:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpi3kykokr.swift:23:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpi3kykokr.swift:34:14: warning: comparing\
    \ non-optional value of type 'Int' to 'nil' always returns false\n        if x\
    \ == nil {\n           ~ ^  ~~~\n/tmp/tmpi3kykokr.swift:38:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(x, 0)\n\
    \                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinab"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b07cac06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07ca8fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b07ca8fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b07ca8fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b07ca8fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b07ca6fce83 <unavailable> + 188035

    6    tmp500gh4bt                        0x000055b31142c385 <unavailable> + 9093

    7    tmp500gh4bt                        0x000055b31142b57c <unavailable> + 5500

    8    libc.so.6                          0x00002b07cadf2460 __libc_start_main +
    245

    9    tmp500gh4bt                        0x000055b31142b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825178
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    if lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        for\
    \ index in stride(from: lst.count, to: 2, by: -1) {\n            if result[index]\
    \ < min {\n                result.remove(at: index)\n                continue\n\
    \            }\n            if result[index] > max {\n                result.remove(at:\
    \ index)\n                continue\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fecee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fecbdd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6fecbdd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6fecbdd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6fecbdcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6fec9dce83 <unavailable> + 188035

    6    tmpdjqjk7r5                        0x000055ecbba8f70d <unavailable> + 9997

    7    tmpdjqjk7r5                        0x000055ecbba8e78c <unavailable> + 6028

    8    libc.so.6                          0x00002b6fed0d2460 __libc_start_main +
    245

    9    tmpdjqjk7r5                        0x000055ecbba8e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(min,\
    \ x)\n        }\n        if x == max {\n            result.insert(max, x)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3k6cu28h.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3k6cu28h.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp12ffk3ov.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp12ffk3ov.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp12ffk3ov.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<index+1] {\n            if value <\
    \ min {\n                result[index] = value\n                index = index\
    \ + 1\n                continue\n            }\n            if value > max {\n\
    \                result[index] = value\n                index = index + 1\n  \
    \              continue\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpib6eleiq.swift:20:17: error: cannot assign to value: 'index' is\
    \ a 'let' constant\n                index = index + 1\n                ^~~~~\n\
    /tmp/tmpib6eleiq.swift:25:17: error: cannot assign to value: 'index' is a 'let'\
    \ constant\n                index = index + 1\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for x in lst {\n        if x < min {\n            min = x\n        }\n  \
    \      if x > max {\n            max = x\n        }\n    }\n    var result = [Int]()\n\
    \    for x in lst {\n        if x == min {\n            result.insert(0, x)\n\
    \        }\n        if x == max {\n            result.append(x)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppxyffziy.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(0, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    for value in lst {\n        if value < minValue {\n \
    \           minValue = value\n        }\n    }\n    for value in lst {\n     \
    \   if value == minValue {\n            continue\n        }\n        if value\
    \ > minValue {\n            result.append(minValue)\n            result.append(value)\n\
    \            minValue = value\n        } else {\n            result.append(value)\n\
    \        }\n    }\n    result.append(minValue)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp25gbn0u4/tmp25gbn0u4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cefd74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cefa6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cefa6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cefa6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25gbn0u4                        0x000055bafcca8644 <unavailable> + 5700

    5    libc.so.6                          0x00002b9ceff60460 __libc_start_main +
    245

    6    tmp25gbn0u4                        0x000055bafcca8239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    for value in lst {\n        if value < min {\n           \
    \ min = value\n        }\n    }\n    for value in lst {\n        if value == min\
    \ {\n            result.insert(value, min)\n        } else {\n            result.insert(value,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpisi9f90c.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(value, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpisi9f90c.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3bi0q64e/tmp3bi0q64e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee7760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee7457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee7457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee74567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bi0q64e                        0x0000556caa135664 <unavailable> + 5732

    5    libc.so.6                          0x00002afee794c460 __libc_start_main +
    245

    6    tmp3bi0q64e                        0x0000556caa135259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        let temp = result[index]\n        result[index]\
    \ = max\n        result[(index + 1) % result.count] = min\n        result[index]\
    \ = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1imjzuea/tmp1imjzuea.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee498fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee495f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee495f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee495f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1imjzuea                        0x0000556db2010664 <unavailable> + 5732

    5    libc.so.6                          0x00002aee49aea460 __libc_start_main +
    245

    6    tmp1imjzuea                        0x0000556db2010259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for num in lst {\n        if min == 0 {\n  \
    \          min = num\n        } else {\n            if num < min {\n         \
    \       min = num\n            }\n        }\n        if max == 0 {\n         \
    \   max = num\n        } else {\n            if num > max {\n                max\
    \ = num\n            }\n        }\n    }\n    for num in lst {\n        if num\
    \ < min {\n            result.insert(num, num)\n        } else {\n           \
    \ if num > max {\n                result.insert(num, num)\n            } else\
    \ {\n                result.insert(num, num)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmph5vslgko.swift:34:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmph5vslgko.swift:37:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(num, num)\n                       ^\nSwift.Array:11:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Element, at i: Int)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:6:37: note:\
    \ incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable\
    \ public mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n/tmp/tmph5vslgko.swift:39:24: error: no\
    \ exact matches in call to instance method 'insert'\n                result.insert(num,\
    \ num)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp2ykwumh2.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp2ykwumh2.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp2ykwumh2.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, max)\n        } else {\n            result.insert(num,\
    \ min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqrkl0oye.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqrkl0oye.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if min > el\
    \ {\n            min = el\n        }\n        if max < el {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if min == max {\n       \
    \     result.append(el)\n        } else {\n            if min > max {\n      \
    \          result.append(min)\n                result.append(el)\n           \
    \     result.append(max)\n            } else {\n                result.append(max)\n\
    \                result.append(el)\n                result.append(min)\n     \
    \       }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp710ua19d/tmp710ua19d.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2362ed9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2362bd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2362bd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2362bcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp710ua19d                        0x000055659c01b5f4 <unavailable> + 5620

    5    libc.so.6                          0x00002b23630c5460 __libc_start_main +
    245

    6    tmp710ua19d                        0x000055659c01b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(min,\
    \ x)\n        }\n        if x == max {\n            result.insert(max, x)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3k6cu28h.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3k6cu28h.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp12ffk3ov.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp12ffk3ov.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp12ffk3ov.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(min, el)\n        }\n        if el == max {\n            result.insert(max,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpycm5vpfg.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, el)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpycm5vpfg.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ max)\n        }\n        if v == max {\n            result.insert(v, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmprzatpzrq.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, max)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmprzatpzrq.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let minIndex = index\n\
    \        let maxIndex = index\n        let minValue = result[index]\n        let\
    \ maxValue = result[index + 1]\n        if minValue < maxValue {\n           \
    \ minIndex = index + 1\n            maxIndex = index\n        }\n        if minValue\
    \ > maxValue {\n            minIndex = index\n            maxIndex = index - 1\n\
    \        }\n        result[minIndex], result[maxIndex] = result[maxIndex], result[minIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp8q9mtmjw.swift:27:25: error: consecutive statements on a line must\
    \ be separated by ';'\n        result[minIndex], result[maxIndex] = result[maxIndex],\
    \ result[minIndex]\n                        ^\n                        ;\n/tmp/tmp8q9mtmjw.swift:27:25:\
    \ error: expected expression\n        result[minIndex], result[maxIndex] = result[maxIndex],\
    \ result[minIndex]\n                        ^\n/tmp/tmp8q9mtmjw.swift:20:13: error:\
    \ cannot assign to value: 'minIndex' is a 'let' constant\n            minIndex\
    \ = index + 1\n            ^~~~~~~~\n/tmp/tmp8q9mtmjw.swift:15:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let minIndex = index\n        ^~~\n\
    \        var\n/tmp/tmp8q9mtmjw.swift:21:13: error: cannot assign to value: 'maxIndex'\
    \ is a 'let' constant\n            maxIndex = index\n            ^~~~~~~~\n/tmp/tmp8q9mtmjw.swift:16:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let maxIndex = index\n\
    \        ^~~\n        var\n/tmp/tmp8q9mtmjw.swift:24:13: error: cannot assign\
    \ to value: 'minIndex' is a 'let' constant\n            minIndex = index\n   \
    \         ^~~~~~~~\n/tmp/tmp8q9mtmjw.swift:15:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let minIndex = index\n        ^~~\n        var\n/tmp/tmp8q9mtmjw.swift:25:13:\
    \ error: cannot assign to value: 'maxIndex' is a 'let' constant\n            maxIndex\
    \ = index - 1\n            ^~~~~~~~\n/tmp/tmp8q9mtmjw.swift:16:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let maxIndex = index\n        ^~~\n\
    \        var\n/tmp/tmp8q9mtmjw.swift:27:15: warning: subscript is accessed but\
    \ result is unused\n        result[minIndex], result[maxIndex] = result[maxIndex],\
    \ result[minIndex]\n        ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        for index2 in\
    \ index..<result.count {\n            let max = result[index2]\n            if\
    \ min > max {\n                let temp = result[index]\n                result[index]\
    \ = result[index2]\n                result[index2] = temp\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpsbgicax_/tmpsbgicax_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7420d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7420a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7420a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7420a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsbgicax_                        0x00005588e04b3664 <unavailable> + 5732

    5    libc.so.6                          0x00002b7420f0e460 __libc_start_main +
    245

    6    tmpsbgicax_                        0x00005588e04b3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for element in lst {\n        if min == 0 {\n\
    \            min = element\n        } else {\n            max = element\n    \
    \    }\n    }\n    for element in lst {\n        if element > max {\n        \
    \    result.insert(element, max)\n        } else {\n            result.insert(element,\
    \ min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpp_ugqa_6.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpp_ugqa_6.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    for num in lst {\n        if min == nil || num < min! {\n\
    \            min = num\n        } else {\n            result.append(num)\n   \
    \     }\n    }\n    if min != nil {\n        result.append(min)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptivqgmtt.swift:23:23: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        result.append(min)\n        \
    \              ^\n/tmp/tmptivqgmtt.swift:23:23: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        result.append(min)\n\
    \                      ^\n                          ?? <#default value#>\n/tmp/tmptivqgmtt.swift:23:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.append(min)\n                      ^\n               \
    \          !\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            result.insert(min, value)\n        } else if value > max\
    \ {\n            result.insert(max, value)\n        } else {\n            result.insert(value,\
    \ min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpp01f19u3.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, value)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpp01f19u3.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpp01f19u3.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n \
    \   var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp_t4d6o2k.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp_t4d6o2k.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b07cac06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07ca8fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b07ca8fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b07ca8fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b07ca8fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b07ca6fce83 <unavailable> + 188035

    6    tmp500gh4bt                        0x000055b31142c385 <unavailable> + 9093

    7    tmp500gh4bt                        0x000055b31142b57c <unavailable> + 5500

    8    libc.so.6                          0x00002b07cadf2460 __libc_start_main +
    245

    9    tmp500gh4bt                        0x000055b31142b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825178
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3bi0q64e/tmp3bi0q64e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee7760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee7457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee7457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee74567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bi0q64e                        0x0000556caa135664 <unavailable> + 5732

    5    libc.so.6                          0x00002afee794c460 __libc_start_main +
    245

    6    tmp3bi0q64e                        0x0000556caa135259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, min)\n        }\n        if num == max {\n      \
    \      result.insert(num, max)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpu475l16p.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpu475l16p.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        let swap = result[(index + 1) % result.count]\n\
    \        result[(index + 1) % result.count] = min\n        result[index] = max\n\
    \        result[(index + 1) % result.count] = swap\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpyexw521t/tmpyexw521t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01d8f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01d8c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01d8c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01d8c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyexw521t                        0x000055630ddb2664 <unavailable> + 5732

    5    libc.so.6                          0x00002b01d9116460 __libc_start_main +
    245

    6    tmpyexw521t                        0x000055630ddb2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for number in lst {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    for number in lst {\n        if\
    \ number == min {\n            result.insert(min, number)\n        }\n       \
    \ if number == max {\n            result.insert(max, number)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyxdbqtqy.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, number)\n                  \
    \ ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpyxdbqtqy.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ number)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for element in lst {\n \
    \       if element < min {\n            min = element\n        }\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in lst\
    \ {\n        if element == min {\n            result.insert(element, min)\n  \
    \      }\n        if element == max {\n            result.insert(element, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpd0haioid.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpd0haioid.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwxk_v475.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpwxk_v475.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpwxk_v475.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpwxk_v475.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<index+2] {\n            if value <\
    \ min {\n                result[index] = value\n            }\n            if\
    \ value > max {\n                result[index + 1] = value\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b471b19cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b471ae93561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b471ae93286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b471ae9313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b471ae92bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b471ac92e83 <unavailable> + 188035

    6    tmp4atbreig                        0x0000560056db85b8 <unavailable> + 9656

    7    tmp4atbreig                        0x0000560056db779c <unavailable> + 6044

    8    libc.so.6                          0x00002b471b388460 __libc_start_main +
    245

    9    tmp4atbreig                        0x0000560056db7479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for v in lst {\n        if min == 0 {\n    \
    \        min = v\n            max = v\n        } else {\n            if v < min\
    \ {\n                min = v\n            }\n            if v > max {\n      \
    \          max = v\n            }\n        }\n    }\n    for v in lst {\n    \
    \    if v == min {\n            result.insert(v, 0)\n        }\n        if v ==\
    \ max {\n            result.insert(v, 1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpx0eu26za.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpx0eu26za.swift:34:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ 1)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = max\n        result[(index + 1)\
    \ % result.count] = min\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpggjvnwr0/tmpggjvnwr0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea67cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea64c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea64c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea64c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjvnwr0                        0x000055658c054664 <unavailable> + 5732

    5    libc.so.6                          0x00002b3ea69bb460 __libc_start_main +
    245

    6    tmpggjvnwr0                        0x000055658c054259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825178
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var min: Int = 0\n    var\
    \ max: Int = 0\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ min)\n        }\n        if num == max {\n            result.insert(num, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpu2sfkafn.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpu2sfkafn.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwsc8btd2.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpwsc8btd2.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        for index2 in\
    \ index..<result.count {\n            let max = result[index2]\n            if\
    \ min > max {\n                let tmp = result[index]\n                result[index]\
    \ = result[index2]\n                result[index2] = tmp\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpp8u9gl6g/tmpp8u9gl6g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0dad04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0da9fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0da9fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0da9fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8u9gl6g                        0x0000559428d40664 <unavailable> + 5732

    5    libc.so.6                          0x00002af0daef0460 __libc_start_main +
    245

    6    tmpp8u9gl6g                        0x0000559428d40259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3ikqgbd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3ikqgbd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for number in lst {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    for number in lst {\n        if number\
    \ == min {\n            result.insert(min, number)\n        }\n        if number\
    \ == max {\n            result.insert(max, number)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4pt04lyz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, number)\n                  \
    \ ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4pt04lyz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ number)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    var result = [Int]()\n    for value in lst {\n        if\
    \ value < minValue {\n            result.append(\"-\\(value as Int)\")\n     \
    \   }\n        if value > maxValue {\n            result.append(\"\\(value as\
    \ Int)\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp5suvtwq5.swift:29:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(\"-\\(value as Int)\")\n        \
    \           ^\nSwift.Array:6:37: note: candidate expects value of type 'Int' for\
    \ parameter #1 (got 'String')\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp5suvtwq5.swift:29:20: note: found\
    \ candidate with type '(__owned String) -> ()'\n            result.append(\"-\\\
    (value as Int)\")\n                   ^\n/tmp/tmp5suvtwq5.swift:32:20: error:\
    \ no exact matches in call to instance method 'append'\n            result.append(\"\
    \\(value as Int)\")\n                   ^\nSwift.Array:6:37: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Self.Element)\n                          \
    \          ^\n/tmp/tmp5suvtwq5.swift:32:20: note: found candidate with type '(__owned\
    \ String) -> ()'\n            result.append(\"\\(value as Int)\")\n          \
    \         ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    var result: [Int]\
    \ = []\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ v)\n        }\n        if v == max {\n            result.insert(v, v)\n    \
    \    }\n    }\n    for v in result {\n        result.insert(v, v)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4rz6wqyd.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, v)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4rz6wqyd.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ v)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp4rz6wqyd.swift:36:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(v, v)\n               ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n            max = x\n        } else {\n            if x < min\
    \ {\n                min = x\n            }\n            if x > max {\n      \
    \          max = x\n            }\n        }\n    }\n    for x in lst {\n    \
    \    if x == min {\n            result.insert(x, 0)\n        }\n        if x ==\
    \ max {\n            result.insert(x, result.count - 1)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeokg3ny8.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpeokg3ny8.swift:34:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for x in lst {\n        if x < min {\n            min = x\n        }\n  \
    \      if x > max {\n            max = x\n        }\n    }\n    var result = [Int]()\n\
    \    for x in lst {\n        if x == min {\n            result.insert(0, x)\n\
    \        }\n        if x == max {\n            result.append(x)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppxyffziy.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(0, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    for element in lst {\n        if element < min {\n            min = element\n\
    \        }\n        if element > max {\n            max = element\n        }\n\
    \    }\n    var result = [Int]()\n    for element in lst {\n        if element\
    \ == min {\n            result.insert(0, element)\n        }\n        if element\
    \ == max {\n            result.insert(1, element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpi1zqcesn.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(0, element)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpi1zqcesn.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(1,\
    \ element)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(min,\
    \ x)\n        }\n        if x == max {\n            result.insert(max, x)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3k6cu28h.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3k6cu28h.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n\n    var min: Int? = nil\n    var max: Int? = nil\n   \
    \ for x in lst {\n        if min == nil || x < min {\n            min = x\n  \
    \      }\n        if max == nil || x > max {\n            max = x\n        }\n\
    \    }\n\n    var result: [Int] = []\n    if min != nil {\n        result = append(result,\
    \ min)\n    }\n    if max != nil {\n        result = append(result, max)\n   \
    \ }\n    for x in lst {\n        if x == min {\n            result = append(result,\
    \ x)\n        }\n        if x == max {\n            result = append(result, x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpz4wydc86.swift:20:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || x < min {\n\
    \                             ^\n/tmp/tmpz4wydc86.swift:20:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpz4wydc86.swift:20:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpz4wydc86.swift:23:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpz4wydc86.swift:23:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpz4wydc86.swift:23:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpz4wydc86.swift:30:18: error: cannot\
    \ find 'append' in scope\n        result = append(result, min)\n             \
    \    ^~~~~~\n/tmp/tmpz4wydc86.swift:33:18: error: cannot find 'append' in scope\n\
    \        result = append(result, max)\n                 ^~~~~~\n/tmp/tmpz4wydc86.swift:37:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, x)\n\
    \                     ^~~~~~\n/tmp/tmpz4wydc86.swift:40:22: error: cannot find\
    \ 'append' in scope\n            result = append(result, x)\n                \
    \     ^~~~~~\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        let minValue = result[index]\n        for index2 in minIndex..<maxIndex\
    \ {\n            if result[index2] < minValue {\n                minIndex = index2\n\
    \                minValue = result[index2]\n            }\n            if result[index2]\
    \ > minValue {\n                maxIndex = index2\n                maxValue =\
    \ result[index2]\n            }\n        }\n        let tmp = result[index] as\
    \ Int\n        result[index] = minValue\n        result[minIndex] = tmp\n    \
    \    result[maxIndex] = maxValue\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj1mb4zw3.swift:20:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index2\n                ^~~~~~~~\n\
    /tmp/tmpj1mb4zw3.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n/tmp/tmpj1mb4zw3.swift:21:17:\
    \ error: cannot assign to value: 'minValue' is a 'let' constant\n            \
    \    minValue = result[index2]\n                ^~~~~~~~\n/tmp/tmpj1mb4zw3.swift:17:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let minValue = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpj1mb4zw3.swift:24:17: error: cannot assign\
    \ to value: 'maxIndex' is a 'let' constant\n                maxIndex = index2\n\
    \                ^~~~~~~~\n/tmp/tmpj1mb4zw3.swift:16:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let maxIndex = index\n        ^~~\n      \
    \  var\n/tmp/tmpj1mb4zw3.swift:25:17: error: cannot find 'maxValue' in scope\n\
    \                maxValue = result[index2]\n                ^~~~~~~~\n/tmp/tmpj1mb4zw3.swift:31:28:\
    \ error: cannot find 'maxValue' in scope\n        result[maxIndex] = maxValue\n\
    \                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for x in lst {\n        if x < min {\n            min = x\n        }\n  \
    \      if x > max {\n            max = x\n        }\n    }\n    var result: [Int]\
    \ = []\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_kbnyvs.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_kbnyvs.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        } else {\n            result.insert(el, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1y9y10ry.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp1y9y10ry.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.isEmpty() {\n      \
    \  return lst\n    }\n    var min: Int = lst.minElement()\n    var max: Int =\
    \ lst.maxElement()\n    var minIndex: Int = 0\n    var maxIndex: Int = 0\n   \
    \ var temp: Int = 0\n    for index in lst {\n        if index == min {\n     \
    \       minIndex = index\n        }\n        if index == max {\n            maxIndex\
    \ = index\n        }\n    }\n    for index in lst {\n        if index == min {\n\
    \            temp = min\n            min = max\n            max = temp\n     \
    \   }\n        if index == max {\n            temp = min\n            min = index\n\
    \            max = temp\n        }\n    }\n    var result = [Int]()\n    for index\
    \ in lst {\n        if index == min {\n            result.insert(minIndex, index)\n\
    \        }\n        if index == max {\n            result.insert(maxIndex, index)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp9n5dyiea.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp9n5dyiea.swift:16:24: error: value of type '[Int]' has no member\
    \ 'minElement'\n    var min: Int = lst.minElement()\n                   ~~~ ^~~~~~~~~~\n\
    /tmp/tmp9n5dyiea.swift:17:24: error: value of type '[Int]' has no member 'maxElement'\n\
    \    var max: Int = lst.maxElement()\n                   ~~~ ^~~~~~~~~~\n/tmp/tmp9n5dyiea.swift:44:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(minIndex,\
    \ index)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp9n5dyiea.swift:47:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(maxIndex,\
    \ index)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp12ffk3ov.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp12ffk3ov.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp12ffk3ov.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for element in lst {\n \
    \       if element < min {\n            min = element\n        }\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in lst\
    \ {\n        if element == min {\n            result.insert(element, min)\n  \
    \      }\n        if element == max {\n            result.insert(element, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpd0haioid.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpd0haioid.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp12ffk3ov.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp12ffk3ov.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp12ffk3ov.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(value, minValue)\n\
    \        } else if value > maxValue {\n            result.insert(value, maxValue)\n\
    \        } else {\n            result.insert(value, value)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpubv6_pgp.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(value, minValue)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpubv6_pgp.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpubv6_pgp.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        let tmp = result[index]\n        result[index]\
    \ = max\n        result[(index + 1) % result.count] = min\n        result[index]\
    \ = tmp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp2pq1xm7s/tmp2pq1xm7s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed28d6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed28a64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed28a64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed28a637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pq1xm7s                        0x00005574beff7664 <unavailable> + 5732

    5    libc.so.6                          0x00002aed28f59460 __libc_start_main +
    245

    6    tmp2pq1xm7s                        0x00005574beff7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        } else\
    \ {\n            result.insert(element, min)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp922lsvv_.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp922lsvv_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        for otherIndex in index..<result.count {\n            if result[otherIndex]\
    \ < result[minIndex] {\n                minIndex = otherIndex\n            }\n\
    \            if result[otherIndex] > result[maxIndex] {\n                maxIndex\
    \ = otherIndex\n            }\n        }\n        if minIndex != index {\n   \
    \         let tmp = result[index]\n            result[index] = result[minIndex]\n\
    \            result[minIndex] = tmp\n        }\n        if maxIndex != index {\n\
    \            let tmp = result[index]\n            result[index] = result[maxIndex]\n\
    \            result[maxIndex] = tmp\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1ntxrms_.swift:19:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = otherIndex\n               \
    \ ^~~~~~~~\n/tmp/tmp1ntxrms_.swift:15:9: note: change 'let' to 'var' to make it\
    \ mutable\n        let minIndex = index\n        ^~~\n        var\n/tmp/tmp1ntxrms_.swift:22:17:\
    \ error: cannot assign to value: 'maxIndex' is a 'let' constant\n            \
    \    maxIndex = otherIndex\n                ^~~~~~~~\n/tmp/tmp1ntxrms_.swift:16:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let maxIndex = index\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp5ek_yre8.swift:171:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp5ek_yre8.swift:144:22: note: to match\
    \ this opening '{'\n    for value in lst {\n                     ^\n/tmp/tmp5ek_yre8.swift:171:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmp5ek_yre8.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmp5ek_yre8.swift:151:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp5ek_yre8.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        result += [num]\n        }\n        if num > max {\n            result\
    \ += [num]\n        }\n    }\n    for num in lst {\n        if num < max {\n \
    \           result += [num]\n        }\n        if num > min {\n            result\
    \ += [num]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpft2an_29/tmpft2an_29.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba191ad4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1917cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1917cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1917ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpft2an_29                        0x000056389d1195f4 <unavailable> + 5620

    5    libc.so.6                          0x00002ba191cc0460 __libc_start_main +
    245

    6    tmpft2an_29                        0x000056389d1191e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3ikqgbd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3ikqgbd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3ikqgbd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3ikqgbd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, min)\n        }\n        if num == max {\n      \
    \      result.insert(num, max)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpu475l16p.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpu475l16p.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, min)\n        }\n        if el == max {\n            result.insert(el,\
    \ max)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0h54wpd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp0h54wpd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        let minIndex = index\n        let maxIndex = index + 1\n     \
    \   if min > max {\n            let temp = min\n            min = max\n      \
    \      max = temp\n        }\n        if min == max {\n            result[index]\
    \ = min\n            result[index + 1] = max\n            continue\n        }\n\
    \        if min < max {\n            for index in minIndex..<maxIndex {\n    \
    \            result[index] = min\n            }\n            for index in maxIndex..<minIndex\
    \ {\n                result[index] = max\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwg_okqx9.swift:21:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmpwg_okqx9.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpwg_okqx9.swift:22:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmpwg_okqx9.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp2ykwumh2.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp2ykwumh2.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp2ykwumh2.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    for num in lst {\n     \
    \   if num == min {\n            result.insert(num, num)\n        }\n        if\
    \ num == max {\n            result.insert(num, num)\n        }\n    }\n    for\
    \ num in lst {\n        if num == min {\n            result.insert(num, num)\n\
    \        }\n        if num == max {\n            result.insert(num, num)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4m_qjscu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4m_qjscu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp4m_qjscu.swift:34:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4m_qjscu.swift:37:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have:"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    var result = [Int]()\n\
    \    for v in lst {\n        if v == min {\n            result.insert(v, min)\n\
    \        }\n        if v == max {\n            result.insert(v, max)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpcxq6a9qk.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpcxq6a9qk.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ > max {\n            max = element\n        }\n        if element < min {\n\
    \            min = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, min)\n        }\n\
    \        if element == max {\n            result.insert(element, max)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpdb7d32ui.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpdb7d32ui.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = max\n        result[(index + 1)\
    \ % result.count] = min\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpggjvnwr0/tmpggjvnwr0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea67cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea64c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea64c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea64c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjvnwr0                        0x000055658c054664 <unavailable> + 5732

    5    libc.so.6                          0x00002b3ea69bb460 __libc_start_main +
    245

    6    tmpggjvnwr0                        0x000055658c054259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825178
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n \
    \   var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(maxValue, value)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpofdf1l_2.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpofdf1l_2.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp7j2zhmbb.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp7j2zhmbb.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3bi0q64e/tmp3bi0q64e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee7760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee7457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee7457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee74567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bi0q64e                        0x0000556caa135664 <unavailable> + 5732

    5    libc.so.6                          0x00002afee794c460 __libc_start_main +
    245

    6    tmp3bi0q64e                        0x0000556caa135259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        result.insert(min, num)\n        }\n        if num > max {\n        \
    \    result.insert(max, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpn9gvu6ns.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpn9gvu6ns.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp7j2zhmbb.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp7j2zhmbb.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == nil {\n  \
    \          min = x\n        } else {\n            if x < min {\n             \
    \   min = x\n            }\n        }\n        if max == nil {\n            max\
    \ = x\n        } else {\n            if x > max {\n                max = x\n \
    \           }\n        }\n    }\n    for x in lst {\n        if x == min {\n \
    \           result.insert(x, 0)\n        }\n        if x == max {\n          \
    \  result.insert(x, result.count - 1)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptsnyp0oq.swift:17:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if min == nil {\n        \
    \   ~~~ ^  ~~~\n/tmp/tmptsnyp0oq.swift:24:16: warning: comparing non-optional\
    \ value of type 'Int' to 'nil' always returns false\n        if max == nil {\n\
    \           ~~~ ^  ~~~\n/tmp/tmptsnyp0oq.swift:34:20: error: no exact matches\
    \ in call to instance method 'insert'\n            result.insert(x, 0)\n     \
    \              ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmptsnyp0oq.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, result.count - 1)\n\
    \                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqch2ogrk.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpqch2ogrk.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpqch2ogrk.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpqch2ogrk.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqch2ogrk.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for x in lst {\n        if x ==\
    \ nil {\n            continue\n        }\n        if min == nil || x < min {\n\
    \            min = x\n        }\n        if max == nil || x > max {\n        \
    \    max = x\n        }\n    }\n    if min != nil {\n        result.insert(min!,\
    \ 0)\n    }\n    if max != nil {\n        result.insert(max!, result.count - 1)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpm6drnft1.swift:17:14: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if x == nil {\n          \
    \ ~ ^  ~~~\n/tmp/tmpm6drnft1.swift:20:30: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n        if min == nil || x < min\
    \ {\n                             ^\n/tmp/tmpm6drnft1.swift:20:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpm6drnft1.swift:20:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpm6drnft1.swift:23:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpm6drnft1.swift:23:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpm6drnft1.swift:23:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpm6drnft1.swift:28:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min!, 0)\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpm6drnft1.swift:31:16: error:"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    for v in lst {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        } else {\n            result.insert(v, v)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpf0qoe_n7.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpf0qoe_n7.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ v)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ max)\n        }\n        if x == max {\n            result.insert(x, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpb732msdw.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, max)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpb732msdw.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwxk_v475.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpwxk_v475.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpwxk_v475.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpwxk_v475.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(min,\
    \ x)\n        }\n        if x == max {\n            result.insert(max, x)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3k6cu28h.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3k6cu28h.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, min)\n        }\n\
    \        if element == max {\n            result.insert(element, max)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3lr5p_w9.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3lr5p_w9.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let temp = result[index]\n     \
    \   result[index] = max\n        result[index + 1] = min\n        result[index]\
    \ = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f105d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f102d0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2f102d0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2f102d013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2f102cfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2f100cfe83 <unavailable> + 188035

    6    tmphzjybd6n                        0x0000563010a14425 <unavailable> + 9253

    7    tmphzjybd6n                        0x0000563010a135fc <unavailable> + 5628

    8    libc.so.6                          0x00002b2f107c5460 __libc_start_main +
    245

    9    tmphzjybd6n                        0x0000563010a132d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp7j2zhmbb.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp7j2zhmbb.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(value, maxValue)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpz6p_4hw3.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpz6p_4hw3.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n        }\n        if x == min {\n            continue\n   \
    \     }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == min {\n            continue\n        }\n       \
    \ if x == max {\n            result.appendContentsOf(lst)\n            break\n\
    \        }\n        if x > max {\n            result.appendContentsOf(lst)\n \
    \           break\n        }\n        if x < min {\n            result.appendContentsOf(lst)\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3eyrpd1w.swift:32:20: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n            result.appendContentsOf(lst)\n            ~~~~~~\
    \ ^~~~~~~~~~~~~~~~\n/tmp/tmp3eyrpd1w.swift:36:20: error: value of type '[Int]'\
    \ has no member 'appendContentsOf'\n            result.appendContentsOf(lst)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3eyrpd1w.swift:40:20: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n            result.appendContentsOf(lst)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwsc8btd2.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpwsc8btd2.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n            max = x\n        } else {\n            if x < min\
    \ {\n                min = x\n            }\n            if x > max {\n      \
    \          max = x\n            }\n        }\n    }\n    for x in lst {\n    \
    \    if x == min {\n            result.insert(x, 0)\n        } else {\n      \
    \      result.insert(x, 1)\n        }\n    }\n    for x in lst {\n        if x\
    \ == max {\n            result.insert(x, 0)\n        } else {\n            result.insert(x,\
    \ 2)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4m16uzaf.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4m16uzaf.swift:33:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 1)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp4m16uzaf.swift:38:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, 0)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4m16uzaf.swift:40:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 2)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expec"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: -1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let swap = result[index]\n     \
    \   result[index] = max\n        result[index + 1] = min\n        result[index]\
    \ = swap\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmptnpsxvue/tmptnpsxvue.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e7654bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e76242b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e76242988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e762417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnpsxvue                        0x00005650dfbaf6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b5e76737460 __libc_start_main +
    245

    6    tmptnpsxvue                        0x00005650dfbaf2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for i\
    \ := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst); j++ {\n       \
    \     if j == i {\n                continue\n            }\n            if lst[i]\
    \ > lst[j] {\n                let tmp = lst[i]\n                lst[i] = lst[j]\n\
    \                lst[j] = tmp\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpy2brw2kt.swift:14:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmpy2brw2kt.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmpy2brw2kt.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n/tmp/tmpy2brw2kt.swift:15:16:\
    \ error: expected type\n        for j := 0; j < len(lst); j++ {\n            \
    \   ^\n                <#type#>\n/tmp/tmpy2brw2kt.swift:15:16: error: expected\
    \ 'in' after for-each pattern\n        for j := 0; j < len(lst); j++ {\n     \
    \          ^\n/tmp/tmpy2brw2kt.swift:15:16: error: expected Sequence expression\
    \ for for-each loop\n        for j := 0; j < len(lst); j++ {\n               ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    for value in lst {\n        if value < minValue {\n \
    \           minValue = value\n        }\n    }\n    for value in lst {\n     \
    \   if value == minValue {\n            continue\n        }\n        for otherValue\
    \ in lst {\n            if otherValue == minValue {\n                continue\n\
    \            }\n            if value < otherValue {\n                result.insert(value,\
    \ at: 0)\n                result.insert(otherValue, at: result.count - 1)\n  \
    \              break\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpe4duhdj7/tmpe4duhdj7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7ece7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7ecb73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7ecb73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7ecb727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4duhdj7                        0x0000557f544a36a4 <unavailable> + 5796

    5    libc.so.6                          0x00002af7ed068460 __libc_start_main +
    245

    6    tmpe4duhdj7                        0x0000557f544a3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp2ykwumh2.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp2ykwumh2.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp2ykwumh2.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptnyunraz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptnyunraz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.isEmpty() {\n      \
    \  return lst\n    }\n\n    var min: Int = 0\n    var max: Int = 0\n    var middle:\
    \ Int = 0\n\n    for idx in lst {\n        if idx < min {\n            min = idx\n\
    \        } else if idx > max {\n            max = idx\n        } else {\n    \
    \        middle = idx\n        }\n    }\n\n    var result = [Int]()\n    for idx\
    \ in lst {\n        if idx < middle {\n            result.insert(idx, min)\n \
    \       } else {\n            result.insert(idx, max)\n        }\n    }\n\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpscf8rqip.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpscf8rqip.swift:34:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(idx, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpscf8rqip.swift:36:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(idx,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n\n    let min = lst[0]\n    let max = lst[0]\n    for v\
    \ in lst {\n        if v < min {\n            min = v\n        }\n        if v\
    \ > max {\n            max = v\n        }\n    }\n\n    var result = [Int]()\n\
    \    for v in lst {\n        if v == min {\n            result.insert(v, at: 0)\n\
    \        }\n        if v == max {\n            result.insert(v, at: result.count\
    \ - 1)\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp31q78ulf.swift:21:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = v\n            ^~~\n/tmp/tmp31q78ulf.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = lst[0]\n    ^~~\n\
    \    var\n/tmp/tmp31q78ulf.swift:24:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = v\n            ^~~\n/tmp/tmp31q78ulf.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = lst[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.append(min)\n\
    \            result.append(max)\n            result.append(num)\n            min\
    \ = num\n            max = num\n        }\n    }\n    if min > max {\n       \
    \ result.append(min)\n        result.append(max)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpxzhpvfrg/tmpxzhpvfrg.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e62100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e61df7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e61df7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e61df67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzhpvfrg                        0x000055c9dfd385f4 <unavailable> + 5620

    5    libc.so.6                          0x00002b6e622ec460 __libc_start_main +
    245

    6    tmpxzhpvfrg                        0x000055c9dfd381e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for el in lst {\n        if min == 0 {\n   \
    \         min = el\n        } else {\n            if el < min {\n            \
    \    min = el\n            }\n        }\n        if max == 0 {\n            max\
    \ = el\n        } else {\n            if el > max {\n                max = el\n\
    \            }\n        }\n    }\n    for el in lst {\n        if el == min {\n\
    \            result.insert(el, min)\n        } else {\n            result.insert(el,\
    \ max)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpktdexgow.swift:34:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpktdexgow.swift:36:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for i\
    \ := 0; i < len(result); i++ {\n        for j := 0; j < len(result) - i; j++ {\n\
    \            if result[j] > result[j+1] {\n                let tmp = result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeha_0gmx.swift:14:12: error: expected type\n    for i := 0; i <\
    \ len(result); i++ {\n           ^\n            <#type#>\n/tmp/tmpeha_0gmx.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(result);\
    \ i++ {\n           ^\n/tmp/tmpeha_0gmx.swift:14:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(result); i++ {\n     \
    \      ^\n/tmp/tmpeha_0gmx.swift:15:16: error: expected type\n        for j :=\
    \ 0; j < len(result) - i; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpeha_0gmx.swift:15:16: error: expected 'in' after for-each pattern\n  \
    \      for j := 0; j < len(result) - i; j++ {\n               ^\n/tmp/tmpeha_0gmx.swift:15:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 0; j\
    \ < len(result) - i; j++ {\n               ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n\n    var result = [Int]()\n    var min: Int = 0\n    var\
    \ max: Int = lst.count - 1\n\n    while min < max {\n        let mid = min + ((max\
    \ - min) / 2)\n        let value = lst[mid]\n        if value < lst[min] {\n \
    \           min = mid + 1\n        } else if value > lst[max] {\n            max\
    \ = mid - 1\n        } else {\n            result.append(value)\n            min\
    \ = mid + 1\n            max = mid - 1\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpb74ldsh3/tmpb74ldsh3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53500b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b534fda8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b534fda8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b534fda77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb74ldsh3                        0x00005634d09bc5c4 <unavailable> + 5572

    5    libc.so.6                          0x00002b535029d460 __libc_start_main +
    245

    6    tmpb74ldsh3                        0x00005634d09bc1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        }\n        if el == max {\n            result.insert(min,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeyfdmug1.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpeyfdmug1.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(min,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.isEmpty() {\n      \
    \  return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n  \
    \  var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(value, maxValue)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpbls2q190.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if lst.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpbls2q190.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpbls2q190.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        for index2 in minIndex..<result.count {\n            if result[index2]\
    \ < result[minIndex] {\n                minIndex = index2\n            }\n   \
    \         if result[index2] > result[maxIndex] {\n                maxIndex = index2\n\
    \            }\n        }\n        let temp = result[index]\n        result[index]\
    \ = result[maxIndex]\n        result[maxIndex] = temp\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzg2e5aaa.swift:19:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index2\n                ^~~~~~~~\n\
    /tmp/tmpzg2e5aaa.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n/tmp/tmpzg2e5aaa.swift:22:17:\
    \ error: cannot assign to value: 'maxIndex' is a 'let' constant\n            \
    \    maxIndex = index2\n                ^~~~~~~~\n/tmp/tmpzg2e5aaa.swift:16:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let maxIndex = index\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n        }\n        if x > max {\n            max = x\n     \
    \   }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpi6uvue3r.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpi6uvue3r.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpah7dx_fz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpah7dx_fz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3ikqgbd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3ikqgbd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwsc8btd2.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpwsc8btd2.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    var i: Int = 0\n    for element in lst {\n        if element < min {\n  \
    \          min = element\n        }\n        if element > max {\n            max\
    \ = element\n        }\n        i += 1\n    }\n    var result = [Int]()\n    for\
    \ element in lst {\n        if element == min {\n            result.insert(element,\
    \ i)\n        }\n        if element == max {\n            result.insert(element,\
    \ i)\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpo8nr1bm8.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, i)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpo8nr1bm8.swift:34:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ i)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3bi0q64e/tmp3bi0q64e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee7760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee7457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee7457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee74567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bi0q64e                        0x0000556caa135664 <unavailable> + 5732

    5    libc.so.6                          0x00002afee794c460 __libc_start_main +
    245

    6    tmp3bi0q64e                        0x0000556caa135259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptnyunraz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptnyunraz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqch2ogrk.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpqch2ogrk.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpqch2ogrk.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpqch2ogrk.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqch2ogrk.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, min)\n        }\n\
    \        if element == max {\n            result.insert(element, max)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp09wl31yw.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp09wl31yw.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n \
    \   var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(value, minValue)\n     \
    \   }\n        if value > maxValue {\n            result.insert(value, maxValue)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpbsfnzxp7.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(value, minValue)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpbsfnzxp7.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for i\
    \ := 0; i < len(result); i++ {\n        for j := 0; j < len(result) - i; j++ {\n\
    \            if result[j] > result[j+1] {\n                let tmp = result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeha_0gmx.swift:14:12: error: expected type\n    for i := 0; i <\
    \ len(result); i++ {\n           ^\n            <#type#>\n/tmp/tmpeha_0gmx.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(result);\
    \ i++ {\n           ^\n/tmp/tmpeha_0gmx.swift:14:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(result); i++ {\n     \
    \      ^\n/tmp/tmpeha_0gmx.swift:15:16: error: expected type\n        for j :=\
    \ 0; j < len(result) - i; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpeha_0gmx.swift:15:16: error: expected 'in' after for-each pattern\n  \
    \      for j := 0; j < len(result) - i; j++ {\n               ^\n/tmp/tmpeha_0gmx.swift:15:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 0; j\
    \ < len(result) - i; j++ {\n               ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, min)\n        }\n        if num == max {\n      \
    \      result.insert(num, max)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1vvk1lrr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp1vvk1lrr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        }\n        if el == max {\n            result.insert(min,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeyfdmug1.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpeyfdmug1.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(min,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(value, maxValue)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpz6p_4hw3.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpz6p_4hw3.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3ikqgbd8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3ikqgbd8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<(index + 1)] {\n            if value\
    \ < min {\n                let temp = value\n                value = min\n   \
    \             min = temp\n            }\n            if value > max {\n      \
    \          let temp = value\n                value = max\n                max\
    \ = temp\n            }\n        }\n        result[index] = min\n        result[index\
    \ + 1] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpkpyngja_.swift:20:17: error: cannot assign to value: 'value' is\
    \ a 'let' constant\n                value = min\n                ^~~~~\n/tmp/tmpkpyngja_.swift:21:17:\
    \ error: cannot assign to value: 'min' is a 'let' constant\n                min\
    \ = temp\n                ^~~\n/tmp/tmpkpyngja_.swift:15:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let min = result[index]\n        ^~~\n\
    \        var\n/tmp/tmpkpyngja_.swift:25:17: error: cannot assign to value: 'value'\
    \ is a 'let' constant\n                value = max\n                ^~~~~\n/tmp/tmpkpyngja_.swift:26:17:\
    \ error: cannot assign to value: 'max' is a 'let' constant\n                max\
    \ = temp\n                ^~~\n/tmp/tmpkpyngja_.swift:16:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let max = result[index + 1]\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(min, num)\n        }\n        if num == max {\n      \
    \      result.insert(max, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpesnxm65v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpesnxm65v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int\n    var max: Int\n    var i: Int\n  \
    \  var j: Int\n    for i = 0; i < lst.count; i++ {\n        min = lst[i]\n   \
    \     max = i\n        for j = i + 1; j < lst.count; j++ {\n            if lst[j]\
    \ < min {\n                min = lst[j]\n                max = j\n           \
    \ }\n        }\n        if max != i {\n            swap(&lst[i], &lst[max])\n\
    \        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpnm1_4my8.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < lst.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnm1_4my8.swift:23:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j = i + 1; j < lst.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        let minValue = result[index]\n        for index2 in minIndex..<maxIndex\
    \ {\n            if result[index2] < minValue {\n                minIndex = index2\n\
    \                minValue = result[index2]\n            }\n            if result[index2]\
    \ > maxValue {\n                maxIndex = index2\n                maxValue =\
    \ result[index2]\n            }\n        }\n        let tmp = result[index]\n\
    \        result[index] = result[minIndex]\n        result[minIndex] = tmp\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp05f057pp.swift:20:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index2\n                ^~~~~~~~\n\
    /tmp/tmp05f057pp.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n/tmp/tmp05f057pp.swift:21:17:\
    \ error: cannot assign to value: 'minValue' is a 'let' constant\n            \
    \    minValue = result[index2]\n                ^~~~~~~~\n/tmp/tmp05f057pp.swift:17:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let minValue = result[index]\n\
    \        ^~~\n        var\n/tmp/tmp05f057pp.swift:23:33: error: cannot find 'maxValue'\
    \ in scope\n            if result[index2] > maxValue {\n                     \
    \           ^~~~~~~~\n/tmp/tmp05f057pp.swift:24:17: error: cannot assign to value:\
    \ 'maxIndex' is a 'let' constant\n                maxIndex = index2\n        \
    \        ^~~~~~~~\n/tmp/tmp05f057pp.swift:16:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let maxIndex = index\n        ^~~\n        var\n/tmp/tmp05f057pp.swift:25:17:\
    \ error: cannot find 'maxValue' in scope\n                maxValue = result[index2]\n\
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwxk_v475.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpwxk_v475.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpwxk_v475.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpwxk_v475.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for x in lst {\n        if min\
    \ == nil || x < min {\n            min = x\n        }\n        if max == nil ||\
    \ x > max {\n            max = x\n        }\n    }\n    if min != nil {\n    \
    \    result.insert(min, 0)\n    }\n    if max != nil {\n        result.insert(max,\
    \ result.count - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpbcivd2vy.swift:17:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || x < min {\n\
    \                             ^\n/tmp/tmpbcivd2vy.swift:17:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpbcivd2vy.swift:17:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpbcivd2vy.swift:20:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpbcivd2vy.swift:20:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpbcivd2vy.swift:20:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpbcivd2vy.swift:25:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmpbcivd2vy.swift:25:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmpbcivd2vy.swift:25:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmpbcivd2vy.swift:28:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(max, result.count\
    \ - 1)\n               ^\n/tmp/tmpbcivd2vy.swift:28:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(max, result.count\
    \ - 1)\n               ^\n/tmp/tmpbcivd2v"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        } else\
    \ {\n            result.insert(element, min)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp922lsvv_.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp922lsvv_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for number in lst {\n        if number\
    \ > max {\n            max = number\n        }\n        if number < min {\n  \
    \          min = number\n        }\n    }\n    for number in lst {\n        if\
    \ number > max {\n            max = number\n        }\n        if number < min\
    \ {\n            min = number\n        }\n    }\n    for number in lst {\n   \
    \     if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for number in lst {\n\
    \        if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp05ssy_74.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp05ssy_74.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp05ssy_74.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp05ssy_74.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<(index + 1)] {\n            if value\
    \ < min {\n                result.insert(value, at: index)\n                result.insert(min,\
    \ at: index)\n                result.insert(max, at: index)\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c84293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c83f8a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c83f8a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c83f8a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c83f89bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0c83d89e83 <unavailable> + 188035

    6    tmpj2eqygbr                        0x0000564eaf5e05ad <unavailable> + 9645

    7    tmpj2eqygbr                        0x0000564eaf5df79c <unavailable> + 6044

    8    libc.so.6                          0x00002b0c8447f460 __libc_start_main +
    245

    9    tmpj2eqygbr                        0x0000564eaf5df479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3bi0q64e/tmp3bi0q64e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee7760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee7457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee7457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee74567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bi0q64e                        0x0000556caa135664 <unavailable> + 5732

    5    libc.so.6                          0x00002afee794c460 __libc_start_main +
    245

    6    tmp3bi0q64e                        0x0000556caa135259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = 0\n    var max: Int = 0\n    var minIndex:\
    \ Int = 0\n    var maxIndex: Int = 0\n    for index in 0..<lst.count {\n     \
    \   if min > lst[index] {\n            min = lst[index]\n            minIndex\
    \ = index\n        }\n        if max < lst[index] {\n            max = lst[index]\n\
    \            maxIndex = index\n        }\n    }\n    var result = [Int]()\n  \
    \  for index in minIndex..<maxIndex {\n        result.append(lst[index])\n   \
    \ }\n    for index in maxIndex..<lst.count {\n        result.append(lst[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpno_c0q3k/tmpno_c0q3k.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b377b88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b377b583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b377b583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b377b5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno_c0q3k                        0x000055ce18dcb6c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b377ba78460 __libc_start_main +
    245

    6    tmpno_c0q3k                        0x000055ce18dcb2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwsc8btd2.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpwsc8btd2.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n \
    \   var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp_t4d6o2k.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp_t4d6o2k.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsxovr.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpw_fsxovr.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for x in lst {\n       \
    \ if x < min {\n            min = x\n        }\n        if x > max {\n       \
    \     max = x\n        }\n    }\n    for x in lst {\n        if x == min {\n \
    \           result.insert(x, 0)\n        }\n        if x == max {\n          \
    \  result.insert(x, result.count - 1)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvqil9buc.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvqil9buc.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    var result = [Int]()\n\
    \    for v in lst {\n        if v == min {\n            result.insert(v, min)\n\
    \        }\n        if v == max {\n            result.insert(v, max)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpcxq6a9qk.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpcxq6a9qk.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<index+1] {\n            if value <\
    \ min {\n                result[index] = value\n            }\n            if\
    \ value > max {\n                result[index + 1] = value\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ca1058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ca0d4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ca0d4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ca0d4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ca0d4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ca0b4ee83 <unavailable> + 188035

    6    tmp7mhcinrg                        0x0000564036d385b8 <unavailable> + 9656

    7    tmp7mhcinrg                        0x0000564036d3779c <unavailable> + 6044

    8    libc.so.6                          0x00002b1ca1244460 __libc_start_main +
    245

    9    tmp7mhcinrg                        0x0000564036d37479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqch2ogrk.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpqch2ogrk.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpqch2ogrk.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpqch2ogrk.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqch2ogrk.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwxk_v475.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpwxk_v475.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpwxk_v475.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpwxk_v475.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwxk_v475.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpwxk_v475.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpwxk_v475.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpwxk_v475.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(min, el)\n        }\n        if el == max {\n            result.insert(max,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpycm5vpfg.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, el)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpycm5vpfg.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for num in lst {\n     \
    \   if num < min {\n            min = num\n        }\n        if num > max {\n\
    \            max = num\n        }\n    }\n    for num in lst {\n        if num\
    \ < min {\n            min = num\n        }\n        if num > max {\n        \
    \    max = num\n        }\n    }\n    for num in lst {\n        if num < min {\n\
    \            min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmphwkn9yza.swift:157:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmphwkn9yza.swift:128:20: note: to match\
    \ this opening '{'\n    for num in lst {\n                   ^\n/tmp/tmphwkn9yza.swift:157:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmphwkn9yza.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmphwkn9yza.swift:137:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmphwkn9yza.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var min: Int?\n    var max: Int?\n    for x in lst {\n\
    \        if min == nil || x < min {\n            min = x\n        }\n        if\
    \ max == nil || x > max {\n            max = x\n        }\n    }\n    var result\
    \ = [Int]()\n    if min != nil {\n        result.insert(min, 0)\n    }\n    if\
    \ max != nil {\n        result.insert(max, result.count - 1)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpjyyuezvz.swift:19:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || x < min {\n\
    \                             ^\n/tmp/tmpjyyuezvz.swift:19:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpjyyuezvz.swift:19:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpjyyuezvz.swift:22:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpjyyuezvz.swift:22:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpjyyuezvz.swift:22:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpjyyuezvz.swift:28:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmpjyyuezvz.swift:28:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmpjyyuezvz.swift:28:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmpjyyuezvz.swift:31:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(max, result.count\
    \ - 1)\n               ^\n/tmp/tmpjyyuezvz.swift:31:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(max, result.count\
    \ - 1)\n               ^\n/tmp/tmpjyyuezv"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    var result = [Int]()\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(minValue, value)\n        } else\
    \ if value > maxValue {\n            result.insert(maxValue, value)\n        }\
    \ else {\n            result.insert(value, value)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpf040qkuj.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpf040qkuj.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpf040qkuj.swift:33:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqch2ogrk.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpqch2ogrk.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpqch2ogrk.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpqch2ogrk.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqch2ogrk.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1660028544
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        let middle = min + max / 2\n        result[index] = middle\n \
    \       result[index + 1] = middle\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b808ee4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b808eb45561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b808eb45286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b808eb4513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b808eb44bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b808e944e83 <unavailable> + 188035

    6    tmpib3dpgcq                        0x0000559e172ba382 <unavailable> + 9090

    7    tmpib3dpgcq                        0x0000559e172b957c <unavailable> + 5500

    8    libc.so.6                          0x00002b808f03a460 __libc_start_main +
    245

    9    tmpib3dpgcq                        0x0000559e172b9259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        } else {\n            result.insert(el, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1y9y10ry.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp1y9y10ry.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(value,\
    \ minValue)\n        } else {\n            result.insert(value, maxValue)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpgqxdd98s.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(value, minValue)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpgqxdd98s.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660028545
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj6o_vbpy.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpj6o_vbpy.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpj6o_vbpy.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpj6o_vbpy.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825177
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ max)\n        } else {\n            result.insert(x, min)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv3c3h934.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, max)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv3c3h934.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028545
