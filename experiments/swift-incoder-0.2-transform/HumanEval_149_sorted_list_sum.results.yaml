language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        if res[index].count % 2 == 1 {\n  \
    \          res[index] = res[index].sorted()\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqdi7kbra.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        if word1Length == word2Length {\n            return word1 < word2\n \
    \       }\n        return word1Length < word2Length\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy2aef7dl.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpy2aef7dl.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2aef7dl.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            let index = result.index(of: word)\n            result.remove(at:\
    \ index)\n            result.insert(word, at: index)\n        }\n    }\n    return\
    \ result.sorted(by: { $0.characters.count > $1.characters.count })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpw83iaysq.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpw83iaysq.swift:27:32: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = result.index(of: word)\n\
    \                               ^\n/tmp/tmpw83iaysq.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)\n                  \
    \             ^~~~~\n                               firstIndex\n/tmp/tmpw83iaysq.swift:28:31:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.remove(at: index)\n                              ^\n/tmp/tmpw83iaysq.swift:28:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpw83iaysq.swift:28:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                   !\n/tmp/tmpw83iaysq.swift:29:37: error: value\
    \ of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n            result.insert(word,\
    \ at: index)\n                                    ^\n/tmp/tmpw83iaysq.swift:29:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.insert(word, at: index)\n                        \
    \            ^\n                                          ?? <#default value#>\n\
    /tmp/tmpw83iaysq.swift:29:37: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word,"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var index = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            index\
    \ = result.index(word)\n            result.remove(at: index)\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpce747bg9.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpce747bg9.swift:24:28:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    index = result.index(word)\n                           ^\n/tmp/tmpce747bg9.swift:24:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            index = result.index(word)\n                           ^\n\
    \                                       ?? <#default value#>\n/tmp/tmpce747bg9.swift:24:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            index = result.index(word)\n                           ^\n\
    \                                      !\n/tmp/tmpce747bg9.swift:24:34: error:\
    \ missing argument label 'of:' in call\n            index = result.index(word)\n\
    \                                 ^\n                                 of: \n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count == result.last {\n   \
    \         if word.lowercased() < result.last.lowercased() {\n                result.append(word)\n\
    \                continue\n            }\n            if word.lowercased() > result.last.lowercased()\
    \ {\n                result.append(word)\n                continue\n         \
    \   }\n            if word.lowercased() == result.last.lowercased() {\n      \
    \          if word.lowercased() < result.last.lowercased() {\n               \
    \     result.append(word)\n                    continue\n                }\n \
    \               if word.lowercased() > result.last.lowercased() {\n          \
    \          result.append(word)\n                    continue\n               \
    \ }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzo8bsiro.swift:24:23: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        if word.count > result.last\
    \ {\n                      ^\n/tmp/tmpzo8bsiro.swift:24:23: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        if\
    \ word.count > result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:24:23:\
    \ note: required by operator function '>' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count > result.last {\n          \
    \            ^\n/tmp/tmpzo8bsiro.swift:28:23: error: type '((String) throws ->\
    \ Bool) throws -> String?' cannot conform to 'BinaryInteger'\n        if word.count\
    \ < result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:28:23: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \        if word.count < result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:28:23:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count < result.last {\n          \
    \            ^\n/tmp/tmpzo8bsiro.swift:32:23: error: type '((String) throws ->\
    \ Bool) throws -> String?' cannot conform to 'BinaryInteger'\n        if word.count\
    \ == result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:32:23: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \        if word.count == result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:32:23:\
    \ note: required by operator function '==' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count == result.last {\n         \
    \             ^\n/tmp/tmpzo8bsiro.swift:33:43: error: value of optional type 'String?'\
    \ must be unwrapped to refer to member 'lowercased' of wrapped base type 'String'\n\
    \            if word.lowercased() < result.last.lowercased() {\n             \
    \                             ^\n/tmp/tmpzo8bsiro.swift:33:43: note: chain the\
    \ optional using '?' to access member 'lowercased' only for non-'nil' base v"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        if result[index!].characters.count <\
    \ word.characters.count {\n            result[index!] = word\n        }\n    }\n\
    \    return result.sorted(by: { $0.characters.count > $1.characters.count })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4yxwx1h3.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmp4yxwx1h3.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp4yxwx1h3.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:36:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:36:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        if word1Length == word2Length {\n            return word1 < word2\n \
    \       }\n        return word1Length < word2Length\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy2aef7dl.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpy2aef7dl.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2aef7dl.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var words = [String]()\n    for word in lst {\n        if words.count\
    \ > 0 {\n            if word.count > words.last {\n                words.append(word)\n\
    \            } else {\n                let index = words.index(of: word)\n   \
    \             result.append(words[index])\n                words.remove(at: index)\n\
    \            }\n        } else {\n            words.append(word)\n        }\n\
    \    }\n    for word in words {\n        result.append(word)\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7qvmw6mr.swift:22:27: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n            if word.count > words.last\
    \ {\n                          ^\n/tmp/tmp7qvmw6mr.swift:22:27: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        \
    \    if word.count > words.last {\n                          ^\n/tmp/tmp7qvmw6mr.swift:22:27:\
    \ note: required by operator function '>' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n            if word.count > words.last {\n       \
    \                   ^\n/tmp/tmp7qvmw6mr.swift:25:35: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n                let index = words.index(of:\
    \ word)\n                                  ^\n/tmp/tmp7qvmw6mr.swift:25:35: note:\
    \ use 'firstIndex(of:)' instead\n                let index = words.index(of: word)\n\
    \                                  ^~~~~\n                                  firstIndex\n\
    /tmp/tmp7qvmw6mr.swift:26:37: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.append(words[index])\n                 \
    \                   ^\n/tmp/tmp7qvmw6mr.swift:26:37: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n              \
    \  result.append(words[index])\n                                    ^\n      \
    \                                    ?? <#default value#>\n/tmp/tmp7qvmw6mr.swift:26:37:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.append(words[index])\n                       \
    \             ^\n                                         !\n/tmp/tmp7qvmw6mr.swift:27:34:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \        words.remove(at: index)\n                                 ^\n/tmp/tmp7qvmw6mr.swift:27:34:\
    \ note: coalesce using '??' to provide a default w"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3vt5g9ws.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3vt5g9ws.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmp3vt5g9ws.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmp3vt5g9ws.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqtyj3odx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqtyj3odx.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n      \
    \      res.append(word)\n        }\n        i += 1\n    }\n    res.sort()\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpudmz0j6f/tmpudmz0j6f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0025a91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0025788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0025788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00257877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudmz0j6f                        0x00005628f3ffa8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b0025c7d460 __libc_start_main +
    245

    6    tmpudmz0j6f                        0x00005628f3ffa439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ > result.count {\n            result = result.sorted{ $0.characters.count <\
    \ $1.characters.count }\n        }\n        result.append(word)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7yhxd72d.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7yhxd72d.swift:27:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > result.count {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7yhxd72d.swift:28:40: error: 'characters' is unavailable:\
    \ Please use String directly\n            result = result.sorted{ $0.characters.count\
    \ < $1.characters.count }\n                                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7yhxd72d.swift:28:62:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result = result.sorted{ $0.characters.count < $1.characters.count }\n      \
    \                                                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.insert(word, at: 0)\n    }\n  \
    \  return result.sorted(by: { (word1, word2) -> Bool in\n        return word1.characters.count\
    \ < word2.characters.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfyp19ppi.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfyp19ppi.swift:29:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfyp19ppi.swift:29:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result.sorted(by: { (word1, word2)\
    \ -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp70jg2oxa.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp70jg2oxa.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp70jg2oxa.swift:26:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpc6d9p83c.swift:25:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        let prevWord = result[index! - 1]\n\
    \        if prevWord.characters.count < word.characters.count {\n            result[index!]\
    \ = word\n        } else {\n            result[index!] = prevWord\n        }\n\
    \    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnfdt7vjx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpnfdt7vjx.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpnfdt7vjx.swift:33:21:\
    \ error: 'characters' is unavailable: Please use String directly\n        if prevWord.characters.count\
    \ < word.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:33:45: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prevWord.characters.count\
    \ < word.characters.count {\n                                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:39:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:39:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        let length = word.length\n        if length%2 == 1 {\n   \
    \         res.append(word)\n            continue\n        }\n        let index\
    \ = res.index(of: word)\n        if index != nil {\n            let prevWord =\
    \ res[index!-1]\n            let prevLength = prevWord.length\n            if\
    \ prevLength == length {\n                res[index!-1] = prevWord + word\n  \
    \          } else {\n                res[index!-1] = prevWord + word.substring(from:\
    \ 0)\n            }\n        } else {\n            res.append(word)\n        }\n\
    \    }\n    return res.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.length < word2.length\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqc2pgeul.swift:23:27: error: value of type 'String' has no member\
    \ 'length'\n        let length = word.length\n                     ~~~~ ^~~~~~\n\
    /tmp/tmpqc2pgeul.swift:28:25: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n        let index = res.index(of: word)\n               \
    \         ^\n/tmp/tmpqc2pgeul.swift:28:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = res.index(of: word)\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmpqc2pgeul.swift:31:39: error: value of\
    \ type 'String' has no member 'length'\n            let prevLength = prevWord.length\n\
    \                             ~~~~~~~~ ^~~~~~\n/tmp/tmpqc2pgeul.swift:35:49: error:\
    \ value of type 'String' has no member 'substring'\n                res[index!-1]\
    \ = prevWord + word.substring(from: 0)\n                                     \
    \      ~~~~ ^~~~~~~~~\n/tmp/tmpqc2pgeul.swift:42:22: error: value of type 'String'\
    \ has no member 'length'\n        return word1.length < word2.length\n       \
    \        ~~~~~ ^~~~~~\n/tmp/tmpqc2pgeul.swift:42:37: error: value of type 'String'\
    \ has no member 'length'\n        return word1.length < word2.length\n       \
    \                       ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \          continue\n        }\n        let index = lst.index(of: word)\n    \
    \    if index == nil {\n            result.insert(word, at: 0)\n            continue\n\
    \        }\n        let nextWord = lst[index! + 1]\n        let nextWordLength\
    \ = nextWord.characters.count\n        if nextWordLength % 2 == 1 {\n        \
    \    result.insert(word, at: 0)\n            continue\n        }\n        if wordLength\
    \ < nextWordLength {\n            result.insert(word, at: 0)\n            continue\n\
    \        }\n        result.insert(nextWord, at: 0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoa9mu9m5.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpoa9mu9m5.swift:28:25: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = lst.index(of: word)\n    \
    \                    ^\n/tmp/tmpoa9mu9m5.swift:28:25: note: use 'firstIndex(of:)'\
    \ instead\n        let index = lst.index(of: word)\n                        ^~~~~\n\
    \                        firstIndex\n/tmp/tmpoa9mu9m5.swift:34:39: error: 'characters'\
    \ is unavailable: Please use String directly\n        let nextWordLength = nextWord.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 1].count {\n            result.append(word)\n      \
    \      continue\n        }\n        if word.count < result[result.count - 1].count\
    \ {\n            result[result.count - 1] = word\n            continue\n     \
    \   }\n        if word.count > result[result.count - 1].count {\n            result[result.count\
    \ - 1] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 1].count {\n            result[result.count - 1] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 1].count {\n       \
    \     result[result.count - 1] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 1].count {\n            result[result.count\
    \ - 1] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 1].count {\n            result[result.count - 1] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 1].count {\n       \
    \     result[result.count - 1] = word\n            continue\n        }\n     \
    \   if word.count > result[result.count - 1].count {\n            result[result.count\
    \ - 1] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 1].count {\n            result[result.count - 1] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 1].count {\n       \
    \     result[result.count - 1] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 1].count {\n            result[result.count\
    \ - 1] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 1].count {\n            result[result.count - 1] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 1].count {\n       \
    \     result[result.count - 1] = word\n            continue\n        }\n     \
    \   if word.count > result[result.count - 1].count {\n            result[result.count\
    \ - 1] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 1].count {\n            result[result.count - 1] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 1].count {\n       \
    \     result[result.count - 1] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 1].count {\n            result[result.count\
    \ - 1] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 1].count {\n            result[result.count - 1] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 1].count {\n       \
    \     result[result.count - 1] = word\n            continue\n        }\n     \
    \   if word.count > result[result.count - 1].\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpid19es2b.swift:104:49: error: expected member name following '.'\n\
    \        if word.count > result[result.count - 1].\n                         \
    \                       ^\n/tmp/tmpid19es2b.swift:104:50: error: expected '{'\
    \ after 'if' condition\n        if word.count > result[result.count - 1].\n  \
    \                                               ^\n/tmp/tmpid19es2b.swift:126:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmpid19es2b.swift:17:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmpid19es2b.swift:108:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                for i in 0..<result.count {\n         \
    \           if word.count > result[i].count {\n                        result[i]\
    \ = word\n                        break\n                    }\n             \
    \   }\n            }\n        } else {\n            result.append(word)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpfn90_xvz/tmpfn90_xvz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f81701c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f813f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f813f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f813f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn90_xvz                        0x000055d6f76cda36 <unavailable> + 6710

    5    libc.so.6                          0x00002b3f818ed460 __libc_start_main +
    245

    6    tmpfn90_xvz                        0x000055d6f76cd5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmptcibovav.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpizbsxxw_/tmpizbsxxw_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2394023c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2393d1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2393d1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2393d197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizbsxxw_                        0x00005618925ca916 <unavailable> + 6422

    5    libc.so.6                          0x00002b239420f460 __libc_start_main +
    245

    6    tmpizbsxxw_                        0x00005618925ca499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count > $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnvy620ey.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnvy620ey.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[0].count {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count < result[1].count {\n            result[1] =\
    \ word\n            continue\n        }\n        if word.count > result[2].count\
    \ {\n            result[2] = word\n            continue\n        }\n        if\
    \ word.count < result[3].count {\n            result[3] = word\n            continue\n\
    \        }\n        if word.count > result[4].count {\n            result[4] =\
    \ word\n            continue\n        }\n        if word.count < result[5].count\
    \ {\n            result[5] = word\n            continue\n        }\n        if\
    \ word.count > result[6].count {\n            result[6] = word\n            continue\n\
    \        }\n        if word.count < result[7].count {\n            result[7] =\
    \ word\n            continue\n        }\n        if word.count > result[8].count\
    \ {\n            result[8] = word\n            continue\n        }\n        if\
    \ word.count < result[9].count {\n            result[9] = word\n            continue\n\
    \        }\n        if word.count > result[10].count {\n            result[10]\
    \ = word\n            continue\n        }\n        if word.count < result[11].count\
    \ {\n            result[11] = word\n            continue\n        }\n        if\
    \ word.count > result[12].count {\n            result[12] = word\n           \
    \ continue\n        }\n        if word.count < result[13].count {\n          \
    \  result[13] = word\n            continue\n        }\n        if word.count >\
    \ result[14].count {\n            result[14] = word\n            continue\n  \
    \      }\n        if word.count < result[15].count {\n            result[15] =\
    \ word\n            continue\n        }\n        if word.count > result[16].count\
    \ {\n            result[16] = word\n            continue\n        }\n        if\
    \ word.count < result[17].count {\n            result[17] = word\n           \
    \ continue\n        }\n        if word.count > result[18].count {\n          \
    \  result[18] = word\n            continue\n        }\n        if word.count <\
    \ result[19].count {\n            result[19] = word\n            continue\n  \
    \      }\n        if word.count > result[20].count {\n            result[20] =\
    \ word\n            continue\n        }\n        if word.count < result[21].count\
    \ {\n            result[21] = word\n            continue\n        }\n        if\
    \ word.count > result[22].count {\n            result[22] = word\n           \
    \ continue\n        }\n        if word.count < result[23].count {\n          \
    \  result[23] = word\n            continue\n        }\n        if word.count >\
    \ result[24].count {\n            result[24] = word\n            continue\n  \
    \      }\n        if word.count < result[\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpia_d1r4r.swift:125:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpia_d1r4r.swift:146:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpia_d1r4r.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpia_d1r4r.swift:124:31:\
    \ error: missing argument for parameter #1 in call\n        if word.count < result[\n\
    \                              ^\n                              <#Int#>\nSwift.Array:16:23:\
    \ note: 'subscript(_:)' declared here\n    @inlinable public subscript(index:\
    \ Int) -> Element { get set }\n                      ^\n/tmp/tmpia_d1r4r.swift:124:23:\
    \ error: binary operator '<' cannot be applied to operands of type 'Int' and 'String'\n\
    \        if word.count < result[\n           ~~~~~~~~~~ ^ ~~~~~~~\n/tmp/tmpia_d1r4r.swift:124:23:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (Int, Int), (String, String)\n        if word.count < result[\n            \
    \          ^\n/tmp/tmpia_d1r4r.swift:128:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.remove(at: index)\n        }\n    }\n    return result.sorted(by:\
    \ { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b84c87a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84c849f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b84c849f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b84c849f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b84c849ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b84c829efc3 <unavailable> + 188355

    6    tmp1_tit1rp                        0x0000556c94a0d79e <unavailable> + 10142

    7    tmp1_tit1rp                        0x0000556c94a0c79d <unavailable> + 6045

    8    libc.so.6                          0x00002b84c8994460 __libc_start_main +
    245

    9    tmp1_tit1rp                        0x0000556c94a0c419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoy_jvmg0.swift:26:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        let word = res[index]\n        if word.characters.count\
    \ % 2 == 1 {\n            res.remove(at: index)\n        }\n    }\n    return\
    \ res.sorted(by: { (word1, word2) -> Bool in\n        return word1.characters.count\
    \ < word2.characters.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnes3ccbv.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnes3ccbv.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnes3ccbv.swift:26:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        if word1Length > word2Length {\n            return true\n        } else\
    \ if word1Length < word2Length {\n            return false\n        } else {\n\
    \            return word1 < word2\n        }\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpfcv6a0hc.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfcv6a0hc.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfcv6a0hc.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        var newWord\
    \ = word\n        for char in word.characters {\n            if newWord.characters.contains(char)\
    \ {\n                newWord = newWord.stringByReplacingCharactersInRange(\n \
    \                   NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n            }\n        }\n        if newWord.characters.count % 2 == 1 {\n\
    \            result.append(newWord)\n            continue\n        }\n       \
    \ newWord = word\n        for char in newWord.characters {\n            if word.characters.contains(char)\
    \ {\n                newWord = newWord.stringByReplacingCharactersInRange(\n \
    \                   NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n            }\n        }\n        if newWord.characters.count % 2 == 1 {\n\
    \            result.append(newWord)\n            continue\n        }\n       \
    \ newWord = word\n        for char in newWord.characters {\n            if newWord.characters.contains(char)\
    \ {\n                newWord = newWord.stringByReplacingCharactersInRange(\n \
    \                   NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n            }\n        }\n        if newWord.characters.count % 2 == 1 {\n\
    \            result.append(newWord)\n            continue\n        }\n       \
    \ newWord = word\n        for char in newWord.characters {\n            if newWord.characters.contains(char)\
    \ {\n                newWord = newWord.stringByReplacingCharactersInRange(\n \
    \                   NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n            }\n        }\n        if newWord.characters.count % 2 == 1 {\n\
    \            result.append(newWord)\n            continue\n        }\n       \
    \ newWord = word\n        for char in newWord.characters {\n            if newWord.characters.contains(char)\
    \ {\n                newWord = newWord.stringByReplacingCharactersInRange(\n \
    \                   NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n            }\n        }\n        if newWord.characters.count % 2 == 1 {\n\
    \            result.append(newWord)\n            continue\n        }\n       \
    \ newWord = word\n        for char in newWord.characters {\n            if newWord.characters.contains(char)\
    \ {\n                newWord = newWord.stringByReplacingCharactersInRange(\n \
    \                   NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n            }\n        }\n        if newWord.characters.count % 2 == 1 {\n\
    \            result.append(newWord)\n            continue\n        }\n       \
    \ newWord = word\n        for char in newWord.characters {\n            if \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmph21ljlxp.swift:95:15: error: expected expression, var, or let in\
    \ 'if' condition\n            if \n              ^\n/tmp/tmph21ljlxp.swift:117:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmph21ljlxp.swift:19:21: note: to match this opening '{'\n\
    \    for word in lst {\n                    ^\n/tmp/tmph21ljlxp.swift:117:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmph21ljlxp.swift:17:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmph21ljlxp.swift:23:17: error: 'characters' is\
    \ unavailable: Please use String directly\n        if word.characters.count %\
    \ 2 == 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph21ljlxp.swift:28:26: error: 'characters' is unavailable:\
    \ Please use String directly\n        for char in word.characters {\n        \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmph21ljlxp.swift:29:24: error: 'characters' is unavailable: Please\
    \ use String directly\n            if newWord.characters.contains(char) {\n  \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmph21ljlxp.swift:31:21: error: cannot find 'NSMakeRange' in scope\n\
    \                    NSMakeRange(0, newWord.characters.count), withString: \"\"\
    )\n                    ^~~~~~~~~~~\n/tmp/tmph21ljlxp.swift:30:35: error: value\
    \ of type 'String' has n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        if let\
    \ index = result.index(of: word) {\n            result[index] = word\n       \
    \     continue\n        }\n        if let index = result.index(of: word.prefix(upTo:\
    \ word.characters.count - 1)) {\n            result[index] = word\n          \
    \  continue\n        }\n        if let index = result.index(of: word.suffix(from:\
    \ word.characters.count - 1)) {\n            result[index] = word\n          \
    \  continue\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp6iex7i6o.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6iex7i6o.swift:27:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmp6iex7i6o.swift:27:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmp6iex7i6o.swift:31:46: error: cannot convert value of type\
    \ 'String.SubSequence' (aka 'Substring') to expected argument type 'String'\n\
    \        if let index = result.index(of: word.prefix(upTo: word.characters.count\
    \ - 1)) {\n                                             ^\n                  \
    \                      String(                                     )\n/tmp/tmp6iex7i6o.swift:31:81:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        if let index = result.index(of: word.prefix(upTo: word.characters.count\
    \ - 1)) {\n                                                                  \
    \              ^\n/tmp/tmp6iex7i6o.swift:35:46: error: cannot convert value of\
    \ type 'String.SubSequence' (aka 'Substring') to expected argument type 'String'\n\
    \        if let index = result.index(of: word.suffix(from: word.characters.count\
    \ - 1)) {\n                                             ^\n                  \
    \                      String(                                     )\n/tmp/tmp6iex7i6o.swift:35:81:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        if let index = result.index(of: word.suffix(from: word.characters.count\
    \ - 1)) {\n                                                                  \
    \              ^\n/tmp/tmp6iex7i6o.swift:40:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    retu"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let length = word.characters.count\n   \
    \     if length % 2 == 1 {\n            result.insert(word, at: 0)\n        }\
    \ else {\n            result.insert(word, at: result.index(of: word))\n      \
    \  }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp44x2p7d2.swift:23:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp44x2p7d2.swift:27:44: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(word, at: result.index(of: word))\n \
    \                                          ^\n/tmp/tmp44x2p7d2.swift:27:44: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result.insert(word, at: result.index(of: word))\n               \
    \                            ^\n                                             \
    \              ?? <#default value#>\n/tmp/tmp44x2p7d2.swift:27:44: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n                                                     \
    \     !\n/tmp/tmp44x2p7d2.swift:30:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp44x2p7d2.swift:30:57: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.sorted(by:\
    \ { (a, b) -> Bool in\n        if a.count > b.count {\n            return true\n\
    \        }\n        if a.count < b.count {\n            return false\n       \
    \ }\n        return a.lowercased() < b.lowercased()\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpv94c63kn/tmpv94c63kn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5777f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5774e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5774e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5774e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv94c63kn                        0x000055a2b1c4d6b6 <unavailable> + 5814

    5    libc.so.6                          0x00002af5779de460 __libc_start_main +
    245

    6    tmpv94c63kn                        0x000055a2b1c4d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newLst =\
    \ [String]()\n    var newLst2 = []\n    for word in lst {\n        if newLst.contains(word)\
    \ {\n            newLst2.append(word)\n        } else {\n            newLst.append(word)\n\
    \        }\n    }\n    newLst2.sort()\n    return newLst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpg9hrnjkv.swift:19:19: error: empty collection literal requires\
    \ an explicit type\n    var newLst2 = []\n                  ^~\n/tmp/tmpg9hrnjkv.swift:27:5:\
    \ error: type 'Any' cannot conform to 'Comparable'\n    newLst2.sort()\n    ^\n\
    /tmp/tmpg9hrnjkv.swift:27:5: note: only concrete types such as structs, enums\
    \ and classes can conform to protocols\n    newLst2.sort()\n    ^\n/tmp/tmpg9hrnjkv.swift:27:5:\
    \ note: required by referencing instance method 'sort()' on 'MutableCollection'\
    \ where 'Self.Element' = 'Any'\n    newLst2.sort()\n    ^\n/tmp/tmpg9hrnjkv.swift:28:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[String]'\n\
    \    return newLst2\n           ^\n/tmp/tmpg9hrnjkv.swift:28:12: note: arguments\
    \ to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n\
    \    return newLst2\n           ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var index = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.insert(word, at: index)\n        }\n        index\
    \ += 1\n    }\n    result.sort { $0.characters.count < $1.characters.count }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5899b5xp.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5899b5xp.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5899b5xp.swift:26:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.remove(at: index)\n\
    \        }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyyra8mnv.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyyra8mnv.swift:25:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyyra8mnv.swift:25:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        let word = res[index]\n        let\
    \ index = res.index(of: word)\n        if index != nil {\n            let length\
    \ = word.characters.count\n            if length%2 == 1 {\n                res.remove(at:\
    \ index!)\n            } else {\n                res[index!] = word\n        \
    \    }\n        }\n    }\n    return res.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptyv3ss1c.swift:21:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = res.index(of: word)\n            \
    \            ^\n/tmp/tmptyv3ss1c.swift:21:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = res.index(of: word)\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmptyv3ss1c.swift:23:31: error: 'characters'\
    \ is unavailable: Please use String directly\n            let length = word.characters.count\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptyv3ss1c.swift:31:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptyv3ss1c.swift:31:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.sort()\n\
    \        }\n        result.append(word)\n    }\n    if result.count > 0 {\n  \
    \      result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp5nnigzyx/tmp5nnigzyx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab20f18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab20c0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab20c0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab20c0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nnigzyx                        0x0000562d5a9cc946 <unavailable> + 6470

    5    libc.so.6                          0x00002aab21104460 __libc_start_main +
    245

    6    tmp5nnigzyx                        0x0000562d5a9cc4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb1k0yo9d.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpb1k0yo9d.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpb1k0yo9d.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpb1k0yo9d.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpb1k0yo9d.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpb1k0yo9d.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpb1k0yo9d.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpb1k0yo9d.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var sortedList = lst\n    \n    for word in sortedList {\n \
    \       if word.count % 2 == 1 {\n            result.append(word)\n        }\n\
    \    }\n    \n    result.sort { (word1, word2) -> Bool in\n        return word1.count\
    \ < word2.count\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpil0d06de/tmpil0d06de.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b998cb42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b998c839b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b998c839988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b998c8387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpil0d06de                        0x0000562f934108c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b998cd2e460 __libc_start_main +
    245

    6    tmpil0d06de                        0x0000562f93410449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        if let\
    \ index = result.index(of: word) {\n            result[index] = word\n       \
    \ }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9ucd5wgq.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9ucd5wgq.swift:27:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmp9ucd5wgq.swift:27:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmp9ucd5wgq.swift:31:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp9ucd5wgq.swift:31:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index != nil {\n            result[index]\
    \ = word\n            continue\n        }\n        result.insert(word, at: 0)\n\
    \    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpcggjtweg.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpcggjtweg.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpcggjtweg.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpcggjtweg.swift:29:20:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result[index] = word\n                   ^\n/tmp/tmpcggjtweg.swift:29:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[index] = word\n                   ^\n            \
    \             ?? <#default value#>\n/tmp/tmpcggjtweg.swift:29:20: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result[index] = word\n                   ^\n                        !\n/tmp/tmpcggjtweg.swift:34:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpcggjtweg.swift:34:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { $0.count < $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_sczw8ci.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmp_sczw8ci.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmp_sczw8ci.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmp_sczw8ci.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmp_sczw8ci.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmp_sczw8ci.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmp_sczw8ci.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmp_sczw8ci.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyr7q57bu.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpyr7q57bu.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpyr7q57bu.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpyr7q57bu.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpyr7q57bu.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpyr7q57bu.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpyr7q57bu.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpyr7q57bu.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var seen = [String]()\n    for word in lst {\n        if seen.contains(word)\
    \ {\n            continue\n        }\n        seen.insert(word)\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4_re406n.swift:24:25: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(word)\n                        ^\n            \
    \            , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwm8hl_h1.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqtyj3odx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqtyj3odx.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              let index = result.index(of: word)\n                result.remove(at:\
    \ index)\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0s6edabo.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmp0s6edabo.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmp0s6edabo.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmp0s6edabo.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmp0s6edabo.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmp0s6edabo.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmp0s6edabo.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmp0s6edabo.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.sort()\n\
    \        }\n        result.append(word)\n    }\n    if result.count > 0 {\n  \
    \      result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp5nnigzyx/tmp5nnigzyx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab20f18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab20c0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab20c0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab20c0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nnigzyx                        0x0000562d5a9cc946 <unavailable> + 6470

    5    libc.so.6                          0x00002aab21104460 __libc_start_main +
    245

    6    tmp5nnigzyx                        0x0000562d5a9cc4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdpxlxqyy.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdpxlxqyy.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        result.remove(at: index)\n        result.insert(word,\
    \ at: index)\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpalg54ld2.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpalg54ld2.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpalg54ld2.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpalg54ld2.swift:28:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmpalg54ld2.swift:28:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result.remove(at: index)\n                          ^\n                \
    \                ?? <#default value#>\n/tmp/tmpalg54ld2.swift:28:27: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.remove(at:\
    \ index)\n                          ^\n                               !\n/tmp/tmpalg54ld2.swift:29:33:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.insert(word,\
    \ at: index)\n                                ^\n/tmp/tmpalg54ld2.swift:29:33:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                      ?? <#default value#>\n/tmp/tmpalg54ld2.swift:29:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                     !\n/tmp/tmp"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var words = [String]()\n    for word in lst {\n        if words.count\
    \ > 0 {\n            if word.count > words[0].count {\n                result.appendContentsOf(words)\n\
    \                words = [String]()\n            }\n        }\n        words.append(word)\n\
    \    }\n    if words.count > 0 {\n        result.appendContentsOf(words)\n   \
    \ }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpfi_20wms.swift:23:24: error: value of type '[String]' has no member\
    \ 'appendContentsOf'\n                result.appendContentsOf(words)\n       \
    \         ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfi_20wms.swift:30:16: error: value\
    \ of type '[String]' has no member 'appendContentsOf'\n        result.appendContentsOf(words)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in result {\n        word.sort()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyadya_hw.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyadya_hw.swift:28:14:\
    \ error: value of type 'String' has no member 'sort'\n        word.sort()\n  \
    \      ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbc4nw8t3.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpbc4nw8t3.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpbc4nw8t3.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpbc4nw8t3.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpbc4nw8t3.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpfu8pggot.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfu8pggot.swift:30:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfu8pggot.swift:30:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.swapAt(index, index + 1)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpv4o85rdr.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.remove(at: index)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab92bed1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab92bbc8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab92bbc8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab92bbc813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab92bbc7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab92b9c7fc3 <unavailable> + 188355

    6    tmpxshzd16v                        0x00005574fe89270c <unavailable> + 9996

    7    tmpxshzd16v                        0x00005574fe89172d <unavailable> + 5933

    8    libc.so.6                          0x00002ab92c0bd460 __libc_start_main +
    245

    9    tmpxshzd16v                        0x00005574fe8913a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var index = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.insert(index,\
    \ word)\n            index += 1\n        }\n    }\n    result.sort { $0.characters.count\
    \ < $1.characters.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqf1x_ai9.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqf1x_ai9.swift:24:26:\
    \ error: missing argument labels 'contentsOf:at:' in call\n            result.insert(index,\
    \ word)\n                         ^\n                          contentsOf:  at:\
    \ \n/tmp/tmpqf1x_ai9.swift:24:34: error: cannot convert value of type 'String'\
    \ to expected argument type 'Array<String>.Index' (aka 'Int')\n            result.insert(index,\
    \ word)\n                                 ^\n/tmp/tmpqf1x_ai9.swift:24:13: error:\
    \ instance method 'insert(contentsOf:at:)' requires that 'Int' conform to 'Collection'\n\
    \            result.insert(index, word)\n            ^\nSwift.RangeReplaceableCollection:7:37:\
    \ note: where 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf\
    \ newElements: __owned C, at i: Self.Index) where C : Collection, Self.Element\
    \ == C.Element\n                                    ^\n/tmp/tmpqf1x_ai9.swift:28:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqf1x_ai9.swift:28:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newLst =\
    \ [String]()\n    for word in lst {\n        if newLst.contains(word) {\n    \
    \        continue\n        }\n        newLst.insert(word, word)\n    }\n    newLst.sort(byLength)\n\
    \    return newLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpayc7pe7j.swift:23:16: error: no exact matches in call to instance\
    \ method 'insert'\n        newLst.insert(word, word)\n               ^\n/tmp/tmpayc7pe7j.swift:23:16:\
    \ note: candidate has partially matching parameter list (__owned String, at: Int)\n\
    \        newLst.insert(word, word)\n               ^\n/tmp/tmpayc7pe7j.swift:23:16:\
    \ note: candidate has partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \        newLst.insert(word, word)\n               ^\n/tmp/tmpayc7pe7j.swift:25:17:\
    \ error: cannot find 'byLength' in scope\n    newLst.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmpayc7pe7j.swift:25:17: error: missing argument label\
    \ 'by:' in call\n    newLst.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmpayc7pe7j.swift:25:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    newLst.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for s in lst {\n        if res == nil {\n            res = s\n   \
    \     } else {\n            if s.count > res!.count {\n                res = s\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpcj0kwmhy.swift:20:16: warning: comparing non-optional value of\
    \ type '[String]' to 'nil' always returns false\n        if res == nil {\n   \
    \        ~~~ ^  ~~~\n/tmp/tmpcj0kwmhy.swift:21:19: error: cannot assign value\
    \ of type 'String' to type '[String]'\n            res = s\n                 \
    \ ^\n/tmp/tmpcj0kwmhy.swift:23:29: error: cannot force unwrap value of non-optional\
    \ type '[String]'\n            if s.count > res!.count {\n                   \
    \      ~~~^\n                            \n/tmp/tmpcj0kwmhy.swift:24:23: error:\
    \ cannot assign value of type 'String' to type '[String]'\n                res\
    \ = s\n                      ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpc6d9p83c.swift:25:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        let wordLen = word.characters.count\n        if wordLen %\
    \ 2 == 1 {\n            res.append(word)\n            continue\n        }\n  \
    \      let lastWord = res.last\n        if lastWord.characters.count == wordLen\
    \ {\n            res.append(word)\n            continue\n        }\n        if\
    \ lastWord.characters.count < wordLen {\n            res.append(lastWord)\n  \
    \          res.append(word)\n            continue\n        }\n        if lastWord.characters.count\
    \ > wordLen {\n            res.append(lastWord)\n            res.append(word)\n\
    \            continue\n        }\n        if lastWord.characters.count == wordLen\
    \ {\n            res.append(lastWord)\n            res.append(word)\n        \
    \    continue\n        }\n        if lastWord.characters.count < wordLen {\n \
    \           res.append(lastWord)\n            res.append(word)\n            continue\n\
    \        }\n        if lastWord.characters.count > wordLen {\n            res.append(lastWord)\n\
    \            res.append(word)\n            continue\n        }\n        if lastWord.characters.count\
    \ == wordLen {\n            res.append(lastWord)\n            res.append(word)\n\
    \            continue\n        }\n        if lastWord.characters.count < wordLen\
    \ {\n            res.append(lastWord)\n            res.append(word)\n        \
    \    continue\n        }\n        if lastWord.characters.count > wordLen {\n \
    \           res.append(lastWord)\n            res.append(word)\n            continue\n\
    \        }\n        if lastWord.characters.count == wordLen {\n            res.append(lastWord)\n\
    \            res.append(word)\n            continue\n        }\n        if lastWord.characters.count\
    \ < wordLen {\n            res.append(lastWord)\n            res.append(word)\n\
    \            continue\n        }\n        if lastWord.characters.count > wordLen\
    \ {\n            res.append(lastWord)\n            res.append(word)\n        \
    \    continue\n        }\n        if lastWord.characters.count == wordLen {\n\
    \            res.append(lastWord)\n            res.append(word)\n            continue\n\
    \        }\n        if lastWord.characters.count < wordLen {\n            res.append(lastWord)\n\
    \            res.append(word)\n            continue\n        }\n        if lastWord.characters.count\
    \ > wordLen {\n            res.append(lastWord)\n            res.append(word)\n\
    \            continue\n        }\n        if lastWord.characters.count == wordLen\
    \ {\n            res.append(lastWord)\n            res.append(word)\n        \
    \    continue\n        }\n        if lastWord.characters.count < wordLen {\n \
    \           res.append(lastWord)\n            res.append(word)\n            continue\n\
    \        }\n        if lastWord.characters.count > wordLen {\n            res.append(lastWord)\n\
    \            res.append(word)\n            continue\n        }\n        if lastWord.characters.count\
    \ == wordLen {\n            res.append(lastWord)\n            res.append(word)\n\
    \            continue\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpeqnyo32j.swift:144:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpeqnyo32j.swift:19:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmpeqnyo32j.swift:144:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpeqnyo32j.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpeqnyo32j.swift:23:28:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ wordLen = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpeqnyo32j.swift:29:12: error: value of\
    \ optional type 'String?' must be unwrapped to refer to member 'characters' of\
    \ wrapped base type 'String'\n        if lastWord.characters.count == wordLen\
    \ {\n           ^\n/tmp/tmpeqnyo32j.swift:29:12: note: chain the optional using\
    \ '?' to access member 'characters' only for non-'nil' base values\n        if\
    \ lastWord.characters.count == wordLen {\n           ^\n                   ?\n\
    /tmp/tmpeqnyo32j.swift:29:12: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if lastWord.characters.count ==\
    \ wordLen {\n           ^\n                   !\n/tmp/tmpeqnyo32j.swift:33:12:\
    \ error: value of optional type 'String?' must be unwrapped to refer to member\
    \ 'characters' of wrapped base type 'String'\n        if lastWord.characters.count\
    \ < wordLen {\n           ^\n/tmp/tmpeqnyo32j.swift:33:12: note: chain the optional\
    \ using '?' to access member 'characters' only for non-'nil' base valu"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdpxlxqyy.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdpxlxqyy.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbc4nw8t3.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpbc4nw8t3.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpbc4nw8t3.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpbc4nw8t3.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpbc4nw8t3.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        if res[index].count % 2 == 1 {\n  \
    \          res[index] = res[index].sorted()\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqdi7kbra.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        if let\
    \ index = result.index(of: word) {\n            result[index] = word\n       \
    \ }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9ucd5wgq.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9ucd5wgq.swift:27:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmp9ucd5wgq.swift:27:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmp9ucd5wgq.swift:31:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp9ucd5wgq.swift:31:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.sorted(by:\
    \ { (word1, word2) -> Bool in\n        let len1 = word1.characters.count\n   \
    \     let len2 = word2.characters.count\n        return len1 < len2\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpo20tb3l9.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len1 = word1.characters.count\n           \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo20tb3l9.swift:20:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len2 = word2.characters.count\n           \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb1k0yo9d.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpb1k0yo9d.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpb1k0yo9d.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpb1k0yo9d.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpb1k0yo9d.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpb1k0yo9d.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpb1k0yo9d.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpb1k0yo9d.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        res.append(word)\n    }\n    res.sortInPlace()\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8k31t5d2.swift:25:9: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    res.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        if str.characters.count % 2 == 1 {\n            res.append(str)\n\
    \            continue\n        }\n        let index = str.characters.count - 1\n\
    \        let lastIndex = str.characters.count - 2\n        let lastChar = str.characters[index]\n\
    \        let lastChar2 = str.characters[lastIndex]\n        if lastChar == lastChar2\
    \ {\n            res.append(str)\n            continue\n        }\n        let\
    \ firstChar = str.characters[0]\n        let lastChar3 = str.characters[lastIndex]\n\
    \        if lastChar3 == firstChar {\n            res.append(str)\n          \
    \  continue\n        }\n        let firstChar2 = str.characters[0]\n        let\
    \ lastChar4 = str.characters[lastIndex]\n        if lastChar4 == firstChar2 {\n\
    \            res.append(str)\n            continue\n        }\n        let firstChar3\
    \ = str.characters[0]\n        let lastChar5 = str.characters[lastIndex]\n   \
    \     if lastChar5 == firstChar3 {\n            res.append(str)\n            continue\n\
    \        }\n        let firstChar4 = str.characters[0]\n        let lastChar6\
    \ = str.characters[lastIndex]\n        if lastChar6 == firstChar4 {\n        \
    \    res.append(str)\n            continue\n        }\n        let firstChar5\
    \ = str.characters[0]\n        let lastChar7 = str.characters[lastIndex]\n   \
    \     if lastChar7 == firstChar5 {\n            res.append(str)\n            continue\n\
    \        }\n        let firstChar6 = str.characters[0]\n        let lastChar8\
    \ = str.characters[lastIndex]\n        if lastChar8 == firstChar6 {\n        \
    \    res.append(str)\n            continue\n        }\n        let firstChar7\
    \ = str.characters[0]\n        let lastChar9 = str.characters[lastIndex]\n   \
    \     if lastChar9 == firstChar7 {\n            res.append(str)\n            continue\n\
    \        }\n        let firstChar8 = str.characters[0]\n        let lastChar10\
    \ = str.characters[lastIndex]\n        if lastChar10 == firstChar8 {\n       \
    \     res.append(str)\n            continue\n        }\n        let firstChar9\
    \ = str.characters[0]\n        let lastChar11 = str.characters[lastIndex]\n  \
    \      if lastChar11 == firstChar9 {\n            res.append(str)\n          \
    \  continue\n        }\n        let firstChar10 = str.characters[0]\n        let\
    \ lastChar12 = str.characters[lastIndex]\n        if lastChar12 == firstChar10\
    \ {\n            res.append(str)\n            continue\n        }\n        let\
    \ firstChar11 = str.characters[0]\n        let lastChar13 = str.characters[lastIndex]\n\
    \        if lastChar13 == firstChar11 {\n            res.append(str)\n       \
    \     continue\n        }\n        let firstChar12 = str.characters[0]\n     \
    \   let lastChar14 = str.characters[lastIndex]\n        if lastChar14 == firstChar12\
    \ {\n            re\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpp5d06v50.swift:126:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpp5d06v50.swift:19:20:\
    \ note: to match this opening '{'\n    for str in lst {\n                   ^\n\
    /tmp/tmpp5d06v50.swift:126:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpp5d06v50.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpp5d06v50.swift:23:16:\
    \ error: 'characters' is unavailable: Please use String directly\n        if str.characters.count\
    \ % 2 == 1 {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp5d06v50.swift:27:25: error: 'characters' is unavailable:\
    \ Please use String directly\n        let index = str.characters.count - 1\n \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpp5d06v50.swift:28:29: error: 'characters' is unavailable:\
    \ Please use String directly\n        let lastIndex = str.characters.count - 2\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp5d06v50.swift:29:24: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ lastChar = str.characters[index]\n                       ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n   "
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var sortedList = [String]()\n    for word in lst {\n       \
    \ if word.characters.count % 2 == 1 {\n            sortedList.append(word)\n \
    \       } else {\n            for word in sortedList {\n                if word.characters.count\
    \ < word.characters.count {\n                    sortedList.append(word)\n   \
    \             }\n            }\n            sortedList.append(word)\n        }\n\
    \    }\n    for word in sortedList {\n        result = result + [word]\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpale86v6n.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpale86v6n.swift:25:25:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if word.characters.count < word.characters.count {\n                   \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpale86v6n.swift:25:49:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if word.characters.count < word.characters.count {\n                   \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptu5rhl8r.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptu5rhl8r.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmptu5rhl8r.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmptu5rhl8r.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n/tmp/tmptu5rhl8r.swift:29:35: error:\
    \ 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptu5rhl8r.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyr7q57bu.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpyr7q57bu.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpyr7q57bu.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpyr7q57bu.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpyr7q57bu.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpyr7q57bu.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpyr7q57bu.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpyr7q57bu.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        if res[index].count % 2 == 1 {\n  \
    \          res[index] = res[index].sorted()\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqdi7kbra.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdpxlxqyy.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdpxlxqyy.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        let word = res[index]\n        if word.characters.count\
    \ % 2 == 1 {\n            res.remove(at: index)\n        }\n    }\n    res.sort()\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_4fdwham.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3vt5g9ws.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3vt5g9ws.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmp3vt5g9ws.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmp3vt5g9ws.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbc4nw8t3.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpbc4nw8t3.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpbc4nw8t3.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpbc4nw8t3.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpbc4nw8t3.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \          continue\n        }\n        let index = result.index(of: word)\n \
    \       if index == nil {\n            result.insert(word, at: 0)\n          \
    \  continue\n        }\n        let prevWord = result[index! - 1]\n        let\
    \ nextWord = result[index! + 1]\n        if prevWord.characters.count < wordLength\
    \ {\n            result.insert(word, at: 0)\n            continue\n        }\n\
    \        if nextWord.characters.count > wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ > nextWord.characters.count {\n            result.insert(word, at: 0)\n    \
    \        continue\n        }\n        if prevWord.characters.count == nextWord.characters.count\
    \ {\n            result.insert(word, at: 0)\n            continue\n        }\n\
    \        if prevWord.characters.count < wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ > wordLength {\n            result.insert(word, at: 0)\n            continue\n\
    \        }\n        if prevWord.characters.count < nextWord.characters.count {\n\
    \            result.insert(word, at: 0)\n            continue\n        }\n   \
    \     if prevWord.characters.count > wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ < wordLength {\n            result.insert(word, at: 0)\n            continue\n\
    \        }\n        if prevWord.characters.count > wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ < nextWord.characters.count {\n            result.insert(word, at: 0)\n    \
    \        continue\n        }\n        if prevWord.characters.count > wordLength\
    \ {\n            result.insert(word, at: 0)\n            continue\n        }\n\
    \        if prevWord.characters.count < wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ > wordLength {\n            result.insert(word, at: 0)\n            continue\n\
    \        }\n        if prevWord.characters.count < nextWord.characters.count {\n\
    \            result.insert(word, at: 0)\n            continue\n        }\n   \
    \     if prevWord.characters.count > wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ < wordLength {\n            result.insert(word, at: 0)\n            continue\n\
    \        }\n        if prevWord.characters.count > wordLength {\n            result.insert(word,\
    \ at: 0)\n            continue\n        }\n        if prevWord.characters.count\
    \ < nextWord.characters.count \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp92ukea4d.swift:107:65: error: expected '{' after 'if' condition\n\
    \        if prevWord.characters.count < nextWord.characters.count \n         \
    \                                                       ^\n/tmp/tmp92ukea4d.swift:129:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmp92ukea4d.swift:17:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmp92ukea4d.swift:23:31: error: 'characters' is\
    \ unavailable: Please use String directly\n        let wordLength = word.characters.count\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp92ukea4d.swift:28:28: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = result.index(of: word)\n \
    \                          ^\n/tmp/tmp92ukea4d.swift:28:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: word)\n                      \
    \     ^~~~~\n                           firstIndex\n/tmp/tmp92ukea4d.swift:35:21:\
    \ error: 'characters' is unavailable: Please use String directly\n        if prevWord.characters.count\
    \ < wordLength {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp92ukea4d.swift:39:21: error: 'characters' is unavailable:\
    \ Please use String directly\n        if nextWord.characters.count > wordLength\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp92ukea4d.swift:43:21: error: 'characters' is unavailable:\
    \ Please use String directly\n        if prevWord.characters.count > nextWord.characters.count"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        result.append(word)\n    }\n    result.sort(byLength)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1yoms_b_.swift:25:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmp1yoms_b_.swift:25:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmp1yoms_b_.swift:25:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let count = result.count\n        if count\
    \ > 0 {\n            let lastWord = result[count - 1]\n            if lastWord.count\
    \ == word.count {\n                result[count - 1] = lastWord\n            }\
    \ else {\n                result[count] = lastWord\n                result[count\
    \ - 1] = word\n            }\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n\
    \        return word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abccda04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abccd6fb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abccd6fb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abccd6fb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abccd6fabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abccd4fa9a0 specialized Array.subscript.modify
    + 0

    6    tmpy64jk0k_                        0x000056288dedfaa1 <unavailable> + 10913

    7    tmpy64jk0k_                        0x000056288dede88d <unavailable> + 6285

    8    libc.so.6                          0x00002abccdbf0460 __libc_start_main +
    245

    9    tmpy64jk0k_                        0x000056288dede509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.characters.count % 2 == 1\
    \ {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8lo3hxmt.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8lo3hxmt.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdbt64lup.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdbt64lup.swift:29:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdbt64lup.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpx0qu60xx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx0qu60xx.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmpx0qu60xx.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmpx0qu60xx.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n/tmp/tmpx0qu60xx.swift:29:35: error:\
    \ 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx0qu60xx.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpfu8pggot.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpfu8pggot.swift:30:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfu8pggot.swift:30:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let length = word.characters.count\n   \
    \     if length % 2 == 1 {\n            result.append(word)\n            continue\n\
    \        }\n        let index = result.index(of: word)\n        result.remove(at:\
    \ index)\n        result.insert(word, at: index)\n    }\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdthywsr_.swift:23:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpdthywsr_.swift:28:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: word)\n         \
    \                  ^\n/tmp/tmpdthywsr_.swift:28:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: word)\n                      \
    \     ^~~~~\n                           firstIndex\n/tmp/tmpdthywsr_.swift:29:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmpdthywsr_.swift:29:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result.remove(at: index)\n                          ^\n                \
    \                ?? <#default value#>\n/tmp/tmpdthywsr_.swift:29:27: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.remove(at:\
    \ index)\n                          ^\n                               !\n/tmp/tmpdthywsr_.swift:30:33:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.insert(word,\
    \ at: index)\n                                ^\n/tmp/tmpdthywsr_.swift:30:33:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                      ?? <#default value#>\n/tmp/tmpdthywsr_.swift:30:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                     !"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count)\n        }\n\
    \    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        let\
    \ word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        return word1Length > word2Length\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdzjfuk2_.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpdzjfuk2_.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdzjfuk2_.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        let word1Length = word1.characters.count\n      \
    \  let word2Length = word2.characters.count\n        return word1Length < word2Length\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpa1o9x_9t.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpa1o9x_9t.swift:30:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word1Length = word1.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa1o9x_9t.swift:31:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word2Length = word2.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        let wordLen = word.characters.count\n        if wordLen %\
    \ 2 == 1 {\n            res.append(word)\n            continue\n        }\n  \
    \      let index = lst.index(of: word)\n        if index == nil {\n          \
    \  res.append(word)\n            continue\n        }\n        let prevWord = lst[index!\
    \ - 1]\n        let nextWord = lst[index! + 1]\n        let prevWordLen = prevWord.characters.count\n\
    \        let nextWordLen = nextWord.characters.count\n        if prevWordLen >\
    \ nextWordLen {\n            res.append(word)\n            continue\n        }\n\
    \        if prevWordLen < nextWordLen {\n            res.append(prevWord)\n  \
    \          res.append(word)\n            continue\n        }\n        if prevWordLen\
    \ == nextWordLen {\n            let prevWordChars = prevWord.characters\n    \
    \        let nextWordChars = nextWord.characters\n            let prevWordCharsCount\
    \ = prevWordChars.count\n            let nextWordCharsCount = nextWordChars.count\n\
    \            if prevWordCharsCount > nextWordCharsCount {\n                res.append(word)\n\
    \                continue\n            }\n            if prevWordCharsCount <\
    \ nextWordCharsCount {\n                res.append(prevWord)\n               \
    \ res.append(word)\n                continue\n            }\n            if prevWordCharsCount\
    \ == nextWordCharsCount {\n                let prevWordCharsArray = prevWordChars.characters\n\
    \                let nextWordCharsArray = nextWordChars.characters\n         \
    \       let prevWordCharsArrayCount = prevWordCharsArray.count\n             \
    \   let nextWordCharsArrayCount = nextWordCharsArray.count\n                if\
    \ prevWordCharsArrayCount > nextWordCharsArrayCount {\n                    res.append(word)\n\
    \                    continue\n                }\n                if prevWordCharsArrayCount\
    \ < nextWordCharsArrayCount {\n                    res.append(prevWord)\n    \
    \                res.append(word)\n                    continue\n            \
    \    }\n                if prevWordCharsArrayCount == nextWordCharsArrayCount\
    \ {\n                    let prevWordCharsArray = prevWordChars.characters\n \
    \                   let nextWordCharsArray = nextWordChars.characters\n      \
    \              let prevWordCharsArrayCount = prevWordCharsArray.count\n      \
    \              let nextWordCharsArrayCount = nextWordCharsArray.count\n      \
    \              if prevWordCharsArrayCount > nextWordCharsArrayCount {\n      \
    \                  res.append(word)\n                        continue\n      \
    \              }\n                    if prevWordCharsArrayCount < nextWordCharsArrayCount\
    \ {\n                        res.append(prevWord)\n                        res.append(word)\n\
    \                        continue\n                    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwffnoc6m.swift:109:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpwffnoc6m.swift:60:57:\
    \ note: to match this opening '{'\n            if prevWordCharsCount == nextWordCharsCount\
    \ {\n                                                        ^\n/tmp/tmpwffnoc6m.swift:109:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmpwffnoc6m.swift:46:39: note: to match this opening '{'\n\
    \        if prevWordLen == nextWordLen {\n                                   \
    \   ^\n/tmp/tmpwffnoc6m.swift:109:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpwffnoc6m.swift:19:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmpwffnoc6m.swift:109:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpwffnoc6m.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpwffnoc6m.swift:23:28:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ wordLen = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpwffnoc6m.swift:28:25: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        let index = l"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for s in lst {\n        if res.contains(s) {\n            continue\n\
    \        }\n        res.append(s)\n    }\n    res.sort()\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp01e7lsdf/tmp01e7lsdf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7acc676c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7acc36db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7acc36d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7acc36c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01e7lsdf                        0x000055fb98381896 <unavailable> + 6294

    5    libc.so.6                          0x00002b7acc862460 __libc_start_main +
    245

    6    tmp01e7lsdf                        0x000055fb98381419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.sort()\n\
    \        }\n        result.append(word)\n    }\n    if result.count > 0 {\n  \
    \      result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp5nnigzyx/tmp5nnigzyx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab20f18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab20c0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab20c0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab20c0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nnigzyx                        0x0000562d5a9cc946 <unavailable> + 6470

    5    libc.so.6                          0x00002aab21104460 __libc_start_main +
    245

    6    tmp5nnigzyx                        0x0000562d5a9cc4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpc6d9p83c.swift:25:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count - 1)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        if word1.characters.count < word2.characters.count\
    \ {\n            return true\n        }\n        if word1.characters.count ==\
    \ word2.characters.count {\n            return word1 < word2\n        }\n    \
    \    return false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbyv1hr0i.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbyv1hr0i.swift:30:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbyv1hr0i.swift:30:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbyv1hr0i.swift:33:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ == word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbyv1hr0i.swift:33:44: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ == word2.characters.count {\n                                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    var i = 0\n    for word in lst {\n        if i % 2 == 1 {\n      \
    \      res.append(word)\n        }\n        i += 1\n    }\n    res.sort()\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpigoy3wvu/tmpigoy3wvu.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8e0288c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8dff7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8dff7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8dff7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigoy3wvu                        0x000056427458d8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ad8e0474460 __libc_start_main +
    245

    6    tmpigoy3wvu                        0x000056427458d439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let length = word.characters.count\n   \
    \     if length % 2 == 1 {\n            result.insert(word, at: result.endIndex)\n\
    \        } else {\n            let index = result.index(of: word)\n          \
    \  result.remove(at: index)\n            result.insert(word, at: index)\n    \
    \    }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpgub0lqkn.swift:23:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgub0lqkn.swift:27:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: word)\n     \
    \                          ^\n/tmp/tmpgub0lqkn.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)\n                  \
    \             ^~~~~\n                               firstIndex\n/tmp/tmpgub0lqkn.swift:28:31:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.remove(at: index)\n                              ^\n/tmp/tmpgub0lqkn.swift:28:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpgub0lqkn.swift:28:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                   !\n/tmp/tmpgub0lqkn.swift:29:37: error: value\
    \ of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n            result.insert(word,\
    \ at: index)\n                                    ^\n/tmp/tmpgub0lqkn.swift:29:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.insert(word, at: index)\n                        \
    \            ^\n                                          ?? <#default value#>\n\
    /tmp/tmpgub0lqkn.swift:29:37: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: ind"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        let wordLen = word.characters.count\n        if wordLen %\
    \ 2 == 1 {\n            res.append(word)\n            continue\n        }\n  \
    \      let index = lst.index(of: word)\n        let word1 = lst[index-1]\n   \
    \     let word2 = lst[index+1]\n        if word1.characters.count < word2.characters.count\
    \ {\n            res.append(word)\n        } else {\n            res.append(word2)\n\
    \        }\n    }\n    res.sort()\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpid8vf3u7.swift:23:28: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLen = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpid8vf3u7.swift:28:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = lst.index(of: word)\n            \
    \            ^\n/tmp/tmpid8vf3u7.swift:28:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = lst.index(of: word)\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmpid8vf3u7.swift:29:25: error: value of\
    \ optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n        let word1 = lst[index-1]\n\
    \                        ^\n/tmp/tmpid8vf3u7.swift:29:25: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        let\
    \ word1 = lst[index-1]\n                        ^\n                        ( \
    \    ?? <#default value#>)\n/tmp/tmpid8vf3u7.swift:29:25: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let word1\
    \ = lst[index-1]\n                        ^\n                             !\n\
    /tmp/tmpid8vf3u7.swift:30:25: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        let word2 = lst[index+1]\n                        ^\n/tmp/tmpid8vf3u7.swift:30:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let word2 = lst[index+1]\n                        ^\n       \
    \                 (     ?? <#default value#>)\n/tmp/tmpid8vf3u7.swift:30:25: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        let word2 = lst[index+1]\n                        ^\n               \
    \              !\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.count % 2\
    \ == 1 {\n            result.append(word)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp78un9ckg.swift:27:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmp78un9ckg.swift:27:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmp78un9ckg.swift:27:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdpxlxqyy.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdpxlxqyy.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        if let\
    \ index = result.index(of: word) {\n            result[index] = word\n       \
    \ }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n       \
    \ if word1.characters.count < word2.characters.count {\n            return true\n\
    \        }\n        if word1.characters.count == word2.characters.count {\n  \
    \          return word1 < word2\n        }\n        return false\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptp2f3b5w.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptp2f3b5w.swift:27:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmptp2f3b5w.swift:27:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmptp2f3b5w.swift:32:18: error: 'characters' is unavailable:\
    \ Please use String directly\n        if word1.characters.count < word2.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptp2f3b5w.swift:32:43: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word1.characters.count < word2.characters.count\
    \ {\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptp2f3b5w.swift:35:18: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ == word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptp2f3b5w.swift:35:44: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ == word2.characters.count {\n                                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.characters.count % 2 == 1\
    \ {\n            result.append(word)\n        } else {\n            result.sort(by:\
    \ {$0.characters.count > $1.characters.count})\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpczypdwow.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpczypdwow.swift:23:33:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result.sort(by: {$0.characters.count > $1.characters.count})\n             \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpczypdwow.swift:23:55: error: 'characters' is unavailable: Please\
    \ use String directly\n            result.sort(by: {$0.characters.count > $1.characters.count})\n\
    \                                                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        result.remove(at: index)\n        result.insert(word,\
    \ at: index)\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpalg54ld2.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpalg54ld2.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpalg54ld2.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpalg54ld2.swift:28:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmpalg54ld2.swift:28:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result.remove(at: index)\n                          ^\n                \
    \                ?? <#default value#>\n/tmp/tmpalg54ld2.swift:28:27: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.remove(at:\
    \ index)\n                          ^\n                               !\n/tmp/tmpalg54ld2.swift:29:33:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.insert(word,\
    \ at: index)\n                                ^\n/tmp/tmpalg54ld2.swift:29:33:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                      ?? <#default value#>\n/tmp/tmpalg54ld2.swift:29:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                     !\n/tmp/tmp"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        if result[index!].characters.count <\
    \ word.characters.count {\n            result[index!] = word\n        }\n    }\n\
    \    return result.sorted(by: { $0.characters.count > $1.characters.count })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4yxwx1h3.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmp4yxwx1h3.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp4yxwx1h3.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:36:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:36:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwm8hl_h1.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        if result[index!].characters.count <\
    \ word.characters.count {\n            result.remove(at: index!)\n           \
    \ result.append(word)\n            continue\n        }\n        if result[index!].characters.count\
    \ > word.characters.count {\n            result.remove(at: index!)\n         \
    \   result.append(word)\n            continue\n        }\n        result.remove(at:\
    \ index!)\n        result.append(word)\n    }\n    return result.sorted(by: {\
    \ $0.characters.count < $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0jernb5y.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0jernb5y.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmp0jernb5y.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp0jernb5y.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0jernb5y.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp0jernb5y.swift:37:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ > word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0jernb5y.swift:37:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ > word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp0jernb5y.swift:45:35:\
    \ error: 'characters' is"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.removeAtIndex(index)\n        }\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8h708da2.swift:21:20: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(index)\n            ~~~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.insert(word, at: 0)\n    }\n  \
    \  return result.sorted(by: { (word1, word2) -> Bool in\n        if word1.characters.count\
    \ < word2.characters.count {\n            return true\n        }\n        return\
    \ false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4y0uwhjl.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4y0uwhjl.swift:29:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4y0uwhjl.swift:29:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.append(word.prefix(1))\n\
    \        }\n    }\n    for word in result {\n        if word.characters.count\
    \ > 1 {\n            result.sort(by: {$0.characters.count < $1.characters.count})\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvrcpe19o.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvrcpe19o.swift:24:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(word.prefix(1))\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects\
    \ value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n   \
    \ @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpvrcpe19o.swift:24:20: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n            result.append(word.prefix(1))\n\
    \                   ^\n/tmp/tmpvrcpe19o.swift:28:17: error: 'characters' is unavailable:\
    \ Please use String directly\n        if word.characters.count > 1 {\n       \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvrcpe19o.swift:29:33:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result.sort(by: {$0.characters.count < $1.characters.count})\n             \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvrcpe19o.swift:29:55: error: 'characters' is unavailable: Please\
    \ use String directly\n            result.sort(by: {$0.characters.count < $1.characters.count})\n\
    \                                                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get s"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpx0qu60xx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx0qu60xx.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmpx0qu60xx.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmpx0qu60xx.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n/tmp/tmpx0qu60xx.swift:29:35: error:\
    \ 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx0qu60xx.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        let length1 = word1.characters.count\n        let\
    \ length2 = word2.characters.count\n        return length1 < length2\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmaiksrxp.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmaiksrxp.swift:30:29:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ length1 = word1.characters.count\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmaiksrxp.swift:31:29: error: 'characters'\
    \ is unavailable: Please use String directly\n        let length2 = word2.characters.count\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var seen = [String]()\n    for word in lst {\n        if seen.contains(word)\
    \ {\n            continue\n        }\n        seen.insert(word)\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4_re406n.swift:24:25: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(word)\n                        ^\n            \
    \            , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp798lm_lg.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp798lm_lg.swift:30:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp798lm_lg.swift:30:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < result.count {\n\
    \            result.append(word)\n        } else if result.count == result.count\
    \ {\n            if word.count > result.count {\n                result.append(word)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxou5pa_t/tmpxou5pa_t.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c2f5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c2c51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c2c51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c2c507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxou5pa_t                        0x000055d16cead806 <unavailable> + 6150

    5    libc.so.6                          0x00002ac8c3146460 __libc_start_main +
    245

    6    tmpxou5pa_t                        0x000055d16cead389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        } else {\n            if let index =\
    \ result.index(of: word) {\n                result.remove(at: index)\n       \
    \     }\n        }\n        i += 1\n    }\n    return result.sorted(by: { $0.count\
    \ < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpvt6980jh/tmpvt6980jh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb88e98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb88b8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb88b8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb88b8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvt6980jh                        0x000055f5cf8c7986 <unavailable> + 6534

    5    libc.so.6                          0x00002adb89084460 __libc_start_main +
    245

    6    tmpvt6980jh                        0x000055f5cf8c7509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.insert(word, at: 0)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1azjqd42.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                for i in 0..<word.count {\n           \
    \         if i != word.count - 1 {\n                        result.append(word)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        } else {\n            result.append(word)\n        }\n  \
    \  }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpocm66lvl/tmpocm66lvl.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4bbd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4bba4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4bba4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4bba4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocm66lvl                        0x0000555f276eda56 <unavailable> + 6742

    5    libc.so.6                          0x00002ad4bbf43460 __libc_start_main +
    245

    6    tmpocm66lvl                        0x0000555f276ed5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0m2n1opi.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0m2n1opi.swift:30:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0m2n1opi.swift:30:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.count < 2 {\n            res.append(word)\n\
    \        } else {\n            if word.count > res[0].count {\n              \
    \  res[0] = word\n            } else {\n                res[1] = word\n      \
    \      }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpiusmaeq5/tmpiusmaeq5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab23a6dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab23a3d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab23a3d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab23a3d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiusmaeq5                        0x0000558c5fc48856 <unavailable> + 6230

    5    libc.so.6                          0x00002ab23a8ca460 __libc_start_main +
    245

    6    tmpiusmaeq5                        0x0000558c5fc483d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        let length = word.characters.count\n        if length % 2\
    \ == 1 {\n            res.append(word)\n            continue\n        }\n    \
    \    let index = res.index(of: word)\n        let tmp = res[index..<res.count]\n\
    \        res.insert(word, at: 0)\n        res.remove(at: index)\n        res.insert(tmp,\
    \ at: res.index(of: word))\n    }\n    res.sort { $0.characters.count > $1.characters.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmppz184xta.swift:23:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppz184xta.swift:28:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = res.index(of: word)\n            \
    \            ^\n/tmp/tmppz184xta.swift:28:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = res.index(of: word)\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmppz184xta.swift:29:23: error: value of\
    \ optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n        let tmp = res[index..<res.count]\n\
    \                      ^\n/tmp/tmppz184xta.swift:29:23: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let tmp\
    \ = res[index..<res.count]\n                      ^\n                      ( \
    \    ?? <#default value#>)\n/tmp/tmppz184xta.swift:29:23: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let tmp\
    \ = res[index..<res.count]\n                      ^\n                        \
    \   !\n/tmp/tmppz184xta.swift:31:24: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        res.remove(at: index)\n                       ^\n/tmp/tmppz184xta.swift:31:24:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        res.remove(at: index)\n                       ^\n           \
    \                  ?? <#default value#>\n/tmp/tmppz184xta.swift:31:24: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        res.remove(at:\
    \ index)\n                       ^\n                            !\n/tmp/tmppz184xta.swift:32:33:\
    \ error: value of optional type 'Array<String>.Index?"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.characters.count % 2 == 1\
    \ {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8lo3hxmt.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8lo3hxmt.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count - 1)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        let word1Length = word1.characters.count\n      \
    \  let word2Length = word2.characters.count\n        return word1Length < word2Length\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqbsgcn2v.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqbsgcn2v.swift:30:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word1Length = word1.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqbsgcn2v.swift:31:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word2Length = word2.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              let index = result.index(of: word)\n                result.remove(at:\
    \ index)\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result.sorted(by: { (word1, word2) -> Bool in\n        if word1.count\
    \ > word2.count {\n            return true\n        } else if word1.count < word2.count\
    \ {\n            return false\n        } else {\n            return word1 < word2\n\
    \        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpv713smy9.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpv713smy9.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpv713smy9.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpv713smy9.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpv713smy9.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpv713smy9.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpv713smy9.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpv713smy9.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index != nil {\n            result[index]\
    \ = word\n        }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool\
    \ in\n        let length1 = word1.characters.count\n        let length2 = word2.characters.count\n\
    \        if length1 < length2 {\n            return true\n        }\n        if\
    \ length1 > length2 {\n            return false\n        }\n        return word1\
    \ < word2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2gl7lg_b.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2gl7lg_b.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmp2gl7lg_b.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp2gl7lg_b.swift:29:20:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result[index] = word\n                   ^\n/tmp/tmp2gl7lg_b.swift:29:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[index] = word\n                   ^\n            \
    \             ?? <#default value#>\n/tmp/tmp2gl7lg_b.swift:29:20: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result[index] = word\n                   ^\n                        !\n/tmp/tmp2gl7lg_b.swift:33:29:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ length1 = word1.characters.count\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2gl7lg_b.swift:34:29: error: 'characters'\
    \ is unavailable: Please use String directly\n        let length2 = word2.characters.count\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp46f59sy3.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp46f59sy3.swift:25:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp46f59sy3.swift:25:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.sort()\n\
    \        }\n        result.append(word)\n    }\n    if result.count > 0 {\n  \
    \      result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp5nnigzyx/tmp5nnigzyx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab20f18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab20c0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab20c0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab20c0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nnigzyx                        0x0000562d5a9cc946 <unavailable> + 6470

    5    libc.so.6                          0x00002aab21104460 __libc_start_main +
    245

    6    tmp5nnigzyx                        0x0000562d5a9cc4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newLst =\
    \ [String]()\n    var newLst2 = []\n    for word in lst {\n        if newLst.contains(word)\
    \ {\n            newLst2.append(word)\n        } else {\n            newLst.append(word)\n\
    \        }\n    }\n    newLst2 = newLst2.sorted(by: { (word1, word2) -> Bool in\n\
    \        if word1.count > word2.count {\n            return true\n        }\n\
    \        if word1.count < word2.count {\n            return false\n        }\n\
    \        return word1 < word2\n    })\n    return newLst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7ij2vwb7.swift:19:19: error: empty collection literal requires\
    \ an explicit type\n    var newLst2 = []\n                  ^~\n/tmp/tmp7ij2vwb7.swift:28:18:\
    \ error: value of type 'Any' has no member 'count'\n        if word1.count > word2.count\
    \ {\n           ~~~~~ ^~~~~\n/tmp/tmp7ij2vwb7.swift:28:18: note: cast 'Any' to\
    \ 'AnyObject' or use 'as!' to force downcast to a more specific type to access\
    \ members\n        if word1.count > word2.count {\n                 ^\n      \
    \     (     as AnyObject)\n/tmp/tmp7ij2vwb7.swift:28:32: error: value of type\
    \ 'Any' has no member 'count'\n        if word1.count > word2.count {\n      \
    \                   ~~~~~ ^~~~~\n/tmp/tmp7ij2vwb7.swift:28:32: note: cast 'Any'\
    \ to 'AnyObject' or use 'as!' to force downcast to a more specific type to access\
    \ members\n        if word1.count > word2.count {\n                          \
    \     ^\n                         (     as AnyObject)\n/tmp/tmp7ij2vwb7.swift:36:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[String]'\n\
    \    return newLst2\n           ^\n/tmp/tmp7ij2vwb7.swift:36:12: note: arguments\
    \ to generic parameter 'Element' ('Any' and 'String') are expected to be equal\n\
    \    return newLst2\n           ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newLst =\
    \ [String]()\n    for word in lst {\n        if newLst.contains(word) {\n    \
    \        continue\n        }\n        newLst.insert(word, word)\n    }\n    newLst.sort(byLength)\n\
    \    return newLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpayc7pe7j.swift:23:16: error: no exact matches in call to instance\
    \ method 'insert'\n        newLst.insert(word, word)\n               ^\n/tmp/tmpayc7pe7j.swift:23:16:\
    \ note: candidate has partially matching parameter list (__owned String, at: Int)\n\
    \        newLst.insert(word, word)\n               ^\n/tmp/tmpayc7pe7j.swift:23:16:\
    \ note: candidate has partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \        newLst.insert(word, word)\n               ^\n/tmp/tmpayc7pe7j.swift:25:17:\
    \ error: cannot find 'byLength' in scope\n    newLst.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmpayc7pe7j.swift:25:17: error: missing argument label\
    \ 'by:' in call\n    newLst.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmpayc7pe7j.swift:25:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    newLst.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.append(word)\n\
    \        }\n        if word.count % 2 == 1 {\n            continue\n        }\n\
    \        if word.count > result.count {\n            result.append(word)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpqh0v_a4i/tmpqh0v_a4i.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f2d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f2a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f2a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f2a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqh0v_a4i                        0x000055bdd2daf906 <unavailable> + 6406

    5    libc.so.6                          0x00002b21f2f70460 __libc_start_main +
    245

    6    tmpqh0v_a4i                        0x000055bdd2daf489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        return word1Length < word2Length\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoq59dgl8.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpoq59dgl8.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoq59dgl8.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.characters.count % 2 == 1\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort { $0.characters.count\
    \ < $1.characters.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnpnd1voi.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnpnd1voi.swift:24:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnpnd1voi.swift:24:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 1].count {\n            result.append(word)\n      \
    \      continue\n        }\n        if word.count < result[result.count - 2].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 3].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 4].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 5].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 6].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 7].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 8].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 9].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 10].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 11].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 12].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 13].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < result[result.count - 14].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[result.count\
    \ - 15].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count < result[result.count - 16].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 17].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count < result[result.count - 18].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 19].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 20].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 21].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 22].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 23].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpppywr8qf.swift:117:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpppywr8qf.swift:138:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpppywr8qf.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpppywr8qf.swift:120:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb1k0yo9d.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpb1k0yo9d.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpb1k0yo9d.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpb1k0yo9d.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpb1k0yo9d.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpb1k0yo9d.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpb1k0yo9d.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpb1k0yo9d.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newLst =\
    \ lst\n    for index in 0..<newLst.count {\n        let word = newLst[index]\n\
    \        let wordLength = word.characters.count\n        if wordLength % 2 ==\
    \ 1 {\n            newLst.remove(at: index)\n        }\n    }\n    newLst.sort\
    \ { (word1, word2) -> Bool in\n        let word1Length = word1.characters.count\n\
    \        let word2Length = word2.characters.count\n        return word1Length\
    \ > word2Length\n    }\n    return newLst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2mfbz7mk.swift:21:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp2mfbz7mk.swift:27:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2mfbz7mk.swift:28:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        if word.characters.count % 2 == 1 {\n            res.append(word)\n\
    \            continue\n        }\n        let index = res.index(of: word)\n  \
    \      if index == nil {\n            res.append(word)\n            continue\n\
    \        }\n        if res[index!].characters.count < word.characters.count {\n\
    \            res.insert(word, at: index)\n        } else {\n            res.remove(at:\
    \ index)\n            res.insert(word, at: index)\n        }\n    }\n    return\
    \ res.sorted(by: { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmphen03di1.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphen03di1.swift:27:25:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = res.index(of: word)\n                        ^\n/tmp/tmphen03di1.swift:27:25:\
    \ note: use 'firstIndex(of:)' instead\n        let index = res.index(of: word)\n\
    \                        ^~~~~\n                        firstIndex\n/tmp/tmphen03di1.swift:32:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        if res[index!].characters.count\
    \ < word.characters.count {\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphen03di1.swift:32:48: error: 'characters'\
    \ is unavailable: Please use String directly\n        if res[index!].characters.count\
    \ < word.characters.count {\n                                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphen03di1.swift:33:34:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res.insert(word, at: index)\n                                 ^\n/tmp/tmphen03di1.swift:33:34:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res.insert(word, at: index)\n                           \
    \      ^\n                                       ?? <#default value#>\n/tmp/tmphen03di1.swift:33:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            res.insert(word, at: index)\n                           \
    \      ^\n                                      !\n/tmp/tmphen03di1.swift:35"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpc6d9p83c.swift:25:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.count % 2\
    \ == 1 {\n            result.append(word)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp78un9ckg.swift:27:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmp78un9ckg.swift:27:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmp78un9ckg.swift:27:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count < $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpi5je5b3i.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpi5je5b3i.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              let index = result.index(of: word)\n                result.remove(at:\
    \ index)\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result.sorted(by: { (word1, word2) -> Bool in\n        if word1.count\
    \ < word2.count {\n            return true\n        } else if word1.count == word2.count\
    \ {\n            return word1 < word2\n        } else {\n            return false\n\
    \        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpythb5zk9.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpythb5zk9.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpythb5zk9.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpythb5zk9.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpythb5zk9.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpythb5zk9.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpythb5zk9.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpythb5zk9.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        var index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count > result[index!].characters.count\
    \ {\n            result[index!] = word\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpi_d4o9l2.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpi_d4o9l2.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        var\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpi_d4o9l2.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        var index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpi_d4o9l2.swift:32:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > result[index!].characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi_d4o9l2.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.count\
    \ > result[index!].characters.count {\n                                      \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpi_d4o9l2.swift:27:13: warning: variable 'index' was never mutated; consider\
    \ changing to 'let' constant\n        var index = result.index(of: word)\n   \
    \     ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdpxlxqyy.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdpxlxqyy.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        if word.characters.count > i {\n            word.swap(&result[i])\n\
    \        }\n        i += 1\n    }\n    return result.sorted(by: { (word1, word2)\
    \ -> Bool in\n        if word1.characters.count > word2.characters.count {\n \
    \           return true\n        }\n        return false\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpgdjp620d.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgdjp620d.swift:26:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > i {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpgdjp620d.swift:27:18: error: value of type 'String' has\
    \ no member 'swap'\n            word.swap(&result[i])\n            ~~~~ ^~~~\n\
    /tmp/tmpgdjp620d.swift:32:18: error: 'characters' is unavailable: Please use String\
    \ directly\n        if word1.characters.count > word2.characters.count {\n   \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgdjp620d.swift:32:43: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word1.characters.count > word2.characters.count\
    \ {\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 1].count {\n            result.append(word)\n      \
    \      continue\n        }\n        if word.count < result[result.count - 2].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 3].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 4].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 5].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 6].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 7].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 8].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 9].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 10].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 11].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 12].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 13].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < result[result.count - 14].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[result.count\
    \ - 15].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count < result[result.count - 16].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 17].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count < result[result.count - 18].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 19].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 20].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 21].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 22].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 23].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpppywr8qf.swift:117:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpppywr8qf.swift:138:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpppywr8qf.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpppywr8qf.swift:120:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        let word = res[index]\n        let\
    \ length = word.characters.count\n        if length % 2 == 1 {\n            res.removeAtIndex(index)\n\
    \        }\n    }\n    res.sortInPlace()\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpn_f4x82d.swift:21:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpn_f4x82d.swift:23:17: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n            res.removeAtIndex(index)\n            ~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpn_f4x82d.swift:26:9: error: value of type '[String]' has no member 'sortInPlace'\n\
    \    res.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.sort()\n\
    \        }\n        result.append(word)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmptqffk2ja/tmptqffk2ja.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb9b776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb9b46db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb9b46d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb9b46c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqffk2ja                        0x000055712491e946 <unavailable> + 6470

    5    libc.so.6                          0x00002abb9b962460 __libc_start_main +
    245

    6    tmptqffk2ja                        0x000055712491e4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.append(word.prefix(1))\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp78fthkeu.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp78fthkeu.swift:24:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(word.prefix(1))\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects\
    \ value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n   \
    \ @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp78fthkeu.swift:24:20: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n            result.append(word.prefix(1))\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 1 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0iz8tdgw/tmp0iz8tdgw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b919c5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b919c2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b919c2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b919c2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0iz8tdgw                        0x0000562843cf6916 <unavailable> + 6422

    5    libc.so.6                          0x00002b919c7bc460 __libc_start_main +
    245

    6    tmp0iz8tdgw                        0x0000562843cf6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpw3zp1i33.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n      \
    \      res.append(word)\n        } else {\n            i += 1\n        }\n   \
    \ }\n    res.sort()\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmprk3gu684/tmprk3gu684.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac896658c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac89634fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac89634f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac89634e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprk3gu684                        0x0000564c04cf38b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ac896844460 __libc_start_main +
    245

    6    tmprk3gu684                        0x0000564c04cf3439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbc4nw8t3.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpbc4nw8t3.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpbc4nw8t3.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpbc4nw8t3.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpbc4nw8t3.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpbc4nw8t3.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0m2n1opi.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0m2n1opi.swift:30:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0m2n1opi.swift:30:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        res.append(word)\n    }\n    res.sort()\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9bg7o6sg/tmp9bg7o6sg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1c3adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1c0a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1c0a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1c0a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bg7o6sg                        0x000055f83ebcb896 <unavailable> + 6294

    5    libc.so.6                          0x00002b2b1c599460 __libc_start_main +
    245

    6    tmp9bg7o6sg                        0x000055f83ebcb419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    result.sort { $0.characters.count <\
    \ $1.characters.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd6facx03.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpd6facx03.swift:29:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd6facx03.swift:29:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        if res[index].count % 2 == 1 {\n  \
    \          res[index] = res[index].sorted()\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqdi7kbra.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.swapAt(index, index + 1)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpv4o85rdr.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res == nil {\n            res = word\n\
    \        } else {\n            if word.count > res[0].count {\n              \
    \  res = word\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpuo39fc3n.swift:20:16: warning: comparing non-optional value of\
    \ type '[String]' to 'nil' always returns false\n        if res == nil {\n   \
    \        ~~~ ^  ~~~\n/tmp/tmpuo39fc3n.swift:21:19: error: cannot assign value\
    \ of type 'String' to type '[String]'\n            res = word\n              \
    \    ^~~~\n/tmp/tmpuo39fc3n.swift:24:23: error: cannot assign value of type 'String'\
    \ to type '[String]'\n                res = word\n                      ^~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.insert(word, at: 0)\n    }\n  \
    \  return result.sorted(by: { (word1, word2) -> Bool in\n        let word1Len\
    \ = word1.characters.count\n        let word2Len = word2.characters.count\n  \
    \      return word1Len > word2Len || (word1Len == word2Len && word1 < word2)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpl4kpnjor.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpl4kpnjor.swift:29:30:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word1Len = word1.characters.count\n                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl4kpnjor.swift:30:30:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word2Len = word2.characters.count\n                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmptcibovav.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        if let index = result.index(of: word)\
    \ {\n            result[index] = word\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4uncpi0z.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4uncpi0z.swift:26:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmp4uncpi0z.swift:26:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.remove(at: index)\n\
    \        }\n    }\n    result.sort { $0.characters.count < $1.characters.count\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmppasm41we.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmppasm41we.swift:25:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppasm41we.swift:25:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[0] = word\n\
    \                } else {\n                    result[1] = word\n            \
    \    }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt1vs9bcm/tmpt1vs9bcm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d9efa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d9ec9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d9ec9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d9ec9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1vs9bcm                        0x00005628c2af18b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b7d9f191460 __libc_start_main +
    245

    6    tmpt1vs9bcm                        0x00005628c2af1439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        if let index = result.index(of: word)\
    \ {\n            result[index] = word\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4uncpi0z.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4uncpi0z.swift:26:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmp4uncpi0z.swift:26:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.remove(at: index)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab707757c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab70744e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab70744e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab70744e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab70744dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab70724dfc3 <unavailable> + 188355

    6    tmpahqr9thn                        0x000055c17f9747b5 <unavailable> + 10165

    7    tmpahqr9thn                        0x000055c17f9737cd <unavailable> + 6093

    8    libc.so.6                          0x00002ab707943460 __libc_start_main +
    245

    9    tmpahqr9thn                        0x000055c17f973449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n      \
    \      res.append(word)\n        } else {\n            var j = i\n           \
    \ var tmp = 0\n            while j < len(lst) {\n                if lst[j] ==\
    \ word {\n                    tmp += 1\n                } else {\n           \
    \         break\n                }\n                j += 1\n            }\n  \
    \          if tmp > 1 {\n                res[tmp] = word\n            }\n    \
    \    }\n        i += 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpek10zs4c.swift:26:23: error: cannot find 'len' in scope\n     \
    \       while j < len(lst) {\n                      ^~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count < result[0].count {\n                result.removeFirst()\n     \
    \           result.append(word)\n            } else {\n                result.removeLast()\n\
    \                result.append(word)\n            }\n        } else {\n      \
    \      if word.count < result[0].count {\n                result.removeFirst()\n\
    \                result.append(word)\n            } else {\n                result.removeLast()\n\
    \                result.append(word)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyc4kg2w/tmpdyc4kg2w.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbcac6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbca962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbca962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbca9617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyc4kg2w                        0x0000561ef8c049a6 <unavailable> + 6566

    5    libc.so.6                          0x00002abbcae57460 __libc_start_main +
    245

    6    tmpdyc4kg2w                        0x0000561ef8c04529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.count % 2\
    \ == 1 {\n            result.append(word)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp78un9ckg.swift:27:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmp78un9ckg.swift:27:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmp78un9ckg.swift:27:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            let index = result.index(of: word)\n            result.remove(at:\
    \ index)\n            result.insert(word, at: 0)\n        }\n    }\n    return\
    \ result.sorted(by: { $0.characters.count > $1.characters.count })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpvcaycvqw.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpvcaycvqw.swift:27:32: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = result.index(of: word)\n\
    \                               ^\n/tmp/tmpvcaycvqw.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)\n                  \
    \             ^~~~~\n                               firstIndex\n/tmp/tmpvcaycvqw.swift:28:31:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.remove(at: index)\n                              ^\n/tmp/tmpvcaycvqw.swift:27:17:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n            let index = result.index(of: word)\n     \
    \           ^\n            guard                              else { return <#default\
    \ value#> }\n/tmp/tmpvcaycvqw.swift:27:32: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            let index = result.index(of:\
    \ word)\n                               ^\n                                  \
    \             ?? <#default value#>\n/tmp/tmpvcaycvqw.swift:27:32: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    let index = result.index(of: word)\n                               ^\n  \
    \                                            !\n/tmp/tmpvcaycvqw.swift:28:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpvcaycvqw.swift:28:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value co"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count > 0 {\n         \
    \   if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                let index = result.index(of: word)\n  \
    \              result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyr7q57bu.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpyr7q57bu.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpyr7q57bu.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpyr7q57bu.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpyr7q57bu.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpyr7q57bu.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpyr7q57bu.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpyr7q57bu.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if result.count > 0 {\n            result.append(word)\n\
    \            continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpkn729t9s/tmpkn729t9s.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b037f375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b037f06cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b037f06c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b037f06b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkn729t9s                        0x0000563d06e3c8e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b037f561460 __libc_start_main +
    245

    6    tmpkn729t9s                        0x0000563d06e3c469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdpxlxqyy.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdpxlxqyy.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwm8hl_h1.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count < result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                result[result.count - 1] = word\n     \
    \       }\n        } else {\n            if word.count < result[result.count -\
    \ 1].count {\n                result[result.count - 1] = word\n            } else\
    \ {\n                result[result.count - 1] = word\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmphx3ia57f/tmphx3ia57f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecca48dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecca184b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecca184988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecca1837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphx3ia57f                        0x000055ba5e7628b6 <unavailable> + 6326

    5    libc.so.6                          0x00002aecca679460 __libc_start_main +
    245

    6    tmphx3ia57f                        0x000055ba5e762439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.remove(at: index)\n\
    \        }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyyra8mnv.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyyra8mnv.swift:25:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyyra8mnv.swift:25:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.count < 2 {\n            res.append(word)\n\
    \            continue\n        }\n        if word.count > res[0].count {\n   \
    \         res.sort { $0.count > $1.count }\n        } else {\n            res.sort\
    \ { $0.count < $1.count }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp16472agp/tmp16472agp.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb283e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb280d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb280d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb280d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16472agp                        0x000055dd42063886 <unavailable> + 6278

    5    libc.so.6                          0x00002acb285cd460 __libc_start_main +
    245

    6    tmp16472agp                        0x000055dd42063409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpx0qu60xx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx0qu60xx.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmpx0qu60xx.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmpx0qu60xx.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n/tmp/tmpx0qu60xx.swift:29:35: error:\
    \ 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx0qu60xx.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n      \
    \      result.append(word)\n        } else {\n            result.sort(by: {$0.count\
    \ > $1.count})\n            result.sort(by: {$0.count < $1.count})\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmprc8h8kkn/tmprc8h8kkn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e91828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e9151fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e9151f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e9151e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc8h8kkn                        0x00005640fe5d88c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b2e91a14460 __libc_start_main +
    245

    6    tmprc8h8kkn                        0x00005640fe5d8449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 1 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0iz8tdgw/tmp0iz8tdgw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b919c5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b919c2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b919c2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b919c2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0iz8tdgw                        0x0000562843cf6916 <unavailable> + 6422

    5    libc.so.6                          0x00002b919c7bc460 __libc_start_main +
    245

    6    tmp0iz8tdgw                        0x0000562843cf6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwm8hl_h1.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwm8hl_h1.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.remove(at: index)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq9u1ine_.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 1 {\n\
    \            result.append(word)\n        } else {\n            result.sort(byLength)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnitkefap.swift:24:25: error: cannot find 'byLength' in scope\n\
    \            result.sort(byLength)\n                        ^~~~~~~~\n/tmp/tmpnitkefap.swift:24:25:\
    \ error: missing argument label 'by:' in call\n            result.sort(byLength)\n\
    \                        ^\n                        by: \n/tmp/tmpnitkefap.swift:24:25:\
    \ error: converting non-escaping value to '(String, String) throws -> Bool' may\
    \ allow it to escape\n            result.sort(byLength)\n                    \
    \    ^\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_hll9g0i/tmp_hll9g0i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb44c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb41bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb41ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb41b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hll9g0i                        0x000055f9a4265966 <unavailable> + 6502

    5    libc.so.6                          0x00002b6cb46af460 __libc_start_main +
    245

    6    tmp_hll9g0i                        0x000055f9a42654e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        if result[index].count % 2\
    \ == 1 {\n            result.swapAt(index, index+1)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe6pctacx.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        let tmp = result[index!]\n        result[index!]\
    \ = word\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n  \
    \      return word1.characters.count < word2.characters.count\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjrmq8wr6.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjrmq8wr6.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpjrmq8wr6.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpjrmq8wr6.swift:36:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjrmq8wr6.swift:36:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjrmq8wr6.swift:32:13: warning: initialization of immutable value\
    \ 'tmp' was never used; consider replacing with assignment to '_' or removing\
    \ it\n        let tmp = result[index!]\n        ~~~~^~~\n        _\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.append(word.prefix(1))\n\
    \            result.append(word.suffix(1))\n        }\n    }\n    result.sort(byLength)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoc25v332.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpoc25v332.swift:24:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(word.prefix(1))\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects\
    \ value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n   \
    \ @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpoc25v332.swift:24:20: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n            result.append(word.prefix(1))\n\
    \                   ^\n/tmp/tmpoc25v332.swift:25:20: error: no exact matches in\
    \ call to instance method 'append'\n            result.append(word.suffix(1))\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[String.Element]'\
    \ (aka 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpoc25v332.swift:25:20:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            result.append(word.suffix(1))\n     \
    \              ^\n/tmp/tmpoc25v332.swift:28:17: error: cannot find 'byLength'\
    \ in scope\n    result.sort(byLength"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count > result[0].count {\n                result.append(word)\n      \
    \      } else {\n                if word.count < result[1].count {\n         \
    \           result.append(word)\n                } else {\n                  \
    \  result = [result[0], result[1]]\n                }\n            }\n       \
    \ } else {\n            if word.count > result[0].count {\n                result\
    \ = [word, result[0]]\n            } else {\n                if word.count < result[1].count\
    \ {\n                    result = [result[1], word]\n                } else {\n\
    \                    result = [result[0], result[1]]\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpdx4ybv5d/tmpdx4ybv5d.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afccc1c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afccbebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afccbebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afccbebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx4ybv5d                        0x000055de03b4c856 <unavailable> + 6230

    5    libc.so.6                          0x00002afccc3b1460 __libc_start_main +
    245

    6    tmpdx4ybv5d                        0x000055de03b4c3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \          continue\n        }\n        let index = lst.index(of: word)\n    \
    \    let word1 = lst[index - 1]\n        let word2 = lst[index + 1]\n        if\
    \ word1.characters.count == wordLength {\n            result.insert(word1, at:\
    \ 0)\n        } else {\n            result.insert(word2, at: 0)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7sayuubp.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp7sayuubp.swift:28:25: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = lst.index(of: word)\n    \
    \                    ^\n/tmp/tmp7sayuubp.swift:28:25: note: use 'firstIndex(of:)'\
    \ instead\n        let index = lst.index(of: word)\n                        ^~~~~\n\
    \                        firstIndex\n/tmp/tmp7sayuubp.swift:29:25: error: value\
    \ of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n        let word1 = lst[index\
    \ - 1]\n                        ^\n/tmp/tmp7sayuubp.swift:29:25: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let word1 = lst[index - 1]\n                        ^\n                \
    \        (     ?? <#default value#>)\n/tmp/tmp7sayuubp.swift:29:25: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ word1 = lst[index - 1]\n                        ^\n                        \
    \     !\n/tmp/tmp7sayuubp.swift:30:25: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        let word2 = lst[index + 1]\n                        ^\n\
    /tmp/tmp7sayuubp.swift:30:25: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        let word2 = lst[index + 1]\n    \
    \                    ^\n                        (     ?? <#default value#>)\n\
    /tmp/tmp7sayuubp.swift:30:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let word2 = lst[index + 1]\n \
    \                       ^\n                             !\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpizbsxxw_/tmpizbsxxw_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2394023c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2393d1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2393d1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2393d197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizbsxxw_                        0x00005618925ca916 <unavailable> + 6422

    5    libc.so.6                          0x00002b239420f460 __libc_start_main +
    245

    6    tmpizbsxxw_                        0x00005618925ca499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        if res[index].count % 2 == 1 {\n  \
    \          res[index] = res[index].sorted()\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqdi7kbra.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.append(word.prefix(1))\n\
    \        }\n    }\n    for word in result {\n        word.sort()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdx2dn0lb.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdx2dn0lb.swift:24:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(word.prefix(1))\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects\
    \ value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n   \
    \ @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpdx2dn0lb.swift:24:20: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n            result.append(word.prefix(1))\n\
    \                   ^\n/tmp/tmpdx2dn0lb.swift:28:14: error: value of type 'String'\
    \ has no member 'sort'\n        word.sort()\n        ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979899
