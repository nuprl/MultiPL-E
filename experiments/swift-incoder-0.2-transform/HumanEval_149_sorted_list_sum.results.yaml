language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for index in 0..<res.count {\n        if res[index].count % 2 == 1 {\n  \
    \          res[index] = res[index].sorted()\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqdi7kbra.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        if word1Length == word2Length {\n            return word1 < word2\n \
    \       }\n        return word1Length < word2Length\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy2aef7dl.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpy2aef7dl.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2aef7dl.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            let index = result.index(of: word)\n            result.remove(at:\
    \ index)\n            result.insert(word, at: index)\n        }\n    }\n    return\
    \ result.sorted(by: { $0.characters.count > $1.characters.count })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpw83iaysq.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpw83iaysq.swift:27:32: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = result.index(of: word)\n\
    \                               ^\n/tmp/tmpw83iaysq.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)\n                  \
    \             ^~~~~\n                               firstIndex\n/tmp/tmpw83iaysq.swift:28:31:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.remove(at: index)\n                              ^\n/tmp/tmpw83iaysq.swift:28:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpw83iaysq.swift:28:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                   !\n/tmp/tmpw83iaysq.swift:29:37: error: value\
    \ of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n            result.insert(word,\
    \ at: index)\n                                    ^\n/tmp/tmpw83iaysq.swift:29:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.insert(word, at: index)\n                        \
    \            ^\n                                          ?? <#default value#>\n\
    /tmp/tmpw83iaysq.swift:29:37: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word,"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var index = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            index\
    \ = result.index(word)\n            result.remove(at: index)\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpce747bg9.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpce747bg9.swift:24:28:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    index = result.index(word)\n                           ^\n/tmp/tmpce747bg9.swift:24:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            index = result.index(word)\n                           ^\n\
    \                                       ?? <#default value#>\n/tmp/tmpce747bg9.swift:24:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            index = result.index(word)\n                           ^\n\
    \                                      !\n/tmp/tmpce747bg9.swift:24:34: error:\
    \ missing argument label 'of:' in call\n            index = result.index(word)\n\
    \                                 ^\n                                 of: \n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.count < 2 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count == result.last {\n   \
    \         if word.lowercased() < result.last.lowercased() {\n                result.append(word)\n\
    \                continue\n            }\n            if word.lowercased() > result.last.lowercased()\
    \ {\n                result.append(word)\n                continue\n         \
    \   }\n            if word.lowercased() == result.last.lowercased() {\n      \
    \          if word.lowercased() < result.last.lowercased() {\n               \
    \     result.append(word)\n                    continue\n                }\n \
    \               if word.lowercased() > result.last.lowercased() {\n          \
    \          result.append(word)\n                    continue\n               \
    \ }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzo8bsiro.swift:24:23: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        if word.count > result.last\
    \ {\n                      ^\n/tmp/tmpzo8bsiro.swift:24:23: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        if\
    \ word.count > result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:24:23:\
    \ note: required by operator function '>' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count > result.last {\n          \
    \            ^\n/tmp/tmpzo8bsiro.swift:28:23: error: type '((String) throws ->\
    \ Bool) throws -> String?' cannot conform to 'BinaryInteger'\n        if word.count\
    \ < result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:28:23: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \        if word.count < result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:28:23:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count < result.last {\n          \
    \            ^\n/tmp/tmpzo8bsiro.swift:32:23: error: type '((String) throws ->\
    \ Bool) throws -> String?' cannot conform to 'BinaryInteger'\n        if word.count\
    \ == result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:32:23: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \        if word.count == result.last {\n                      ^\n/tmp/tmpzo8bsiro.swift:32:23:\
    \ note: required by operator function '==' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count == result.last {\n         \
    \             ^\n/tmp/tmpzo8bsiro.swift:33:43: error: value of optional type 'String?'\
    \ must be unwrapped to refer to member 'lowercased' of wrapped base type 'String'\n\
    \            if word.lowercased() < result.last.lowercased() {\n             \
    \                             ^\n/tmp/tmpzo8bsiro.swift:33:43: note: chain the\
    \ optional using '?' to access member 'lowercased' only for non-'nil' base v"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        if result[index!].characters.count <\
    \ word.characters.count {\n            result[index!] = word\n        }\n    }\n\
    \    return result.sorted(by: { $0.characters.count > $1.characters.count })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4yxwx1h3.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmp4yxwx1h3.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp4yxwx1h3.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ < word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:36:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4yxwx1h3.swift:36:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        if word1Length == word2Length {\n            return word1 < word2\n \
    \       }\n        return word1Length < word2Length\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy2aef7dl.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpy2aef7dl.swift:31:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word1Length = word1.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2aef7dl.swift:32:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        let word2Length = word2.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var words = [String]()\n    for word in lst {\n        if words.count\
    \ > 0 {\n            if word.count > words.last {\n                words.append(word)\n\
    \            } else {\n                let index = words.index(of: word)\n   \
    \             result.append(words[index])\n                words.remove(at: index)\n\
    \            }\n        } else {\n            words.append(word)\n        }\n\
    \    }\n    for word in words {\n        result.append(word)\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7qvmw6mr.swift:22:27: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n            if word.count > words.last\
    \ {\n                          ^\n/tmp/tmp7qvmw6mr.swift:22:27: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        \
    \    if word.count > words.last {\n                          ^\n/tmp/tmp7qvmw6mr.swift:22:27:\
    \ note: required by operator function '>' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n            if word.count > words.last {\n       \
    \                   ^\n/tmp/tmp7qvmw6mr.swift:25:35: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n                let index = words.index(of:\
    \ word)\n                                  ^\n/tmp/tmp7qvmw6mr.swift:25:35: note:\
    \ use 'firstIndex(of:)' instead\n                let index = words.index(of: word)\n\
    \                                  ^~~~~\n                                  firstIndex\n\
    /tmp/tmp7qvmw6mr.swift:26:37: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.append(words[index])\n                 \
    \                   ^\n/tmp/tmp7qvmw6mr.swift:26:37: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n              \
    \  result.append(words[index])\n                                    ^\n      \
    \                                    ?? <#default value#>\n/tmp/tmp7qvmw6mr.swift:26:37:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.append(words[index])\n                       \
    \             ^\n                                         !\n/tmp/tmp7qvmw6mr.swift:27:34:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \        words.remove(at: index)\n                                 ^\n/tmp/tmp7qvmw6mr.swift:27:34:\
    \ note: coalesce using '??' to provide a default w"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.index(of: word))\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3vt5g9ws.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3vt5g9ws.swift:26:44:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n/tmp/tmp3vt5g9ws.swift:26:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result.insert(word,\
    \ at: result.index(of: word))\n                                           ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmp3vt5g9ws.swift:26:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(word, at: result.index(of:\
    \ word))\n                                           ^\n                     \
    \                                     !\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqtyj3odx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqtyj3odx.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n      \
    \      res.append(word)\n        }\n        i += 1\n    }\n    res.sort()\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpudmz0j6f/tmpudmz0j6f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0025a91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0025788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0025788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00257877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudmz0j6f                        0x00005628f3ffa8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b0025c7d460 __libc_start_main +
    245

    6    tmpudmz0j6f                        0x00005628f3ffa439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ > result.count {\n            result = result.sorted{ $0.characters.count <\
    \ $1.characters.count }\n        }\n        result.append(word)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7yhxd72d.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7yhxd72d.swift:27:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > result.count {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7yhxd72d.swift:28:40: error: 'characters' is unavailable:\
    \ Please use String directly\n            result = result.sorted{ $0.characters.count\
    \ < $1.characters.count }\n                                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7yhxd72d.swift:28:62:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result = result.sorted{ $0.characters.count < $1.characters.count }\n      \
    \                                                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          continue\n        }\n        result.insert(word, at: 0)\n    }\n  \
    \  return result.sorted(by: { (word1, word2) -> Bool in\n        return word1.characters.count\
    \ < word2.characters.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfyp19ppi.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfyp19ppi.swift:29:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfyp19ppi.swift:29:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result.sorted(by: { (word1, word2)\
    \ -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp70jg2oxa.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp70jg2oxa.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp70jg2oxa.swift:26:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpc6d9p83c.swift:25:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2r8lfsw1.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2r8lfsw1.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp2r8lfsw1.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp2r8lfsw1.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if result.contains(word) {\n    \
    \        continue\n        }\n        if word.characters.count % 2 == 1 {\n  \
    \          result.append(word)\n            continue\n        }\n        let index\
    \ = result.index(of: word)\n        if index == nil {\n            result.append(word)\n\
    \            continue\n        }\n        let prevWord = result[index! - 1]\n\
    \        if prevWord.characters.count < word.characters.count {\n            result[index!]\
    \ = word\n        } else {\n            result[index!] = prevWord\n        }\n\
    \    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnfdt7vjx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpnfdt7vjx.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpnfdt7vjx.swift:33:21:\
    \ error: 'characters' is unavailable: Please use String directly\n        if prevWord.characters.count\
    \ < word.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:33:45: error: 'characters'\
    \ is unavailable: Please use String directly\n        if prevWord.characters.count\
    \ < word.characters.count {\n                                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:39:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnfdt7vjx.swift:39:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824946
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp28mrvrs1/tmp28mrvrs1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fff1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ffc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ffc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ffc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28mrvrs1                        0x000055f192efa546 <unavailable> + 5446

    5    libc.so.6                          0x00002ac60010a460 __libc_start_main +
    245

    6    tmp28mrvrs1                        0x000055f192efa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824946
