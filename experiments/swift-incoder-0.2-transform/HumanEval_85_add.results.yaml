language: swift
name: HumanEval_85_add
results:
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmph_k6fud6/tmph_k6fud6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a18188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a17e7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a17e7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a17e7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_k6fud6                        0x000055fc781694fa <unavailable> + 5370

    5    libc.so.6                          0x00002b5a18374460 __libc_start_main +
    245

    6    tmph_k6fud6                        0x000055fc78169169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < lst.count;\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp8qri69l1.swift:8:12: error: expected type\n    for i := 0; i <\
    \ lst.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp8qri69l1.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < lst.count;\
    \ i++ {\n           ^\n/tmp/tmp8qri69l1.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < lst.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i : Int in lst {\n   \
    \     if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp3a22zhxj/tmp3a22zhxj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4469588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446927fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446927f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446927e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a22zhxj                        0x000055cad835c4fa <unavailable> + 5370

    5    libc.so.6                          0x00002b4469774460 __libc_start_main +
    245

    6    tmp3a22zhxj                        0x000055cad835c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpfp45iaf9.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpfp45iaf9.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i\
    \ += 2 {\n           ^\n/tmp/tmpfp45iaf9.swift:8:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(lst); i += 2 {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m8e6syq.swift:8:12: error: expected type\n    for i := 0; i <\
    \ len(lst); i++ {\n           ^\n            <#type#>\n/tmp/tmp_m8e6syq.swift:8:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(lst); i++\
    \ {\n           ^\n/tmp/tmp_m8e6syq.swift:8:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(lst); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013802
