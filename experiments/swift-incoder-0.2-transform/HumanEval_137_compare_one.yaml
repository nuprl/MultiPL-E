name: HumanEval_137_compare_one
language: swift
prompt: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n\
  \    case stringValue(String)\n}\n\n            \n/// Create a function that takes\
  \ integers, floats, or strings representing\n/// real numbers, and returns the larger\
  \ variable in its given variable type.\n/// Return None if the values are equal.\n\
  /// Note: If a real number is represented as a string, the floating point might\
  \ be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n\
  /// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"\
  2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n\
  /// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n\
  /// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
  \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) ==\
  \ .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\n\
  assert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a:\
  \ .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a:\
  \ .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
completions: ["    switch a { // a is larger\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // case .intValue(_):\n\
    \    case .intValue(_):\n        return b\n    case .doubleValue(_):\n       \
    \ return b\n    case .stringValue(_):\n        return b\n    }\n    return nil",
  "    switch a { // Switch on a's type\n    case .intValue(_):\n        switch b\
    \ { // Switch on b's type\n        case .intValue(_):\n            return a //\
    \ a is larger\n        case .doubleValue(_):\n            return b // b is larger\n\
    \        case .stringValue(_):\n            return a // a is larger\n        case\
    \ .doubleValue(_):\n            return b // b is larger\n        case .stringValue(_):\n\
    \            return a // a is larger\n        case .stringValue(_):\n        \
    \    return b // b is larger\n        case .stringValue(_):\n            return\
    \ a // a is larger\n        case .stringValue(_):\n            return b // b is\
    \ larger\n        case .stringValue(_):\n            return a // a is larger\n\
    \        case .stringValue(_):\n            return b // b is larger\n        case\
    \ .stringValue(_):\n            return a // a is larger\n        case .stringValue(_):\n\
    \            return b // b is larger\n        case .stringValue(_):\n        \
    \    return a // a is larger\n        case .stringValue(_):\n            return\
    \ b // b is larger\n        case .stringValue(_):\n            return a // a is\
    \ larger\n        case .stringValue(_):\n            return b // b is larger\n\
    \        case .stringValue(_):\n            return a // a is larger\n        case\
    \ .stringValue(_):\n            return b // b is larger\n        case .stringValue(_):\n\
    \            return a // a is larger\n        case .stringValue(_):\n        \
    \    return b // b is larger\n        case .stringValue(_):\n            return\
    \ a // a is larger\n        case .stringValue(_):\n            return b // b is\
    \ larger\n        case .stringValue(_):\n            return a // a is larger\n\
    \        case .stringValue(_):\n            return b // b is larger\n        case\
    \ .stringValue(_):\n            return a // a is larger\n        case .stringValue(_):\n\
    \            return b // b is larger\n        case .stringValue(_):\n        \
    \    return a // a is larger\n        case .stringValue(_):\n            return\
    \ b // b is larger\n        case .stringValue(_):\n            return a // a is\
    \ larger\n        case .stringValue(_):\n            return b // b is larger\n\
    \        case .stringValue(_):\n            return a // a is larger\n        case\
    \ .stringValue(_):\n            return b // b is larger\n        case ", "   \
    \ switch a { // case .intValue(_):\n    case .intValue(_): return b\n    case\
    \ .doubleValue(_): return b\n    case .stringValue(_): return b\n    }\n    return\
    \ nil", "    switch a { // Switch on a's type\n    case .intValue(_):\n      \
    \  switch b { // Switch on b's type\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil", "    switch a { // a is bigger\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // a is smaller\n \
    \   case .intValue(_):\n        switch b { // b is smaller\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // b is smaller\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is smaller\n        case .intValue(_):\n            return a\n      \
    \  case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // a\
    \ is larger\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    return\
    \ nil", "    switch a { // Switch on a.\n    case .intValue(_):\n        switch\
    \ b { // Switch on b.\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n   \
    \         return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue :\
    \ b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b.\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n    \
    \    case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue\
    \ ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n          \
    \  return .stringValue(a.stringValue > b.stringValue ? a.stringValue : b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b.\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.intValue ? a.stringValue : b.intValue)\n    \
    \    case .doubleValue(_):\n            return .stringValue(a.stringValue > b.doubleValue\
    \ ? a.stringValue : b.doubleValue)\n        case .stringValue(_):\n          \
    \  return .stringValue(a.stringValue > b.stringValue ? a.stringValue : b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // case .intValue(_), .doubleValue(_),\
    \ .stringValue(_)\n    case .intValue(_), .doubleValue(_), .stringValue(_):\n\
    \        switch b { // case .intValue(_), .doubleValue(_), .stringValue(_)\n \
    \       case .intValue(_), .doubleValue(_), .stringValue(_):\n            return\
    \ a\n        case .intValue(_):\n            return b\n        case .doubleValue(_):\n\
    \            return a\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .intValue(_):\n        switch b { // case .intValue(_), .doubleValue(_),\
    \ .stringValue(_)\n        case .intValue(_), .doubleValue(_), .stringValue(_):\n\
    \            return b\n        case .intValue(_):\n            return a\n    \
    \    case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // case .intValue(_), .doubleValue(_), .stringValue(_)\n        case .intValue(_),\
    \ .doubleValue(_), .stringValue(_):\n            return a\n        case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return a\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // case .intValue(_), .doubleValue(_), .stringValue(_)\n \
    \       case .intValue(_), .doubleValue(_), .stringValue(_):\n            return\
    \ a\n        case .intValue(_):\n            return b\n        case .doubleValue(_):\n\
    \            return a\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a { // Switch on a's type\n   \
    \ case .intValue(_):\n        switch b { // Switch on b's type\n        case .intValue(_):\n\
    \            return a > b ? a : b\n        case .doubleValue(_):\n           \
    \ return a > b ? b : a\n        case .stringValue(_):\n            return a >\
    \ b ? b : a\n        }\n    case .doubleValue(_):\n        switch b { // Switch\
    \ on b's type\n        case .intValue(_):\n            return a > b ? b : a\n\
    \        case .doubleValue(_):\n            return a > b ? a : b\n        case\
    \ .stringValue(_):\n            return a > b ? a : b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return a > b ? a : b\n        case .doubleValue(_):\n            return\
    \ a > b ? b : a\n        case .stringValue(_):\n            return a > b ? b :\
    \ a\n        }\n    }\n    return nil", "    switch a { \n    case .intValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { \n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // Switch on a's type\n    case .intValue(_):\n      \
    \  switch b { // Switch on b's type\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on b's type\n        case .intValue(_):\n      \
    \      return .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil", "    switch a { // TODO: Switch to enum\n    case .intValue(_):\n    \
    \    switch b { // TODO: Switch to enum\n        case .intValue(_):\n        \
    \    return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n   \
    \     case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue\
    \ ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n          \
    \  return .stringValue(a.stringValue > b.stringValue ? a.stringValue : b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // TODO: Switch to enum\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.intValue\
    \ ? a.doubleValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ TODO: Switch to enum\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil", "    switch a { case .intValue(_), .doubleValue(_), .stringValue(_)\n\
    \    \n    case let .intValue(aInt), let .doubleValue(aDouble), let .stringValue(aString):\n\
    \        switch b { case .intValue(_), .doubleValue(_), .stringValue(_)\n    \
    \    \n        case let .intValue(bInt), let .doubleValue(bDouble), let .stringValue(bString):\n\
    \            if aInt == bInt {\n                return .intValue(aInt)\n     \
    \       } else if aDouble == bDouble {\n                return .doubleValue(aDouble)\n\
    \            } else {\n                return .stringValue(aString)\n        \
    \    }\n            \n        case .stringValue(bString):\n            return\
    \ .stringValue(aString)\n            \n        case .intValue(bInt):\n       \
    \     return .intValue(aInt)\n            \n        case .doubleValue(bDouble):\n\
    \            return .doubleValue(aDouble)\n            \n        default:\n  \
    \          return nil\n        }\n        \n    case .stringValue(aString), .stringValue(bString):\n\
    \        switch b { case .intValue(_), .doubleValue(_), .stringValue(_)\n    \
    \    \n        case let .intValue(bInt), let .doubleValue(bDouble), let .stringValue(bString):\n\
    \            if aString == bString {\n                return .stringValue(aString)\n\
    \            } else if aInt == bInt {\n                return .intValue(aInt)\n\
    \            } else if aDouble == bDouble {\n                return .doubleValue(aDouble)\n\
    \            } else {\n                return .stringValue(aString)\n        \
    \    }\n            \n        case .stringValue(bString):\n            return\
    \ .stringValue(aString)\n            \n        case .intValue(bInt):\n       \
    \     return .intValue(aInt)\n            \n        case .doubleValue(bDouble):\n\
    \            return .doubleValue(aDouble)\n            \n        default:\n  \
    \          return nil\n        }\n        \n    case .intValue(aInt), .intValue(bInt):\n\
    \        if aInt == bInt {\n            return .intValue(aInt)\n        } else\
    \ {\n            return nil\n        }\n        \n    case .doubleValue(aDouble),\
    \ .doubleValue(bDouble):\n        if aDouble == bDouble {\n            return\
    \ .doubleValue(aDouble)\n        } else {\n            return nil\n        }\n\
    \        \n    default:\n        return nil\n    }", "    switch a { // Switch\
    \ on type\n    case .intValue(_):\n        switch b { // Switch on type\n    \
    \    case .intValue(_):\n            return .intValue(a.intValue > b.intValue\
    \ ? a.intValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on type\n        case .intValue(_):\n          \
    \  return .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on type\n        case .intValue(_):\n          \
    \  return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil", "    switch a { case .intValue(_),\
    \ .doubleValue(_), .stringValue(_)\n    \n    default: return nil\n    }\n   \
    \ \n    switch b { case .intValue(_), .doubleValue(_), .stringValue(_)\n    \n\
    \    default: return nil\n    }", "    switch a { case .intValue(_), .doubleValue(_),\
    \ .stringValue(_)\n        case let .intValue(aInt), let .doubleValue(aDouble),\
    \ let .stringValue(aString)\n            where b == .intValue(aInt)\n        \
    \    return .intValue(aInt)\n        case let .intValue(aInt), let .doubleValue(aDouble),\
    \ let .stringValue(aString)\n            where b == .doubleValue(aDouble)\n  \
    \          return .doubleValue(aDouble)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .stringValue(aString)\n\
    \            return .stringValue(aString)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .intValue(aInt)\n\
    \            return .intValue(aInt)\n        case let .intValue(aInt), let .doubleValue(aDouble),\
    \ let .stringValue(aString)\n            where b == .doubleValue(aDouble)\n  \
    \          return .doubleValue(aDouble)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .stringValue(aString)\n\
    \            return .stringValue(aString)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .intValue(aInt)\n\
    \            return .intValue(aInt)\n        case let .intValue(aInt), let .doubleValue(aDouble),\
    \ let .stringValue(aString)\n            where b == .doubleValue(aDouble)\n  \
    \          return .doubleValue(aDouble)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .stringValue(aString)\n\
    \            return .stringValue(aString)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .intValue(aInt)\n\
    \            return .intValue(aInt)\n        case let .intValue(aInt), let .doubleValue(aDouble),\
    \ let .stringValue(aString)\n            where b == .doubleValue(aDouble)\n  \
    \          return .doubleValue(aDouble)\n        case let .intValue(aInt), let\
    \ .doubleValue(aDouble), let .stringValue(aString)\n            where b == .stringValue(aString)\n\
    \            return .stringValue(aString)\n        case let .intValue(aInt", " \
    \   switch a { // TODO: Switch to switch case for performance\n    case .intValue(_):\n\
    \        switch b { // TODO: Switch to switch case for performance\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return b\n        }\n\
    \    case .doubleValue(_):\n        switch b { // TODO: Switch to switch case\
    \ for performance\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return b\n        }\n    case .stringValue(_):\n        switch b { //\
    \ TODO: Switch to switch case for performance\n        case .intValue(_):\n  \
    \          return a\n        case .doubleValue(_):\n            return b\n   \
    \     case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // Switch on the type of a\n    case .intValue(_):\n \
    \       switch b { // Switch on the type of b\n        case .intValue(_):\n  \
    \          return a // a is larger\n        case .doubleValue(_):\n          \
    \  return b // b is larger\n        case .stringValue(_):\n            return\
    \ a // a is larger\n        case .none:\n            return b // b is larger\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on the type\
    \ of b\n        case .intValue(_):\n            return a // a is larger\n    \
    \    case .doubleValue(_):\n            return b // b is larger\n        case\
    \ .stringValue(_):\n            return a // a is larger\n        case .none:\n\
    \            return b // b is larger\n        }\n    case .stringValue(_):\n \
    \       switch b { // Switch on the type of b\n        case .intValue(_):\n  \
    \          return a // a is larger\n        case .doubleValue(_):\n          \
    \  return b // b is larger\n        case .stringValue(_):\n            return\
    \ a // a is larger\n        case .none:\n            return b // b is larger\n\
    \        }\n    case .none:\n        switch b { // Switch on the type of b\n \
    \       case .intValue(_):\n            return a // a is larger\n        case\
    \ .doubleValue(_):\n            return b // b is larger\n        case .stringValue(_):\n\
    \            return a // a is larger\n        case .none:\n            return\
    \ b // b is larger\n        }\n    }\n    return nil // a is equal to b"]
stop_tokens:
- "\n}"
