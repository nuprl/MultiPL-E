name: HumanEval_153_Strongest_Extension
language: swift
prompt: "\n/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name:\
  \ \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc\
  \ Strongest_Extension(class_name: String, extensions: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\"\
  , extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
  \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
  ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
  , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
  ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
  \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
  \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
  )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\",\
  \ \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\
  assert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"\
  NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
  \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
  \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
completions: ["    var strongest_extension = \"\"\n    var strength = -1\n    for\
    \ extension in extensions {\n        let class_name_components = class_name.components(separatedBy:\
    \ \".\")\n        let extension_components = extension.components(separatedBy:\
    \ \".\")\n        let class_name = class_name_components[class_name_components.count\
    \ - 1]\n        let extension = extension_components[extension_components.count\
    \ - 1]\n        let class_name_components_count = class_name_components.count\n\
    \        let extension_components_count = extension_components.count\n       \
    \ let class_name_components_count_index = class_name_components_count - 1\n  \
    \      let extension_components_count_index = extension_components_count - 1\n\
    \        let class_name_components_count_index_minus_1 = class_name_components_count_index\
    \ - 1\n        let extension_components_count_index_minus_1 = extension_components_count_index\
    \ - 1\n        let class_name_components_count_minus_1 = class_name_components_count\
    \ - 1\n        let extension_components_count_minus_1 = extension_components_count\
    \ - 1\n        let class_name_components_count_minus_2 = class_name_components_count\
    \ - 2\n        let extension_components_count_minus_2 = extension_components_count\
    \ - 2\n        let class_name_components_count_minus_3 = class_name_components_count\
    \ - 3\n        let extension_components_count_minus_3 = extension_components_count\
    \ - 3\n        let class_name_components_count_minus_4 = class_name_components_count\
    \ - 4\n        let extension_components_count_minus_4 = extension_components_count\
    \ - 4\n        let class_name_components_count_minus_5 = class_name_components_count\
    \ - 5\n        let extension_components_count_minus_5 = extension_components_count\
    \ - 5\n        let class_name_components_count_minus_6 = class_name_components_count\
    \ - 6\n        let extension_components_count_minus_6 = extension_components_count\
    \ - 6\n        let class_name_components_count_minus_7 = class_name_components_count\
    \ - 7\n        let extension_components_count_minus_7 = extension_components_count\
    \ - 7\n        let class_name_components_count_minus_8 = class_name_components_count\
    \ - 8\n        let extension_components_count_minus_8 = extension_components_count\
    \ - 8\n        let class_name_components_count_minus_9 = class_name_components_count\
    \ - 9\n        let extension_components_count_minus_9 = extension_components_count\
    \ - 9\n        let class_name_components_count_minus_10 = class_name_components_count\
    \ - 10\n        let extension_components_count_minus_10 = extension_components_count\
    \ - 10\n        let class_name_components_count_minus_11 = class_name_components_",
  "    var strongest_extension = \"\"\n    var strength = -1\n    for extension in\
    \ extensions {\n        var extension_length = extension.count\n        var extension_strength\
    \ = extension_length - 1\n        for _ in 0..<extension_length {\n          \
    \  let index = extension.index(extension.startIndex, offsetBy: 1)\n          \
    \  let char = extension[index].lowercased()\n            if char == char.lowercased()\
    \ {\n                extension_strength -= 1\n            }\n        }\n     \
    \   if extension_strength > strength {\n            strongest_extension = class_name\n\
    \            strength = extension_strength\n        }\n    }\n    return strongest_extension",
  "    var strongest_extension = \"\"\n    for extension in extensions {\n       \
    \ let class_name_components = class_name.components(separatedBy: \".\")\n    \
    \    let extension_components = extension.components(separatedBy: \".\")\n   \
    \     let class_name = class_name_components[0]\n        let extension = extension_components[0]\n\
    \        let class_name_components_count = class_name_components.count\n     \
    \   let extension_components_count = extension_components.count\n        let class_name_components_count_upper\
    \ = class_name_components_count - class_name_components_count.count\n        let\
    \ extension_components_count_upper = extension_components_count - extension_components_count.count\n\
    \        let class_name_components_count_lower = class_name_components_count -\
    \ class_name_components_count_upper\n        let extension_components_count_lower\
    \ = extension_components_count - extension_components_count_upper\n        let\
    \ class_name_components_count_diff = class_name_components_count_upper - class_name_components_count_lower\n\
    \        let extension_components_count_diff = extension_components_count_upper\
    \ - extension_components_count_lower\n        let class_name_components_count_diff_upper\
    \ = class_name_components_count_diff - class_name_components_count_upper\n   \
    \     let extension_components_count_diff_upper = extension_components_count_diff\
    \ - extension_components_count_upper\n        let class_name_components_count_diff_lower\
    \ = class_name_components_count_diff - class_name_components_count_lower\n   \
    \     let extension_components_count_diff_lower = extension_components_count_diff\
    \ - extension_components_count_lower\n        let class_name_components_count_diff_diff\
    \ = class_name_components_count_diff_upper - class_name_components_count_diff_lower\n\
    \        let extension_components_count_diff_diff = extension_components_count_diff_upper\
    \ - extension_components_count_diff_lower\n        let class_name_components_count_diff_diff_upper\
    \ = class_name_components_count_diff_diff - class_name_components_count_diff_upper\n\
    \        let extension_components_count_diff_diff_upper = extension_components_count_diff_diff\
    \ - extension_components_count_diff_upper\n        let class_name_components_count_diff_diff_lower\
    \ = class_name_components_count_diff_diff - class_name_components_count_diff_lower\n\
    \        let extension_components_count_diff_diff_lower = extension_components_count_diff_diff\
    \ - extension_components_count_diff_lower\n        let class_name_components_count_diff_diff_diff\
    \ = class_name_components_count_diff_diff_upper - class_name_components_count_diff_diff_lower\n\
    \        let extension_components_count_diff_diff_diff = extension_components_count_diff_diff_upper\
    \ - extension_components_count_diff_diff_lower\n        let class_name_components_count_diff_",
  "    var strongest_extension = \"\"\n    var max_strength = -1\n    for extension\
    \ in extensions {\n        let extension_strength = extension.countUpToUppercase()\
    \ - extension.countUpToLowercase()\n        if extension_strength > max_strength\
    \ {\n            max_strength = extension_strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension = \"\"\n    var max_strength = -1\n    for extension\
    \ in extensions {\n        let extension_strength = extension.countUpToUppercaseLetters\
    \ - extension.countUpToLowercaseLetters\n        if extension_strength > max_strength\
    \ {\n            max_strength = extension_strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension = \"\"\n    var strength = -1\n    for extension in\
    \ extensions {\n        let extension_uppercase_count = extension.count\n    \
    \    let extension_lowercase_count = extension.count\n        let extension_strength\
    \ = extension_uppercase_count - extension_lowercase_count\n        if extension_strength\
    \ > strength {\n            strongest_extension = extension\n            strength\
    \ = extension_strength\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  '    return class_name + "." + extensions[extensions.index(extensions.firstIndex(of:
    class_name.lowercased()))]', '    return class_name + "." + extensions[extensions.index(extensions.firstIndex(of:
    class_name.lowercased()))]', '    return class_name + "." + extensions[extensions.index(extensions.firstIndex(of:
    class_name.lowercased()))]', "    var strongest_extension = \"\"\n    var strongest_extension_strength\
    \ = -1\n    for extension in extensions {\n        let extension_strength = extension.countUpToLowercaseLetters()\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension\
    \ = \"\"\n    var strongest_extension_strength = -1\n    for extension in extensions\
    \ {\n        let extension_strength = extension.countUpToUppercaseLetters - extension.countUpToLowercaseLetters\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension\
    \ = \"\"\n    var strongest_extension_strength = -1\n    for extension in extensions\
    \ {\n        var extension_strength = extension.count\n        for char in extension\
    \ {\n            if char.uppercased() != char {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return class_name +\
    \ \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var strongest_extension_strength\
    \ = -1\n    for extension in extensions {\n        let extension_strength = extension.countUpToLowercaseLetters()\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension\
    \ = \"\"\n    var max_strength = -1\n    for extension in extensions {\n     \
    \   let extension_strength = extension.countUppercaseLetters() - extension.countLowercaseLetters()\n\
    \        if extension_strength > max_strength {\n            max_strength = extension_strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var\
    \ strongest_extension_strength = -1\n    for extension in extensions {\n     \
    \   let extension_strength = extension.countUpToLowercaseLetters()\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension\
    \ = \"\"\n    var max_strength = -1\n    for extension in extensions {\n     \
    \   var strength = count_capital_letters(extension) - count_capital_letters(class_name)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           strongest_extension = extension\n        }\n    }\n    return class_name\
    \ + strongest_extension", "    var strongest_extension = \"\"\n    var strongest_extension_strength\
    \ = -1\n    for extension in extensions {\n        var extension_strength = extension.count\n\
    \        for letter in extension {\n            if letter.isUpper() {\n      \
    \          extension_strength -= 1\n            }\n        }\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension\
    \ = \"\"\n    var max_strength = -1\n    for extension in extensions {\n     \
    \   var strength = count_capital_letters(extension) - count_capital_letters(class_name)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           strongest_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var\
    \ max_strength = -1\n    for extension in extensions {\n        let extension_strength\
    \ = extension.countUppercaseLetters - extension.countLowercaseLetters\n      \
    \  if extension_strength > max_strength {\n            max_strength = extension_strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var\
    \ strength = -1\n    for extension in extensions {\n        let cap = extension.count\n\
    \        let sm = class_name.count\n        let strength = cap - sm\n        if\
    \ strength > 0 {\n            if strength > strongest_extension.count {\n    \
    \            strongest_extension = extension\n            }\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension"]
stop_tokens:
- "\n}"
