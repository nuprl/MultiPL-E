language: swift
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for\
    \ char in paren_string {\n        if char == '(' {\n            paren_count +=\
    \ 1\n        } else if char == ')' {\n            paren_count -= 1\n         \
    \   if paren_count == 0 {\n                levels.append(paren_count)\n      \
    \      }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4tfzg0mz.swift:11:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp4tfzg0mz.swift:13:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           levels[level] = parens\n            parens += 1\n        } else if\
    \ char == ')' {\n            levels[level] = parens\n            parens -= 1\n\
    \        } else if char == ' ' {\n            levels[level] = parens\n       \
    \ }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaqya9yuk.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpaqya9yuk.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpaqya9yuk.swift:18:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpaqya9yuk.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    for c in paren_string.characters\
    \ {\n        if c == '(' {\n            parens_count += 1\n            parens_level\
    \ += 1\n        } else if c == ')' {\n            parens_count -= 1\n        \
    \    parens_level -= 1\n            if parens_level == 0 {\n                levels.append(level)\n\
    \            }\n        } else if parens_count > 0 {\n            level = 0\n\
    \            parens = 0\n            parens_count = 0\n            parens_level\
    \ = 0\n        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf1a29zl3.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpf1a29zl3.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpf1a29zl3.swift:13:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpf1a29zl3.swift:10:9: warning: variable 'parens' was written to, but\
    \ never read\n    var parens = 0\n        ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    for char in paren_string.characters\
    \ {\n        switch char {\n        case ')':\n            levels[level] = parens_level\n\
    \            parens_level = 0\n            parens_count += 1\n            parens\
    \ += parens_count\n            level++\n        case ')':\n            levels[level]\
    \ = parens_level\n            parens_level = 0\n            parens_count += 1\n\
    \            parens += parens_count\n            level++\n        default:\n \
    \           parens_level++\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgv3kewlu.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmpgv3kewlu.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpgv3kewlu.swift:13:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgv3kewlu.swift:20:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpgv3kewlu.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n/tmp/tmpgv3kewlu.swift:28:25: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            parens_level++\n \
    \                       ^~\n/tmp/tmpgv3kewlu.swift:21:14: warning: literal value\
    \ is already handled by previous pattern; consider removing it\n        case ')':\n\
    \             ^~~\n/tmp/tmpgv3kewlu.swift:15:14: note: first occurrence of identical\
    \ literal pattern is here\n        case ')':\n             ^~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_chars = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_indexes_count = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n    var paren_char_indexes_index\
    \ = 0\n    var paren_char_indexes_index = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpufa7zco5.swift:14:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpufa7zco5.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpufa7zco5.swift:19:9: error: invalid\
    \ redeclaration of 'paren_char_indexes_index'\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpufa7zco5.swift:18:9: note: 'paren_char_indexes_index'\
    \ previously declared here\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmpufa7zco5.swift:20:9: error: invalid redeclaration of 'paren_char_indexes_index'\n\
    \    var paren_char_indexes_index = 0\n        ^\n/tmp/tmpufa7zco5.swift:18:9:\
    \ note: 'paren_char_indexes_index' previously declared here\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpufa7zco5.swift:21:9: error: invalid redeclaration of\
    \ 'paren_char_indexes_index'\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmpufa7zco5.swift:18:9: note: 'paren_char_indexes_index' previously declared\
    \ here\n    var paren_char_indexes_index = 0\n        ^\n/tmp/tmpufa7zco5.swift:22:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_index'\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpufa7zco5.swift:18:9: note: 'paren_char_indexes_index'\
    \ previously declared here\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmpufa7zco5.swift:23:9: error: invalid redeclaration of 'paren_char_indexes_index'\n\
    \    var paren_char_indexes_index = 0\n        ^\n/tmp/tmpufa7zco5.swift:18:9:\
    \ note: 'paren_char_indexes_index' previously declared here\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpufa7zco5.swift:24:9: error: invalid redeclaration of\
    \ 'paren_char_indexes_index'\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmpufa7zco5.swift:18:9: note: 'paren_char_indexes_index' previously declared\
    \ here\n    var paren_char_indexes_index = 0\n        ^\n/tmp/tmpufa7zco5.swift:25:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_index'\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpu"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    var levels_stack = [Int]()\n    var levels_stack_index = 0\n\
    \    var paren_level = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3\
    \ = 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5\
    \ = 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7\
    \ = 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9\
    \ = 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnv5nqkyx.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_index\n        ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpep18sx0r.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_prev = 0\n    var paren_char_count_next\
    \ = 0\n    var paren_char_count_prev_next = 0\n    var paren_char_count_prev_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next = 0\n    var paren_char_count_prev_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next = 0\n    var paren_char_count_prev_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next = 0\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next = 0\n \
    \   var paren_char_count_prev_next_next_next_next_next_next_next_next_next = 0\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next_next =\
    \ 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptla0fc9z.swift:42:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmptla0fc9z.swift:26:9: error: invalid redeclaration of 'paren_char_count_prev_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next_next =\
    \ 0\n        ^\n/tmp/tmptla0fc9z.swift:25:9: note: 'paren_char_count_prev_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:28:9: error: invalid redeclaration of\
    \ 'paren_char_count_prev_next_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:27:9: note: 'paren_char_count_prev_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:31:9: error: invalid redeclaration of\
    \ 'paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:30:9: note: 'paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:32:9: error: invalid redeclaration of\
    \ 'paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:30:9: note: 'paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmptla0fc9z.swift:33:9: error: invalid redeclaration of\
    \ 'paren_char_count_prev_next_"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           parens += 1\n            levels.append(level)\n            level =\
    \ 0\n        } else if char == ')' {\n            level -= 1\n            levels.append(level)\n\
    \            level = 0\n        } else {\n            level += 1\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbh8v4jk7.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpbh8v4jk7.swift:16:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpbh8v4jk7.swift:11:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for char in paren_string.characters {\n        if char == \"(\" {\n  \
    \          parens += 1\n            parens_count += 1\n            parens_string\
    \ += String(char)\n        } else if char == \")\" {\n            parens -= 1\n\
    \            parens_count -= 1\n            if parens_count == 0 {\n         \
    \       parens_string = parens_string[..<parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, start\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe84uro0h.swift:24:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpe84uro0h.swift:23:2007: note: to match this opening '('\n         \
    \       parens_string = parens_string[..<parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ parens_string.index(char, startIndex: parens_string.index(char, startIndex:\
    \ p"
  stdout: ''
  timestamp: 1659825124
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_level_parens = 0\n    var paren_level_parens_count\
    \ = 0\n    var paren_level_parens_count_max = 0\n    var paren_level_parens_count_max_max\
    \ = 0\n    var paren_level_parens_count_max_min = 0\n    var paren_level_parens_count_max_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_index_index = 0\n    var paren_level_parens_count_max_min_index2\
    \ = 0\n    var paren_level_parens_count_max_min_index2_index = 0\n    var paren_level_parens_count_max_min_index3\
    \ = 0\n    var paren_level_parens_count_max_min_index3_index = 0\n    var paren_level_parens_count_max_min_index4\
    \ = 0\n    var paren_level_parens_count_max_min_index4_index = 0\n    var paren_level_parens_count_max_min_index5\
    \ = 0\n    var paren_level_parens_count_max_min_index5_index = 0\n    var paren_level_parens_count_max_min_index6\
    \ = 0\n    var paren_level_parens_count_max_min_index6_index = 0\n    var paren_level_parens_count_max_min_index7\
    \ = 0\n    var paren_level_parens_count_max_min_index7_index = 0\n    var paren_level_parens_count_max_min_index8\
    \ = 0\n    var paren_level_parens_count_max_min_index8_index = 0\n    var paren_level_parens_count_max_min_index9\
    \ = 0\n    var paren_level_parens_count_max_min_index9_index = 0\n    var paren_level_parens_count_max_min_index10\
    \ = 0\n    var paren_level_parens_count_max_min_index10_index = 0\n    var paren_level_parens_count_max_min_index11\
    \ = 0\n    var paren_level_parens_count_max_min_index11_index = 0\n    var paren_level_parens_count_max_min_index12\
    \ = 0\n    var paren_level_parens_count_max_min_index12_index = 0\n    var paren_level_parens_count_max_min_index13\
    \ = 0\n    var paren_level_parens_count_max_min_index13_index = 0\n    var paren_level_parens_count_max_min_index14\
    \ = 0\n    var paren_level_parens_count_max_min_index14_index = 0\n    var paren_level_parens_count_max_min_index15\
    \ = 0\n    var paren_level_parens_count_max_min_index15_index = 0\n    var paren_level_parens_count_max_min_index16\
    \ = 0\n    var paren_level_parens_count_max_min_index16_index = 0\n    var paren_level_parens_count_max_min_index17\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_zn3gaj2.swift:50:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp_zn3gaj2.swift:8:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:9:9: warning: initialization\
    \ of variable 'max_level' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:10:9:\
    \ warning: initialization of variable 'max_level_parens' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var max_level_parens =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:11:9: warning: initialization\
    \ of variable 'paren_level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmp_zn3gaj2.swift:12:9: warning: initialization of variable 'paren_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:13:9:\
    \ warning: initialization of variable 'paren_level_parens_count' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_parens_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:14:9: warning:\
    \ initialization of variable 'paren_level_parens_count_max' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_parens_count_max\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:15:9:\
    \ warning: initialization of variable 'paren_level_parens_count_max_max' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_level_parens_count_max_max\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_zn3gaj2.swift:16:9:\
    \ warning: initialization of variable 'paren_level_parens_count_max_min' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_level_paren"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl_txb0jt.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_min = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjxjcd7td.swift:19:9: error: invalid redeclaration of 'paren_level_parens_count_min_index'\n\
    \    var paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:17:9:\
    \ note: 'paren_level_parens_count_min_index' previously declared here\n    var\
    \ paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_parens_count_max_index'\n    var\
    \ paren_level_parens_count_max_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:18:9:\
    \ note: 'paren_level_parens_count_max_index' previously declared here\n    var\
    \ paren_level_parens_count_max_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_parens_count_min_index'\n    var\
    \ paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:17:9:\
    \ note: 'paren_level_parens_count_min_index' previously declared here\n    var\
    \ paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_parens_count_max_index'\n    var\
    \ paren_level_parens_count_max_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:18:9:\
    \ note: 'paren_level_parens_count_max_index' previously declared here\n    var\
    \ paren_level_parens_count_max_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_parens_count_min_index'\n    var\
    \ paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:17:9:\
    \ note: 'paren_level_parens_count_min_index' previously declared here\n    var\
    \ paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_parens_count_max_index'\n    var\
    \ paren_level_parens_count_max_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:18:9:\
    \ note: 'paren_level_parens_count_max_index' previously declared here\n    var\
    \ paren_level_parens_count_max_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_parens_count_min_index'\n    var\
    \ paren_level_parens_count_min_index = 0\n        ^\n/tmp/tmpjxjcd7td.swift:17:9:\
    \ note: 'par"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    for c in paren_string.unicodeScalars {\n\
    \        if c == '(' {\n            parens += 1\n            parens_level += 1\n\
    \        } else if c == ')' {\n            parens -= 1\n            if parens\
    \ == 0 {\n                levels.append(parens_level)\n            }\n       \
    \ }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqzcaijzb.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpqzcaijzb.swift:16:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpqzcaijzb.swift:9:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_count_max\
    \ = 0\n    var parens_count_max_index = 0\n    var parens_count_max_index2 = 0\n\
    \    var parens_count_max_index3 = 0\n    var parens_count_max_index4 = 0\n  \
    \  var parens_count_max_index5 = 0\n    var parens_count_max_index6 = 0\n    var\
    \ parens_count_max_index7 = 0\n    var parens_count_max_index8 = 0\n    var parens_count_max_index9\
    \ = 0\n    var parens_count_max_index10 = 0\n    var parens_count_max_index11\
    \ = 0\n    var parens_count_max_index12 = 0\n    var parens_count_max_index13\
    \ = 0\n    var parens_count_max_index14 = 0\n    var parens_count_max_index15\
    \ = 0\n    var parens_count_max_index16 = 0\n    var parens_count_max_index17\
    \ = 0\n    var parens_count_max_index18 = 0\n    var parens_count_max_index19\
    \ = 0\n    var parens_count_max_index20 = 0\n    var parens_count_max_index21\
    \ = 0\n    var parens_count_max_index22 = 0\n    var parens_count_max_index23\
    \ = 0\n    var parens_count_max_index24 = 0\n    var parens_count_max_index25\
    \ = 0\n    var parens_count_max_index26 = 0\n    var parens_count_max_index27\
    \ = 0\n    var parens_count_max_index28 = 0\n    var parens_count_max_index29\
    \ = 0\n    var parens_count_max_index30 = 0\n    var parens_count_max_index31\
    \ = 0\n    var parens_count_max_index32 = 0\n    var parens_count_max_index33\
    \ = 0\n    var parens_count_max_index34 = 0\n    var parens_count_max_index35\
    \ = 0\n    var parens_count_max_index36 = 0\n    var parens_count_max_index37\
    \ = 0\n    var parens_count_max_index38 = 0\n    var parens_count_max_index39\
    \ = 0\n    var parens_count_max_index40 = 0\n    var parens_count_max_index41\
    \ = 0\n    var parens_count_max_index42 = 0\n    var parens_count_max_index43\
    \ = 0\n    var parens_count_max_index44 = 0\n    var parens_count_max_index45\
    \ = 0\n    var parens_count_max_index46 = 0\n    var parens_count_max_index47\
    \ = 0\n    var parens_count_max_index48 = 0\n    var parens_count_max_index49\
    \ = 0\n    var parens_count_max_index50 = 0\n    var parens_count_max_index51\
    \ = 0\n    var parens_count_max_index52 = 0\n    var parens_count_max_index53\
    \ = 0\n    var parens_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl9yn4iev.swift:67:9: error: type annotation missing in pattern\n\
    \    var parens_\n        ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for c in paren_string.unicodeScalars {\n\
    \        if parens_count == 0 {\n            levels.append(level)\n        }\n\
    \        if parens_count == 1 {\n            levels[level] = levels[level] + 1\n\
    \        }\n        if parens_count == 2 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 3 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 4 {\n            levels[level]\
    \ = levels[level] + 1\n        }\n        if parens_count == 5 {\n           \
    \ levels[level] = levels[level] + 1\n        }\n        if parens_count == 6 {\n\
    \            levels[level] = levels[level] + 1\n        }\n        if parens_count\
    \ == 7 {\n            levels[level] = levels[level] + 1\n        }\n        if\
    \ parens_count == 8 {\n            levels[level] = levels[level] + 1\n       \
    \ }\n        if parens_count == 9 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 10 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 11 {\n            levels[level]\
    \ = levels[level] + 1\n        }\n        if parens_count == 12 {\n          \
    \  levels[level] = levels[level] + 1\n        }\n        if parens_count == 13\
    \ {\n            levels[level] = levels[level] + 1\n        }\n        if parens_count\
    \ == 14 {\n            levels[level] = levels[level] + 1\n        }\n        if\
    \ parens_count == 15 {\n            levels[level] = levels[level] + 1\n      \
    \  }\n        if parens_count == 16 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 17 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 18 {\n            levels[level]\
    \ = levels[level] + 1\n        }\n        if parens_count == 19 {\n          \
    \  levels[level] = levels[level] + 1\n        }\n        if parens_count == 20\
    \ {\n            levels[level] = levels[level] + 1\n        }\n        if parens_count\
    \ == 21 {\n            levels[level] = levels[level] + 1\n        }\n        if\
    \ parens_count == 22 {\n            levels[level] = levels[level] + 1\n      \
    \  }\n        if parens_count == 23 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 24 {\n            levels[level] =\
    \ levels[\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpu2x1slfs.swift:87:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpu2x1slfs.swift:104:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpu2x1slfs.swift:12:42:\
    \ note: to match this opening '{'\n    for c in paren_string.unicodeScalars {\n\
    \                                         ^\n/tmp/tmpu2x1slfs.swift:104:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmpu2x1slfs.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmpu2x1slfs.swift:86:35:\
    \ error: missing argument for parameter #1 in call\n            levels[level]\
    \ = levels[\n                                  ^\n                           \
    \       <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable\
    \ public subscript(index: Int) -> Element { get set }\n                      ^\n\
    /tmp/tmpu2x1slfs.swift:90:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_levels = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_count_max\
    \ = paren_levels_count + 1\n    var paren_levels_count_min = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_index = paren_levels_count - 1\n    var\
    \ paren_levels_count_min_index = paren_levels_count - 1\n    var paren_levels_count_max_value\
    \ = paren_levels_count - 1\n    var paren_levels_count_min_value = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_value_minus_1 = paren_levels_count - 1\n\
    \    var paren_levels_count_min_value_minus_1 = paren_levels_count - 1\n    var\
    \ paren_levels_count_max_value_minus_2 = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_2\
    \ = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_3 = paren_levels_count\
    \ - 1\n    var paren_levels_count_min_value_minus_3 = paren_levels_count - 1\n\
    \    var paren_levels_count_max_value_minus_4 = paren_levels_count - 1\n    var\
    \ paren_levels_count_min_value_minus_4 = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_5\
    \ = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_5 = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_value_minus_6 = paren_levels_count - 1\n\
    \    var paren_levels_count_min_value_minus_6 = paren_levels_count - 1\n    var\
    \ paren_levels_count_max_value_minus_7 = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_7\
    \ = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_8 = paren_levels_count\
    \ - 1\n    var paren_levels_count_min_value_minus_8 = paren_levels_count - 1\n\
    \    var paren_levels_count_max_value_minus_9 = paren_levels_count - 1\n    var\
    \ paren_levels_count_min_value_minus_9 = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_10\
    \ = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_10 = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_value_minus_11 = paren_levels_count - 1\n\
    \    var paren_levels_count_min_value_minus_11 = paren_levels_count - 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphnfplk2l.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphnfplk2l.swift:9:9: warning:\
    \ initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphnfplk2l.swift:10:9: warning: initialization of variable 'paren_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphnfplk2l.swift:11:9:\
    \ warning: variable 'paren_levels_count' was never mutated; consider changing\
    \ to 'let' constant\n    var paren_levels_count = 0\n    ~~~ ^\n    let\n/tmp/tmphnfplk2l.swift:12:9:\
    \ warning: initialization of variable 'paren_levels_count_max' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max\
    \ = paren_levels_count + 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmphnfplk2l.swift:13:9:\
    \ warning: initialization of variable 'paren_levels_count_min' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_count_min\
    \ = paren_levels_count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmphnfplk2l.swift:14:9:\
    \ warning: initialization of variable 'paren_levels_count_max_index' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_index\
    \ = paren_levels_count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmphnfplk2l.swift:15:9:\
    \ warning: initialization of variable 'paren_levels_count_min_index' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_min_index\
    \ = paren_levels_count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmphnfplk2l.swift:16:9:\
    \ warning: initialization of variable 'paren_levels_count_max_value' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_value\
    \ = pare"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfzqp3plm.swift:16:9: error: invalid redeclaration of 'paren_start_idx'\n\
    \    var paren_start_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:14:9: note: 'paren_start_idx'\
    \ previously declared here\n    var paren_start_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:17:9:\
    \ error: invalid redeclaration of 'paren_end_idx'\n    var paren_end_idx = 0\n\
    \        ^\n/tmp/tmpfzqp3plm.swift:15:9: note: 'paren_end_idx' previously declared\
    \ here\n    var paren_end_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:18:9: error:\
    \ invalid redeclaration of 'paren_start_idx'\n    var paren_start_idx = 0\n  \
    \      ^\n/tmp/tmpfzqp3plm.swift:14:9: note: 'paren_start_idx' previously declared\
    \ here\n    var paren_start_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:19:9: error:\
    \ invalid redeclaration of 'paren_end_idx'\n    var paren_end_idx = 0\n      \
    \  ^\n/tmp/tmpfzqp3plm.swift:15:9: note: 'paren_end_idx' previously declared here\n\
    \    var paren_end_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:20:9: error: invalid\
    \ redeclaration of 'paren_start_idx'\n    var paren_start_idx = 0\n        ^\n\
    /tmp/tmpfzqp3plm.swift:14:9: note: 'paren_start_idx' previously declared here\n\
    \    var paren_start_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:21:9: error: invalid\
    \ redeclaration of 'paren_end_idx'\n    var paren_end_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:15:9:\
    \ note: 'paren_end_idx' previously declared here\n    var paren_end_idx = 0\n\
    \        ^\n/tmp/tmpfzqp3plm.swift:22:9: error: invalid redeclaration of 'paren_start_idx'\n\
    \    var paren_start_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:14:9: note: 'paren_start_idx'\
    \ previously declared here\n    var paren_start_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:23:9:\
    \ error: invalid redeclaration of 'paren_end_idx'\n    var paren_end_idx = 0\n\
    \        ^\n/tmp/tmpfzqp3plm.swift:15:9: note: 'paren_end_idx' previously declared\
    \ here\n    var paren_end_idx = 0\n        ^\n/tmp/tmpfzqp3plm.swift:24:9: error:\
    \ invalid redeclaration of 'paren_start_idx'\n    var paren_start_idx = 0\n  \
    \      ^\n/tmp/tmpfzqp3plm.swift:14:9: note: 'paren_start_idx' previously declared\
    \ here\n    var paren_start_i"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    for c in paren_string {\n        if c == '(' {\n      \
    \      paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level += (c == '(' ? 1 : -1)\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcr0hnd_6.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpcr0hnd_6.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpcr0hnd_6.swift:20:30: error: single-quoted string literal\
    \ found, use '\"'\n        paren_level += (c == '(' ? 1 : -1)\n              \
    \               ^~~\n                             \"(\"\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        switch char {\n    \
    \    case ')':\n            levels[level] = parens\n            parens = 0\n \
    \           level += 1\n        case ')':\n            parens += 1\n        default:\n\
    \            parens = 0\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvk5rr2u4.swift:13:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmpvk5rr2u4.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpvk5rr2u4.swift:11:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvk5rr2u4.swift:17:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case ')':\n     \
    \        ^~~\n/tmp/tmpvk5rr2u4.swift:13:14: note: first occurrence of identical\
    \ literal pattern is here\n        case ')':\n             ^~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_max\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index_count = 0\n    var parens_level_max_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count = 0\n    var parens_level_max_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count = 0\n\
    \    var parens_level_max_count_index_count_index_count_index_count_index = 0\n\
    \    var parens_level_max_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpba43tec0.swift:17:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpba43tec0.swift:16:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpba43tec0.swift:40:9: error: type annotation missing\
    \ in pattern\n    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_chars = []\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptjz0b9bv.swift:16:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmptjz0b9bv.swift:17:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmptjz0b9bv.swift:18:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmptjz0b9bv.swift:14:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmptjz0b9bv.swift:19:9: error:\
    \ invalid redeclaration of 'paren_char_length'\n    var paren_char_length = 0\n\
    \        ^\n/tmp/tmptjz0b9bv.swift:15:9: note: 'paren_char_length' previously\
    \ declared here\n    var paren_char_length = 0\n        ^\n/tmp/tmptjz0b9bv.swift:20:23:\
    \ error: empty collection literal requires an explicit type\n    var paren_chars\
    \ = []\n                      ^~\n/tmp/tmptjz0b9bv.swift:20:9: error: invalid\
    \ redeclaration of 'paren_chars'\n    var paren_chars = []\n        ^\n/tmp/tmptjz0b9bv.swift:16:9:\
    \ note: 'paren_chars' previously declared here\n    var paren_chars = []\n   \
    \     ^\n/tmp/tmptjz0b9bv.swift:21:30: error: empty collection literal requires\
    \ an explicit type\n    var paren_char_indexes = []\n                        \
    \     ^~\n/tmp/tmptjz0b9bv.swift:21:9: error: invalid redeclaration of 'paren_char_indexes'\n\
    \    var paren_char_indexes = []\n        ^\n/tmp/tmptjz0b9bv.swift:17:9: note:\
    \ 'paren_char_indexes' previously declared here\n    var paren_char_indexes =\
    \ []\n        ^\n/tmp/tmptjz0b9bv.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_index'\n    var paren_char_index = 0\n        ^\n/tmp/tmptjz0b9bv.swift:14:9:\
    \ note: 'paren_char_index' previously declared here\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmptjz0b9bv.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_length'\n    var paren_char_length = 0\n        ^\n/tmp/tmptjz0b9bv.swift:15:9:\
    \ note: 'paren_char_length' previously declared here\n    var paren_char_length\
    \ = 0\n        ^\n/tmp/tmptjz0b9bv.swift:24:23: error: empty col"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var levels_stack\
    \ = [Int]()\n    var levels_stack_index = 0\n    var levels_stack_size = 0\n \
    \   var levels_stack_max = -1\n    var levels_stack_max_index = 0\n    var levels_stack_max_size\
    \ = 0\n    var levels_stack_max_max_index = 0\n    var levels_stack_max_max_size\
    \ = 0\n    var levels_stack_max_max_level = 0\n    var levels_stack_max_max_level_size\
    \ = 0\n    var levels_stack_max_max_level_max_index = 0\n    var levels_stack_max_max_level_max_size\
    \ = 0\n    var levels_stack_max_max_level_max_level = 0\n    var levels_stack_max_max_level_max_level_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_index = 0\n    var levels_stack_max_max_level_max_level_max_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level = 0\n    var levels_stack_max_max_level_max_level_max_level_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_index = 0\n\
    \    var levels_stack_max_max_level_max_level_max_level_max_size = 0\n    var\
    \ levels_stack_max_max_level_max_level_max_level_max_level = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_index\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_index\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level_max_index\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level_max_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_index\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_size\
    \ = 0\n    var levels_stack_max_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpohnoak0f.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpohnoak0f.swift:9:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpohnoak0f.swift:10:9: warning: initialization of variable 'levels_stack'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels_stack = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpohnoak0f.swift:11:9:\
    \ warning: initialization of variable 'levels_stack_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var levels_stack_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpohnoak0f.swift:12:9: warning:\
    \ initialization of variable 'levels_stack_size' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var levels_stack_size = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpohnoak0f.swift:13:9: warning: initialization of variable 'levels_stack_max'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels_stack_max = -1\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpohnoak0f.swift:14:9:\
    \ warning: initialization of variable 'levels_stack_max_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var levels_stack_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpohnoak0f.swift:15:9: warning:\
    \ initialization of variable 'levels_stack_max_size' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var levels_stack_max_size\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpohnoak0f.swift:16:9: warning:\
    \ initialization of variable 'levels_stack_max_max_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var levels_stack_max_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpohnoak0f.swift:17:9:\
    \ warning: initialization of variable 'levels_stack_max_max_"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptyi76viq.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmptyi76viq.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmptyi76viq.swift:16:9:\
    \ error: invalid redeclaration of 'paren_open'\n    var paren_open = 0\n     \
    \   ^\n/tmp/tmptyi76viq.swift:12:9: note: 'paren_open' previously declared here\n\
    \    var paren_open = 0\n        ^\n/tmp/tmptyi76viq.swift:17:9: error: invalid\
    \ redeclaration of 'paren_close'\n    var paren_close = 0\n        ^\n/tmp/tmptyi76viq.swift:13:9:\
    \ note: 'paren_close' previously declared here\n    var paren_close = 0\n    \
    \    ^\n/tmp/tmptyi76viq.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmptyi76viq.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmptyi76viq.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmptyi76viq.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmptyi76viq.swift:20:9:\
    \ error: invalid redeclaration of 'paren_open'\n    var paren_open = 0\n     \
    \   ^\n/tmp/tmptyi76viq.swift:12:9: note: 'paren_open' previously declared here\n\
    \    var paren_open = 0\n        ^\n/tmp/tmptyi76viq.swift:21:9: error: invalid\
    \ redeclaration of 'paren_close'\n    var paren_close = 0\n        ^\n/tmp/tmptyi76viq.swift:13:9:\
    \ note: 'paren_close' previously declared here\n    var paren_close = 0\n    \
    \    ^\n/tmp/tmptyi76viq.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmptyi76viq.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmptyi76viq.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmptyi76viq.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmptyi76viq.swift:24:9:\
    \ error: invalid redeclaration of 'paren_ope"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char: Char\n    var paren_char_next: Char\n    var paren_char_prev:\
    \ Char\n    var paren_char_prev_index: Int\n    var paren_char_next_index: Int\n\
    \    var paren_char_prev_index2: Int\n    var paren_char_next_index2: Int\n  \
    \  var paren_char_prev_index3: Int\n    var paren_char_next_index3: Int\n    var\
    \ paren_char_prev_index4: Int\n    var paren_char_next_index4: Int\n    var paren_char_prev_index5:\
    \ Int\n    var paren_char_next_index5: Int\n    var paren_char_prev_index6: Int\n\
    \    var paren_char_next_index6: Int\n    var paren_char_prev_index7: Int\n  \
    \  var paren_char_next_index7: Int\n    var paren_char_prev_index8: Int\n    var\
    \ paren_char_next_index8: Int\n    var paren_char_prev_index9: Int\n    var paren_char_next_index9:\
    \ Int\n    var paren_char_prev_index10: Int\n    var paren_char_next_index10:\
    \ Int\n    var paren_char_prev_index11: Int\n    var paren_char_next_index11:\
    \ Int\n    var paren_char_prev_index12: Int\n    var paren_char_next_index12:\
    \ Int\n    var paren_char_prev_index13: Int\n    var paren_char_next_index13:\
    \ Int\n    var paren_char_prev_index14: Int\n    var paren_char_next_index14:\
    \ Int\n    var paren_char_prev_index15: Int\n    var paren_char_next_index15:\
    \ Int\n    var paren_char_prev_index16: Int\n    var paren_char_next_index16:\
    \ Int\n    var paren_char_prev_index17: Int\n    var paren_char_next_index17:\
    \ Int\n    var paren_char_prev_index18: Int\n    var paren_char_next_index18:\
    \ Int\n    var paren_char_prev_index19: Int\n    var paren_char_next_index19:\
    \ Int\n    var paren_char_prev_index20: Int\n    var paren_char_next_index20:\
    \ Int\n    var paren_char_prev_index21: Int\n    var paren_char_next_index21:\
    \ Int\n    var paren_char_prev_index22: Int\n    var paren_char_next_index22:\
    \ Int\n    var paren_char_prev_index23: Int\n    var paren_char_next_index23:\
    \ Int\n    var paren_char_prev\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsh9v7x51.swift:14:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpsh9v7x51.swift:15:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpsh9v7x51.swift:16:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpsh9v7x51.swift:63:9: error: type annotation missing in pattern\n\
    \    var paren_char_prev\n        ^\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    for c in paren_string.characters\
    \ {\n        if c == '(' {\n            parens_level++\n            parens++\n\
    \            levels[level] = parens\n            level++\n        } else if c\
    \ == ')' {\n            parens_level--\n            parens--\n            levels[level]\
    \ = parens\n            level++\n        } else if parens_level == 0 {\n     \
    \       levels[level] = parens\n            level++\n        }\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpud3gp1vt.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpud3gp1vt.swift:19:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpud3gp1vt.swift:13:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpud3gp1vt.swift:15:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            parens_level++\n                        ^~\n\
    /tmp/tmpud3gp1vt.swift:16:19: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            parens++\n                  ^~\n/tmp/tmpud3gp1vt.swift:18:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n/tmp/tmpud3gp1vt.swift:20:25: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            parens_level--\n \
    \                       ^~\n/tmp/tmpud3gp1vt.swift:21:19: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            parens--\n                \
    \  ^~\n/tmp/tmpud3gp1vt.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpud3gp1vt.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_paren_level = 0\n\
    \    var level = 0\n    var paren_level = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_count = 0\n    var paren_level_paren_level_count_max\
    \ = 0\n    var paren_level_paren_level_count_max_index = 0\n    var paren_level_paren_level_count_max_index1\
    \ = 0\n    var paren_level_paren_level_count_max_index2 = 0\n    var paren_level_paren_level_count_max_index3\
    \ = 0\n    var paren_level_paren_level_count_max_index4 = 0\n    var paren_level_paren_level_count_max_index5\
    \ = 0\n    var paren_level_paren_level_count_max_index6 = 0\n    var paren_level_paren_level_count_max_index7\
    \ = 0\n    var paren_level_paren_level_count_max_index8 = 0\n    var paren_level_paren_level_count_max_index9\
    \ = 0\n    var paren_level_paren_level_count_max_index10 = 0\n    var paren_level_paren_level_count_max_index11\
    \ = 0\n    var paren_level_paren_level_count_max_index12 = 0\n    var paren_level_paren_level_count_max_index13\
    \ = 0\n    var paren_level_paren_level_count_max_index14 = 0\n    var paren_level_paren_level_count_max_index15\
    \ = 0\n    var paren_level_paren_level_count_max_index16 = 0\n    var paren_level_paren_level_count_max_index17\
    \ = 0\n    var paren_level_paren_level_count_max_index18 = 0\n    var paren_level_paren_level_count_max_index19\
    \ = 0\n    var paren_level_paren_level_count_max_index20 = 0\n    var paren_level_paren_level_count_max_index21\
    \ = 0\n    var paren_level_paren_level_count_max_index22 = 0\n    var paren_level_paren_level_count_max_index23\
    \ = 0\n    var paren_level_paren_level_count_max_index24 = 0\n    var paren_level_paren_level_count_max_index25\
    \ = 0\n    var paren_level_paren_level_count_max_index26 = 0\n    var paren_level_paren_level_count_max_index27\
    \ = 0\n    var paren_level_paren_level_count_max_index28 = 0\n    var paren_level_paren_level_count_max_index29\
    \ = 0\n    var paren_level_paren_level_count_max_index30 = 0\n    var paren_level_paren_level_count_max_index31\
    \ = 0\n    var paren_level_paren_level_count_max_index32 = 0\n    var paren_level_paren_level_count_max_index33\
    \ = 0\n    var paren_level_paren_level_count_max_index34 = 0\n    var paren_level_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4m5ez7wn.swift:50:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren\n        ^\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string {\n        if char == '(' {\n            levels[level]\
    \ = parens\n            parens += 1\n        } else if char == ')' {\n       \
    \     levels[level] = parens\n            parens -= 1\n        } else if char\
    \ == ' ' {\n            levels[level] = parens\n        }\n        level += 1\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp50jni1ef.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp50jni1ef.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp50jni1ef.swift:18:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_char_count = 0\n    var paren_level_char_index = 0\n\
    \    var paren_level_char = \"\"\n    var paren_level_chars = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7r_d8as9.swift:17:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmp7r_d8as9.swift:18:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmp7r_d8as9.swift:19:35: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_counts = []\n          \
    \                        ^~\n/tmp/tmp7r_d8as9.swift:20:36: error: empty collection\
    \ literal requires an explicit type\n    var paren_level_char_indexes = []\n \
    \                                  ^~\n/tmp/tmp7r_d8as9.swift:20:9: error: invalid\
    \ redeclaration of 'paren_level_char_indexes'\n    var paren_level_char_indexes\
    \ = []\n        ^\n/tmp/tmp7r_d8as9.swift:18:9: note: 'paren_level_char_indexes'\
    \ previously declared here\n    var paren_level_char_indexes = []\n        ^\n\
    /tmp/tmp7r_d8as9.swift:21:35: error: empty collection literal requires an explicit\
    \ type\n    var paren_level_char_counts = []\n                               \
    \   ^~\n/tmp/tmp7r_d8as9.swift:21:9: error: invalid redeclaration of 'paren_level_char_counts'\n\
    \    var paren_level_char_counts = []\n        ^\n/tmp/tmp7r_d8as9.swift:19:9:\
    \ note: 'paren_level_char_counts' previously declared here\n    var paren_level_char_counts\
    \ = []\n        ^\n/tmp/tmp7r_d8as9.swift:22:36: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_indexes = []\n         \
    \                          ^~\n/tmp/tmp7r_d8as9.swift:22:9: error: invalid redeclaration\
    \ of 'paren_level_char_indexes'\n    var paren_level_char_indexes = []\n     \
    \   ^\n/tmp/tmp7r_d8as9.swift:18:9: note: 'paren_level_char_indexes' previously\
    \ declared here\n    var paren_level_char_indexes = []\n        ^\n/tmp/tmp7r_d8as9.swift:23:35:\
    \ error: empty collection literal requires an explicit type\n    var paren_level_char_counts\
    \ = []\n                                  ^~\n/tmp/tmp7r_d8as9.swift:23:9: error:\
    \ invalid redeclaration of 'paren_level_char_counts'\n    var paren_level_char"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for char in paren_string.characters {\n  \
    \      if char == \"(\" {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if char == \")\" {\n            paren_count\
    \ -= 1\n            levels.append(paren_level)\n            if paren_count ==\
    \ 0 {\n                levels.append(0)\n            }\n        } else if char\
    \ == \" \" {\n            levels.append(paren_level)\n        }\n        paren_level\
    \ += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4u46jr0g.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp4u46jr0g.swift:9:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpavbo64_i.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:16:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:17:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:18:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:19:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:20:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:21:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:22:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:23:9: error:"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char: Char\n    var paren_char_next: Char\n    var paren_char_prev:\
    \ Char\n    var paren_char_next_prev: Char\n    var paren_char_prev_index: Int\n\
    \    var paren_char_next_index: Int\n    var paren_char_next_next_index: Int\n\
    \    var paren_char_next_next_prev_index: Int\n    var paren_char_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_index: Int\n    var paren_char_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_index: Int\n    var paren_char_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_index: Int\n    var paren_char_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_index: Int\n    var paren_char_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_index: Int\n    var\
    \ paren_char_next_next_next_next_next_next_next_prev_index: Int\n    var paren_char_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n    var paren_char_next_next_next_next_next_next_next_next_next_\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxevhydrf.swift:14:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpxevhydrf.swift:15:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpxevhydrf.swift:16:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpxevhydrf.swift:17:31: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next_prev: Char\n                              ^~~~\n/tmp/tmpxevhydrf.swift:42:9:\
    \ error: invalid redeclaration of 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n        ^\n/tmp/tmpxevhydrf.swift:41:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n        ^\n/tmp/tmpxevhydrf.swift:43:9: error: invalid redeclaration of\
    \ 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index'\n\
    \    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n        ^\n/tmp/tmpxevhydrf.swift:41:9: note: 'paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index'\
    \ previously declared here\n    var paren_char_next_next_next_next_next_next_next_next_next_next_next_next_next_prev_index:\
    \ Int\n        ^\n/tmp/tmpxevhydrf.swift:46:9: error: type annotation missing\
    \ in pattern\n    var paren_char_next_next_next_next_next_next_next_next_next_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_index2\
    \ = 0\n    var paren_level_stack_index3 = 0\n    var paren_level_stack_index4\
    \ = 0\n    var paren_level_stack_index5 = 0\n    var paren_level_stack_index6\
    \ = 0\n    var paren_level_stack_index7 = 0\n    var paren_level_stack_index8\
    \ = 0\n    var paren_level_stack_index9 = 0\n    var paren_level_stack_index10\
    \ = 0\n    var paren_level_stack_index11 = 0\n    var paren_level_stack_index12\
    \ = 0\n    var paren_level_stack_index13 = 0\n    var paren_level_stack_index14\
    \ = 0\n    var paren_level_stack_index15 = 0\n    var paren_level_stack_index16\
    \ = 0\n    var paren_level_stack_index17 = 0\n    var paren_level_stack_index18\
    \ = 0\n    var paren_level_stack_index19 = 0\n    var paren_level_stack_index20\
    \ = 0\n    var paren_level_stack_index21 = 0\n    var paren_level_stack_index22\
    \ = 0\n    var paren_level_stack_index23 = 0\n    var paren_level_stack_index24\
    \ = 0\n    var paren_level_stack_index25 = 0\n    var paren_level_stack_index26\
    \ = 0\n    var paren_level_stack_index27 = 0\n    var paren_level_stack_index28\
    \ = 0\n    var paren_level_stack_index29 = 0\n    var paren_level_stack_index30\
    \ = 0\n    var paren_level_stack_index31 = 0\n    var paren_level_stack_index32\
    \ = 0\n    var paren_level_stack_index33 = 0\n    var paren_level_stack_index34\
    \ = 0\n    var paren_level_stack_index35 = 0\n    var paren_level_stack_index36\
    \ = 0\n    var paren_level_stack_index37 = 0\n    var paren_level_stack_index38\
    \ = 0\n    var paren_level_stack_index39 = 0\n    var paren_level_stack_index40\
    \ = 0\n    var paren_level_stack_index41 = 0\n    var paren_level_stack_index42\
    \ = 0\n    var paren_level_stack_index43 = 0\n    var paren_level_stack_index44\
    \ = 0\n    var paren_level_stack_index45 = 0\n    var paren_level_stack_index46\
    \ = 0\n    var paren_level_stack_index47 = 0\n    var paren_level_stack_index48\
    \ = 0\n    var paren_level_stack_index49 = 0\n    var paren_level_stack_index50\
    \ = 0\n    var paren_level_stack_index51 = 0\n    var paren_level_stack_index52\
    \ = 0\n    var paren_level_stack_index53\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf4e8qg81.swift:66:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_index53\n        ^\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_parens = 0\n    var paren_parens_level\
    \ = 0\n    var paren_parens_parens = 0\n    var paren_parens_parens_level = 0\n\
    \    var paren_parens_parens_parens = 0\n    var paren_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens = 0\n    var paren_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_level =\
    \ 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_parens_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_bm810tj.swift:30:9: error: invalid redeclaration of 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:29:9: note: 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\
    \ previously declared here\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:32:9: error: invalid redeclaration of\
    \ 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:31:9: note: 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\
    \ previously declared here\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:33:9: error: invalid redeclaration of\
    \ 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:31:9: note: 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\
    \ previously declared here\n    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:34:9: error: invalid redeclaration of\
    \ 'paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level'\n\
    \    var paren_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n        ^\n/tmp/tmp_bm810tj.swift:31:9: note: 'paren_"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgfpvgxpr.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpgfpvgxpr.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpgfpvgxpr.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpgfpvgxpr.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpgfpvgxpr.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpgfpvgxpr.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpgfpvgxpr.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpgfpvgxpr.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpgfpvgxpr.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_char_char_length = 0\n    var paren_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3__xg40t.swift:34:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmp3__xg40t.swift:33:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmp3__xg40t.swift:37:9: error: type annotation missing\
    \ in pattern\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if parens == 0 {\n\
    \            levels.append(level)\n        }\n        if parens == 1 {\n     \
    \       level = 0\n        }\n        if c == parens.unicodeScalars.first {\n\
    \            parens += 1\n        } else {\n            parens = 0\n        }\n\
    \        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvjfl1stu.swift:18:24: error: value of type 'Int' has no member\
    \ 'unicodeScalars'\n        if c == parens.unicodeScalars.first {\n          \
    \      ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6n2lc8o6.swift:13:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:14:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmp6n2lc8o6.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:15:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:16:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmp6n2lc8o6.swift:17:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:18:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmp6n2lc8o6.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:19:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:20:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmp6n2lc8o6.swift:21:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:22:9:\
    \ error: invalid redeclaration o"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_max\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_parens = 0\n\
    \    var parens_level_max_parens_count = 0\n    var parens_level_max_parens_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count = 0\n    var parens_level_max_parens_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max = 0\n    var parens_level_max_parens_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count = 0\n    var\
    \ parens_level_max_parens_count_max_count_max_count = 0\n    var parens_level_max_parens_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count = 0\n\
    \    var parens_level_max_parens_count_max_count_max_count_max_count = 0\n   \
    \ var parens_level_max_parens_count_max_count_max_count_max_count_max = 0\n  \
    \  var parens_level_max_parens_count_max_count_max_count_max_count_max_count =\
    \ 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_level_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxhb_7l0k.swift:19:9: error: invalid redeclaration of 'parens_level_max_parens_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count = 0\n        ^\n/tmp/tmpxhb_7l0k.swift:18:9:\
    \ note: 'parens_level_max_parens_count_max_count' previously declared here\n \
    \   var parens_level_max_parens_count_max_count = 0\n        ^\n/tmp/tmpxhb_7l0k.swift:22:9:\
    \ error: invalid redeclaration of 'parens_level_max_parens_count_max_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count_max_count = 0\n        ^\n/tmp/tmpxhb_7l0k.swift:21:9:\
    \ note: 'parens_level_max_parens_count_max_count_max_count' previously declared\
    \ here\n    var parens_level_max_parens_count_max_count_max_count = 0\n      \
    \  ^\n/tmp/tmpxhb_7l0k.swift:23:9: error: invalid redeclaration of 'parens_level_max_parens_count_max_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count_max_count = 0\n        ^\n/tmp/tmpxhb_7l0k.swift:21:9:\
    \ note: 'parens_level_max_parens_count_max_count_max_count' previously declared\
    \ here\n    var parens_level_max_parens_count_max_count_max_count = 0\n      \
    \  ^\n/tmp/tmpxhb_7l0k.swift:26:9: error: invalid redeclaration of 'parens_level_max_parens_count_max_count_max_count_max_count'\n\
    \    var parens_level_max_parens_count_max_count_max_count_max_count = 0\n   \
    \     ^\n/tmp/tmpxhb_7l0k.swift:25:9: note: 'parens_level_max_parens_count_max_count_max_count_max_count'\
    \ previously declared here\n    var parens_level_max_parens_count_max_count_max_count_max_count\
    \ = 0\n        ^\n/tmp/tmpxhb_7l0k.swift:29:9: error: invalid redeclaration of\
    \ 'parens_level_max_parens_count_max_count_max_count_max_count_max_count'\n  \
    \  var parens_level_max_parens_count_max_count_max_count_max_count_max_count =\
    \ 0\n        ^\n/tmp/tmpxhb_7l0k.swift:28:9: note: 'parens_level_max_parens_count_max_count_max_count_max_count_max_count'\
    \ previously declared here\n    var parens_level_max_parens_count_max_count_max_count_max_count_max_count\
    \ = 0\n        ^\n/tmp/tmpxhb_7l0k.swift:32:9: error: invalid redeclaration of\
    \ 'parens_level_max_parens_count_max_count_max_count_max_count_m"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6ry0yiyy.swift:23:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yiyy.swift:22:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yiyy.swift:26:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yiyy.swift:25:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yiyy.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yiyy.swift:27:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yiyy.swift:30:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp6ry0yi"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        switch char {\n    \
    \    case \")\":\n            levels[level] = parens\n            parens = 0\n\
    \            level += 1\n        case \"(\":\n            parens += 1\n      \
    \  default:\n            parens = 0\n        }\n    }\n    levels[level] = parens\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp46evipy0.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group =\
    \ 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplyu0w2kl.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmplyu0w2kl.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmplyu0w2kl.swift:10:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmplyu0w2kl.swift:11:9: warning: initialization of variable 'paren_start'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_start = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmplyu0w2kl.swift:12:9:\
    \ warning: initialization of variable 'paren_end' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_end = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmplyu0w2kl.swift:13:9: warning: initialization of variable 'paren_char'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmplyu0w2kl.swift:14:9:\
    \ warning: initialization of variable 'paren_char_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_count =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmplyu0w2kl.swift:15:9: warning: initialization\
    \ of variable 'paren_char_count_in_paren' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_char_count_in_paren = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmplyu0w2kl.swift:16:9: warning:\
    \ initialization of variable 'paren_char_count_in_paren_group' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_char_count_in_paren_group\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmplyu0w2kl.swift:17:9:\
    \ warning: initialization of variable 'paren_char_count_in_paren_group_in_paren'\
    \ was never used; consider replacing with ass"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppvmjhiz5.swift:14:9: error: invalid redeclaration of 'paren_char_count'\n\
    \    var paren_char_count = 0\n        ^\n/tmp/tmppvmjhiz5.swift:12:9: note: 'paren_char_count'\
    \ previously declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmppvmjhiz5.swift:15:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmppvmjhiz5.swift:16:9:\
    \ error: invalid redeclaration of 'paren_char_count'\n    var paren_char_count\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:12:9: note: 'paren_char_count' previously\
    \ declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmppvmjhiz5.swift:17:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmppvmjhiz5.swift:18:9:\
    \ error: invalid redeclaration of 'paren_char_count'\n    var paren_char_count\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:12:9: note: 'paren_char_count' previously\
    \ declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmppvmjhiz5.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmppvmjhiz5.swift:20:9:\
    \ error: invalid redeclaration of 'paren_char_count'\n    var paren_char_count\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:12:9: note: 'paren_char_count' previously\
    \ declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmppvmjhiz5.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:13:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmppvmjhiz5.swift:22:9:\
    \ error: invalid redeclaration of 'paren_char_count'\n    var paren_char_count\
    \ = 0\n        ^\n/tmp/tmppvmjhiz5.swift:12:9: note"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp812dv2t3.swift:19:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:24:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmp812dv2t3.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nestin"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if parens == 0 {\n\
    \            levels.append(level)\n        }\n        switch c {\n        case\
    \ .OpenParen, .CloseParen:\n            parens += 1\n        case .OpenBracket:\n\
    \            level += 1\n        case .CloseBracket:\n            level -= 1\n\
    \        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpri1s2clk.swift:16:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenParen'\n        case .OpenParen, .CloseParen:\n             ~^~~~~~~~~\n\
    /tmp/tmpri1s2clk.swift:16:27: error: type 'Unicode.Scalar' has no member 'CloseParen'\n\
    \        case .OpenParen, .CloseParen:\n                         ~^~~~~~~~~~\n\
    /tmp/tmpri1s2clk.swift:18:15: error: type 'Unicode.Scalar' has no member 'OpenBracket'\n\
    \        case .OpenBracket:\n             ~^~~~~~~~~~~\n/tmp/tmpri1s2clk.swift:20:15:\
    \ error: type 'Unicode.Scalar' has no member 'CloseBracket'\n        case .CloseBracket:\n\
    \             ~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if paren_count == 0 {\n            levels.append(level)\n       \
    \     paren_start = c\n            paren_count = 1\n            paren_level =\
    \ 0\n        } else if paren_count == 1 && paren_level == 0 {\n            levels.append(level)\n\
    \            paren_start = c\n            paren_count = 2\n            paren_level\
    \ = 1\n        } else if paren_count == 2 && paren_level == 1 {\n            levels.append(level)\n\
    \            paren_start = c\n            paren_count = 3\n            paren_level\
    \ = 2\n        } else {\n            levels.append(level)\n            paren_start\
    \ = c\n            paren_count = 0\n            paren_level = 0\n        }\n \
    \       level++\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpn_vm5bku.swift:16:27: error: cannot assign value of type 'Unicode.Scalar'\
    \ to type 'Int'\n            paren_start = c\n                          ^\n/tmp/tmpn_vm5bku.swift:21:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_start = c\n                          ^\n/tmp/tmpn_vm5bku.swift:26:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_start = c\n                          ^\n/tmp/tmpn_vm5bku.swift:31:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_start = c\n                          ^\n/tmp/tmpn_vm5bku.swift:35:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_paren_count\
    \ = 0\n    var paren_paren_level = 0\n    var paren_paren_paren_count = 0\n  \
    \  var paren_paren_paren_level = 0\n    var paren_paren_paren_paren_count = 0\n\
    \    var paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n   \
    \ var paren_paren_paren_paren_paren_paren_paren_paren_paren_count = 0\n    var\
    \ paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8i0x7mh4.swift:38:9: error: type annotation missing in pattern\n\
    \    var paren_paren_paren_paren_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwgt7zrdz.swift:16:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:14:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:15:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmpwgt7zrdz.swift:14:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:15:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:14:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:15:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:14:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpwgt7zrdz.swift:15:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_count2 = 0\n    var paren_level_count3 = 0\n    var\
    \ paren_level_count4 = 0\n    var paren_level_count5 = 0\n    var paren_level_count6\
    \ = 0\n    var paren_level_count7 = 0\n    var paren_level_count8 = 0\n    var\
    \ paren_level_count9 = 0\n    var paren_level_count10 = 0\n    var paren_level_count11\
    \ = 0\n    var paren_level_count12 = 0\n    var paren_level_count13 = 0\n    var\
    \ paren_level_count14 = 0\n    var paren_level_count15 = 0\n    var paren_level_count16\
    \ = 0\n    var paren_level_count17 = 0\n    var paren_level_count18 = 0\n    var\
    \ paren_level_count19 = 0\n    var paren_level_count20 = 0\n    var paren_level_count21\
    \ = 0\n    var paren_level_count22 = 0\n    var paren_level_count23 = 0\n    var\
    \ paren_level_count24 = 0\n    var paren_level_count25 = 0\n    var paren_level_count26\
    \ = 0\n    var paren_level_count27 = 0\n    var paren_level_count28 = 0\n    var\
    \ paren_level_count29 = 0\n    var paren_level_count30 = 0\n    var paren_level_count31\
    \ = 0\n    var paren_level_count32 = 0\n    var paren_level_count33 = 0\n    var\
    \ paren_level_count34 = 0\n    var paren_level_count35 = 0\n    var paren_level_count36\
    \ = 0\n    var paren_level_count37 = 0\n    var paren_level_count38 = 0\n    var\
    \ paren_level_count39 = 0\n    var paren_level_count40 = 0\n    var paren_level_count41\
    \ = 0\n    var paren_level_count42 = 0\n    var paren_level_count43 = 0\n    var\
    \ paren_level_count44 = 0\n    var paren_level_count45 = 0\n    var paren_level_count46\
    \ = 0\n    var paren_level_count47 = 0\n    var paren_level_count48 = 0\n    var\
    \ paren_level_count49 = 0\n    var paren_level_count50 = 0\n    var paren_level_count51\
    \ = 0\n    var paren_level_count52 = 0\n    var paren_level_count53 = 0\n    var\
    \ paren_level_count54 = 0\n    var paren_level_count55 = 0\n    var paren_level_count56\
    \ = 0\n    var paren_level_count57 = 0\n    var paren_level_count58 = 0\n    var\
    \ paren_level_count59 = 0\n    var paren_level_count60 = 0\n    var paren_level_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptvlmuglm.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_level_count\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting = 0\n    var paren_nesting = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy4kfxiev.swift:19:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpy4kfxiev.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpy4kfxiev.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpy4kfxiev.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpy4kfxiev.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpy4kfxiev.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpy4kfxiev.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpy4kfxiev.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpy4kfxiev.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpy4kfxiev.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpy4kfxiev.swift:24:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpy4kfxiev.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    for char in\
    \ paren_string {\n        if char == '(' {\n            paren_count++\n      \
    \      if paren_count > max_level_parens {\n                max_level_parens =\
    \ paren_count\n            }\n        } else if char == ')' {\n            paren_count--\n\
    \            if paren_count < max_level_parens {\n                max_level_parens\
    \ = paren_count\n            }\n        }\n        if char == ' ' {\n        \
    \    level++\n            if level > max_level {\n                max_level =\
    \ level\n            }\n        }\n    }\n    return max_level_parens\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2j26jk5d.swift:14:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp2j26jk5d.swift:19:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp2j26jk5d.swift:25:20: error: single-quoted\
    \ string literal found, use '\"'\n        if char == ' ' {\n                 \
    \  ^~~\n                   \" \"\n/tmp/tmp2j26jk5d.swift:15:24: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            paren_count++\n\
    \                       ^~\n/tmp/tmp2j26jk5d.swift:20:24: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            paren_count--\n           \
    \            ^~\n/tmp/tmp2j26jk5d.swift:26:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp2j26jk5d.swift:32:12:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return max_level_parens\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_char\
    \ = 0\n    var paren_end_char = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_start_char = 0\n    var paren_char_end_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2gdv3zei.swift:27:9: error: invalid redeclaration of 'paren_char_count'\n\
    \    var paren_char_count = 0\n        ^\n/tmp/tmp2gdv3zei.swift:19:9: note: 'paren_char_count'\
    \ previously declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmp2gdv3zei.swift:28:9:\
    \ error: invalid redeclaration of 'paren_char_level'\n    var paren_char_level\
    \ = 0\n        ^\n/tmp/tmp2gdv3zei.swift:20:9: note: 'paren_char_level' previously\
    \ declared here\n    var paren_char_level = 0\n        ^\n/tmp/tmp2gdv3zei.swift:29:9:\
    \ error: invalid redeclaration of 'paren_char_start'\n    var paren_char_start\
    \ = 0\n        ^\n/tmp/tmp2gdv3zei.swift:21:9: note: 'paren_char_start' previously\
    \ declared here\n    var paren_char_start = 0\n        ^\n/tmp/tmp2gdv3zei.swift:30:9:\
    \ error: invalid redeclaration of 'paren_char_end'\n    var paren_char_end = 0\n\
    \        ^\n/tmp/tmp2gdv3zei.swift:22:9: note: 'paren_char_end' previously declared\
    \ here\n    var paren_char_end = 0\n        ^\n/tmp/tmp2gdv3zei.swift:31:9: error:\
    \ invalid redeclaration of 'paren_char_start_index'\n    var paren_char_start_index\
    \ = 0\n        ^\n/tmp/tmp2gdv3zei.swift:23:9: note: 'paren_char_start_index'\
    \ previously declared here\n    var paren_char_start_index = 0\n        ^\n/tmp/tmp2gdv3zei.swift:32:9:\
    \ error: invalid redeclaration of 'paren_char_end_index'\n    var paren_char_end_index\
    \ = 0\n        ^\n/tmp/tmp2gdv3zei.swift:24:9: note: 'paren_char_end_index' previously\
    \ declared here\n    var paren_char_end_index = 0\n        ^\n/tmp/tmp2gdv3zei.swift:33:9:\
    \ error: invalid redeclaration of 'paren_char_start_char'\n    var paren_char_start_char\
    \ = 0\n        ^\n/tmp/tmp2gdv3zei.swift:25:9: note: 'paren_char_start_char' previously\
    \ declared here\n    var paren_char_start_char = 0\n        ^\n/tmp/tmp2gdv3zei.swift:34:9:\
    \ error: invalid redeclaration of 'paren_char_end_char'\n    var paren_char_end_char\
    \ = 0\n        ^\n/tmp/tmp2gdv3zei.swift:26:9: note: 'paren_char_end_char' previously\
    \ declared here\n    var paren_char_end_char = 0\n        ^\n/tmp/tmp2gdv3zei.swift:35:9:\
    \ error: invalid redeclaration of 'paren_char_count'\n    var "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_char_indexes\
    \ = [Int]()\n    var paren_char_indexes_count = [Int]()\n    var paren_char_indexes_count_max\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_char_indexes_count_max_index\
    \ = 0\n    var paren_char_indexes_count_max_index = 0\n    var paren_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6eqvd5hl.swift:20:9: error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n\
    \    var paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'paren_char_indexes_count_max_index' previously declared here\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'paren_char_indexes_count_max_index' previously declared here\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:22:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'paren_char_indexes_count_max_index' previously declared here\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:23:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'paren_char_indexes_count_max_index' previously declared here\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:24:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'paren_char_indexes_count_max_index' previously declared here\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:25:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'paren_char_indexes_count_max_index' previously declared here\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:26:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_count_max_index'\n    var\
    \ paren_char_indexes_count_max_index = 0\n        ^\n/tmp/tmp6eqvd5hl.swift:19:9:\
    \ note: 'par"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var max_level_group_count = 0\n    var groups = [String]()\n    for\
    \ c in paren_string.unicodeScalars {\n        if c == parenthesisOpeningCharacter\
    \ {\n            level += 1\n            if level > max_level {\n            \
    \    max_level = level\n                max_level_group = level\n            \
    \    max_level_group_count = 1\n            } else {\n                max_level_group_count\
    \ += 1\n            }\n        } else if c == parenthesisClosingCharacter {\n\
    \            level -= 1\n            if level < 0 {\n                panic(\"\
    unexpected closing parenthesis\")\n            }\n            if level > max_level\
    \ {\n                max_level = level\n                max_level_group = level\n\
    \                max_level_group_count = 1\n            } else {\n           \
    \     max_level_group_count += 1\n            }\n        } else {\n          \
    \  if level > max_level {\n                max_level = level\n               \
    \ max_level_group = level\n                max_level_group_count = 1\n       \
    \     } else {\n                max_level_group_count += 1\n            }\n  \
    \          groups.append(String(c))\n        }\n    }\n    if level != 0 {\n \
    \       panic(\"unexpected parenthesis level\")\n    }\n    if max_level_group_count\
    \ > 1 {\n        panic(\"unexpected groups\")\n    }\n    if max_level_group !=\
    \ max_level {\n        panic(\"unexpected level\")\n    }\n    return max_level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgyniu2pu.swift:14:17: error: cannot find 'parenthesisOpeningCharacter'\
    \ in scope\n        if c == parenthesisOpeningCharacter {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgyniu2pu.swift:23:24: error: cannot find 'parenthesisClosingCharacter'\
    \ in scope\n        } else if c == parenthesisClosingCharacter {\n           \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgyniu2pu.swift:26:17: error:\
    \ cannot find 'panic' in scope\n                panic(\"unexpected closing parenthesis\"\
    )\n                ^~~~~\n/tmp/tmpgyniu2pu.swift:47:9: error: cannot find 'panic'\
    \ in scope\n        panic(\"unexpected parenthesis level\")\n        ^~~~~\n/tmp/tmpgyniu2pu.swift:50:9:\
    \ error: cannot find 'panic' in scope\n        panic(\"unexpected groups\")\n\
    \        ^~~~~\n/tmp/tmpgyniu2pu.swift:53:9: error: cannot find 'panic' in scope\n\
    \        panic(\"unexpected level\")\n        ^~~~~\n/tmp/tmpgyniu2pu.swift:55:12:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return max_level\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_size\
    \ = 0\n    var paren_group_count = 0\n    var paren_group_level = 0\n    var paren_group_parens\
    \ = 0\n    var paren_group_parens_count = 0\n    var paren_group_parens_level\
    \ = 0\n    var paren_group_parens_parens = 0\n    var paren_group_parens_parens_count\
    \ = 0\n    var paren_group_parens_parens_level = 0\n    var paren_group_parens_parens_parens\
    \ = 0\n    var paren_group_parens_parens_parens_count = 0\n    var paren_group_parens_parens_parens_level\
    \ = 0\n    var paren_group_parens_parens_parens_parens = 0\n    var paren_group_parens_parens_parens_parens_count\
    \ = 0\n    var paren_group_parens_parens_parens_parens_level = 0\n    var paren_group_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_count = 0\n    var\
    \ paren_group_parens_parens_parens_parens_parens_level = 0\n    var paren_group_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_parens_count = 0\n\
    \    var paren_group_parens_parens_parens_parens_parens_parens_level = 0\n   \
    \ var paren_group_parens_parens_parens_parens_parens_parens_parens = 0\n    var\
    \ paren_group_parens_parens_parens_parens_parens_parens_parens_count = 0\n   \
    \ var paren_group_parens_parens_parens_parens_parens_parens_parens_level = 0\n\
    \    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_count\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens_count\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens_level\
    \ = 0\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_group_parens_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4y63vcq5.swift:44:9: error: type annotation missing in pattern\n\
    \    var paren_group_parens_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  var paren_levels_count = 0\n    var paren_levels_index = 0\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_string_index = 0\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_string_index = 0\n    var paren_levels_string = \"\
    \"\n    var paren_levels_count = 0\n    var paren_levels_index = 0\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_string_index = 0\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_string_index = 0\n    var paren_levels_string = \"\
    \"\n    var paren_levels_count = 0\n    var paren_levels_index = 0\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_string_index = 0\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_string_index = 0\n    var paren_levels_string = \"\
    \"\n    var paren_levels_count = 0\n    var paren_levels_index = 0\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_string_index = 0\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_string_index = 0\n    var paren_levels_string = \"\
    \"\n    var paren_levels_count = 0\n    var paren_levels_index = 0\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string = \"\"\n    var paren_levels_count = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_string_index = 0\n    var\
    \ paren_levels_string = \"\"\n    var paren_levels_count = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_string_index = 0\n    var paren_levels_string\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3_jn5jr8.swift:16:9: error: invalid redeclaration of 'paren_levels_string'\n\
    \    var paren_levels_string = \"\"\n        ^\n/tmp/tmp3_jn5jr8.swift:12:9: note:\
    \ 'paren_levels_string' previously declared here\n    var paren_levels_string\
    \ = \"\"\n        ^\n/tmp/tmp3_jn5jr8.swift:17:9: error: invalid redeclaration\
    \ of 'paren_levels_count'\n    var paren_levels_count = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:13:9:\
    \ note: 'paren_levels_count' previously declared here\n    var paren_levels_count\
    \ = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:18:9: error: invalid redeclaration of\
    \ 'paren_levels_index'\n    var paren_levels_index = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:14:9:\
    \ note: 'paren_levels_index' previously declared here\n    var paren_levels_index\
    \ = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:19:9: error: invalid redeclaration of\
    \ 'paren_levels_string_index'\n    var paren_levels_string_index = 0\n       \
    \ ^\n/tmp/tmp3_jn5jr8.swift:15:9: note: 'paren_levels_string_index' previously\
    \ declared here\n    var paren_levels_string_index = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_string'\n    var paren_levels_string\
    \ = \"\"\n        ^\n/tmp/tmp3_jn5jr8.swift:12:9: note: 'paren_levels_string'\
    \ previously declared here\n    var paren_levels_string = \"\"\n        ^\n/tmp/tmp3_jn5jr8.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_count'\n    var paren_levels_count\
    \ = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:13:9: note: 'paren_levels_count' previously\
    \ declared here\n    var paren_levels_count = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_index'\n    var paren_levels_index\
    \ = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:14:9: note: 'paren_levels_index' previously\
    \ declared here\n    var paren_levels_index = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:23:9:\
    \ error: invalid redeclaration of 'paren_levels_string_index'\n    var paren_levels_string_index\
    \ = 0\n        ^\n/tmp/tmp3_jn5jr8.swift:15:9: note: 'paren_levels_string_index'\
    \ previously declared here\n    var paren_levels_string_index = 0\n        ^\n\
    /tmp/tmp3_jn5jr8.swi"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_size\
    \ = 0\n    var paren_stack_max_size = 0\n    var paren_stack_max_level = 0\n \
    \   var paren_stack_max_level_count = 0\n    var paren_stack_max_level_count_max\
    \ = 0\n    var paren_stack_max_level_count_max_max = 0\n    var paren_stack_max_level_count_max_min\
    \ = 0\n    var paren_stack_max_level_count_max_min_index = 0\n    var paren_stack_max_level_count_max_min_index_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index2 = 0\n    var paren_stack_max_level_count_max_min_index2_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index3 = 0\n    var paren_stack_max_level_count_max_min_index3_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index4 = 0\n    var paren_stack_max_level_count_max_min_index4_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index5 = 0\n    var paren_stack_max_level_count_max_min_index5_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index6 = 0\n    var paren_stack_max_level_count_max_min_index6_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index7 = 0\n    var paren_stack_max_level_count_max_min_index7_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index8 = 0\n    var paren_stack_max_level_count_max_min_index8_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index9 = 0\n    var paren_stack_max_level_count_max_min_index9_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index10 = 0\n    var paren_stack_max_level_count_max_min_index10_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index11 = 0\n    var paren_stack_max_level_count_max_min_index11_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index12 = 0\n    var paren_stack_max_level_count_max_min_index12_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index13 = 0\n    var paren_stack_max_level_count_max_min_index13_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index14 = 0\n    var paren_stack_max_level_count_max_min_index14_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index15 = 0\n    var paren_stack_max_level_count_max_min_index15_index\
    \ = 0\n    var paren_stack_max_level_count_max_min_index16 = 0\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnpim3fo0.swift:51:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp662gynw2.swift:32:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp662gynw2.swift:31:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp662gynw2.swift:34:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp662gynw2.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp662gynw2.swift:35:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp662gynw2.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmp662gynw2.swift:37:9: "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var max_level_group_count = 0\n    var groups = [String]()\n    var\
    \ group_count = 0\n    var group_level = 0\n    var group_level_group = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_count = 0\n    var group_level_groups = [String]()\n\
    \    var group_level_group_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpus54bacz.swift:18:9: error: invalid redeclaration of 'group_level_group_count'\n\
    \    var group_level_group_count = 0\n        ^\n/tmp/tmpus54bacz.swift:16:9:\
    \ note: 'group_level_group_count' previously declared here\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmpus54bacz.swift:19:9: error: invalid redeclaration of\
    \ 'group_level_groups'\n    var group_level_groups = [String]()\n        ^\n/tmp/tmpus54bacz.swift:17:9:\
    \ note: 'group_level_groups' previously declared here\n    var group_level_groups\
    \ = [String]()\n        ^\n/tmp/tmpus54bacz.swift:20:9: error: invalid redeclaration\
    \ of 'group_level_group_count'\n    var group_level_group_count = 0\n        ^\n\
    /tmp/tmpus54bacz.swift:16:9: note: 'group_level_group_count' previously declared\
    \ here\n    var group_level_group_count = 0\n        ^\n/tmp/tmpus54bacz.swift:21:9:\
    \ error: invalid redeclaration of 'group_level_groups'\n    var group_level_groups\
    \ = [String]()\n        ^\n/tmp/tmpus54bacz.swift:17:9: note: 'group_level_groups'\
    \ previously declared here\n    var group_level_groups = [String]()\n        ^\n\
    /tmp/tmpus54bacz.swift:22:9: error: invalid redeclaration of 'group_level_group_count'\n\
    \    var group_level_group_count = 0\n        ^\n/tmp/tmpus54bacz.swift:16:9:\
    \ note: 'group_level_group_count' previously declared here\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmpus54bacz.swift:23:9: error: invalid redeclaration of\
    \ 'group_level_groups'\n    var group_level_groups = [String]()\n        ^\n/tmp/tmpus54bacz.swift:17:9:\
    \ note: 'group_level_groups' previously declared here\n    var group_level_groups\
    \ = [String]()\n        ^\n/tmp/tmpus54bacz.swift:24:9: error: invalid redeclaration\
    \ of 'group_level_group_count'\n    var group_level_group_count = 0\n        ^\n\
    /tmp/tmpus54bacz.swift:16:9: note: 'group_level_group_count' previously declared\
    \ here\n    var group_level_group_count = 0\n        ^\n/tmp/tmpus54bacz.swift:25:9:\
    \ error: invalid redeclaration of 'group_level_groups'\n    var group_level_groups\
    \ = [String]()\n        ^\n/tmp/tmpus54bacz.swift:17:9: note: 'group_level_groups'\
    \ previously "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for ch in paren_string.characters {\n   \
    \     if ch == '(' {\n            parens += 1\n            levels.append(level)\n\
    \            parens_count += 1\n        } else if ch == ')' {\n            parens_count\
    \ -= 1\n            if parens_count == 0 {\n                level -= 1\n     \
    \       }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2soiwhp0.swift:13:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmp2soiwhp0.swift:17:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmp2soiwhp0.swift:12:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for char in paren_string {\n        if char == '(' {\n            paren_count\
    \ += 1\n        } else if char == ')' {\n            paren_count -= 1\n      \
    \      if paren_count == 0 {\n                levels.append(level)\n         \
    \   }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyjf4anig.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpyjf4anig.swift:14:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_parens = 0\n  \
    \  var level = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_count_in_string\
    \ = 0\n    var parens_count_in_parens = 0\n    var parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_string = 0\n    var parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count = 0\n    var parens_count_in_parens_count_in_parens_count_in_string\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens = 0\n  \
    \  var parens_count_in_parens_count_in_parens_count_in_parens_count = 0\n    var\
    \ parens_count_in_parens_count_in_parens_count_in_parens_count_in_string = 0\n\
    \    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_string\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_string\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_string\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_string\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens\
    \ = 0\n    var parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_parens_count_in_string\
    \ = 0\n    var parens_count_in_parens_count_in_parens_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwgs9gnki.swift:35:9: error: type annotation missing in pattern\n\
    \    var parens_count_in_parens_count_in_parens_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var group = 0\n    var group_count = 0\n    var group_level = 0\n \
    \   var group_level_group = 0\n    var group_level_group_count = 0\n    var group_level_group_level\
    \ = 0\n    var group_level_group_level_group = 0\n    var group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level = 0\n    var group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_count = 0\n    var group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group = 0\n   \
    \ var group_level_group_level_group_level_group_level_group_count = 0\n    var\
    \ group_level_group_level_group_level_group_level_group_level = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var group_level_group_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpw29kfa04.swift:29:9: error: invalid redeclaration of 'group_level_group_level_group_level_group_level_group_level_group'\n\
    \    var group_level_group_level_group_level_group_level_group_level_group = 0\n\
    \        ^\n/tmp/tmpw29kfa04.swift:26:9: note: 'group_level_group_level_group_level_group_level_group_level_group'\
    \ previously declared here\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n        ^\n/tmp/tmpw29kfa04.swift:32:9: error: invalid redeclaration of\
    \ 'group_level_group_level_group_level_group_level_group_level_group'\n    var\
    \ group_level_group_level_group_level_group_level_group_level_group = 0\n    \
    \    ^\n/tmp/tmpw29kfa04.swift:26:9: note: 'group_level_group_level_group_level_group_level_group_level_group'\
    \ previously declared here\n    var group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n        ^\n/tmp/tmpw29kfa04.swift:33:9: error: invalid redeclaration of\
    \ 'group_level_group_level_group_level_group_level_group_level_group_count'\n\
    \    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n        ^\n/tmp/tmpw29kfa04.swift:30:9: note: 'group_level_group_level_group_level_group_level_group_level_group_count'\
    \ previously declared here\n    var group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n        ^\n/tmp/tmpw29kfa04.swift:34:9: error: invalid redeclaration of\
    \ 'group_level_group_level_group_level_group_level_group_level_group_level'\n\
    \    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n        ^\n/tmp/tmpw29kfa04.swift:31:9: note: 'group_level_group_level_group_level_group_level_group_level_group_level'\
    \ previously declared here\n    var group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n        ^\n/tmp/tmpw29kfa04.swift:35:9: error: invalid redeclaration of\
    \ 'group_level_group_level_group_level_group_level_group_level_group'\n    var\
    \ group_level_group_level_group_level_group_level_group_level_group = 0\n    \
    \    ^\n/tmp/tmpw29kfa04.swift:26:9: note: 'group_level_gro"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_index2 = 0\n    var\
    \ paren_char_index3 = 0\n    var paren_char_index4 = 0\n    var paren_char_index5\
    \ = 0\n    var paren_char_index6 = 0\n    var paren_char_index7 = 0\n    var paren_char_index8\
    \ = 0\n    var paren_char_index9 = 0\n    var paren_char_index10 = 0\n    var\
    \ paren_char_index11 = 0\n    var paren_char_index12 = 0\n    var paren_char_index13\
    \ = 0\n    var paren_char_index14 = 0\n    var paren_char_index15 = 0\n    var\
    \ paren_char_index16 = 0\n    var paren_char_index17 = 0\n    var paren_char_index18\
    \ = 0\n    var paren_char_index19 = 0\n    var paren_char_index20 = 0\n    var\
    \ paren_char_index21 = 0\n    var paren_char_index22 = 0\n    var paren_char_index23\
    \ = 0\n    var paren_char_index24 = 0\n    var paren_char_index25 = 0\n    var\
    \ paren_char_index26 = 0\n    var paren_char_index27 = 0\n    var paren_char_index28\
    \ = 0\n    var paren_char_index29 = 0\n    var paren_char_index30 = 0\n    var\
    \ paren_char_index31 = 0\n    var paren_char_index32 = 0\n    var paren_char_index33\
    \ = 0\n    var paren_char_index34 = 0\n    var paren_char_index35 = 0\n    var\
    \ paren_char_index36 = 0\n    var paren_char_index37 = 0\n    var paren_char_index38\
    \ = 0\n    var paren_char_index39 = 0\n    var paren_char_index40 = 0\n    var\
    \ paren_char_index41 = 0\n    var paren_char_index42 = 0\n    var paren_char_index43\
    \ = 0\n    var paren_char_index44 = 0\n    var paren_char_index45 = 0\n    var\
    \ paren_char_index46 = 0\n    var paren_char_index47 = 0\n    var paren_char_index48\
    \ = 0\n    var paren_char_index49 = 0\n    var paren_char_index50 = 0\n    var\
    \ paren_char_index51 = 0\n    var paren_char_index52 = 0\n    var paren_char_index53\
    \ = 0\n    var paren_char_index54 = 0\n    var paren_char_index55 = 0\n    var\
    \ paren_char_index56 = 0\n    var paren_char_index57 = 0\n    var paren_char_index58\
    \ = 0\n    var paren_char_index59 = 0\n    var paren_char_index60 = 0\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe9hfidqw.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpe9hfidqw.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpe9hfidqw.swift:10:9: warning: initialization of variable 'max_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpe9hfidqw.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpe9hfidqw.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpe9hfidqw.swift:13:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpe9hfidqw.swift:14:9: warning: initialization of variable 'paren_char_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_index = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpe9hfidqw.swift:15:9:\
    \ warning: initialization of variable 'paren_char_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_index2 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpe9hfidqw.swift:16:9: warning: initialization\
    \ of variable 'paren_char_index3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_char_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpe9hfidqw.swift:17:9: warning: initialization of variable 'paren_char_index4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_paren = 0\n   \
    \ var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n\
    \    var paren_level_paren_count = 0\n    var paren_level_paren_level = 0\n  \
    \  var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    for char in paren_string.unicodeScalars {\n        if char == ')' {\n\
    \            paren_level_paren_level_paren_count -= 1\n            if paren_level_paren_level_paren_count\
    \ == 0 {\n                paren_level_paren_level_paren_count += paren_level_paren_level\n\
    \            }\n        }\n        if char == '(' {\n            paren_level_paren_level_paren_count\
    \ += 1\n            if paren_level_paren_level_paren_count == 0 {\n          \
    \      paren_level_paren_level_paren_count += paren_level_paren_level\n      \
    \      }\n        }\n        if char == ')' {\n            paren_level_paren_level\
    \ += 1\n            if paren_level_paren_level == 0 {\n                paren_level_paren_level\
    \ += paren_level_paren_count\n            }\n        }\n        if char == '('\
    \ {\n            paren_level_paren_level += 1\n            if paren_level_paren_level\
    \ == 0 {\n                paren_level_paren_level += paren_level_paren_count\n\
    \            }\n        }\n        if char == ')' {\n            paren_level +=\
    \ 1\n            if paren_level == 0 {\n                paren_level += paren_count\n\
    \            }\n        }\n        if char == '(' {\n            paren_level +=\
    \ 1\n            if paren_level == 0 {\n                paren_level += paren_count\n\
    \            }\n        }\n        if char == ')' {\n            paren_count -=\
    \ 1\n            if paren_count == 0 {\n                paren_level -= paren_count\n\
    \            }\n        }\n        if char == '(' {\n            paren_count -=\
    \ 1\n            if paren_count == 0 {\n                paren_level -= paren_count\n\
    \            }\n        }\n        if char == ')' {\n            max_level_paren\
    \ = paren_level\n            if paren_level_paren_count == 0 {\n             \
    \   max_level_paren = paren_level_paren\n            }\n        }\n        if\
    \ char == '(' {\n            max_level_paren = paren_level\n            if paren_level_paren_count\
    \ == 0 {\n                max_level_paren = paren_level_paren\n            }\n\
    \        }\n        if char == ')' {\n            max_level = paren_level\n  \
    \          if paren_level_paren_count == 0 {\n                max_level = paren_level_paren\n\
    \            }\n        }\n        if char == '(' {\n            max_level = paren_level\n\
    \            if paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpztjj8fkm.swift:18:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ')' {\n                   ^~~\n               \
    \    \")\"\n/tmp/tmpztjj8fkm.swift:24:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == '(' {\n                   ^~~\n        \
    \           \"(\"\n/tmp/tmpztjj8fkm.swift:30:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == ')' {\n                   ^~~\n        \
    \           \")\"\n/tmp/tmpztjj8fkm.swift:36:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == '(' {\n                   ^~~\n        \
    \           \"(\"\n/tmp/tmpztjj8fkm.swift:42:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == ')' {\n                   ^~~\n        \
    \           \")\"\n/tmp/tmpztjj8fkm.swift:48:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == '(' {\n                   ^~~\n        \
    \           \"(\"\n/tmp/tmpztjj8fkm.swift:54:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == ')' {\n                   ^~~\n        \
    \           \")\"\n/tmp/tmpztjj8fkm.swift:60:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == '(' {\n                   ^~~\n        \
    \           \"(\"\n/tmp/tmpztjj8fkm.swift:66:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == ')' {\n                   ^~~\n        \
    \           \")\"\n/tmp/tmpztjj8fkm.swift:72:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == '(' {\n                   ^~~\n        \
    \           \"(\"\n/tmp/tmpztjj8fkm.swift:78:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == ')' {\n                   ^~~\n        \
    \           \")\"\n/tmp/tmpztjj8fkm.swift:84:20: error: single-quoted string literal\
    \ found, use '\"'\n        if char == '(' {\n                   ^~~\n        \
    \           \"(\"\n/tmp/tmpztjj8fkm.swift:86:22: error: expected '{' after 'if'\
    \ condition\n            if paren_\n                     ^\n/tmp/tmpztjj8fkm.swift:104:67:\
    \ error: expected '}' at end of brace statement\nassert(parse_nested_parens(pare"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_levels_string = \"\"\n    var paren_levels_string_index = 0\n \
    \   var paren_levels_string_index2 = 0\n    var paren_levels_string_index3 = 0\n\
    \    var paren_levels_string_index4 = 0\n    var paren_levels_string_index5 =\
    \ 0\n    var paren_levels_string_index6 = 0\n    var paren_levels_string_index7\
    \ = 0\n    var paren_levels_string_index8 = 0\n    var paren_levels_string_index9\
    \ = 0\n    var paren_levels_string_index10 = 0\n    var paren_levels_string_index11\
    \ = 0\n    var paren_levels_string_index12 = 0\n    var paren_levels_string_index13\
    \ = 0\n    var paren_levels_string_index14 = 0\n    var paren_levels_string_index15\
    \ = 0\n    var paren_levels_string_index16 = 0\n    var paren_levels_string_index17\
    \ = 0\n    var paren_levels_string_index18 = 0\n    var paren_levels_string_index19\
    \ = 0\n    var paren_levels_string_index20 = 0\n    var paren_levels_string_index21\
    \ = 0\n    var paren_levels_string_index22 = 0\n    var paren_levels_string_index23\
    \ = 0\n    var paren_levels_string_index24 = 0\n    var paren_levels_string_index25\
    \ = 0\n    var paren_levels_string_index26 = 0\n    var paren_levels_string_index27\
    \ = 0\n    var paren_levels_string_index28 = 0\n    var paren_levels_string_index29\
    \ = 0\n    var paren_levels_string_index30 = 0\n    var paren_levels_string_index31\
    \ = 0\n    var paren_levels_string_index32 = 0\n    var paren_levels_string_index33\
    \ = 0\n    var paren_levels_string_index34 = 0\n    var paren_levels_string_index35\
    \ = 0\n    var paren_levels_string_index36 = 0\n    var paren_levels_string_index37\
    \ = 0\n    var paren_levels_string_index38 = 0\n    var paren_levels_string_index39\
    \ = 0\n    var paren_levels_string_index40 = 0\n    var paren_levels_string_index41\
    \ = 0\n    var paren_levels_string_index42 = 0\n    var paren_levels_string_index43\
    \ = 0\n    var paren_levels_string_index44 = 0\n    var paren_levels_string_index45\
    \ = 0\n    var paren_levels_string_index46 = 0\n    var paren_levels_string_index47\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqxm1879s.swift:61:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpqxm1879s.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpqxm1879s.swift:9:9: warning:\
    \ initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpqxm1879s.swift:10:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpqxm1879s.swift:11:9:\
    \ warning: initialization of variable 'paren_nesting' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_nesting = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpqxm1879s.swift:12:9: warning: initialization\
    \ of variable 'paren_levels' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpqxm1879s.swift:13:9: warning: initialization of variable 'paren_levels_string'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_string = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqxm1879s.swift:14:9:\
    \ warning: initialization of variable 'paren_levels_string_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqxm1879s.swift:15:9:\
    \ warning: initialization of variable 'paren_levels_string_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqxm1879s.swift:16:9:\
    \ warning: initialization of variable 'paren_levels_string_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkf79mrn4.swift:16:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmpkf79mrn4.swift:14:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpkf79mrn4.swift:15:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmpkf79mrn4.swift:14:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpkf79mrn4.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:15:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpkf79mrn4.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:14:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpkf79mrn4.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:15:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpkf79mrn4.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:14:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpkf79mrn4.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpkf79mrn4.swift:15:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_char = \"\"\n    var paren_level_char_index = 0\n \
    \   var paren_level_char_count = 0\n    var paren_level_chars = []\n    var paren_level_char_indexes\
    \ = []\n    var paren_level_char_counts = []\n    var paren_level_char_indexes_reversed\
    \ = []\n    var paren_level_char_counts_reversed = []\n    var paren_level_char_indexes_reversed_count\
    \ = 0\n    var paren_level_char_counts_reversed_count = 0\n    var paren_level_char_indexes_reversed_count_max\
    \ = 0\n    var paren_level_char_counts_reversed_count_max = 0\n    var paren_level_char_indexes_reversed_count_max_index\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_index = 0\n    var paren_level_char_indexes_reversed_count_max_count\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_count = 0\n    var paren_level_char_indexes_reversed_count_max_count_index\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_count_index = 0\n  \
    \  var paren_level_char_indexes_reversed_count_max_count_count = 0\n    var paren_level_char_counts_reversed_count_max_count_count\
    \ = 0\n    var paren_level_char_indexes_reversed_count_max_count_count_index =\
    \ 0\n    var paren_level_char_counts_reversed_count_max_count_count_index = 0\n\
    \    var paren_level_char_indexes_reversed_count_max_count_count_count = 0\n \
    \   var paren_level_char_counts_reversed_count_max_count_count_count = 0\n   \
    \ var paren_level_char_indexes_reversed_count_max_count_count_count_index = 0\n\
    \    var paren_level_char_counts_reversed_count_max_count_count_count_index =\
    \ 0\n    var paren_level_char_indexes_reversed_count_max_count_count_count_count\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_count_count_count_count\
    \ = 0\n    var paren_level_char_indexes_reversed_count_max_count_count_count_count_index\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_count_count_count_count_index\
    \ = 0\n    var paren_level_char_indexes_reversed_count_max_count_count_count_count_count\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_count_count_count_count_count\
    \ = 0\n    var paren_level_char_indexes_reversed_count_max_count_count_count_count_count_index\
    \ = 0\n    var paren_level_char_counts_reversed_count_max_count_count_count_count_count_index\
    \ = 0\n    var paren_level_char_indexes_reversed_count_max_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpveqc7g6b.swift:17:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmpveqc7g6b.swift:18:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmpveqc7g6b.swift:19:35: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_counts = []\n          \
    \                        ^~\n/tmp/tmpveqc7g6b.swift:20:45: error: empty collection\
    \ literal requires an explicit type\n    var paren_level_char_indexes_reversed\
    \ = []\n                                            ^~\n/tmp/tmpveqc7g6b.swift:21:44:\
    \ error: empty collection literal requires an explicit type\n    var paren_level_char_counts_reversed\
    \ = []\n                                           ^~\n/tmp/tmpveqc7g6b.swift:48:9:\
    \ error: type annotation missing in pattern\n    var paren_level_char_indexes_reversed_count_max_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_count_in_group\
    \ = 0\n    var parens_count_in_group_in_group = 0\n    var parens_count_in_group_in_group_with_parens\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count\
    \ = 0\n    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppdvpahzl.swift:30:9: error: type annotation missing in pattern\n\
    \    var parens_count_in_group_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_in_group_with_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_levels_count\
    \ = 0\n    var paren_levels_index = 0\n    var paren_levels_size = paren_levels_index\
    \ + 1\n    var paren_levels_capacity = paren_levels_size\n    var paren_levels_array\
    \ = [Int]()\n    var paren_levels_array_count = 0\n    var paren_levels_array_index\
    \ = 0\n    var paren_levels_array_size = paren_levels_array_index + 1\n    var\
    \ paren_levels_array_capacity = paren_levels_array_size\n    var paren_levels_array_elements\
    \ = [Int]()\n    var paren_levels_array_elements_count = 0\n    var paren_levels_array_elements_index\
    \ = 0\n    var paren_levels_array_elements_size = paren_levels_array_elements_index\
    \ + 1\n    var paren_levels_array_elements_capacity = paren_levels_array_elements_size\n\
    \    var paren_levels_array_elements_array = [Int]()\n    var paren_levels_array_elements_array_count\
    \ = 0\n    var paren_levels_array_elements_array_index = 0\n    var paren_levels_array_elements_array_size\
    \ = paren_levels_array_elements_array_index + 1\n    var paren_levels_array_elements_array_capacity\
    \ = paren_levels_array_elements_array_size\n    var paren_levels_array_elements_array_elements\
    \ = [Int]()\n    var paren_levels_array_elements_array_elements_count = 0\n  \
    \  var paren_levels_array_elements_array_elements_index = 0\n    var paren_levels_array_elements_array_elements_size\
    \ = paren_levels_array_elements_array_elements_index + 1\n    var paren_levels_array_elements_array_elements_capacity\
    \ = paren_levels_array_elements_array_elements_size\n    var paren_levels_array_elements_array_elements_array\
    \ = [Int]()\n    var paren_levels_array_elements_array_elements_array_count =\
    \ 0\n    var paren_levels_array_elements_array_elements_array_index = 0\n    var\
    \ paren_levels_array_elements_array_elements_array_size = paren_levels_array_elements_array_elements_array_index\
    \ + 1\n    var paren_levels_array_elements_array_elements_array_capacity = paren_levels_array_elements_array_elements_array_elements_size\n\
    \    var paren_levels_array_elements_array_elements_array_elements = [Int]()\n\
    \    var paren_levels_array_elements_array_elements_array_elements_count = 0\n\
    \    var paren_levels_array_elements_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvg77aeqq.swift:40:69: error: cannot find 'paren_levels_array_elements_array_elements_array_elements_size'\
    \ in scope\n    var paren_levels_array_elements_array_elements_array_capacity\
    \ = paren_levels_array_elements_array_elements_array_elements_size\n         \
    \                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvg77aeqq.swift:43:9: error: type annotation missing in pattern\n    var\
    \ paren_levels_array_elements_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_index\
    \ = 0\n    var paren_group_count = 0\n    var paren_group_parens = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_parens_count = 0\n    var paren_group_parens_index = 0\n    var\
    \ paren_group_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm8qmkui4.swift:18:9: error: invalid redeclaration of 'paren_group_parens_count'\n\
    \    var paren_group_parens_count = 0\n        ^\n/tmp/tmpm8qmkui4.swift:16:9:\
    \ note: 'paren_group_parens_count' previously declared here\n    var paren_group_parens_count\
    \ = 0\n        ^\n/tmp/tmpm8qmkui4.swift:19:9: error: invalid redeclaration of\
    \ 'paren_group_parens_index'\n    var paren_group_parens_index = 0\n        ^\n\
    /tmp/tmpm8qmkui4.swift:17:9: note: 'paren_group_parens_index' previously declared\
    \ here\n    var paren_group_parens_index = 0\n        ^\n/tmp/tmpm8qmkui4.swift:20:9:\
    \ error: invalid redeclaration of 'paren_group_parens_count'\n    var paren_group_parens_count\
    \ = 0\n        ^\n/tmp/tmpm8qmkui4.swift:16:9: note: 'paren_group_parens_count'\
    \ previously declared here\n    var paren_group_parens_count = 0\n        ^\n\
    /tmp/tmpm8qmkui4.swift:21:9: error: invalid redeclaration of 'paren_group_parens_index'\n\
    \    var paren_group_parens_index = 0\n        ^\n/tmp/tmpm8qmkui4.swift:17:9:\
    \ note: 'paren_group_parens_index' previously declared here\n    var paren_group_parens_index\
    \ = 0\n        ^\n/tmp/tmpm8qmkui4.swift:22:9: error: invalid redeclaration of\
    \ 'paren_group_parens_count'\n    var paren_group_parens_count = 0\n        ^\n\
    /tmp/tmpm8qmkui4.swift:16:9: note: 'paren_group_parens_count' previously declared\
    \ here\n    var paren_group_parens_count = 0\n        ^\n/tmp/tmpm8qmkui4.swift:23:9:\
    \ error: invalid redeclaration of 'paren_group_parens_index'\n    var paren_group_parens_index\
    \ = 0\n        ^\n/tmp/tmpm8qmkui4.swift:17:9: note: 'paren_group_parens_index'\
    \ previously declared here\n    var paren_group_parens_index = 0\n        ^\n\
    /tmp/tmpm8qmkui4.swift:24:9: error: invalid redeclaration of 'paren_group_parens_count'\n\
    \    var paren_group_parens_count = 0\n        ^\n/tmp/tmpm8qmkui4.swift:16:9:\
    \ note: 'paren_group_parens_count' previously declared here\n    var paren_group_parens_count\
    \ = 0\n        ^\n/tmp/tmpm8qmkui4.swift:25:9: error: invalid redeclaration of\
    \ 'paren_group_parens_index'\n    var paren_group_parens_index = 0\n        ^\n\
    /tmp/tmpm8qmkui4.swift:17:9: n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_array = [Character]()\n    var paren_char_array_index\
    \ = 0\n    var paren_char_array_length = 0\n    var paren_char_array_max = 0\n\
    \    var paren_char_array_max_index = 0\n    var paren_char_array_max_length =\
    \ 0\n    var paren_char_array_max_count = 0\n    var paren_char_array_max_count_index\
    \ = 0\n    var paren_char_array_max_count_length = 0\n    var paren_char_array_max_count_count\
    \ = 0\n    var paren_char_array_max_count_count_index = 0\n    var paren_char_array_max_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count = 0\n    var paren_char_array_max_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_length = 0\n    var paren_char_array_max_count_count_count_count\
    \ = 0\n    var paren_char_array_max_count_count_count_index = 0\n    var paren_char_array_max_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count = 0\n    var paren_char_array_max_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_length = 0\n    var\
    \ paren_char_array_max_count_count_count_count_count = 0\n    var paren_char_array_max_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_length = 0\n    var\
    \ paren_char_array_max_count_count_count_count_count = 0\n    var paren_char_array_max_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_length = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count = 0\n    var\
    \ paren_char_array_max_count_count_count_count_count_index = 0\n    var paren_char_array_max_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_index = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_length = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_count = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_index = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_length = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_count = 0\n\
    \    var paren_char_array_max_count_count_count_count_count_count_count_index\
    \ = 0\n    var paren_char_array_max_count_count_count_count_count_count_count_length\
    \ = 0\n    var paren_char_array_max_count_count_count_count_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgj8hq2hx.swift:30:9: error: invalid redeclaration of 'paren_char_array_max_count_count_count_index'\n\
    \    var paren_char_array_max_count_count_count_index = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:27:9:\
    \ note: 'paren_char_array_max_count_count_count_index' previously declared here\n\
    \    var paren_char_array_max_count_count_count_index = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:31:9:\
    \ error: invalid redeclaration of 'paren_char_array_max_count_count_count_length'\n\
    \    var paren_char_array_max_count_count_count_length = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:28:9:\
    \ note: 'paren_char_array_max_count_count_count_length' previously declared here\n\
    \    var paren_char_array_max_count_count_count_length = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:32:9:\
    \ error: invalid redeclaration of 'paren_char_array_max_count_count_count_count'\n\
    \    var paren_char_array_max_count_count_count_count = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:29:9:\
    \ note: 'paren_char_array_max_count_count_count_count' previously declared here\n\
    \    var paren_char_array_max_count_count_count_count = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:36:9:\
    \ error: invalid redeclaration of 'paren_char_array_max_count_count_count_count_index'\n\
    \    var paren_char_array_max_count_count_count_count_index = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:33:9:\
    \ note: 'paren_char_array_max_count_count_count_count_index' previously declared\
    \ here\n    var paren_char_array_max_count_count_count_count_index = 0\n     \
    \   ^\n/tmp/tmpgj8hq2hx.swift:37:9: error: invalid redeclaration of 'paren_char_array_max_count_count_count_count_length'\n\
    \    var paren_char_array_max_count_count_count_count_length = 0\n        ^\n\
    /tmp/tmpgj8hq2hx.swift:34:9: note: 'paren_char_array_max_count_count_count_count_length'\
    \ previously declared here\n    var paren_char_array_max_count_count_count_count_length\
    \ = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:38:9: error: invalid redeclaration of\
    \ 'paren_char_array_max_count_count_count_count_count'\n    var paren_char_array_max_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmpgj8hq2hx.swift:35:9: note: 'paren_char_array_max_cou"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = \"\"\n    for c in paren_string\
    \ {\n        if c == '(' {\n            paren_count += 1\n            paren_level\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n         \
    \   if paren_count < 0 {\n                paren_level -= 1\n            }\n  \
    \      } else if paren_count == 0 {\n            levels.append(paren_level)\n\
    \        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa5em8zpz.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpa5em8zpz.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpa5em8zpz.swift:9:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpa5em8zpz.swift:12:9: warning:\
    \ initialization of variable 'paren_char' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    for paren\
    \ in paren_string.characters {\n        if paren == \")\" {\n            levels[level]\
    \ = level\n            level++\n        } else if paren == \"(\" {\n         \
    \   levels[level] = level\n            level++\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpu3r6d4av.swift:10:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for paren in paren_string.characters {\n          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpu3r6d4av.swift:13:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpu3r6d4av.swift:16:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count++\n            levels[level] = paren_count\n            level++\n\
    \        } else if c == ')' {\n            levels[level] = paren_count\n     \
    \       level--\n            paren_count--\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4_jl911r.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp4_jl911r.swift:16:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp4_jl911r.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp4_jl911r.swift:13:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_count++\n                       ^~\n\
    /tmp/tmp4_jl911r.swift:15:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp4_jl911r.swift:18:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  level--\n                 ^~\n/tmp/tmp4_jl911r.swift:19:24: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            paren_count--\n  \
    \                     ^~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl_txb0jt.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = \"\"\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = \"\"\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = \"\"\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = \"\"\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_count = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_end = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_start = 0\n    var\
    \ paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgw78_2_k.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for char in paren_string.characters {\n        if char == \"(\" {\n  \
    \          level += 1\n            parens += 1\n            parens_count += 1\n\
    \            if parens_count > max_level_parens {\n                max_level_parens\
    \ = parens_count\n                max_level = level\n            }\n        }\
    \ else if char == \")\" {\n            level -= 1\n            parens -= 1\n \
    \           if parens == 0 {\n                parens_count -= 1\n            }\n\
    \        }\n        parens_string += String(char)\n    }\n    return Array(max_level_parens).map\
    \ { _ in Array(max_level) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwafkq6_m.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwafkq6_m.swift:32:53: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array(max_level_parens).map { _ in Array(max_level) }\n\
    \                                                    ^\n                     \
    \                               arrayLiteral: \n/tmp/tmpwafkq6_m.swift:32:18:\
    \ error: missing argument label 'arrayLiteral:' in call\n    return Array(max_level_parens).map\
    \ { _ in Array(max_level) }\n                 ^\n                 arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.characters {\n        if ch == '(' {\n     \
    \       paren_count += 1\n        } else if ch == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \            }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptyjqwxw2.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmptyjqwxw2.swift:14:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmptyjqwxw2.swift:11:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    for paren in paren_string.characters {\n        if paren == ')'\
    \ {\n            levels[level] = level\n            if level == 0 {\n        \
    \        max_level = level\n            }\n            level--\n        } else\
    \ {\n            level++\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwwa8__0j.swift:12:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == ')' {\n                    ^~~\n             \
    \       \")\"\n/tmp/tmpwwa8__0j.swift:11:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for paren in paren_string.characters {\n   \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwwa8__0j.swift:17:18: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            level--\n                 ^~\n/tmp/tmpwwa8__0j.swift:19:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char: Char\n    var paren_char_next: Char\n    var paren_char_prev:\
    \ Char\n    var paren_char_prev2: Char\n    var paren_char_next2: Char\n    var\
    \ paren_char_prev3: Char\n    var paren_char_next3: Char\n    var paren_char_prev4:\
    \ Char\n    var paren_char_next4: Char\n    var paren_char_prev5: Char\n    var\
    \ paren_char_next5: Char\n    var paren_char_prev6: Char\n    var paren_char_next6:\
    \ Char\n    var paren_char_prev7: Char\n    var paren_char_next7: Char\n    var\
    \ paren_char_prev8: Char\n    var paren_char_next8: Char\n    var paren_char_prev9:\
    \ Char\n    var paren_char_next9: Char\n    var paren_char_prev10: Char\n    var\
    \ paren_char_next10: Char\n    var paren_char_prev11: Char\n    var paren_char_next11:\
    \ Char\n    var paren_char_prev12: Char\n    var paren_char_next12: Char\n   \
    \ var paren_char_prev13: Char\n    var paren_char_next13: Char\n    var paren_char_prev14:\
    \ Char\n    var paren_char_next14: Char\n    var paren_char_prev15: Char\n   \
    \ var paren_char_next15: Char\n    var paren_char_prev16: Char\n    var paren_char_next16:\
    \ Char\n    var paren_char_prev17: Char\n    var paren_char_next17: Char\n   \
    \ var paren_char_prev18: Char\n    var paren_char_next18: Char\n    var paren_char_prev19:\
    \ Char\n    var paren_char_next19: Char\n    var paren_char_prev20: Char\n   \
    \ var paren_char_next20: Char\n    var paren_char_prev21: Char\n    var paren_char_next21:\
    \ Char\n    var paren_char_prev22: Char\n    var paren_char_next22: Char\n   \
    \ var paren_char_prev23: Char\n    var paren_char_next23: Char\n    var paren_char_prev24:\
    \ Char\n    var paren_char_next24: Char\n    var paren_char_prev25: Char\n   \
    \ var paren_char_next25: Char\n    var paren_char_prev26: Char\n    var paren_char_next26:\
    \ Char\n    var paren_char_prev27: Char\n    var paren_char_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjukeyeaf.swift:14:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpjukeyeaf.swift:15:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpjukeyeaf.swift:16:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpjukeyeaf.swift:17:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev2: Char\n                          ^~~~\n/tmp/tmpjukeyeaf.swift:18:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next2: Char\n  \
    \                        ^~~~\n/tmp/tmpjukeyeaf.swift:19:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev3: Char\n                     \
    \     ^~~~\n/tmp/tmpjukeyeaf.swift:20:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next3: Char\n                          ^~~~\n/tmp/tmpjukeyeaf.swift:21:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev4: Char\n  \
    \                        ^~~~\n/tmp/tmpjukeyeaf.swift:22:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next4: Char\n                     \
    \     ^~~~\n/tmp/tmpjukeyeaf.swift:23:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev5: Char\n                          ^~~~\n/tmp/tmpjukeyeaf.swift:24:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next5: Char\n  \
    \                        ^~~~\n/tmp/tmpjukeyeaf.swift:25:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev6: Char\n                     \
    \     ^~~~\n/tmp/tmpjukeyeaf.swift:26:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next6: Char\n                          ^~~~\n/tmp/tmpjukeyeaf.swift:27:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev7: Char\n  \
    \                        ^~~~\n/tmp/tmpjukeyeaf.swift:28:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next7: Char\n                     \
    \     ^~~~\n/tmp/tmpjukeyeaf.swift:29:27: error: cannot find type 'Char' in scope\n\
    \    var paren_"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdjl4nmih.swift:30:9: error: invalid redeclaration of 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpdjl4nmih.swift:29:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpdjl4nmih.swift:32:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_level_paren_level_paren\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_count = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptigclrih.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_count\
    \ = 0\n    var parens_levels = [Int]()\n    var parens_levels_count = 0\n    var\
    \ parens_levels_index = 0\n    var parens_levels_index_count = 0\n    var parens_levels_index_max\
    \ = 0\n    var parens_levels_index_max_count = 0\n    var parens_levels_index_max_index\
    \ = 0\n    var parens_levels_index_max_index_count = 0\n    var parens_levels_index_max_index_max\
    \ = 0\n    var parens_levels_index_max_index_max_count = 0\n    var parens_levels_index_max_index_max_index\
    \ = 0\n    var parens_levels_index_max_index_max_index_count = 0\n    var parens_levels_index_max_index_max_index_max\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_count = 0\n    var\
    \ parens_levels_index_max_index_max_index_max_index = 0\n    var parens_levels_index_max_index_max_index_max_index_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max = 0\n   \
    \ var parens_levels_index_max_index_max_index_max_index_max_count = 0\n    var\
    \ parens_levels_index_max_index_max_index_max_index_max_index = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_index_max_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_count\
    \ = 0\n    var parens_levels_index_max_index_max_index_max_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5y345uiw.swift:46:9: error: type annotation missing in pattern\n\
    \    var parens_levels_index_max_index_max_index_max_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     levels[level] = parens\n            parens += 1\n        } else if c ==\
    \ ')' {\n            levels[level] = parens\n            parens -= 1\n       \
    \     if parens == 0 {\n                levels[level] = levels[level] + 1\n  \
    \          }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1ouvyz2u.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp1ouvyz2u.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp1ouvyz2u.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    for c in paren_string.characters {\n        if c == '('\
    \ {\n            paren_count += 1\n            levels.append(paren_level)\n  \
    \      } else if c == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                levels.append(paren_level)\n            }\n        }\n\
    \        paren_level = 0\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmps43qy329.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmps43qy329.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmps43qy329.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl_txb0jt.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_max\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeq5_zdex.swift:16:9: error: invalid redeclaration of 'parens_level_max_count'\n\
    \    var parens_level_max_count = 0\n        ^\n/tmp/tmpeq5_zdex.swift:14:9: note:\
    \ 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:17:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpeq5_zdex.swift:15:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:18:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmpeq5_zdex.swift:14:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:19:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpeq5_zdex.swift:15:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:20:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmpeq5_zdex.swift:14:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:21:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpeq5_zdex.swift:15:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:22:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmpeq5_zdex.swift:14:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpeq5_zdex.swift:23:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpeq5_zdex.swift:15:9:\
    \ note: 'parens_level_max_index' previously declared here\n    v"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6xi6j5k1.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:14:9:\
    \ error: invalid redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:10:9: note: 'paren_nesting' previously declared\
    \ here\n    var paren_nesting = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:15:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp6xi6j5k1.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:16:9:\
    \ error: invalid redeclaration of 'paren_nestings'\n    var paren_nestings = [Int]()\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:12:9: note: 'paren_nestings' previously declared\
    \ here\n    var paren_nestings = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp6xi6j5k1.swift:9:9: note: 'paren_level' previously declared here\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:18:9: error: invalid\
    \ redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:10:9:\
    \ note: 'paren_nesting' previously declared here\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp6xi6j5k1.swift:20:9: error: invalid redeclaration of 'paren_nestings'\n\
    \    var paren_nestings = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:12:9: note:\
    \ 'paren_nestings' previously declared here\n    var paren_nestings = [Int]()\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:21:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/t"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_char = \"\"\n    var paren_open_char = \"\"\n    var paren_close_char\
    \ = \"\"\n    var paren_level_char_count = 0\n    var paren_open_char_count =\
    \ 0\n    var paren_close_char_count = 0\n    var paren_level_char_string = \"\"\
    \n    var paren_open_char_string = \"\"\n    var paren_close_char_string = \"\"\
    \n    var paren_level_char_char = \"\"\n    var paren_open_char_char = \"\"\n\
    \    var paren_close_char_char = \"\"\n    var paren_level_char_char_count = 0\n\
    \    var paren_open_char_char_count = 0\n    var paren_close_char_char_count =\
    \ 0\n    var paren_level_char_char_string = \"\"\n    var paren_open_char_char_string\
    \ = \"\"\n    var paren_close_char_char_string = \"\"\n    var paren_level_char_char_char\
    \ = \"\"\n    var paren_open_char_char_char = \"\"\n    var paren_close_char_char_char\
    \ = \"\"\n    var paren_level_char_char_char_count = 0\n    var paren_open_char_char_char_count\
    \ = 0\n    var paren_close_char_char_char_count = 0\n    var paren_level_char_char_char_string\
    \ = \"\"\n    var paren_open_char_char_char_string = \"\"\n    var paren_close_char_char_char_string\
    \ = \"\"\n    var paren_level_char_char_char_char = \"\"\n    var paren_open_char_char_char_char\
    \ = \"\"\n    var paren_close_char_char_char_char = \"\"\n    var paren_level_char_char_char_char_count\
    \ = 0\n    var paren_open_char_char_char_char_count = 0\n    var paren_close_char_char_char_char_count\
    \ = 0\n    var paren_level_char_char_char_char_string = \"\"\n    var paren_open_char_char_char_char_string\
    \ = \"\"\n    var paren_close_char_char_char_char_string = \"\"\n    var paren_level_char_char_char_char_char\
    \ = \"\"\n    var paren_open_char_char_char_char_char = \"\"\n    var paren_close_char_char_char_char_char\
    \ = \"\"\n    var paren_level_char_char_char_char_char_count = 0\n    var paren_open_char_char_char_char_char_count\
    \ = 0\n    var paren_close_char_char_char_char_char_count = 0\n    var paren_level_char_char_char_char_char_string\
    \ = \"\"\n    var paren_open_char_char_char_char_char_string = \"\"\n    var paren_close_char_char_char_char_char_string\
    \ = \"\"\n    var paren_level_char_char_char_char_char_char = \"\"\n    var paren_open_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpp7jy0r_j.swift:65:9: error: type annotation missing in pattern\n\
    \    var paren_open_char_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens = 0\n    var paren_level_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max = 0\n    var paren_level_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdi66fp9b.swift:33:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var result = [Int]()\n    for char\
    \ in paren_string.characters {\n        if char == '(' {\n            level +=\
    \ 1\n        } else if char == ')' {\n            level -= 1\n            if level\
    \ == 0 {\n                result.append(level)\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp446g0dp4.swift:11:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp446g0dp4.swift:13:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp446g0dp4.swift:10:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    for char in\
    \ paren_string {\n        if char == '(' {\n            paren_count += 1\n   \
    \         if paren_count > max_level_parens {\n                max_level_parens\
    \ = paren_count\n            }\n        } else if char == ')' {\n            paren_count\
    \ -= 1\n            if paren_count > max_level_parens {\n                max_level_parens\
    \ = paren_count\n            }\n        } else if char == ' ' {\n            paren_count_parens\
    \ += 1\n            if paren_count_parens > max_level_parens {\n             \
    \   max_level_parens = paren_count_parens\n            }\n        }\n    }\n \
    \   if paren_count > max_level_parens {\n        max_level = paren_count\n   \
    \ } else {\n        max_level = max_level_parens\n    }\n    var levels = [Int](repeating:\
    \ 0, count: max_level+1)\n    for char in paren_string {\n        if char == '('\
    \ {\n            levels[level] += 1\n        } else if char == ')' {\n       \
    \     levels[level] -= 1\n        }\n        level += 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsgbwt1dz.swift:14:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpsgbwt1dz.swift:19:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpsgbwt1dz.swift:24:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpsgbwt1dz.swift:38:20:\
    \ error: single-quoted string literal found, use '\"'\n        if char == '('\
    \ {\n                   ^~~\n                   \"(\"\n/tmp/tmpsgbwt1dz.swift:40:27:\
    \ error: single-quoted string literal found, use '\"'\n        } else if char\
    \ == ')' {\n                          ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int]()\n    var parens_level = 0\n    var parens_count = 0\n    var parens_levels\
    \ = [Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3faqqy6w.swift:85:29: error: expected ']' in container literal\
    \ expression\n    var parens_levels = [Int\n                            ^\n/tmp/tmp3faqqy6w.swift:85:25:\
    \ note: to match this opening '['\n    var parens_levels = [Int\n            \
    \            ^\n/tmp/tmp3faqqy6w.swift:14:9: error: invalid redeclaration of 'parens_level'\n\
    \    var parens_level = 0\n        ^\n/tmp/tmp3faqqy6w.swift:11:9: note: 'parens_level'\
    \ previously declared here\n    var parens_level = 0\n        ^\n/tmp/tmp3faqqy6w.swift:15:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmp3faqqy6w.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmp3faqqy6w.swift:16:9: error:\
    \ invalid redeclaration of 'parens_levels'\n    var parens_levels = [Int]()\n\
    \        ^\n/tmp/tmp3faqqy6w.swift:13:9: note: 'parens_levels' previously declared\
    \ here\n    var parens_levels = [Int]()\n        ^\n/tmp/tmp3faqqy6w.swift:17:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmp3faqqy6w.swift:11:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmp3faqqy6w.swift:18:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmp3faqqy6w.swift:12:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmp3faqqy6w.swift:19:9: error: invalid\
    \ redeclaration of 'parens_levels'\n    var parens_levels = [Int]()\n        ^\n\
    /tmp/tmp3faqqy6w.swift:13:9: note: 'parens_levels' previously declared here\n\
    \    var parens_levels = [Int]()\n        ^\n/tmp/tmp3faqqy6w.swift:20:9: error:\
    \ invalid redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n\
    /tmp/tmp3faqqy6w.swift:11:9: note: 'parens_level' previously declared here\n \
    \   var parens_level = 0\n        ^\n/tmp/tmp3faqqy6w.swift:21:9: error: invalid\
    \ redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n/tmp/tmp3faqqy6w.swift:12:9:\
    \ note: 'parens_count' previously declared here\n    var parens_count = 0\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for char in paren_string {\n        if char == '(' {\n            paren_count\
    \ += 1\n        } else if char == ')' {\n            paren_count -= 1\n      \
    \  } else if paren_count == 0 {\n            levels.append(level)\n        }\n\
    \        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmjvpmzok.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpmjvpmzok.swift:14:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string {\n        if c == '('\
    \ {\n            paren_count += 1\n            levels.append(paren_level)\n  \
    \          paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n            paren_level = 0\n        } else {\n            paren_level\
    \ += 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm0irt0xj.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpm0irt0xj.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpm0irt0xj.swift:9:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0kos13hk.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_paren = 0\n   \
    \ var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n\
    \    var paren_level_paren_count = 0\n    var paren_level_paren_level = 0\n  \
    \  var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_spmyc0d.swift:36:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgfpvgxpr.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpgfpvgxpr.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpgfpvgxpr.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpgfpvgxpr.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpgfpvgxpr.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpgfpvgxpr.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpgfpvgxpr.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpgfpvgxpr.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpgfpvgxpr.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_levels = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_max_index = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_min_index = 0\n    var paren_levels_count_max2\
    \ = 0\n    var paren_levels_count_max2_index = 0\n    var paren_levels_count_min2\
    \ = 0\n    var paren_levels_count_min2_index = 0\n    var paren_levels_count_max3\
    \ = 0\n    var paren_levels_count_max3_index = 0\n    var paren_levels_count_min3\
    \ = 0\n    var paren_levels_count_min3_index = 0\n    var paren_levels_count_max4\
    \ = 0\n    var paren_levels_count_max4_index = 0\n    var paren_levels_count_min4\
    \ = 0\n    var paren_levels_count_min4_index = 0\n    var paren_levels_count_max5\
    \ = 0\n    var paren_levels_count_max5_index = 0\n    var paren_levels_count_min5\
    \ = 0\n    var paren_levels_count_min5_index = 0\n    var paren_levels_count_max6\
    \ = 0\n    var paren_levels_count_max6_index = 0\n    var paren_levels_count_min6\
    \ = 0\n    var paren_levels_count_min6_index = 0\n    var paren_levels_count_max7\
    \ = 0\n    var paren_levels_count_max7_index = 0\n    var paren_levels_count_min7\
    \ = 0\n    var paren_levels_count_min7_index = 0\n    var paren_levels_count_max8\
    \ = 0\n    var paren_levels_count_max8_index = 0\n    var paren_levels_count_min8\
    \ = 0\n    var paren_levels_count_min8_index = 0\n    var paren_levels_count_max9\
    \ = 0\n    var paren_levels_count_max9_index = 0\n    var paren_levels_count_min9\
    \ = 0\n    var paren_levels_count_min9_index = 0\n    var paren_levels_count_max10\
    \ = 0\n    var paren_levels_count_max10_index = 0\n    var paren_levels_count_min10\
    \ = 0\n    var paren_levels_count_min10_index = 0\n    var paren_levels_count_max11\
    \ = 0\n    var paren_levels_count_max11_index = 0\n    var paren_levels_count_min11\
    \ = 0\n    var paren_levels_count_min11_index = 0\n    var paren_levels_count_max12\
    \ = 0\n    var paren_levels_count_max12_index = 0\n    var paren_level\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyp2ydu37.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_level\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_max = 0\n    var paren_level_parens_count_max_min\
    \ = 0\n    var paren_level_parens_count_max_min_index = 0\n    var paren_level_parens_count_max_min_count\
    \ = 0\n    var paren_level_parens_count_max_min_count_max = 0\n    var paren_level_parens_count_max_min_count_max_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min = 0\n    var paren_level_parens_count_max_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index = 0\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_min_index = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_min_index_max =\
    \ 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_min\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_min_index_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk191laci.swift:24:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_index'\n\
    \    var paren_level_parens_count_max_min_count_min_index = 0\n        ^\n/tmp/tmpk191laci.swift:23:9:\
    \ note: 'paren_level_parens_count_max_min_count_min_index' previously declared\
    \ here\n    var paren_level_parens_count_max_min_count_min_index = 0\n       \
    \ ^\n/tmp/tmpk191laci.swift:26:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_index_max'\n\
    \    var paren_level_parens_count_max_min_count_min_index_max = 0\n        ^\n\
    /tmp/tmpk191laci.swift:25:9: note: 'paren_level_parens_count_max_min_count_min_index_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n        ^\n/tmp/tmpk191laci.swift:28:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max'\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmpk191laci.swift:27:9: note: 'paren_level_parens_count_max_min_count_min_index_max_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmpk191laci.swift:32:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_min_index_max'\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_min_index_max = 0\n   \
    \     ^\n/tmp/tmpk191laci.swift:31:9: note: 'paren_level_parens_count_max_min_count_min_index_max_min_index_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_max\
    \ = 0\n        ^\n/tmp/tmpk191laci.swift:36:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_max'\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_max\
    \ = 0\n        ^\n/tmp/tmpk191laci.swift:35:9: note: 'paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_min_index_min_index_max\
    \ = 0\n "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens = 0\n    var paren_level_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max = 0\n    var paren_level_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppgrccdzh.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_paren\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var\
    \ paren_chars = []\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_chars\
    \ = []\n    var paren_char_indexes = []\n    var paren_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptjz0b9bv.swift:16:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmptjz0b9bv.swift:17:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmptjz0b9bv.swift:18:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmptjz0b9bv.swift:14:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmptjz0b9bv.swift:19:9: error:\
    \ invalid redeclaration of 'paren_char_length'\n    var paren_char_length = 0\n\
    \        ^\n/tmp/tmptjz0b9bv.swift:15:9: note: 'paren_char_length' previously\
    \ declared here\n    var paren_char_length = 0\n        ^\n/tmp/tmptjz0b9bv.swift:20:23:\
    \ error: empty collection literal requires an explicit type\n    var paren_chars\
    \ = []\n                      ^~\n/tmp/tmptjz0b9bv.swift:20:9: error: invalid\
    \ redeclaration of 'paren_chars'\n    var paren_chars = []\n        ^\n/tmp/tmptjz0b9bv.swift:16:9:\
    \ note: 'paren_chars' previously declared here\n    var paren_chars = []\n   \
    \     ^\n/tmp/tmptjz0b9bv.swift:21:30: error: empty collection literal requires\
    \ an explicit type\n    var paren_char_indexes = []\n                        \
    \     ^~\n/tmp/tmptjz0b9bv.swift:21:9: error: invalid redeclaration of 'paren_char_indexes'\n\
    \    var paren_char_indexes = []\n        ^\n/tmp/tmptjz0b9bv.swift:17:9: note:\
    \ 'paren_char_indexes' previously declared here\n    var paren_char_indexes =\
    \ []\n        ^\n/tmp/tmptjz0b9bv.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_index'\n    var paren_char_index = 0\n        ^\n/tmp/tmptjz0b9bv.swift:14:9:\
    \ note: 'paren_char_index' previously declared here\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmptjz0b9bv.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_length'\n    var paren_char_length = 0\n        ^\n/tmp/tmptjz0b9bv.swift:15:9:\
    \ note: 'paren_char_length' previously declared here\n    var paren_char_length\
    \ = 0\n        ^\n/tmp/tmptjz0b9bv.swift:24:23: error: empty col"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_group = [String]()\n    var paren_group_level\
    \ = [Int]()\n    var paren_group_max_level = [Int]()\n    var paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_count = [Int]()\n    var paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_level = [Int]()\n    var paren_group_paren_group_max_level\
    \ = [Int]()\n    var paren_group_paren_group_max_level_parens = [Int]()\n    var\
    \ paren_group_paren_group_paren_count = [Int]()\n    var paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_level = [Int]()\n\
    \    var paren_group_paren_group_paren_group_max_level = [Int]()\n    var paren_group_paren_group_paren_group_max_level_parens\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_count = [Int]()\n\
    \    var paren_group_paren_group_paren_group_paren_group = [String]()\n    for\
    \ s in paren_string.split(\" \") {\n        if s != \"\" {\n            if paren_count\
    \ == 0 {\n                paren_group_paren_group.append(s)\n                paren_group_paren_group_level.append(level)\n\
    \                paren_group_paren_group_max_level.append(max_level)\n       \
    \         paren_group_paren_group_max_level_parens.append(max_level_parens)\n\
    \                paren_group_paren_group_paren_count.append(paren_count)\n   \
    \             paren_group_paren_group_paren_group.append(paren_group)\n      \
    \          paren_group_paren_group_paren_group_level.append(paren_group_level)\n\
    \                paren_group_paren_group_paren_group_max_level.append(paren_group_max_level)\n\
    \                paren_group_paren_group_paren_group_max_level_parens.append(paren_group_max_level_parens)\n\
    \                paren_group_paren_group_paren_group_paren_count.append(paren_group_paren_count)\n\
    \                paren_group_paren_group_paren_group_paren_group.append(paren_group_paren_group)\n\
    \            } else {\n                paren_group_paren_group[paren_group_paren_group.count-1].append(s)\n\
    \                paren_group_paren_group_level[paren_group_paren_group.count-1]\
    \ = level\n                paren_group_paren_group_max_level[paren_group_paren_group.count-1]\
    \ = max_level\n                paren_group_paren_group_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3u7k7fqq.swift:64:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp3u7k7fqq.swift:29:20:\
    \ note: to match this opening '{'\n        if s != \"\" {\n                  \
    \ ^\n/tmp/tmp3u7k7fqq.swift:64:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp3u7k7fqq.swift:28:38:\
    \ note: to match this opening '{'\n    for s in paren_string.split(\" \") {\n\
    \                                     ^\n/tmp/tmp3u7k7fqq.swift:64:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp3u7k7fqq.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp3u7k7fqq.swift:28:27:\
    \ error: no exact matches in call to instance method 'split'\n    for s in paren_string.split(\"\
    \ \") {\n                          ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char_start\
    \ = 0\n    var paren_char_end = 0\n    for c in paren_string.unicodeScalars {\n\
    \        if paren_char_count > 0 {\n            levels[level] = paren_char_count\n\
    \            level++\n            paren_count = 0\n            paren_level = 0\n\
    \            paren_start = 0\n            paren_end = 0\n            paren_char_count\
    \ = 0\n            paren_char_level = 0\n            paren_char_start = 0\n  \
    \          paren_char_end = 0\n        }\n        switch c {\n        case .OpenParen:\n\
    \            paren_count += 1\n            paren_char_count += 1\n           \
    \ paren_char_level++\n        case .CloseParen:\n            paren_char_count\
    \ -= 1\n            paren_char_level--\n            if paren_char_level == 0 {\n\
    \                paren_char_start = paren_char_end\n                paren_char_end\
    \ = paren_char_start + paren_char_count\n                paren_levels[level] =\
    \ paren_char_count\n                level++\n                paren_count = 0\n\
    \                paren_level = 0\n                paren_start = 0\n          \
    \      paren_end = 0\n                paren_char_count = 0\n                paren_char_level\
    \ = 0\n                paren_char_start = 0\n                paren_char_end =\
    \ 0\n            }\n        case .OpenBracket:\n            paren_count += 1\n\
    \            paren_char_count += 1\n            paren_char_level++\n        case\
    \ .CloseBracket:\n            paren_char_count -= 1\n            paren_char_level--\n\
    \            if paren_char_level == 0 {\n                paren_char_start = paren_char_end\n\
    \                paren_char_end = paren_char_start + paren_char_count\n      \
    \          paren_levels[level] = paren_char_count\n                level++\n \
    \               paren_count = 0\n                paren_level = 0\n           \
    \     paren_start = 0\n                paren_end = 0\n                paren_char_count\
    \ = 0\n                paren_char_level = 0\n                paren_char_start\
    \ = 0\n                paren_char_end = 0\n            }\n        }\n    }\n \
    \   if paren_char_count > 0 {\n        levels[level] = paren_char_count\n    \
    \    level++\n        paren_count = 0\n        paren_level = 0\n        paren_start\
    \ = 0\n        paren_end = 0\n        paren_char_count = 0\n        paren_char_level\
    \ = 0\n        paren_char_start = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxfnm_5or.swift:103:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpxfnm_5or.swift:7:57:\
    \ note: to match this opening '{'\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n                                                        ^\n/tmp/tmpxfnm_5or.swift:21:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n/tmp/tmpxfnm_5or.swift:32:15: error: type 'Unicode.Scalar'\
    \ has no member 'OpenParen'\n        case .OpenParen:\n             ~^~~~~~~~~\n\
    /tmp/tmpxfnm_5or.swift:36:15: error: type 'Unicode.Scalar' has no member 'CloseParen'\n\
    \        case .CloseParen:\n             ~^~~~~~~~~~\n/tmp/tmpxfnm_5or.swift:53:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenBracket'\n        case .OpenBracket:\n\
    \             ~^~~~~~~~~~~\n/tmp/tmpxfnm_5or.swift:57:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseBracket'\n        case .CloseBracket:\n             ~^~~~~~~~~~~~\n\
    /tmp/tmpxfnm_5or.swift:35:29: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            paren_char_level++\n                            ^~\n\
    /tmp/tmpxfnm_5or.swift:38:29: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            paren_char_level--\n                            ^~\n\
    /tmp/tmpxfnm_5or.swift:42:17: error: cannot find 'paren_levels' in scope\n   \
    \             paren_levels[level] = paren_char_count\n                ^~~~~~~~~~~~\n\
    /tmp/tmpxfnm_5or.swift:43:22: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n                level++\n                     ^~\n/tmp/tmpxfnm_5or.swift:56:29:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_char_level++\n                            ^~\n/tmp/tmpxfnm_5or.swift:59:29:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  paren_char_level--\n                            ^~\n/tmp/tmpxfnm_5or.swift:63:17:\
    \ error: cannot find"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var max_level_group_count = 0\n    var groups = [String]()\n    var\
    \ group_count = 0\n    var group_level = 0\n    var group_level_group = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var group_level_group_count = 0\n    var\
    \ group_level_group_count = 0\n    var group_level_group_count = 0\n    var group_level_group_count\
    \ = 0\n    var group_level_group_count = 0\n    var group_level_group_count =\
    \ 0\n    var group_level_group_count = 0\n    var group_level_group_count = 0\n\
    \    var group_level_group_count = 0\n    var group_level_group_count = 0\n  \
    \  var group_level_group_count = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppd3pnf4k.swift:94:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppd3pnf4k.swift:17:9: error: invalid redeclaration of 'group_level_group_count'\n\
    \    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:16:9:\
    \ note: 'group_level_group_count' previously declared here\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmppd3pnf4k.swift:18:9: error: invalid redeclaration of\
    \ 'group_level_group_count'\n    var group_level_group_count = 0\n        ^\n\
    /tmp/tmppd3pnf4k.swift:16:9: note: 'group_level_group_count' previously declared\
    \ here\n    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:19:9:\
    \ error: invalid redeclaration of 'group_level_group_count'\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmppd3pnf4k.swift:16:9: note: 'group_level_group_count'\
    \ previously declared here\n    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:20:9:\
    \ error: invalid redeclaration of 'group_level_group_count'\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmppd3pnf4k.swift:16:9: note: 'group_level_group_count'\
    \ previously declared here\n    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:21:9:\
    \ error: invalid redeclaration of 'group_level_group_count'\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmppd3pnf4k.swift:16:9: note: 'group_level_group_count'\
    \ previously declared here\n    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:22:9:\
    \ error: invalid redeclaration of 'group_level_group_count'\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmppd3pnf4k.swift:16:9: note: 'group_level_group_count'\
    \ previously declared here\n    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:23:9:\
    \ error: invalid redeclaration of 'group_level_group_count'\n    var group_level_group_count\
    \ = 0\n        ^\n/tmp/tmppd3pnf4k.swift:16:9: note: 'group_level_group_count'\
    \ previously declared here\n    var group_level_group_count = 0\n        ^\n/tmp/tmppd3pnf4k.swift:24:9:\
    \ error: invalid redeclaration of 'group_level_group_count'\n    var group_level_group_count\
    \ = 0"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpztx_zbpt.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpztx_zbpt.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpztx_zbpt.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n   \
    \ var level = 0\n    var level_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_char_count = 0\n   \
    \ var paren_level_char_index = 0\n    var paren_level_char = \"\"\n    var paren_level_chars\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n    var paren_level_char_indexes = []\n    var paren_level_char_counts\
    \ = []\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpevi4l0dc.swift:18:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmpevi4l0dc.swift:19:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmpevi4l0dc.swift:20:35: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_counts = []\n          \
    \                        ^~\n/tmp/tmpevi4l0dc.swift:21:36: error: empty collection\
    \ literal requires an explicit type\n    var paren_level_char_indexes = []\n \
    \                                  ^~\n/tmp/tmpevi4l0dc.swift:21:9: error: invalid\
    \ redeclaration of 'paren_level_char_indexes'\n    var paren_level_char_indexes\
    \ = []\n        ^\n/tmp/tmpevi4l0dc.swift:19:9: note: 'paren_level_char_indexes'\
    \ previously declared here\n    var paren_level_char_indexes = []\n        ^\n\
    /tmp/tmpevi4l0dc.swift:22:35: error: empty collection literal requires an explicit\
    \ type\n    var paren_level_char_counts = []\n                               \
    \   ^~\n/tmp/tmpevi4l0dc.swift:22:9: error: invalid redeclaration of 'paren_level_char_counts'\n\
    \    var paren_level_char_counts = []\n        ^\n/tmp/tmpevi4l0dc.swift:20:9:\
    \ note: 'paren_level_char_counts' previously declared here\n    var paren_level_char_counts\
    \ = []\n        ^\n/tmp/tmpevi4l0dc.swift:23:36: error: empty collection literal\
    \ requires an explicit type\n    var paren_level_char_indexes = []\n         \
    \                          ^~\n/tmp/tmpevi4l0dc.swift:23:9: error: invalid redeclaration\
    \ of 'paren_level_char_indexes'\n    var paren_level_char_indexes = []\n     \
    \   ^\n/tmp/tmpevi4l0dc.swift:19:9: note: 'paren_level_char_indexes' previously\
    \ declared here\n    var paren_level_char_indexes = []\n        ^\n/tmp/tmpevi4l0dc.swift:24:35:\
    \ error: empty collection literal requires an explicit type\n    var paren_level_char_counts\
    \ = []\n                                  ^~\n/tmp/tmpevi4l0dc.swift:24:9: error:\
    \ invalid redeclaration of 'paren_level_char_counts'\n    var paren_level_char"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.characters {\n     \
    \   if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            levels.append(paren_level)\n            if paren_count ==\
    \ 0 {\n                levels.append(paren_level)\n            }\n           \
    \ paren_level = 0\n        } else {\n            paren_level += 1\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3f_vj4p3.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp3f_vj4p3.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp3f_vj4p3.swift:12:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3f_vj4p3.swift:9:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_levels_count\
    \ = 0\n    var paren_levels_index = 0\n    var paren_levels_max = 0\n    var paren_levels_max_index\
    \ = 0\n    var paren_levels_max_count = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_max_count_index\
    \ = 0\n    var paren_levels_max_count_index = 0\n    var paren_levels_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy11n0ehs.swift:18:9: error: invalid redeclaration of 'paren_levels_max_count_index'\n\
    \    var paren_levels_max_count_index = 0\n        ^\n/tmp/tmpy11n0ehs.swift:17:9:\
    \ note: 'paren_levels_max_count_index' previously declared here\n    var paren_levels_max_count_index\
    \ = 0\n        ^\n/tmp/tmpy11n0ehs.swift:19:9: error: invalid redeclaration of\
    \ 'paren_levels_max_count_index'\n    var paren_levels_max_count_index = 0\n \
    \       ^\n/tmp/tmpy11n0ehs.swift:17:9: note: 'paren_levels_max_count_index' previously\
    \ declared here\n    var paren_levels_max_count_index = 0\n        ^\n/tmp/tmpy11n0ehs.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_max_count_index'\n    var paren_levels_max_count_index\
    \ = 0\n        ^\n/tmp/tmpy11n0ehs.swift:17:9: note: 'paren_levels_max_count_index'\
    \ previously declared here\n    var paren_levels_max_count_index = 0\n       \
    \ ^\n/tmp/tmpy11n0ehs.swift:21:9: error: invalid redeclaration of 'paren_levels_max_count_index'\n\
    \    var paren_levels_max_count_index = 0\n        ^\n/tmp/tmpy11n0ehs.swift:17:9:\
    \ note: 'paren_levels_max_count_index' previously declared here\n    var paren_levels_max_count_index\
    \ = 0\n        ^\n/tmp/tmpy11n0ehs.swift:22:9: error: invalid redeclaration of\
    \ 'paren_levels_max_count_index'\n    var paren_levels_max_count_index = 0\n \
    \       ^\n/tmp/tmpy11n0ehs.swift:17:9: note: 'paren_levels_max_count_index' previously\
    \ declared here\n    var paren_levels_max_count_index = 0\n        ^\n/tmp/tmpy11n0ehs.swift:23:9:\
    \ error: invalid redeclaration of 'paren_levels_max_count_index'\n    var paren_levels_max_count_index\
    \ = 0\n        ^\n/tmp/tmpy11n0ehs.swift:17:9: note: 'paren_levels_max_count_index'\
    \ previously declared here\n    var paren_levels_max_count_index = 0\n       \
    \ ^\n/tmp/tmpy11n0ehs.swift:24:9: error: invalid redeclaration of 'paren_levels_max_count_index'\n\
    \    var paren_levels_max_count_index = 0\n        ^\n/tmp/tmpy11n0ehs.swift:17:9:\
    \ note: 'paren_levels_max_count_index' previously declared here\n    var paren_levels_max_count_index\
    \ = 0\n        ^\n/tmp/tmpy11n0ehs.swift:25:9: error: invalid redeclara"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_stack = [Int]()\n    for char in paren_string.unicodeScalars\
    \ {\n        if char == parenthesisOpeningBracket {\n            paren_level_stack.append(paren_level)\n\
    \            paren_level++\n        } else if char == parenthesisClosingBracket\
    \ {\n            paren_level = paren_level_stack.pop()\n        } else if char\
    \ == parenthesisOpeningBraceBracket {\n            paren_level_stack.append(paren_level)\n\
    \            paren_level++\n        } else if char == parenthesisClosingBraceBracket\
    \ {\n            paren_level = paren_level_stack.pop()\n        }\n        if\
    \ paren_level > max_level {\n            max_level = paren_level\n        }\n\
    \    }\n    return max_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsmnum9qp.swift:13:20: error: cannot find 'parenthesisOpeningBracket'\
    \ in scope\n        if char == parenthesisOpeningBracket {\n                 \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsmnum9qp.swift:15:24: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            paren_level++\n  \
    \                     ^~\n/tmp/tmpsmnum9qp.swift:16:27: error: cannot find 'parenthesisClosingBracket'\
    \ in scope\n        } else if char == parenthesisClosingBracket {\n          \
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsmnum9qp.swift:17:45: error:\
    \ value of type '[Int]' has no member 'pop'\n            paren_level = paren_level_stack.pop()\n\
    \                          ~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmpsmnum9qp.swift:18:27:\
    \ error: cannot find 'parenthesisOpeningBraceBracket' in scope\n        } else\
    \ if char == parenthesisOpeningBraceBracket {\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsmnum9qp.swift:20:24: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            paren_level++\n                       ^~\n/tmp/tmpsmnum9qp.swift:21:27:\
    \ error: cannot find 'parenthesisClosingBraceBracket' in scope\n        } else\
    \ if char == parenthesisClosingBraceBracket {\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsmnum9qp.swift:22:45: error: value of type '[Int]' has no member 'pop'\n\
    \            paren_level = paren_level_stack.pop()\n                         \
    \ ~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmpsmnum9qp.swift:28:12: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    return max_level\n    \
    \       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0kos13hk.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var groups = [String]()\n    var group_count = 0\n    var group_start\
    \ = 0\n    var group_end = 0\n    var group_start2 = 0\n    var group_end2 = 0\n\
    \    var group_start3 = 0\n    var group_end3 = 0\n    var group_start4 = 0\n\
    \    var group_end4 = 0\n    var group_start5 = 0\n    var group_end5 = 0\n  \
    \  var group_start6 = 0\n    var group_end6 = 0\n    var group_start7 = 0\n  \
    \  var group_end7 = 0\n    var group_start8 = 0\n    var group_end8 = 0\n    var\
    \ group_start9 = 0\n    var group_end9 = 0\n    var group_start10 = 0\n    var\
    \ group_end10 = 0\n    var group_start11 = 0\n    var group_end11 = 0\n    var\
    \ group_start12 = 0\n    var group_end12 = 0\n    var group_start13 = 0\n    var\
    \ group_end13 = 0\n    var group_start14 = 0\n    var group_end14 = 0\n    var\
    \ group_start15 = 0\n    var group_end15 = 0\n    var group_start16 = 0\n    var\
    \ group_end16 = 0\n    var group_start17 = 0\n    var group_end17 = 0\n    var\
    \ group_start18 = 0\n    var group_end18 = 0\n    var group_start19 = 0\n    var\
    \ group_end19 = 0\n    var group_start20 = 0\n    var group_end20 = 0\n    var\
    \ group_start21 = 0\n    var group_end21 = 0\n    var group_start22 = 0\n    var\
    \ group_end22 = 0\n    var group_start23 = 0\n    var group_end23 = 0\n    var\
    \ group_start24 = 0\n    var group_end24 = 0\n    var group_start25 = 0\n    var\
    \ group_end25 = 0\n    var group_start26 = 0\n    var group_end26 = 0\n    var\
    \ group_start27 = 0\n    var group_end27 = 0\n    var group_start28 = 0\n    var\
    \ group_end28 = 0\n    var group_start29 = 0\n    var group_end29 = 0\n    var\
    \ group_start30 = 0\n    var group_end30 = 0\n    var group_start31 = 0\n    var\
    \ group_end31 = 0\n    var group_start32 = 0\n    var group_end32 = 0\n    var\
    \ group_start33 = 0\n    var group_end33 = 0\n    var group_start34 = 0\n    var\
    \ group_end34 = 0\n    var group_start35 = 0\n    var group_end35 = 0\n    var\
    \ group_start36 = 0\n    var group_end36 = 0\n    var group_start37 = 0\n    var\
    \ group_end37 = 0\n    var group_start38 = 0\n    var group_end38 = 0\n    var\
    \ group_start39 = 0\n    var group_end39 = 0\n    var group_start40 = 0\n    var\
    \ group_end40 = 0\n    var group_start41 = 0\n    var group_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqozks3nr.swift:94:9: error: type annotation missing in pattern\n\
    \    var group_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_next_index = 0\n    var paren_char_next_count = 0\n\
    \    var paren_char_next_char = 0\n    var paren_char_next_char_count = 0\n  \
    \  var paren_char_next_char_next_index = 0\n    var paren_char_next_char_next_count\
    \ = 0\n    var paren_char_next_char_next_char = 0\n    var paren_char_next_char_next_char_count\
    \ = 0\n    var paren_char_next_char_next_char_next_index = 0\n    var paren_char_next_char_next_char_next_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char = 0\n    var paren_char_next_char_next_char_next_char_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index = 0\n    var\
    \ paren_char_next_char_next_char_next_char_next_count = 0\n    var paren_char_next_char_next_char_next_char_next_index\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_count = 0\n    var\
    \ paren_char_next_char_next_char_next_char_next_index_count = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var paren_char_next_char_next_char_next_char_next_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgajagmtm.swift:28:9: error: invalid redeclaration of 'paren_char_next_char_next_char_next_char_next_index'\n\
    \    var paren_char_next_char_next_char_next_char_next_index = 0\n        ^\n\
    /tmp/tmpgajagmtm.swift:26:9: note: 'paren_char_next_char_next_char_next_char_next_index'\
    \ previously declared here\n    var paren_char_next_char_next_char_next_char_next_index\
    \ = 0\n        ^\n/tmp/tmpgajagmtm.swift:29:9: error: invalid redeclaration of\
    \ 'paren_char_next_char_next_char_next_char_next_count'\n    var paren_char_next_char_next_char_next_char_next_count\
    \ = 0\n        ^\n/tmp/tmpgajagmtm.swift:27:9: note: 'paren_char_next_char_next_char_next_char_next_count'\
    \ previously declared here\n    var paren_char_next_char_next_char_next_char_next_count\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_char = \"\"\n    var paren_level_char_length = 0\n\
    \    var paren_level_char_array = [Int]()\n    var paren_level_char_array_index\
    \ = 0\n    var paren_level_char_array_length = 0\n    var paren_level_char_array_index2\
    \ = 0\n    var paren_level_char_array_length2 = 0\n    var paren_level_char_array_index3\
    \ = 0\n    var paren_level_char_array_length3 = 0\n    var paren_level_char_array_index4\
    \ = 0\n    var paren_level_char_array_length4 = 0\n    var paren_level_char_array_index5\
    \ = 0\n    var paren_level_char_array_length5 = 0\n    var paren_level_char_array_index6\
    \ = 0\n    var paren_level_char_array_length6 = 0\n    var paren_level_char_array_index7\
    \ = 0\n    var paren_level_char_array_length7 = 0\n    var paren_level_char_array_index8\
    \ = 0\n    var paren_level_char_array_length8 = 0\n    var paren_level_char_array_index9\
    \ = 0\n    var paren_level_char_array_length9 = 0\n    var paren_level_char_array_index10\
    \ = 0\n    var paren_level_char_array_length10 = 0\n    var paren_level_char_array_index11\
    \ = 0\n    var paren_level_char_array_length11 = 0\n    var paren_level_char_array_index12\
    \ = 0\n    var paren_level_char_array_length12 = 0\n    var paren_level_char_array_index13\
    \ = 0\n    var paren_level_char_array_length13 = 0\n    var paren_level_char_array_index14\
    \ = 0\n    var paren_level_char_array_length14 = 0\n    var paren_level_char_array_index15\
    \ = 0\n    var paren_level_char_array_length15 = 0\n    var paren_level_char_array_index16\
    \ = 0\n    var paren_level_char_array_length16 = 0\n    var paren_level_char_array_index17\
    \ = 0\n    var paren_level_char_array_length17 = 0\n    var paren_level_char_array_index18\
    \ = 0\n    var paren_level_char_array_length18 = 0\n    var paren_level_char_array_index19\
    \ = 0\n    var paren_level_char_array_length19 = 0\n    var paren_level_char_array_index20\
    \ = 0\n    var paren_level_char_array_length20 = 0\n    var paren_level_char_array_index21\
    \ = 0\n    var paren_level_char_array_length21 = 0\n    var paren_level_char_array_index22\
    \ = 0\n    var paren_level_char_array_length22 = 0\n    var paren_level_char_array_index23\
    \ = 0\n    var paren_level_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvw_xxy0r.swift:62:9: error: type annotation missing in pattern\n\
    \    var paren_level_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for\
    \ char in paren_string.characters {\n        if char == '(' {\n            paren_count\
    \ += 1\n        } else if char == ')' {\n            paren_count -= 1\n      \
    \      if paren_count == 0 {\n                levels.append(paren_count)\n   \
    \         }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7nilo0tc.swift:11:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmp7nilo0tc.swift:13:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmp7nilo0tc.swift:10:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_level_count = 0\n    var paren_max_level_count\
    \ = 0\n    var paren_level_count_max = 0\n    var paren_level_count_max_max =\
    \ 0\n    var paren_level_count_max_min = 0\n    var paren_level_count_min_max\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n    var paren_level_count_min_min\
    \ = 0\n    var paren_level_count_min_min = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmxhzpuor.swift:19:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpmxhzpuor.swift:18:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpmxhzpuor.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmpmxhzpuor.swift:18:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpmxhzpuor.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpmxhzpuor.swift:18:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmpmxhzpuor.swift:22:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpmxhzpuor.swift:18:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpmxhzpuor.swift:23:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n/tmp/tmpmxhzpuor.swift:18:9: note: 'paren_level_count_min_min' previously\
    \ declared here\n    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpmxhzpuor.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_count_min_min'\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpmxhzpuor.swift:18:9: note: 'paren_level_count_min_min'\
    \ previously declared here\n    var paren_level_count_min_min = 0\n        ^\n\
    /tmp/tmpmxhzpuor.swift:25:9: error: invalid redeclaration of 'paren_level_count_min_min'\n\
    \    var paren_level_count_min_min = 0\n        ^\n/tmp/tmpmxhzpuor.swift:18:9:\
    \ note: 'paren_level_count_min_min' previously declared here\n    var paren_level_count_min_min\
    \ = 0\n        ^\n/tmp/tmpmxhzpuor.swift:26:9: error: invalid redeclaration of\
    \ 'paren_level_count_min_min'\n    var paren_level_count_min_min = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_chars = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_indexes_length = 0\n    var paren_char_length = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4mz10rqo.swift:68:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4mz10rqo.swift:14:23: error: empty collection literal requires an\
    \ explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmp4mz10rqo.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmp4mz10rqo.swift:20:9: error: invalid\
    \ redeclaration of 'paren_char_indexes_index'\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmp4mz10rqo.swift:19:9: note: 'paren_char_indexes_index'\
    \ previously declared here\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmp4mz10rqo.swift:21:9: error: invalid redeclaration of 'paren_char_indexes_index'\n\
    \    var paren_char_indexes_index = 0\n        ^\n/tmp/tmp4mz10rqo.swift:19:9:\
    \ note: 'paren_char_indexes_index' previously declared here\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmp4mz10rqo.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_indexes_index'\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmp4mz10rqo.swift:19:9: note: 'paren_char_indexes_index' previously declared\
    \ here\n    var paren_char_indexes_index = 0\n        ^\n/tmp/tmp4mz10rqo.swift:23:9:\
    \ error: invalid redeclaration of 'paren_char_indexes_index'\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmp4mz10rqo.swift:19:9: note: 'paren_char_indexes_index'\
    \ previously declared here\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmp4mz10rqo.swift:24:9: error: invalid redeclaration of 'paren_char_indexes_index'\n\
    \    var paren_char_indexes_index = 0\n        ^\n/tmp/tmp4mz10rqo.swift:19:9:\
    \ note: 'paren_char_indexes_index' previously declared here\n    var paren_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmp4mz10rqo.swift:25:9: error: invalid redeclaration of\
    \ 'paren_char_indexes_index'\n    var paren_char_indexes_index = 0\n        ^\n\
    /tmp/tmp4mz10rqo.swift:19:9: note: 'paren_char_indexes_index' previously declared\
    \ here\n    var paren_char_indexes_index = 0\n        ^\n/tmp/tmp4mz10rqo.swift:26:9:\
    \ error: invalid redeclaration of 'paren_char_"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n   \
    \ for index in 0..<paren_string.characters.count {\n        let c = paren_string.characters[index]\n\
    \        if c == '(' {\n            max_level++\n        } else if c == ')' {\n\
    \            if max_level > max_level_index {\n                max_level = max_level_index\n\
    \                max_level_index = index\n            }\n        }\n    }\n  \
    \  return Array(1...max_level_index).map { max_level - $0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl5b5z4os.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpl5b5z4os.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpl5b5z4os.swift:10:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<paren_string.characters.count\
    \ {\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpl5b5z4os.swift:11:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ c = paren_string.characters[index]\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl5b5z4os.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ c = paren_string.characters[index]\n                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5b5z4os.swift:13:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  max_level++\n                     ^~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n            levels.append(level)\n        } else if c\
    \ == ')' {\n            levels[level] = paren_count\n            level -= 1\n\
    \            paren_count -= 1\n        }\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpat6yu6__.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpat6yu6__.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpat6yu6__.swift:11:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_count\
    \ = 0\n    var parens_level_max = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_parens = 0\n    var parens_level_max_parens_count = 0\n   \
    \ var parens_level_max_parens_level = 0\n    var parens_level_max_parens_level_count\
    \ = 0\n    var parens_level_max_parens_level_max = 0\n    var parens_level_max_parens_level_max_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens = 0\n    var parens_level_max_parens_level_max_parens_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level = 0\n    var parens_level_max_parens_level_max_parens_level_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max = 0\n    var\
    \ parens_level_max_parens_level_max_parens_level_max_count = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_count\
    \ = 0\n    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp683mmib3.swift:42:9: error: type annotation missing in pattern\n\
    \    var parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_level_max_parens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           levels[level] = parens\n            parens += 1\n        } else if\
    \ char == ')' {\n            levels[level] = parens\n            parens -= 1\n\
    \        } else {\n            levels[level] += 1\n        }\n        level +=\
    \ 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyy8u459s.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpyy8u459s.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpyy8u459s.swift:11:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf3er7nlp.swift:20:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpf3er7nlp.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpf3er7nlp.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpf3er7nlp.swift:19:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpf3er7nlp.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpf3er7nlp.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpf3er7nlp.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpf3er7nlp.swift:19:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpf3er7nlp.swift:24:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpf3er7nlp.swift:18:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpf3er7nlp.swift:25:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpf3er7nlp.swift:19:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.unicodeScalars {\n        if ch == '(' {\n \
    \           paren_count += 1\n        } else if ch == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \            }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjga5mwwv.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpjga5mwwv.swift:14:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         levels[level] = parens\n            parens += 1\n        } else if c\
    \ == ')' {\n            levels[level] = parens\n            parens -= 1\n    \
    \    } else {\n            levels[level] += 1\n        }\n        level += 1\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxrzz_7cf.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpxrzz_7cf.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for char in paren_string.characters {\n \
    \       if char == '(' {\n            parens += 1\n            levels.append(level)\n\
    \            parens_count += 1\n        } else if char == ')' {\n            parens\
    \ -= 1\n            levels.append(level)\n            parens_count += 1\n    \
    \        if parens == 0 {\n                level -= 1\n            }\n       \
    \ }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpowaoe2_4.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpowaoe2_4.swift:17:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpowaoe2_4.swift:12:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgfpvgxpr.swift:14:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpgfpvgxpr.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:16:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpgfpvgxpr.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpgfpvgxpr.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpgfpvgxpr.swift:18:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpgfpvgxpr.swift:11:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:20:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:12:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpgfpvgxpr.swift:21:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpgfpvgxpr.swift:13:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpgfpvgxpr.swift:22:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:10:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpgfpvgxpr.swift:23:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_count_index = 0\n    var paren_char_count_end = 0\n\
    \    var paren_char_count_end_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n    var paren_char_count_start_index\
    \ = 0\n    var paren_char_count_start_index = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2_zhtdw2.swift:18:9: error: invalid redeclaration of 'paren_char_count_start_index'\n\
    \    var paren_char_count_start_index = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:17:9:\
    \ note: 'paren_char_count_start_index' previously declared here\n    var paren_char_count_start_index\
    \ = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:19:9: error: invalid redeclaration of\
    \ 'paren_char_count_start_index'\n    var paren_char_count_start_index = 0\n \
    \       ^\n/tmp/tmp2_zhtdw2.swift:17:9: note: 'paren_char_count_start_index' previously\
    \ declared here\n    var paren_char_count_start_index = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:20:9:\
    \ error: invalid redeclaration of 'paren_char_count_start_index'\n    var paren_char_count_start_index\
    \ = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:17:9: note: 'paren_char_count_start_index'\
    \ previously declared here\n    var paren_char_count_start_index = 0\n       \
    \ ^\n/tmp/tmp2_zhtdw2.swift:21:9: error: invalid redeclaration of 'paren_char_count_start_index'\n\
    \    var paren_char_count_start_index = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:17:9:\
    \ note: 'paren_char_count_start_index' previously declared here\n    var paren_char_count_start_index\
    \ = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:22:9: error: invalid redeclaration of\
    \ 'paren_char_count_start_index'\n    var paren_char_count_start_index = 0\n \
    \       ^\n/tmp/tmp2_zhtdw2.swift:17:9: note: 'paren_char_count_start_index' previously\
    \ declared here\n    var paren_char_count_start_index = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:23:9:\
    \ error: invalid redeclaration of 'paren_char_count_start_index'\n    var paren_char_count_start_index\
    \ = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:17:9: note: 'paren_char_count_start_index'\
    \ previously declared here\n    var paren_char_count_start_index = 0\n       \
    \ ^\n/tmp/tmp2_zhtdw2.swift:24:9: error: invalid redeclaration of 'paren_char_count_start_index'\n\
    \    var paren_char_count_start_index = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:17:9:\
    \ note: 'paren_char_count_start_index' previously declared here\n    var paren_char_count_start_index\
    \ = 0\n        ^\n/tmp/tmp2_zhtdw2.swift:25:9: error: invalid redeclara"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for c in paren_string.unicodeScalars {\n\
    \        if parens_count == 0 {\n            levels.append(level)\n          \
    \  parens = level\n            parens_count = 0\n        }\n        if c == parens.unicodeScalars.first\
    \ {\n            parens_count += 1\n        } else {\n            parens_count\
    \ = 0\n        }\n        level -= 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvov2lgzy.swift:18:24: error: value of type 'Int' has no member\
    \ 'unicodeScalars'\n        if c == parens.unicodeScalars.first {\n          \
    \      ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_count_max\
    \ = 0\n    var parens_count_max_parens = 0\n    var parens_count_max_parens_count\
    \ = 0\n    var parens_count_max_parens_count_max = 0\n    var parens_count_max_parens_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max = 0\n    var parens_count_max_parens_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max = 0\n   \
    \ var parens_count_max_parens_count_max_count_max_count_max_count = 0\n    var\
    \ parens_count_max_parens_count_max_count_max_count_max_count_max = 0\n    var\
    \ parens_count_max_parens_count_max_count_max_count_max_count_max_count = 0\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_a7jifgf.swift:33:9: error: invalid redeclaration of 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp_a7jifgf.swift:32:9: note: 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp_a7jifgf.swift:34:9: error: invalid redeclaration of\
    \ 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\n\
    \    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp_a7jifgf.swift:32:9: note: 'parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max'\
    \ previously declared here\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n        ^\n/tmp/tmp_a7jifgf.swift:37:9: error: type annotation missing\
    \ in pattern\n    var parens_count_max_parens_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_index2 = 0\n    var paren_level_stack_index3 =\
    \ 0\n    var paren_level_stack_index4 = 0\n    var paren_level_stack_index5 =\
    \ 0\n    var paren_level_stack_index6 = 0\n    var paren_level_stack_index7 =\
    \ 0\n    var paren_level_stack_index8 = 0\n    var paren_level_stack_index9 =\
    \ 0\n    var paren_level_stack_index10 = 0\n    var paren_level_stack_index11\
    \ = 0\n    var paren_level_stack_index12 = 0\n    var paren_level_stack_index13\
    \ = 0\n    var paren_level_stack_index14 = 0\n    var paren_level_stack_index15\
    \ = 0\n    var paren_level_stack_index16 = 0\n    var paren_level_stack_index17\
    \ = 0\n    var paren_level_stack_index18 = 0\n    var paren_level_stack_index19\
    \ = 0\n    var paren_level_stack_index20 = 0\n    var paren_level_stack_index21\
    \ = 0\n    var paren_level_stack_index22 = 0\n    var paren_level_stack_index23\
    \ = 0\n    var paren_level_stack_index24 = 0\n    var paren_level_stack_index25\
    \ = 0\n    var paren_level_stack_index26 = 0\n    var paren_level_stack_index27\
    \ = 0\n    var paren_level_stack_index28 = 0\n    var paren_level_stack_index29\
    \ = 0\n    var paren_level_stack_index30 = 0\n    var paren_level_stack_index31\
    \ = 0\n    var paren_level_stack_index32 = 0\n    var paren_level_stack_index33\
    \ = 0\n    var paren_level_stack_index34 = 0\n    var paren_level_stack_index35\
    \ = 0\n    var paren_level_stack_index36 = 0\n    var paren_level_stack_index37\
    \ = 0\n    var paren_level_stack_index38 = 0\n    var paren_level_stack_index39\
    \ = 0\n    var paren_level_stack_index40 = 0\n    var paren_level_stack_index41\
    \ = 0\n    var paren_level_stack_index42 = 0\n    var paren_level_stack_index43\
    \ = 0\n    var paren_level_stack_index44 = 0\n    var paren_level_stack_index45\
    \ = 0\n    var paren_level_stack_index46 = 0\n    var paren_level_stack_index47\
    \ = 0\n    var paren_level_stack_index48 = 0\n    var paren_level_stack_index49\
    \ = 0\n    var paren_level_stack_index50 = 0\n    var paren_level_stack_index51\
    \ = 0\n    var paren_level_stack_index52 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0kos13hk.swift:67:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_max = 0\n    var paren_level_parens_count_max_min\
    \ = 0\n    var paren_level_parens_count_max_min_index = 0\n    var paren_level_parens_count_max_min_count\
    \ = 0\n    var paren_level_parens_count_max_min_count_max = 0\n    var paren_level_parens_count_max_min_count_min\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index = 0\n    var paren_level_parens_count_max_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_max_max = 0\n  \
    \  var paren_level_parens_count_max_min_count_min_index_max_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max_max_max_max = 0\n \
    \   var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max =\
    \ 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max_max_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max_max_max_max_max_max\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_09ai4ma.swift:23:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_index'\n\
    \    var paren_level_parens_count_max_min_count_min_index = 0\n        ^\n/tmp/tmp_09ai4ma.swift:22:9:\
    \ note: 'paren_level_parens_count_max_min_count_min_index' previously declared\
    \ here\n    var paren_level_parens_count_max_min_count_min_index = 0\n       \
    \ ^\n/tmp/tmp_09ai4ma.swift:25:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_index_max'\n\
    \    var paren_level_parens_count_max_min_count_min_index_max = 0\n        ^\n\
    /tmp/tmp_09ai4ma.swift:24:9: note: 'paren_level_parens_count_max_min_count_min_index_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n        ^\n/tmp/tmp_09ai4ma.swift:27:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max'\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmp_09ai4ma.swift:26:9: note: 'paren_level_parens_count_max_min_count_min_index_max_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmp_09ai4ma.swift:29:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max_max'\n    var paren_level_parens_count_max_min_count_min_index_max_max_max\
    \ = 0\n        ^\n/tmp/tmp_09ai4ma.swift:28:9: note: 'paren_level_parens_count_max_min_count_min_index_max_max_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_max_max\
    \ = 0\n        ^\n/tmp/tmp_09ai4ma.swift:31:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max_max_max'\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max_max_max = 0\n     \
    \   ^\n/tmp/tmp_09ai4ma.swift:30:9: note: 'paren_level_parens_count_max_min_count_min_index_max_max_max_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_max_max_max\
    \ = 0\n        ^\n/tmp/tmp_09ai4ma.swift:32:9: error: invalid redeclaration of\
    \ 'p"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_levels = [Int]()\n    var paren_max_levels\
    \ = [Int]()\n    var paren_levels_string = \"\"\n    var paren_max_levels_string\
    \ = \"\"\n    var paren_levels_string_index = 0\n    var paren_max_levels_string_index\
    \ = 0\n    var paren_levels_string_length = 0\n    var paren_max_levels_string_length\
    \ = 0\n    var paren_levels_string_chars = \"\"\n    var paren_max_levels_string_chars\
    \ = \"\"\n    var paren_levels_string_chars_index = 0\n    var paren_max_levels_string_chars_index\
    \ = 0\n    var paren_levels_string_chars_length = 0\n    var paren_max_levels_string_chars_length\
    \ = 0\n    var paren_levels_string_chars_chars = \"\"\n    var paren_max_levels_string_chars_chars\
    \ = \"\"\n    var paren_levels_string_chars_chars_index = 0\n    var paren_max_levels_string_chars_chars_index\
    \ = 0\n    var paren_levels_string_chars_chars_length = 0\n    var paren_max_levels_string_chars_chars_length\
    \ = 0\n    var paren_levels_string_chars_chars_chars = \"\"\n    var paren_max_levels_string_chars_chars_chars\
    \ = \"\"\n    var paren_levels_string_chars_chars_chars_index = 0\n    var paren_max_levels_string_chars_chars_chars_index\
    \ = 0\n    var paren_levels_string_chars_chars_chars_length = 0\n    var paren_max_levels_string_chars_chars_length\
    \ = 0\n    var paren_levels_string_chars_chars_chars_chars = \"\"\n    var paren_max_levels_string_chars_chars_chars\
    \ = \"\"\n    var paren_levels_string_chars_chars_chars_index = 0\n    var paren_max_levels_string_chars_chars_index\
    \ = 0\n    var paren_levels_string_chars_chars_length = 0\n    var paren_max_levels_string_chars_chars_length\
    \ = 0\n    var paren_levels_string_chars_chars_chars_chars = \"\"\n    var paren_max_levels_string_chars_chars_chars\
    \ = \"\"\n    var paren_levels_string_chars_chars_chars_index = 0\n    var paren_max_levels_string_chars_chars_index\
    \ = 0\n    var paren_levels_string_chars_chars_length = 0\n    var paren_max_levels_string_chars_chars_length\
    \ = 0\n    var paren_levels_string_chars_chars_chars_chars = \"\"\n    var paren_max_levels_string_chars_chars_chars\
    \ = \"\"\n    var paren_levels_string_chars_chars_chars_index = 0\n    var paren_max_levels_string_chars_chars_index\
    \ = 0\n    var paren_levels_string_chars_chars_length = 0\n    var paren_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgd7thwpc.swift:37:9: error: invalid redeclaration of 'paren_max_levels_string_chars_chars_length'\n\
    \    var paren_max_levels_string_chars_chars_length = 0\n        ^\n/tmp/tmpgd7thwpc.swift:31:9:\
    \ note: 'paren_max_levels_string_chars_chars_length' previously declared here\n\
    \    var paren_max_levels_string_chars_chars_length = 0\n        ^\n/tmp/tmpgd7thwpc.swift:39:9:\
    \ error: invalid redeclaration of 'paren_max_levels_string_chars_chars_chars'\n\
    \    var paren_max_levels_string_chars_chars_chars = \"\"\n        ^\n/tmp/tmpgd7thwpc.swift:33:9:\
    \ note: 'paren_max_levels_string_chars_chars_chars' previously declared here\n\
    \    var paren_max_levels_string_chars_chars_chars = \"\"\n        ^\n/tmp/tmpgd7thwpc.swift:40:9:\
    \ error: invalid redeclaration of 'paren_levels_string_chars_chars_chars_index'\n\
    \    var paren_levels_string_chars_chars_chars_index = 0\n        ^\n/tmp/tmpgd7thwpc.swift:34:9:\
    \ note: 'paren_levels_string_chars_chars_chars_index' previously declared here\n\
    \    var paren_levels_string_chars_chars_chars_index = 0\n        ^\n/tmp/tmpgd7thwpc.swift:41:9:\
    \ error: invalid redeclaration of 'paren_max_levels_string_chars_chars_index'\n\
    \    var paren_max_levels_string_chars_chars_index = 0\n        ^\n/tmp/tmpgd7thwpc.swift:29:9:\
    \ note: 'paren_max_levels_string_chars_chars_index' previously declared here\n\
    \    var paren_max_levels_string_chars_chars_index = 0\n        ^\n/tmp/tmpgd7thwpc.swift:42:9:\
    \ error: invalid redeclaration of 'paren_levels_string_chars_chars_length'\n \
    \   var paren_levels_string_chars_chars_length = 0\n        ^\n/tmp/tmpgd7thwpc.swift:30:9:\
    \ note: 'paren_levels_string_chars_chars_length' previously declared here\n  \
    \  var paren_levels_string_chars_chars_length = 0\n        ^\n/tmp/tmpgd7thwpc.swift:43:9:\
    \ error: invalid redeclaration of 'paren_max_levels_string_chars_chars_length'\n\
    \    var paren_max_levels_string_chars_chars_length = 0\n        ^\n/tmp/tmpgd7thwpc.swift:31:9:\
    \ note: 'paren_max_levels_string_chars_chars_length' previously declared here\n\
    \    var paren_max_levels_string_chars_chars_length = 0\n        ^\n/tmp/tmpgd7thwpc.swi"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char_count_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens = 0\n    var paren_char_count_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens = 0\n\
    \    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens =\
    \ 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n    var paren_char_count_in_parens_in_parens_in_parens_in_paren\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1j72mdu5.swift:21:9: error: invalid redeclaration of 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\n\
    \    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n        ^\n/tmp/tmp1j72mdu5.swift:20:9: note: 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\
    \ previously declared here\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n        ^\n/tmp/tmp1j72mdu5.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\n\
    \    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n        ^\n/tmp/tmp1j72mdu5.swift:22:9: note: 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\
    \ previously declared here\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n        ^\n/tmp/tmp1j72mdu5.swift:25:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\n\
    \    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n        ^\n/tmp/tmp1j72mdu5.swift:24:9: note: 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\
    \ previously declared here\n    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens\
    \ = 0\n        ^\n/tmp/tmp1j72mdu5.swift:27:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens_in_parens'\n\
    \    var paren_char_count_in_parens_in_parens_in_parens_in_parens_in"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string {\n        if c == '(' {\n            paren_count\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n        }\n\
    \        if paren_count == 0 {\n            levels.append(level)\n        }\n\
    \        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp36ksnd63.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp36ksnd63.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_nesting_count = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_level_counter = 0\n    var paren_nesting_level_counter2\
    \ = 0\n    var paren_nesting_level_counter3 = 0\n    var paren_nesting_level_counter4\
    \ = 0\n    var paren_nesting_level_counter5 = 0\n    var paren_nesting_level_counter6\
    \ = 0\n    var paren_nesting_level_counter7 = 0\n    var paren_nesting_level_counter8\
    \ = 0\n    var paren_nesting_level_counter9 = 0\n    var paren_nesting_level_counter10\
    \ = 0\n    var paren_nesting_level_counter11 = 0\n    var paren_nesting_level_counter12\
    \ = 0\n    var paren_nesting_level_counter13 = 0\n    var paren_nesting_level_counter14\
    \ = 0\n    var paren_nesting_level_counter15 = 0\n    var paren_nesting_level_counter16\
    \ = 0\n    var paren_nesting_level_counter17 = 0\n    var paren_nesting_level_counter18\
    \ = 0\n    var paren_nesting_level_counter19 = 0\n    var paren_nesting_level_counter20\
    \ = 0\n    var paren_nesting_level_counter21 = 0\n    var paren_nesting_level_counter22\
    \ = 0\n    var paren_nesting_level_counter23 = 0\n    var paren_nesting_level_counter24\
    \ = 0\n    var paren_nesting_level_counter25 = 0\n    var paren_nesting_level_counter26\
    \ = 0\n    var paren_nesting_level_counter27 = 0\n    var paren_nesting_level_counter28\
    \ = 0\n    var paren_nesting_level_counter29 = 0\n    var paren_nesting_level_counter30\
    \ = 0\n    var paren_nesting_level_counter31 = 0\n    var paren_nesting_level_counter32\
    \ = 0\n    var paren_nesting_level_counter33 = 0\n    var paren_nesting_level_counter34\
    \ = 0\n    var paren_nesting_level_counter35 = 0\n    var paren_nesting_level_counter36\
    \ = 0\n    var paren_nesting_level_counter37 = 0\n    var paren_nesting_level_counter38\
    \ = 0\n    var paren_nesting_level_counter39 = 0\n    var paren_nesting_level_counter40\
    \ = 0\n    var paren_nesting_level_counter41 = 0\n    var paren_nesting_level_counter42\
    \ = 0\n    var paren_nesting_level_counter43 = 0\n    var paren_nesting_level_counter44\
    \ = 0\n    var paren_nesting_level_counter45 = 0\n    var paren_nesting_level_counter46\
    \ = 0\n    var paren_nesting_level_counter47 = 0\n    var paren_nesting_level_counter48\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpumg01jx0.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpumg01jx0.swift:9:9: warning:\
    \ initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpumg01jx0.swift:10:9: warning: initialization of variable 'paren_nesting'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_nesting = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpumg01jx0.swift:11:9:\
    \ warning: initialization of variable 'paren_nesting_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_nesting_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpumg01jx0.swift:12:9: warning:\
    \ initialization of variable 'paren_nesting_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_nesting_level = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpumg01jx0.swift:13:9: warning: initialization\
    \ of variable 'paren_nesting_level_counter' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_nesting_level_counter =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpumg01jx0.swift:14:9:\
    \ warning: initialization of variable 'paren_nesting_level_counter2' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_nesting_level_counter2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpumg01jx0.swift:15:9:\
    \ warning: initialization of variable 'paren_nesting_level_counter3' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_nesting_level_counter3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpumg01jx0.swift:16:9:\
    \ warning: initialization of variable 'paren_nesting_level_counter4' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_nesting_level_counter4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_pos = 0\n    var paren_char_len\
    \ = paren_string.characters.count\n    var paren_char_char_pos = 0\n    var paren_char_char_len\
    \ = paren_char.characters.count\n    var paren_char_char_char_pos = 0\n    var\
    \ paren_char_char_char_len = paren_char_char.characters.count\n    var paren_char_char_char_char_pos\
    \ = 0\n    var paren_char_char_char_char_len = paren_char_char_char.characters.count\n\
    \    var paren_char_char_char_char_char_pos = 0\n    var paren_char_char_char_char_char_len\
    \ = paren_char_char_char_char.characters.count\n    var paren_char_char_char_char_char_char_pos\
    \ = 0\n    var paren_char_char_char_char_char_char_len = paren_char_char_char_char_char.characters.count\n\
    \    var paren_char_char_char_char_char_char_char_pos = 0\n    var paren_char_char_char_char_char_char_char_len\
    \ = paren_char_char_char_char_char_char.characters.count\n    var paren_char_char_char_char_char_char_char_pos\
    \ = 0\n    var paren_char_char_char_char_char_char_char_len = paren_char_char_char_char_char_char_char.characters.count\n\
    \    var paren_char_char_char_char_char_char_char_char_pos = 0\n    var paren_char_char_char_char_char_char_char_char_len\
    \ = paren_char_char_char_char_char_char_char_char_char.characters.count\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_pos = 0\n    var paren_char_char_char_char_char_char_char_char_char_len\
    \ = paren_char_char_char_char_char_char_char_char_char_char.characters.count\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_pos = 0\n   \
    \ var paren_char_char_char_char_char_char_char_char_char_char_len = paren_char_char_char_char_char_char_char_char_char_char_char_char.characters.count\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_pos = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_len = paren_char_char_char_char_char_char_char_char_char_char_char_char_char.characters.count\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_pos\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char_len\
    \ = paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char.characters.count\n\
    \    var paren_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt9zz6b1m.swift:16:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    var paren_char_len = paren_string.characters.count\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt9zz6b1m.swift:18:42: error: 'characters' is unavailable:\
    \ Please use String directly\n    var paren_char_char_len = paren_char.characters.count\n\
    \                                         ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt9zz6b1m.swift:20:36: error: cannot find\
    \ 'paren_char_char' in scope\n    var paren_char_char_char_len = paren_char_char.characters.count\n\
    \                                   ^~~~~~~~~~~~~~~\n/tmp/tmpt9zz6b1m.swift:22:41:\
    \ error: cannot find 'paren_char_char_char' in scope\n    var paren_char_char_char_char_len\
    \ = paren_char_char_char.characters.count\n                                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt9zz6b1m.swift:24:46: error: cannot find\
    \ 'paren_char_char_char_char' in scope\n    var paren_char_char_char_char_char_len\
    \ = paren_char_char_char_char.characters.count\n                             \
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt9zz6b1m.swift:26:51: error:\
    \ cannot find 'paren_char_char_char_char_char' in scope\n    var paren_char_char_char_char_char_char_len\
    \ = paren_char_char_char_char_char.characters.count\n                        \
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt9zz6b1m.swift:28:56:\
    \ error: cannot find 'paren_char_char_char_char_char_char' in scope\n    var paren_char_char_char_char_char_char_char_len\
    \ = paren_char_char_char_char_char_char.characters.count\n                   \
    \                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt9zz6b1m.swift:29:9:\
    \ error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_pos'\n\
    \    var paren_char_char_char_char_char_char_char_pos = 0\n  "
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var paren_level = 0\n    var paren_level_index = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_ptr = 0\n    var paren_level_stack_ptr_end =\
    \ paren_level_stack_ptr + paren_level_stack_size\n    var paren_level_stack_ptr_end_ptr\
    \ = paren_level_stack_ptr_end + 1\n    var paren_level_stack_ptr_end_ptr_end =\
    \ paren_level_stack_ptr_end_ptr + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr\
    \ = paren_level_stack_ptr_end_ptr_end + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end\
    \ = paren_level_stack_ptr_end_ptr_end_ptr + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr + 1\n    var\
    \ paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ + 1\n    var paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end\
    \ = paren_level_stack_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr_end_ptr + 1\n\
    \    var paren_level_stack_ptr_end_ptr_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0w9wsg41.swift:30:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_ptr_end_ptr_\n        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var\
    \ paren_levels_index = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size\
    \ = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index\
    \ = 0\n    var paren_levels_size = 0\n    var paren_levels_index = 0\n    var\
    \ paren_levels_size_index = 0\n    var paren_levels_size = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size\
    \ = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index\
    \ = 0\n    var paren_levels_size = 0\n    var paren_levels_index = 0\n    var\
    \ paren_levels_size_index = 0\n    var paren_levels_size = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size\
    \ = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index\
    \ = 0\n    var paren_levels_size = 0\n    var paren_levels_index = 0\n    var\
    \ paren_levels_size_index = 0\n    var paren_levels_size = 0\n    var paren_levels_index\
    \ = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size = 0\n  \
    \  var paren_levels_index = 0\n    var paren_levels_size_index = 0\n    var paren_levels_size\
    \ = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index = 0\n \
    \   var paren_levels_size = 0\n    var paren_levels_index = 0\n    var paren_levels_size_index\
    \ = 0\n    var paren_levels_size = 0\n    var paren_levels_index = 0\n    var\
    \ paren_levels_size_index = 0\n    var paren_levels_size = 0\n    var paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwtoekek1.swift:15:9: error: invalid redeclaration of 'paren_levels_size'\n\
    \    var paren_levels_size = 0\n        ^\n/tmp/tmpwtoekek1.swift:12:9: note:\
    \ 'paren_levels_size' previously declared here\n    var paren_levels_size = 0\n\
    \        ^\n/tmp/tmpwtoekek1.swift:16:9: error: invalid redeclaration of 'paren_levels_index'\n\
    \    var paren_levels_index = 0\n        ^\n/tmp/tmpwtoekek1.swift:13:9: note:\
    \ 'paren_levels_index' previously declared here\n    var paren_levels_index =\
    \ 0\n        ^\n/tmp/tmpwtoekek1.swift:17:9: error: invalid redeclaration of 'paren_levels_size_index'\n\
    \    var paren_levels_size_index = 0\n        ^\n/tmp/tmpwtoekek1.swift:14:9:\
    \ note: 'paren_levels_size_index' previously declared here\n    var paren_levels_size_index\
    \ = 0\n        ^\n/tmp/tmpwtoekek1.swift:18:9: error: invalid redeclaration of\
    \ 'paren_levels_size'\n    var paren_levels_size = 0\n        ^\n/tmp/tmpwtoekek1.swift:12:9:\
    \ note: 'paren_levels_size' previously declared here\n    var paren_levels_size\
    \ = 0\n        ^\n/tmp/tmpwtoekek1.swift:19:9: error: invalid redeclaration of\
    \ 'paren_levels_index'\n    var paren_levels_index = 0\n        ^\n/tmp/tmpwtoekek1.swift:13:9:\
    \ note: 'paren_levels_index' previously declared here\n    var paren_levels_index\
    \ = 0\n        ^\n/tmp/tmpwtoekek1.swift:20:9: error: invalid redeclaration of\
    \ 'paren_levels_size_index'\n    var paren_levels_size_index = 0\n        ^\n\
    /tmp/tmpwtoekek1.swift:14:9: note: 'paren_levels_size_index' previously declared\
    \ here\n    var paren_levels_size_index = 0\n        ^\n/tmp/tmpwtoekek1.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_size'\n    var paren_levels_size\
    \ = 0\n        ^\n/tmp/tmpwtoekek1.swift:12:9: note: 'paren_levels_size' previously\
    \ declared here\n    var paren_levels_size = 0\n        ^\n/tmp/tmpwtoekek1.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_index'\n    var paren_levels_index\
    \ = 0\n        ^\n/tmp/tmpwtoekek1.swift:13:9: note: 'paren_levels_index' previously\
    \ declared here\n    var paren_levels_index = 0\n        ^\n/tmp/tmpwtoekek1.swift:23:9:\
    \ error: invalid redeclaration of"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_char_index = 0\n    var\
    \ paren_char_length = 0\n    var paren_char: Char\n    var paren_char_next: Char\n\
    \    var paren_char_prev: Char\n    var paren_char_prev2: Char\n    var paren_char_next2:\
    \ Char\n    var paren_char_prev3: Char\n    var paren_char_next3: Char\n    var\
    \ paren_char_prev4: Char\n    var paren_char_next4: Char\n    var paren_char_prev5:\
    \ Char\n    var paren_char_next5: Char\n    var paren_char_prev6: Char\n    var\
    \ paren_char_next6: Char\n    var paren_char_prev7: Char\n    var paren_char_next7:\
    \ Char\n    var paren_char_prev8: Char\n    var paren_char_next8: Char\n    var\
    \ paren_char_prev9: Char\n    var paren_char_next9: Char\n    var paren_char_prev10:\
    \ Char\n    var paren_char_next10: Char\n    var paren_char_prev11: Char\n   \
    \ var paren_char_next11: Char\n    var paren_char_prev12: Char\n    var paren_char_next12:\
    \ Char\n    var paren_char_prev13: Char\n    var paren_char_next13: Char\n   \
    \ var paren_char_prev14: Char\n    var paren_char_next14: Char\n    var paren_char_prev15:\
    \ Char\n    var paren_char_next15: Char\n    var paren_char_prev16: Char\n   \
    \ var paren_char_next16: Char\n    var paren_char_prev17: Char\n    var paren_char_next17:\
    \ Char\n    var paren_char_prev18: Char\n    var paren_char_next18: Char\n   \
    \ var paren_char_prev19: Char\n    var paren_char_next19: Char\n    var paren_char_prev20:\
    \ Char\n    var paren_char_next20: Char\n    var paren_char_prev21: Char\n   \
    \ var paren_char_next21: Char\n    var paren_char_prev22: Char\n    var paren_char_next22:\
    \ Char\n    var paren_char_prev23: Char\n    var paren_char_next23: Char\n   \
    \ var paren_char_prev24: Char\n    var paren_char_next24: Char\n    var paren_char_prev25:\
    \ Char\n    var paren_char_next25: Char\n    var paren_char_prev26: Char\n   \
    \ var paren_char_next26: Char\n    var paren_char_prev27: Char\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc9xy4le1.swift:14:21: error: cannot find type 'Char' in scope\n\
    \    var paren_char: Char\n                    ^~~~\n/tmp/tmpc9xy4le1.swift:15:26:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next: Char\n   \
    \                      ^~~~\n/tmp/tmpc9xy4le1.swift:16:26: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev: Char\n                      \
    \   ^~~~\n/tmp/tmpc9xy4le1.swift:17:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev2: Char\n                          ^~~~\n/tmp/tmpc9xy4le1.swift:18:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next2: Char\n  \
    \                        ^~~~\n/tmp/tmpc9xy4le1.swift:19:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev3: Char\n                     \
    \     ^~~~\n/tmp/tmpc9xy4le1.swift:20:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next3: Char\n                          ^~~~\n/tmp/tmpc9xy4le1.swift:21:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev4: Char\n  \
    \                        ^~~~\n/tmp/tmpc9xy4le1.swift:22:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next4: Char\n                     \
    \     ^~~~\n/tmp/tmpc9xy4le1.swift:23:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_prev5: Char\n                          ^~~~\n/tmp/tmpc9xy4le1.swift:24:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_next5: Char\n  \
    \                        ^~~~\n/tmp/tmpc9xy4le1.swift:25:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_prev6: Char\n                     \
    \     ^~~~\n/tmp/tmpc9xy4le1.swift:26:27: error: cannot find type 'Char' in scope\n\
    \    var paren_char_next6: Char\n                          ^~~~\n/tmp/tmpc9xy4le1.swift:27:27:\
    \ error: cannot find type 'Char' in scope\n    var paren_char_prev7: Char\n  \
    \                        ^~~~\n/tmp/tmpc9xy4le1.swift:28:27: error: cannot find\
    \ type 'Char' in scope\n    var paren_char_next7: Char\n                     \
    \     ^~~~\n/tmp/tmpc9xy4le1.swift:29:27: error: cannot find type 'Char' in scope\n\
    \    var paren_"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for char in paren_string.characters {\n        if char == \"(\" {\n  \
    \          parens_count += 1\n            parens_string += String(char)\n    \
    \    } else if char == \")\" {\n            parens_count -= 1\n            if\
    \ parens_count == 0 {\n                parens_string += String(char)\n       \
    \         parens = parens_string.count\n                if parens > max_level_parens\
    \ {\n                    max_level = level\n                    max_level_parens\
    \ = parens\n                }\n                level++\n                parens_string\
    \ = \"\"\n            }\n        }\n    }\n    if parens_count > 0 {\n       \
    \ max_level = level\n        max_level_parens = parens\n    }\n    return [max_level,\
    \ max_level_parens]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpab6t9ax5.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpab6t9ax5.swift:27:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                level++\n                     ^~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_level_stack\
    \ = [Int]()\n    var parens_level_stack_count = 0\n    var parens_level_stack_index\
    \ = 0\n    var parens_level_stack_string = \"\"\n    var parens_level_stack_parens\
    \ = 0\n    var parens_level_stack_parens_count = 0\n    var parens_level_stack_parens_index\
    \ = 0\n    var parens_level_stack_parens_string = \"\"\n    var parens_level_stack_parens_level\
    \ = 0\n    var parens_level_stack_parens_level_stack = [Int]()\n    var parens_level_stack_parens_level_stack_count\
    \ = 0\n    var parens_level_stack_parens_level_stack_index = 0\n    var parens_level_stack_parens_level_stack_string\
    \ = \"\"\n    var parens_level_stack_parens_level_stack_parens = 0\n    var parens_level_stack_parens_level_stack_parens_count\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_index = 0\n    var\
    \ parens_level_stack_parens_level_stack_parens_string = \"\"\n    var parens_level_stack_parens_level_stack_parens_level\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack = [Int]()\n\
    \    var parens_level_stack_parens_level_stack_parens_level_stack_count = 0\n\
    \    var parens_level_stack_parens_level_stack_parens_level_stack_index = 0\n\
    \    var parens_level_stack_parens_level_stack_parens_level_stack_string = \"\"\
    \n    var parens_level_stack_parens_level_stack_parens_level_stack_parens = 0\n\
    \    var parens_level_stack_parens_level_stack_parens_level_stack_parens_count\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_index\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_string\
    \ = \"\"\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level_stack\
    \ = [Int]()\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level_stack_count\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level_stack_index\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level_stack_string\
    \ = \"\"\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level_stack_parens\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_stack_parens_level_stack_parens_count\
    \ = 0\n    var parens_level_stack_parens_level_stack_parens_level_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqy4nvf_b.swift:46:9: error: type annotation missing in pattern\n\
    \    var parens_level_stack_parens_level_stack_parens_level_\n        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaqszhve_.swift:15:9: error: invalid redeclaration of 'paren_level_counter'\n\
    \    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9: note:\
    \ 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:23:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var result = [Int]()\n    for char\
    \ in paren_string.characters {\n        switch char {\n        case \")\":\n \
    \           level -= 1\n            if level == 0 {\n                result.append(level)\n\
    \            }\n        case \")\":\n            level += 1\n            if level\
    \ == 0 {\n                result.append(level)\n            }\n        default:\n\
    \            result.append(level)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxv603dos.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxv603dos.swift:17:14: warning: literal value is already handled by\
    \ previous pattern; consider removing it\n        case \")\":\n             ^~~\n\
    /tmp/tmpxv603dos.swift:12:14: note: first occurrence of identical literal pattern\
    \ is here\n        case \")\":\n             ^~~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_index = 0\n    var paren_char_length\
    \ = 0\n    var paren_char_char_length = 0\n    var paren_char_char = \"\"\n  \
    \  var paren_char_char_index = 0\n    var paren_char_char_length = 0\n    var\
    \ paren_char_char_char = \"\"\n    var paren_char_char_char_index = 0\n    var\
    \ paren_char_char_char_length = 0\n    var paren_char_char_char_char = \"\"\n\
    \    var paren_char_char_char_char_index = 0\n    var paren_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_index\
    \ = 0\n    var paren_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_index = 0\n    var paren_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_char_index\
    \ = 0\n    var paren_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_index = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_length = 0\n    var paren_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_index = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char =\
    \ \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var paren_char_char_char_char_char_char_char_char_char_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7e31dfra.swift:20:9: error: invalid redeclaration of 'paren_char_char_length'\n\
    \    var paren_char_char_length = 0\n        ^\n/tmp/tmp7e31dfra.swift:17:9: note:\
    \ 'paren_char_char_length' previously declared here\n    var paren_char_char_length\
    \ = 0\n        ^\n/tmp/tmp7e31dfra.swift:52:9: error: type annotation missing\
    \ in pattern\n    var paren_char_char_char_char_char_char_char_char_char_\n  \
    \      ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyuj3g_nb.swift:38:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpyuj3g_nb.swift:32:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpyuj3g_nb.swift:31:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpyuj3g_nb.swift:34:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpyuj3g_nb.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpyuj3g_nb.swift:35:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpyuj3g_nb.swift:33:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_gr"
  stdout: ''
  timestamp: 1660009305
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  paren_count += 1\n        } else if char == \")\" {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp9z14n11c/tmp9z14n11c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cd7fc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cd7cb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cd7cb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cd7cb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9z14n11c                        0x000055858403768e <unavailable> + 5774

    5    libc.so.6                          0x00002b7cd81ac460 __libc_start_main +
    245

    6    tmp9z14n11c                        0x00005585840372a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level_count\
    \ = 0\n    var parens_level_max = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6qwixm_j.swift:17:9: error: invalid redeclaration of 'parens_level_max_count'\n\
    \    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9: note:\
    \ 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:18:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:19:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:20:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:21:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:22:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:23:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:24:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    v"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_length = 0\n    var paren_char_length_count = 0\n  \
    \  var paren_char_length_index = 0\n    var paren_char_length_length = 0\n   \
    \ var paren_char_length_length_count = 0\n    var paren_char_length_length_index\
    \ = 0\n    var paren_char_length_length_length = 0\n    var paren_char_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_index = 0\n    var paren_char_length_length_length_length\
    \ = 0\n    var paren_char_length_length_length_length_count = 0\n    var paren_char_length_length_length_length_index\
    \ = 0\n    var paren_char_length_length_length_length_length = 0\n    var paren_char_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_index = 0\n    var\
    \ paren_char_length_length_length_length_length_length = 0\n    var paren_char_length_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_length_index = 0\n\
    \    var paren_char_length_length_length_length_length_length_length = 0\n   \
    \ var paren_char_length_length_length_length_length_length_length_count = 0\n\
    \    var paren_char_length_length_length_length_length_length_length_index = 0\n\
    \    var paren_char_length_length_length_length_length_length_length_length =\
    \ 0\n    var paren_char_length_length_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_length_length_count\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    var paren_char_length_length_length_length_length_length_length_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdnp07tl0.swift:36:9: error: invalid redeclaration of 'paren_char_length_length_length_length_length_length_length_count'\n\
    \    var paren_char_length_length_length_length_length_length_length_count = 0\n\
    \        ^\n/tmp/tmpdnp07tl0.swift:33:9: note: 'paren_char_length_length_length_length_length_length_length_count'\
    \ previously declared here\n    var paren_char_length_length_length_length_length_length_length_count\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:43:9: error: invalid redeclaration of\
    \ 'paren_char_length_length_length_length_length_length_length_length_length_index'\n\
    \    var paren_char_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:40:9: note: 'paren_char_length_length_length_length_length_length_length_length_length_index'\
    \ previously declared here\n    var paren_char_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:44:9: error: invalid redeclaration of\
    \ 'paren_char_length_length_length_length_length_length_length_length_length_length'\n\
    \    var paren_char_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:41:9: note: 'paren_char_length_length_length_length_length_length_length_length_length_length'\
    \ previously declared here\n    var paren_char_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:45:9: error: invalid redeclaration of\
    \ 'paren_char_length_length_length_length_length_length_length_length_length_count'\n\
    \    var paren_char_length_length_length_length_length_length_length_length_length_count\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:42:9: note: 'paren_char_length_length_length_length_length_length_length_length_length_count'\
    \ previously declared here\n    var paren_char_length_length_length_length_length_length_length_length_length_count\
    \ = 0\n        ^\n/tmp/tmpdnp07tl0.swift:50:9: error: type annotation missing\
    \ in pattern\n    var paren_char_length_length_length_length_length_length_length_\n\
    \    "
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_char_count = 0\n    var paren_char = \"\"\n    for c in paren_string\
    \ {\n        if c == '(' {\n            paren_count += 1\n            paren_char_count\
    \ = 0\n        } else if c == ')' {\n            paren_char_count += 1\n     \
    \       if paren_char_count == paren_count {\n                levels.append(level)\n\
    \            }\n            paren_count = 0\n            level = 0\n        }\
    \ else {\n            level += 1\n        }\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzcoujtb_.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpzcoujtb_.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpzcoujtb_.swift:12:9: warning: initialization of variable\
    \ 'paren_char' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group_sizes\
    \ = [Int]()\n    var paren_group_levels = [Int]()\n    var paren_group_parens\
    \ = [Int]()\n    var paren_group_parens_sizes = [Int]()\n    var paren_group_parens_levels\
    \ = [Int]()\n    var paren_group_parens_parens = [Int]()\n    var paren_group_parens_parens_sizes\
    \ = [Int]()\n    var paren_group_parens_parens_levels = [Int]()\n    var paren_group_parens_parens_parens\
    \ = [Int]()\n    var paren_group_parens_parens_parens_sizes = [Int]()\n    var\
    \ paren_group_parens_parens_parens_levels = [Int]()\n    var paren_group_parens_parens_parens_parens\
    \ = [Int]()\n    var paren_group_parens_parens_parens_parens_sizes = [Int]()\n\
    \    var paren_group_parens_parens_parens_parens_levels = [Int]()\n    var paren_group_parens_parens_parens_parens_parens\
    \ = [Int]()\n    var paren_group_parens_parens_parens_parens_parens_sizes = [Int]()\n\
    \    var paren_group_parens_parens_parens_parens_parens_levels = [Int]()\n   \
    \ var paren_group_parens_parens_parens_parens_parens_parens = [Int]()\n    var\
    \ paren_group_parens_parens_parens_parens_parens_parens_sizes = [Int]()\n    var\
    \ paren_group_parens_parens_parens_parens_parens_parens_levels = [Int]()\n   \
    \ var paren_group_parens_parens_parens_parens_parens_parens_parens = [Int]()\n\
    \    var paren_group_parens_parens_parens_parens_parens_parens_parens_sizes =\
    \ [Int]()\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_levels\
    \ = [Int]()\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int]()\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_sizes\
    \ = [Int]()\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_levels\
    \ = [Int]()\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe_hpfn5b.swift:39:90: error: expected ']' in container literal\
    \ expression\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int\n                                                                   \
    \                      ^\n/tmp/tmpe_hpfn5b.swift:39:86: note: to match this opening\
    \ '['\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int\n                                                                   \
    \                  ^\n/tmp/tmpe_hpfn5b.swift:39:86: error: expected member name\
    \ or constructor call after type name\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int\n                                                                   \
    \                  ^\n/tmp/tmpe_hpfn5b.swift:39:87: note: add arguments after\
    \ the type to construct a value of the type\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int\n                                                                   \
    \                   ^\n                                                      \
    \                                   ()\n/tmp/tmpe_hpfn5b.swift:39:87: note: use\
    \ '.self' to reference the type object\n    var paren_group_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = [Int\n                                                                   \
    \                   ^\n                                                      \
    \                                   .self\n/tmp/tmpe_hpfn5b.swift:8:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpe_hpfn5b.swift:9:9:\
    \ warning: initialization of variable 'max_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpe_hpfn5b.swift:10:9: warning: initialization of variable 'max_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_pare"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens = 0\n    var paren_level_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max = 0\n    var paren_level_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpco1xa0di.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    for char in paren_string.characters\
    \ {\n        switch char {\n        case ')':\n            paren_char_count--\n\
    \            if paren_char_count == 0 {\n                levels[level] = paren_level\n\
    \                level++\n                paren_count = 0\n                paren_level\
    \ = 0\n                paren_char_count = 0\n                paren_char = \"\"\
    \n                paren_chars = []\n            }\n        case ')':\n       \
    \     paren_char_count++\n            if paren_char_count == 1 {\n           \
    \     levels[level] = paren_level\n                level++\n                paren_count\
    \ = 0\n                paren_level = 0\n                paren_char_count = 0\n\
    \                paren_char = \"\"\n                paren_chars = []\n       \
    \     }\n        case ')':\n            paren_char_count++\n            if paren_char_count\
    \ == 2 {\n                levels[level] = paren_level\n                level++\n\
    \                paren_count = 0\n                paren_level = 0\n          \
    \      paren_char_count = 0\n                paren_char = \"\"\n             \
    \   paren_chars = []\n            }\n        default:\n            paren_char_count++\n\
    \            paren_chars.append(char)\n        }\n    }\n    return levels\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi_lraadw.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmpi_lraadw.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpi_lraadw.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmpi_lraadw.swift:15:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpi_lraadw.swift:16:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi_lraadw.swift:19:29: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            paren_char_count--\n\
    \                            ^~\n/tmp/tmpi_lraadw.swift:22:22: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n                level++\n    \
    \                 ^~\n/tmp/tmpi_lraadw.swift:30:29: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            paren_char_count++\n      \
    \                      ^~\n/tmp/tmpi_lraadw.swift:33:22: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                level++\n             \
    \        ^~\n/tmp/tmpi_lraadw.swift:41:29: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            paren_char_count++\n              \
    \              ^~\n/tmp/tmpi_lraadw.swift:44:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n                level++\n                  \
    \   ^~\n/tmp/tmpi_lraadw.swift:52:29: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_char_count++\n                     \
    \       ^~\n/tmp/tmpi_lraadw.swift:29:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case ')':\n             ^~~\n\
    /tmp/tmpi"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_paren_index = 0\n    var paren_level = 0\n    var paren_level_index\
    \ = 0\n    var paren_level_paren_index = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_index = 0\n    var paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_index = 0\n    var paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_index = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_index = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_index = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren_index = 0\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprf8tyz97.swift:31:9: error: invalid redeclaration of 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n        ^\n/tmp/tmprf8tyz97.swift:30:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n        ^\n/tmp/tmprf8tyz97.swift:32:9: error: invalid redeclaration of\
    \ 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n        ^\n/tmp/tmprf8tyz97.swift:30:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n        ^\n/tmp/tmprf8tyz97.swift:34:9: error: invalid redeclaration of\
    \ 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n        ^\n/tmp/tmprf8tyz97.swift:33:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n        ^\n/tmp/tmprf8tyz97.swift:35:9: error: type annotation m"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = \"\"\n    for c in paren_string\
    \ {\n        if c == '(' {\n            paren_count += 1\n            paren_level\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n         \
    \   paren_level -= 1\n            if paren_count < 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        } else if paren_count > 0 {\n\
    \            level += 1\n        }\n        paren_char = c\n    }\n    levels.append(level)\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1_tw7fh4.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp1_tw7fh4.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp1_tw7fh4.swift:27:22: error: cannot assign value of type\
    \ 'Character' to type 'String'\n        paren_char = c\n                     ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_next = \"\"\n    var paren_char_prev = \"\"\n   \
    \ var paren_char_prev_next = \"\"\n    var paren_char_next2 = \"\"\n    var paren_char_next3\
    \ = \"\"\n    var paren_char_next4 = \"\"\n    var paren_char_next5 = \"\"\n \
    \   var paren_char_next6 = \"\"\n    var paren_char_next7 = \"\"\n    var paren_char_next8\
    \ = \"\"\n    var paren_char_next9 = \"\"\n    var paren_char_next10 = \"\"\n\
    \    var paren_char_next11 = \"\"\n    var paren_char_next12 = \"\"\n    var paren_char_next13\
    \ = \"\"\n    var paren_char_next14 = \"\"\n    var paren_char_next15 = \"\"\n\
    \    var paren_char_next16 = \"\"\n    var paren_char_next17 = \"\"\n    var paren_char_next18\
    \ = \"\"\n    var paren_char_next19 = \"\"\n    var paren_char_next20 = \"\"\n\
    \    var paren_char_next21 = \"\"\n    var paren_char_next22 = \"\"\n    var paren_char_next23\
    \ = \"\"\n    var paren_char_next24 = \"\"\n    var paren_char_next25 = \"\"\n\
    \    var paren_char_next26 = \"\"\n    var paren_char_next27 = \"\"\n    var paren_char_next28\
    \ = \"\"\n    var paren_char_next29 = \"\"\n    var paren_char_next30 = \"\"\n\
    \    var paren_char_next31 = \"\"\n    var paren_char_next32 = \"\"\n    var paren_char_next33\
    \ = \"\"\n    var paren_char_next34 = \"\"\n    var paren_char_next35 = \"\"\n\
    \    var paren_char_next36 = \"\"\n    var paren_char_next37 = \"\"\n    var paren_char_next38\
    \ = \"\"\n    var paren_char_next39 = \"\"\n    var paren_char_next40 = \"\"\n\
    \    var paren_char_next41 = \"\"\n    var paren_char_next42 = \"\"\n    var paren_char_next43\
    \ = \"\"\n    var paren_char_next44 = \"\"\n    var paren_char_next45 = \"\"\n\
    \    var paren_char_next46 = \"\"\n    var paren_char_next47 = \"\"\n    var paren_char_next48\
    \ = \"\"\n    var paren_char_next49 = \"\"\n    var paren_char_next50 = \"\"\n\
    \    var paren_char_next51 = \"\"\n    var paren_char_next52 = \"\"\n    var paren_char_next53\
    \ = \"\"\n    var paren_char_next54 = \"\"\n    var paren_char_next55 = \"\"\n\
    \    var paren_char_next56 = \"\"\n    var paren_char_next57 = \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm5av9btm.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpm5av9btm.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpm5av9btm.swift:10:9: warning: initialization of variable 'max_level_parens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm5av9btm.swift:11:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpm5av9btm.swift:12:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm5av9btm.swift:13:9:\
    \ warning: initialization of variable 'paren_char' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_char = \"\"\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpm5av9btm.swift:14:9: warning: initialization of variable 'paren_char_next'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_next = \"\"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpm5av9btm.swift:15:9:\
    \ warning: initialization of variable 'paren_char_prev' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_char_prev = \"\
    \"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpm5av9btm.swift:16:9: warning: initialization\
    \ of variable 'paren_char_prev_next' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_char_prev_next = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpm5av9btm.swift:17:9: warning: initialization of variable 'paren_char_next2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_cha"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    for c in paren_string.unicodeScalars {\n        if parens_level\
    \ == 0 {\n            parens_string = String(format: \"%c\", c)\n        } else\
    \ {\n            parens_string = String(format: \"%c%c\", parens_string, c)\n\
    \        }\n        if parens_count == 0 {\n            parens_level = 0\n   \
    \     }\n        if parens_level == 0 {\n            if parens_string == \"(\"\
    \ {\n                parens_level++\n                parens++\n              \
    \  levels.append(level)\n                parens_count = 0\n            } else\
    \ {\n                parens_level--\n                parens--\n              \
    \  levels[level] = levels[level] - 1\n            }\n        } else {\n      \
    \      if parens_string == \")\" {\n                parens_level++\n         \
    \       parens++\n                levels[level] = levels[level] + 1\n        \
    \        parens_count = 0\n            } else {\n                parens_level--\n\
    \                parens--\n            }\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnpu1k502.swift:16:29: error: no exact matches in call to initializer\
    \ \n            parens_string = String(format: \"%c\", c)\n                  \
    \          ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmpnpu1k502.swift:16:29:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n            parens_string = String(format: \"%c\", c)\n              \
    \              ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n/tmp/tmpnpu1k502.swift:18:35: error: extra arguments at positions #2,\
    \ #3 in call\n            parens_string = String(format: \"%c%c\", parens_string,\
    \ c)\n                                  ^\nSwift.String:4:23: note: 'init(_:)'\
    \ declared here\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmpnpu1k502.swift:25:29: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                parens_level++\n      \
    \                      ^~\n/tmp/tmpnpu1k502.swift:26:23: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                parens++\n            \
    \          ^~\n/tmp/tmpnpu1k502.swift:30:29: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n                parens_level--\n           \
    \                 ^~\n/tmp/tmpnpu1k502.swift:31:23: error: cannot find operator\
    \ '--"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           levels[level] = parens\n            parens += 1\n        } else if\
    \ char == ')' {\n            levels[level] = parens\n            parens -= 1\n\
    \        } else if char == ' ' {\n            levels[level] = parens\n       \
    \ }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaqya9yuk.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpaqya9yuk.swift:15:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpaqya9yuk.swift:18:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpaqya9yuk.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpavbo64_i.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:16:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:17:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:18:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:19:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:20:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:21:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:22:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:23:9: error:"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_max = 0\n    var paren_level_parens_count_max_min\
    \ = 0\n    var paren_level_parens_count_max_min_index = 0\n    var paren_level_parens_count_max_min_count\
    \ = 0\n    var paren_level_parens_count_max_min_count_max = 0\n    var paren_level_parens_count_max_min_count_min\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index = 0\n    var paren_level_parens_count_max_min_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n\
    \    var paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var\
    \ paren_level_parens_count_max_min_count_min_index_max_max = 0\n    var paren_level_parens_count_max_min_count_min_index_max_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp00vl7ml3.swift:23:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_index'\n\
    \    var paren_level_parens_count_max_min_count_min_index = 0\n        ^\n/tmp/tmp00vl7ml3.swift:22:9:\
    \ note: 'paren_level_parens_count_max_min_count_min_index' previously declared\
    \ here\n    var paren_level_parens_count_max_min_count_min_index = 0\n       \
    \ ^\n/tmp/tmp00vl7ml3.swift:25:9: error: invalid redeclaration of 'paren_level_parens_count_max_min_count_min_index_max'\n\
    \    var paren_level_parens_count_max_min_count_min_index_max = 0\n        ^\n\
    /tmp/tmp00vl7ml3.swift:24:9: note: 'paren_level_parens_count_max_min_count_min_index_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:26:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max'\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:24:9: note: 'paren_level_parens_count_max_min_count_min_index_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:28:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max'\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:27:9: note: 'paren_level_parens_count_max_min_count_min_index_max_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:29:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max'\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:27:9: note: 'paren_level_parens_count_max_min_count_min_index_max_max'\
    \ previously declared here\n    var paren_level_parens_count_max_min_count_min_index_max_max\
    \ = 0\n        ^\n/tmp/tmp00vl7ml3.swift:30:9: error: invalid redeclaration of\
    \ 'paren_level_parens_count_max_min_count_min_index_max_max'\n    var"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n    for c\
    \ in paren_string.unicodeScalars {\n        if paren_count == 0 {\n          \
    \  paren_start = c\n        }\n        if paren_count == 0 {\n            paren_end\
    \ = c\n        }\n        if paren_count == 0 {\n            paren_level = 0\n\
    \        }\n        if paren_count == 0 {\n            paren_levels.append(paren_level)\n\
    \            paren_levels_string += String(paren_level)\n        }\n        if\
    \ paren_count == 0 {\n            paren_count = 1\n        }\n        if paren_count\
    \ == 1 {\n            paren_count = 2\n        }\n        if paren_count == 2\
    \ {\n            paren_count = 3\n        }\n        if paren_count == 3 {\n \
    \           paren_count = 4\n        }\n        if paren_count == 4 {\n      \
    \      paren_count = 5\n        }\n        if paren_count == 5 {\n           \
    \ paren_count = 6\n        }\n        if paren_count == 6 {\n            paren_count\
    \ = 7\n        }\n        if paren_count == 7 {\n            paren_count = 8\n\
    \        }\n        if paren_count == 8 {\n            paren_count = 9\n     \
    \   }\n        if paren_count == 9 {\n            paren_count = 10\n        }\n\
    \        if paren_count == 10 {\n            paren_count = 11\n        }\n   \
    \     if paren_count == 11 {\n            paren_count = 12\n        }\n      \
    \  if paren_count == 12 {\n            paren_count = 13\n        }\n        if\
    \ paren_count == 13 {\n            paren_count = 14\n        }\n        if paren_count\
    \ == 14 {\n            paren_count = 15\n        }\n        if paren_count ==\
    \ 15 {\n            paren_count = 16\n        }\n        if paren_count == 16\
    \ {\n            paren_count = 17\n        }\n        if paren_count == 17 {\n\
    \            paren_count = 18\n        }\n        if paren_count == 18 {\n   \
    \         paren_count = 19\n        }\n        if paren_count == 19 {\n      \
    \      paren_count = 20\n        }\n        if paren_count == 20 {\n         \
    \   paren_count = 21\n        }\n        if paren_count == 21 {\n            paren_count\
    \ = 22\n        }\n        if paren_count == 22 {\n            paren_count = 23\n\
    \        }\n        if paren_count == 23 {\n            paren_count = 24\n   \
    \     }\n        if paren_count == 24 {\n            paren_count = 25\n      \
    \  }\n        if paren_count == 25 {\n            paren_count = 26\n        }\n\
    \        if paren_count == 26 {\n            paren_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_l7ufso5.swift:127:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp_l7ufso5.swift:16:42:\
    \ note: to match this opening '{'\n    for c in paren_string.unicodeScalars {\n\
    \                                         ^\n/tmp/tmp_l7ufso5.swift:127:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp_l7ufso5.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp_l7ufso5.swift:18:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_start = c\n                          ^\n/tmp/tmp_l7ufso5.swift:21:25:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_end = c\n                        ^\n/tmp/tmp_l7ufso5.swift:109:13:\
    \ warning: variable is unused\n            paren_count\n            ^~~~~~~~~~~\n\
    /tmp/tmp_l7ufso5.swift:113:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  paren_count += 1\n            levels.append(level)\n        } else if char\
    \ == \")\" {\n            levels[level] = levels[level] - 1\n            if levels[level]\
    \ == 0 {\n                levels[level] = level + 1\n            }\n         \
    \   paren_count -= 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpsd5uiy6u/tmpsd5uiy6u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10c75bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10c72b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10c72b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10c72b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsd5uiy6u                        0x000055e4abff773e <unavailable> + 5950

    5    libc.so.6                          0x00002b10c77a9460 __libc_start_main +
    245

    6    tmpsd5uiy6u                        0x000055e4abff7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_size = 0\n    var\
    \ paren_levels_index = 0\n    var paren_levels_size_index = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_index\
    \ = 0\n    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_size_index\
    \ = 0\n    var paren_levels_sizes_size_index = 0\n    var paren_levels_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_index = 0\n    var paren_levels_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_size_index\
    \ = 0\n    var paren_levels_sizes_sizes_size_index = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_index = 0\n    var paren_levels_sizes_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_size_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_size_index = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_index = 0\n    var paren_levels_sizes_sizes_sizes_sizes_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_size_index\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_size_index = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_index = 0\n  \
    \  var paren_levels_sizes_sizes_sizes_sizes_sizes_index = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size_index = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_size_index = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk4h2yofu.swift:17:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:16:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpk4h2yofu.swift:20:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_size_index'\n    var paren_levels_sizes_size_index = 0\n\
    \        ^\n/tmp/tmpk4h2yofu.swift:19:9: note: 'paren_levels_sizes_size_index'\
    \ previously declared here\n    var paren_levels_sizes_size_index = 0\n      \
    \  ^\n/tmp/tmpk4h2yofu.swift:23:9: error: invalid redeclaration of 'paren_levels_sizes_sizes_index'\n\
    \    var paren_levels_sizes_sizes_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:22:9:\
    \ note: 'paren_levels_sizes_sizes_index' previously declared here\n    var paren_levels_sizes_sizes_index\
    \ = 0\n        ^\n/tmp/tmpk4h2yofu.swift:26:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_sizes_size_index'\n    var paren_levels_sizes_sizes_size_index\
    \ = 0\n        ^\n/tmp/tmpk4h2yofu.swift:25:9: note: 'paren_levels_sizes_sizes_size_index'\
    \ previously declared here\n    var paren_levels_sizes_sizes_size_index = 0\n\
    \        ^\n/tmp/tmpk4h2yofu.swift:29:9: error: invalid redeclaration of 'paren_levels_sizes_sizes_sizes_index'\n\
    \    var paren_levels_sizes_sizes_sizes_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:28:9:\
    \ note: 'paren_levels_sizes_sizes_sizes_index' previously declared here\n    var\
    \ paren_levels_sizes_sizes_sizes_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:32:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_sizes_sizes_size_index'\n\
    \    var paren_levels_sizes_sizes_sizes_size_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:31:9:\
    \ note: 'paren_levels_sizes_sizes_sizes_size_index' previously declared here\n\
    \    var paren_levels_sizes_sizes_sizes_size_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:35:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_sizes_sizes_sizes_index'\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_index = 0\n        ^\n/tmp/tmpk4h2yofu.swift:34:9:\
    \ note: 'paren_levels_sizes_size"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level\
    \ = 0\n    var paren_max_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_index\
    \ = 0\n    var paren_stack_max_index = 0\n    var paren_stack_max_level = 0\n\
    \    var paren_stack_max_level_count = 0\n    var paren_stack_max_level_count_index\
    \ = 0\n    var paren_stack_max_level_count_index2 = 0\n    var paren_stack_max_level_count_index3\
    \ = 0\n    var paren_stack_max_level_count_index4 = 0\n    var paren_stack_max_level_count_index5\
    \ = 0\n    var paren_stack_max_level_count_index6 = 0\n    var paren_stack_max_level_count_index7\
    \ = 0\n    var paren_stack_max_level_count_index8 = 0\n    var paren_stack_max_level_count_index9\
    \ = 0\n    var paren_stack_max_level_count_index10 = 0\n    var paren_stack_max_level_count_index11\
    \ = 0\n    var paren_stack_max_level_count_index12 = 0\n    var paren_stack_max_level_count_index13\
    \ = 0\n    var paren_stack_max_level_count_index14 = 0\n    var paren_stack_max_level_count_index15\
    \ = 0\n    var paren_stack_max_level_count_index16 = 0\n    var paren_stack_max_level_count_index17\
    \ = 0\n    var paren_stack_max_level_count_index18 = 0\n    var paren_stack_max_level_count_index19\
    \ = 0\n    var paren_stack_max_level_count_index20 = 0\n    var paren_stack_max_level_count_index21\
    \ = 0\n    var paren_stack_max_level_count_index22 = 0\n    var paren_stack_max_level_count_index23\
    \ = 0\n    var paren_stack_max_level_count_index24 = 0\n    var paren_stack_max_level_count_index25\
    \ = 0\n    var paren_stack_max_level_count_index26 = 0\n    var paren_stack_max_level_count_index27\
    \ = 0\n    var paren_stack_max_level_count_index28 = 0\n    var paren_stack_max_level_count_index29\
    \ = 0\n    var paren_stack_max_level_count_index30 = 0\n    var paren_stack_max_level_count_index31\
    \ = 0\n    var paren_stack_max_level_count_index32 = 0\n    var paren_stack_max_level_count_index33\
    \ = 0\n    var paren_stack_max_level_count_index34 = 0\n    var paren_stack_max_level_count_index35\
    \ = 0\n    var paren_stack_max_level_count_index36 = 0\n    var paren_stack_max_level_count_index37\
    \ = 0\n    var paren_stack_max_level_count_index38 = 0\n    var paren_stack_max_level_count_index39\
    \ = 0\n    var paren_stack_max_level_count_index40 = 0\n    var paren_stack_max_level_count_index41\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmps99ni5gy.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmps99ni5gy.swift:9:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmps99ni5gy.swift:10:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmps99ni5gy.swift:11:9:\
    \ warning: initialization of variable 'paren_max_level' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_max_level = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmps99ni5gy.swift:12:9: warning: initialization\
    \ of variable 'paren_stack' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_stack = [Int]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmps99ni5gy.swift:13:9: warning: initialization of variable 'paren_stack_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_stack_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps99ni5gy.swift:14:9:\
    \ warning: initialization of variable 'paren_stack_max_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_stack_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps99ni5gy.swift:15:9: warning:\
    \ initialization of variable 'paren_stack_max_level' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_max_level\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps99ni5gy.swift:16:9: warning:\
    \ initialization of variable 'paren_stack_max_level_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_max_level_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmps99ni5gy.swift:17:9:\
    \ warning: initialization of variable 'paren_stack_max_level_count_index' was\
    \ never u"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    for char in paren_string.characters {\n        if char == '(' {\n\
    \            parens_count += 1\n            parens_string += char\n          \
    \  parens_level += 1\n        } else if char == ')' {\n            parens_count\
    \ -= 1\n            parens_string += char\n            parens_level -= 1\n   \
    \         if parens_level == 0 {\n                levels.append(parens_count)\n\
    \            }\n        } else if char == ' ' {\n            if parens_level ==\
    \ 0 {\n                levels.append(parens_count)\n            }\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmo8i282l.swift:15:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpmo8i282l.swift:19:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpmo8i282l.swift:26:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == ' ' {\n          \
    \                ^~~\n                          \" \"\n/tmp/tmpmo8i282l.swift:14:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in paren_string.characters {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmo8i282l.swift:17:30: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            parens_string\
    \ += char\n                             ^\n/tmp/tmpmo8i282l.swift:21:30: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            parens_string += char\n                             ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl_txb0jt.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:17:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpl_txb0jt.swift:12:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmpl_txb0jt.swift:21:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpl_txb0jt.swift:13:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpl_txb0jt.swift:22:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpl_txb0jt.swift:14:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpl_txb0jt.swift:23:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpl_txb0jt.swift:24:9:\
    \ error: invalid redeclaration of 'paren_start'\n    "
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_levels = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes\
    \ = [Int]()\n    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6_y9b0qy.swift:34:96: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                             ^\n/tmp/tmp6_y9b0qy.swift:34:100: note: add arguments\
    \ after the type to construct a value of the type\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                                 ^\n                                        \
    \                                                            ()\n/tmp/tmp6_y9b0qy.swift:34:100:\
    \ note: use '.self' to reference the type object\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                                 ^\n                                        \
    \                                                            .self\n/tmp/tmp6_y9b0qy.swift:8:9:\
    \ warning: initialization of variable 'levels' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp6_y9b0qy.swift:9:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp6_y9b0qy.swift:10:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp6_y9b0qy.swift:11:9: warning: initialization\
    \ of variable 'paren_levels_size' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_size = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp6_y9b0qy.swift:12:9: warning: initialization of variable 'paren_levels_sizes'\
    \ was never used; consider replacing with assignment to '_"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    for char in paren_string.characters {\n       \
    \ if char == \"(\" {\n            level += 1\n            if level > max_level\
    \ {\n                max_level = level\n                max_level_parens = parens\n\
    \            }\n        } else if char == \")\" {\n            level -= 1\n  \
    \          if level < max_level {\n                max_level = level\n       \
    \         max_level_parens = parens\n            }\n        } else {\n       \
    \     parens += 1\n        }\n    }\n    return Array(max_level_parens + 1 ..<\
    \ max_level)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp92kd7i7r.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if parens_level == 0 {\n            parens_count += 1\n         \
    \   if parens_count == 1 {\n                levels.append(level)\n           \
    \ }\n            parens_level = 0\n        }\n        if parens_level == 0 {\n\
    \            parens_level = 1\n        }\n        if parens_level == 1 && parens_count\
    \ == 1 {\n            levels.append(level)\n        }\n        if parens_level\
    \ == 1 && parens_count > 1 {\n            levels.append(level)\n            level\
    \ = 0\n            parens = 0\n            parens_count = 0\n            parens_level\
    \ = 0\n        }\n        if parens_level == 1 && parens_count == 2 {\n      \
    \      levels.append(level)\n            level = 0\n            parens = 0\n \
    \           parens_count = 0\n            parens_level = 0\n        }\n      \
    \  if parens_level == 1 && parens_count == 3 {\n            levels.append(level)\n\
    \            level = 0\n            parens = 0\n            parens_count = 0\n\
    \            parens_level = 0\n        }\n        if parens_level == 1 && parens_count\
    \ == 4 {\n            levels.append(level)\n            level = 0\n          \
    \  parens = 0\n            parens_count = 0\n            parens_level = 0\n  \
    \      }\n        if parens_level == 1 && parens_count == 5 {\n            levels.append(level)\n\
    \            level = 0\n            parens = 0\n            parens_count = 0\n\
    \            parens_level = 0\n        }\n        if parens_level == 1 && parens_count\
    \ == 6 {\n            levels.append(level)\n            level = 0\n          \
    \  parens = 0\n            parens_count = 0\n            parens_level = 0\n  \
    \      }\n        if parens_level == 1 && parens_count == 7 {\n            levels.append(level)\n\
    \            level = 0\n            parens = 0\n            parens_count = 0\n\
    \            parens_level = 0\n        }\n        if parens_level == 1 && parens_count\
    \ == 8 {\n            levels.append(level)\n            level = 0\n          \
    \  parens = 0\n            parens_count = 0\n            parens_level = 0\n  \
    \      }\n        if parens_level == 1 && parens_count == 9 {\n            levels.append(level)\n\
    \            level = 0\n            parens = 0\n            parens_count = 0\n\
    \            parens_level = 0\n        }\n        if parens_level == 1 && parens_count\
    \ == 10 {\n            levels.append(level)\n            level = 0\n         \
    \   parens = 0\n            parens_count = 0\n            parens_level = 0\n \
    \       }\n        if parens_level == 1 && parens_count == 11 {\n            levels.append(level)\n\
    \            level = 0\n            parens = 0\n            parens_count = 0\n\
    \            parens_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqnmjr1ks.swift:120:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpqnmjr1ks.swift:13:42:\
    \ note: to match this opening '{'\n    for c in paren_string.unicodeScalars {\n\
    \                                         ^\n/tmp/tmpqnmjr1ks.swift:120:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmpqnmjr1ks.swift:7:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmpqnmjr1ks.swift:102:13:\
    \ warning: variable is unused\n            parens_level\n            ^~~~~~~~~~~~\n\
    /tmp/tmpqnmjr1ks.swift:106:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpqnmjr1ks.swift:10:9: warning: variable 'parens' was\
    \ written to, but never read\n    var parens = 0\n        ^\n/tmp/tmpqnmjr1ks.swift:13:9:\
    \ warning: immutable value 'c' was never used; consider replacing with '_' or\
    \ removing it\n    for c in paren_string.unicodeScalars {\n        ^\n       \
    \ _\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_index\
    \ = 0\n    var paren_char_length = 0\n    var paren_char_length_index = 0\n  \
    \  var paren_char_length_char = 0\n    var paren_char_length_char_index = 0\n\
    \    var paren_char_length_char_length = 0\n    var paren_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char = 0\n    var paren_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length = 0\n    var paren_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char = 0\n    var paren_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length = 0\n   \
    \ var paren_char_length_char_length_char_length_char_index = 0\n    var paren_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = 0\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpebkbxf7p.swift:27:9: error: invalid redeclaration of 'paren_char_length_char_length_char_length_char_index'\n\
    \    var paren_char_length_char_length_char_length_char_index = 0\n        ^\n\
    /tmp/tmpebkbxf7p.swift:25:9: note: 'paren_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmpebkbxf7p.swift:31:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_index'\n    var\
    \ paren_char_length_char_length_char_length_char_length_char_index = 0\n     \
    \   ^\n/tmp/tmpebkbxf7p.swift:29:9: note: 'paren_char_length_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmpebkbxf7p.swift:39:9: error: invalid redeclaration of\
    \ 'paren_char_length_char_length_char_length_char_length_char_length_char_length_char_index'\n\
    \    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmpebkbxf7p.swift:37:9: note: 'paren_char_length_char_length_char_length_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var paren_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmpebkbxf7p.swift:46:9: error: type annotation missing\
    \ in pattern\n    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_string_index = 0\n    var parens_string_index2 = 0\n\
    \    var parens_string_index3 = 0\n    var parens_string_index4 = 0\n    var parens_string_index5\
    \ = 0\n    var parens_string_index6 = 0\n    var parens_string_index7 = 0\n  \
    \  var parens_string_index8 = 0\n    var parens_string_index9 = 0\n    var parens_string_index10\
    \ = 0\n    var parens_string_index11 = 0\n    var parens_string_index12 = 0\n\
    \    var parens_string_index13 = 0\n    var parens_string_index14 = 0\n    var\
    \ parens_string_index15 = 0\n    var parens_string_index16 = 0\n    var parens_string_index17\
    \ = 0\n    var parens_string_index18 = 0\n    var parens_string_index19 = 0\n\
    \    var parens_string_index20 = 0\n    var parens_string_index21 = 0\n    var\
    \ parens_string_index22 = 0\n    var parens_string_index23 = 0\n    var parens_string_index24\
    \ = 0\n    var parens_string_index25 = 0\n    var parens_string_index26 = 0\n\
    \    var parens_string_index27 = 0\n    var parens_string_index28 = 0\n    var\
    \ parens_string_index29 = 0\n    var parens_string_index30 = 0\n    var parens_string_index31\
    \ = 0\n    var parens_string_index32 = 0\n    var parens_string_index33 = 0\n\
    \    var parens_string_index34 = 0\n    var parens_string_index35 = 0\n    var\
    \ parens_string_index36 = 0\n    var parens_string_index37 = 0\n    var parens_string_index38\
    \ = 0\n    var parens_string_index39 = 0\n    var parens_string_index40 = 0\n\
    \    var parens_string_index41 = 0\n    var parens_string_index42 = 0\n    var\
    \ parens_string_index43 = 0\n    var parens_string_index44 = 0\n    var parens_string_index45\
    \ = 0\n    var parens_string_index46 = 0\n    var parens_string_index47 = 0\n\
    \    var parens_string_index48 = 0\n    var parens_string_index49 = 0\n    var\
    \ parens_string_index50 = 0\n    var parens_string_index51 = 0\n    var parens_string_index52\
    \ = 0\n    var parens_string_index53 = 0\n    var parens_string_index54 = 0\n\
    \    var parens_string_index55 = 0\n    var parens_string_index56 = 0\n    var\
    \ parens_string_index57 = 0\n    var parens_string_index58 = 0\n    var parens_string_index59\
    \ = 0\n    var parens_string_index60 = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm624noy5.swift:74:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpm624noy5.swift:8:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpm624noy5.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpm624noy5.swift:10:9:\
    \ warning: initialization of variable 'parens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpm624noy5.swift:11:9: warning: initialization of variable 'parens_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_level = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpm624noy5.swift:12:9:\
    \ warning: initialization of variable 'parens_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpm624noy5.swift:13:9: warning: initialization\
    \ of variable 'parens_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var parens_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpm624noy5.swift:14:9: warning: initialization of variable 'parens_string_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var parens_string_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm624noy5.swift:15:9:\
    \ warning: initialization of variable 'parens_string_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var parens_string_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm624noy5.swift:16:9: warning:\
    \ initialization of variable 'parens_string_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var parens_string_index3 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpm624noy5.swift:17:9: warning: initialization\
    \ of variable 'parens_string_index4' was never used; consider"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for ch in paren_string {\n        if ch ==\
    \ '(' {\n            paren_count += 1\n            paren_level += 1\n        }\
    \ else if ch == ')' {\n            paren_count -= 1\n            if paren_count\
    \ < 0 {\n                levels.append(level)\n                level = 0\n   \
    \         }\n        } else if ch == ' ' {\n            level += 1\n        }\n\
    \    }\n    levels.append(level)\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsz2bzz2q.swift:13:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpsz2bzz2q.swift:16:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpsz2bzz2q.swift:22:25: error: single-quoted\
    \ string literal found, use '\"'\n        } else if ch == ' ' {\n            \
    \            ^~~\n                        \" \"\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         levels[level] = parens\n            parens += 1\n        } else if c\
    \ == ')' {\n            levels[level] = parens\n            parens -= 1\n    \
    \        if parens == 0 {\n                levels[level] = level\n           \
    \     level += 1\n            }\n        }\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyjln8_rn.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpyjln8_rn.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_char\
    \ = \"\"\n    var paren_char_index = 0\n    var paren_chars = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var paren_char_indexes = []\n    var\
    \ paren_char_index = 0\n    var paren_char_indexes = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_index = 0\n    var\
    \ paren_char_indexes = []\n    var paren_char_index = 0\n    var paren_char_indexes\
    \ = []\n    var paren_char_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4i7e4dae.swift:78:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4i7e4dae.swift:15:23: error: empty collection literal requires an\
    \ explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmp4i7e4dae.swift:16:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmp4i7e4dae.swift:17:9: error: invalid\
    \ redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n        ^\n\
    /tmp/tmp4i7e4dae.swift:14:9: note: 'paren_char_index' previously declared here\n\
    \    var paren_char_index = 0\n        ^\n/tmp/tmp4i7e4dae.swift:18:30: error:\
    \ empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmp4i7e4dae.swift:18:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmp4i7e4dae.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmp4i7e4dae.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmp4i7e4dae.swift:14:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmp4i7e4dae.swift:20:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmp4i7e4dae.swift:20:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmp4i7e4dae.swift:16:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmp4i7e4dae.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = 0\n        ^\n/tmp/tmp4i7e4dae.swift:14:9: note: 'paren_char_index' previously\
    \ declared here\n    var paren_char_index = 0\n        ^\n/tmp/tmp4i7e4dae.swift:22:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmp4i7e4dae.swift:22:"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_stack =\
    \ [String]()\n    var paren_stack_index = 0\n    var paren_stack_len = paren_stack.count\n\
    \    var paren_stack_len_max = paren_stack_len\n    var paren_stack_len_max_index\
    \ = paren_stack_len_max\n    var paren_stack_len_max_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_index = 0\n    var paren_stack_len_max_value_value\
    \ = paren_stack_len\n    var paren_stack_len_max_value_value_index = 0\n    var\
    \ paren_stack_len_max_value_value_value = paren_stack_len\n    var paren_stack_len_max_value_value_value_index\
    \ = 0\n    var paren_stack_len_max_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_index = 0\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n    var paren_stack_len_max_value_value_value_value_index\
    \ = 0\n    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \    var paren_stack_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplri7va09.swift:27:9: error: invalid redeclaration of 'paren_stack_len_max_value_value_value_value_index'\n\
    \    var paren_stack_len_max_value_value_value_value_index = 0\n        ^\n/tmp/tmplri7va09.swift:25:9:\
    \ note: 'paren_stack_len_max_value_value_value_value_index' previously declared\
    \ here\n    var paren_stack_len_max_value_value_value_value_index = 0\n      \
    \  ^\n/tmp/tmplri7va09.swift:28:9: error: invalid redeclaration of 'paren_stack_len_max_value_value_value_value_value'\n\
    \    var paren_stack_len_max_value_value_value_value_value = paren_stack_len\n\
    \        ^\n/tmp/tmplri7va09.swift:26:9: note: 'paren_stack_len_max_value_value_value_value_value'\
    \ previously declared here\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:29:9: error: invalid redeclaration\
    \ of 'paren_stack_len_max_value_value_value_value_value'\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:26:9: note: 'paren_stack_len_max_value_value_value_value_value'\
    \ previously declared here\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:30:9: error: invalid redeclaration\
    \ of 'paren_stack_len_max_value_value_value_value_value'\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:26:9: note: 'paren_stack_len_max_value_value_value_value_value'\
    \ previously declared here\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:31:9: error: invalid redeclaration\
    \ of 'paren_stack_len_max_value_value_value_value_value'\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:26:9: note: 'paren_stack_len_max_value_value_value_value_value'\
    \ previously declared here\n    var paren_stack_len_max_value_value_value_value_value\
    \ = paren_stack_len\n        ^\n/tmp/tmplri7va09.swift:32:9: error: invalid redeclaration\
    \ of 'paren_stack_len_max_value_val"
  stdout: ''
  timestamp: 1660009305
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  levels[level] = parens\n            parens += 1\n        } else if char ==\
    \ \")\" {\n            levels[level] = parens\n            parens -= 1\n     \
    \       level -= 1\n        } else {\n            levels[level] += 1\n       \
    \ }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aabdd577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabdd26e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aabdd26e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aabdd26e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aabdd26dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aabdd06d7ec <unavailable> + 186348

    6    tmpyk5ohhlq                        0x000055751057fa7f <unavailable> + 6783

    7    tmpyk5ohhlq                        0x000055751057f5a6 <unavailable> + 5542

    8    libc.so.6                          0x00002aabdd763460 __libc_start_main +
    245

    9    tmpyk5ohhlq                        0x000055751057f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    for c in paren_string.characters {\n        if parens_level == 0\
    \ {\n            parens_string = String(format: \"%c\", c)\n        } else {\n\
    \            parens_string = String(format: \"%c%c\", parens_string, c)\n    \
    \    }\n        if parens_string == \"()\" {\n            parens_level++\n   \
    \         parens_count += 1\n        } else if parens_string == \"()()\" {\n \
    \           parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(())\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()())\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()())\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()()\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()()()\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()()()()\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()()()()()\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()()()()()\"\
    \ {\n            parens_level++\n            parens_count += 1\n            levels[level]\
    \ = parens_level\n            level++\n        } else if parens_string == \"(()()()()()()()()\"\
    \ {\n            parens_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm6tesbvn.swift:92:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpm6tesbvn.swift:14:38:\
    \ note: to match this opening '{'\n    for c in paren_string.characters {\n  \
    \                                   ^\n/tmp/tmpm6tesbvn.swift:92:67: error: expected\
    \ '}' at end of brace statement\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])\n                                                                  ^\n\
    /tmp/tmpm6tesbvn.swift:7:57: note: to match this opening '{'\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n                                                       \
    \ ^\n/tmp/tmpm6tesbvn.swift:14:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in paren_string.characters {\n              \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpm6tesbvn.swift:16:29: error: no exact matches in call to initializer \n\
    \            parens_string = String(format: \"%c\", c)\n                     \
    \       ^\nSwift.String:4:23: note: candidate '(String) -> String' requires 1\
    \ argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmpm6tesbvn.swift:16:29:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n            parens_string = String(format: \"%c\", c)\n              \
    \              ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candid"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren_level_counter\
    \ = 0\n    var paren_level_counter = 0\n    var paren_level_counter = 0\n    var\
    \ paren_level_counter = 0\n    var paren_level_counter = 0\n    var paren\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpaqszhve_.swift:15:9: error: invalid redeclaration of 'paren_level_counter'\n\
    \    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9: note:\
    \ 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_counter'\n    var paren_level_counter = 0\n        ^\n/tmp/tmpaqszhve_.swift:14:9:\
    \ note: 'paren_level_counter' previously declared here\n    var paren_level_counter\
    \ = 0\n        ^\n/tmp/tmpaqszhve_.swift:23:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_stack = [Int]()\n\
    \    var paren_stack_pointer = 0\n    var paren_stack_pointer_max = 0\n    var\
    \ paren_stack_pointer_max_index = 0\n    var paren_stack_pointer_max_value = 0\n\
    \    var paren_stack_pointer_max_value_index = 0\n    var paren_stack_pointer_max_value_count\
    \ = 0\n    var paren_stack_pointer_max_value_count_index = 0\n    var paren_stack_pointer_max_value_count_value\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_index = 0\n    var paren_stack_pointer_max_value_count_value_count\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_count = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \ var paren_stack_pointer_max_value_count_value_count_value_count_value_count\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value_count\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value_count_index\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value\
    \ = 0\n    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value\
    \ = 0\n    var paren_stack_pointer_max_value_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxjo7dv3a.swift:28:9: error: invalid redeclaration of 'paren_stack_pointer_max_value_count_value_count_value_index'\n\
    \    var paren_stack_pointer_max_value_count_value_count_value_index = 0\n   \
    \     ^\n/tmp/tmpxjo7dv3a.swift:26:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:31:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_index'\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:26:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:32:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_count_value'\n    var\
    \ paren_stack_pointer_max_value_count_value_count_value_count_value = 0\n    \
    \    ^\n/tmp/tmpxjo7dv3a.swift:30:9: note: 'paren_stack_pointer_max_value_count_value_count_value_count_value'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_count_value\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:33:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_index'\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:26:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:35:9: error: invalid redeclaration of\
    \ 'paren_stack_pointer_max_value_count_value_count_value_index'\n    var paren_stack_pointer_max_value_count_value_count_value_index\
    \ = 0\n        ^\n/tmp/tmpxjo7dv3a.swift:26:9: note: 'paren_stack_pointer_max_value_count_value_count_value_index'\
    \ previously declared here\n    var paren_stack_pointer_max_value_count_value_count_value"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_char_count = 0\n   \
    \ var paren_level_char = \"\"\n    var paren_level_char_index = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_string = \"\"\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n    var paren_level_char_length_string_count = 0\n    var paren_level_char_length_string_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7q6ewegp.swift:21:9: error: invalid redeclaration of 'paren_level_char_length_string_index'\n\
    \    var paren_level_char_length_string_index = 0\n        ^\n/tmp/tmp7q6ewegp.swift:19:9:\
    \ note: 'paren_level_char_length_string_index' previously declared here\n    var\
    \ paren_level_char_length_string_index = 0\n        ^\n/tmp/tmp7q6ewegp.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_string_count'\n   \
    \ var paren_level_char_length_string_count = 0\n        ^\n/tmp/tmp7q6ewegp.swift:20:9:\
    \ note: 'paren_level_char_length_string_count' previously declared here\n    var\
    \ paren_level_char_length_string_count = 0\n        ^\n/tmp/tmp7q6ewegp.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_string_index'\n   \
    \ var paren_level_char_length_string_index = 0\n        ^\n/tmp/tmp7q6ewegp.swift:19:9:\
    \ note: 'paren_level_char_length_string_index' previously declared here\n    var\
    \ paren_level_char_length_string_index = 0\n        ^\n/tmp/tmp7q6ewegp.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_string_count'\n   \
    \ var paren_level_char_length_string_count = 0\n        ^\n/tmp/tmp7q6ewegp.swift:20:9:\
    \ note: 'paren_level_char_length_string_count' previously declared here\n    var\
    \ paren_level_char_length_string_count = 0\n        ^\n/tmp/tmp7q6ewegp.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_string_index'\n   \
    \ var paren_level_char_length_string_index = 0\n        ^\n/tmp/tmp7q6ewegp.swift:19:9:\
    \ note: 'paren_level_char_length_string_index' previously declared here\n    var\
    \ paren_level_char_length_string_index = 0\n        ^\n/tmp/tmp7q6ewegp.swift:26:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_string_count'\n   \
    \ var paren_level_char_length_string_count = 0\n        ^\n/tmp/tmp7q6ewegp.swift:20:9:\
    \ note: 'paren_level_char_length_string_count' previously declared here\n    var\
    \ paren_level_char_length_string_count = 0\n        ^\n/tmp/tmp7q6ewegp.swift:27:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_string_index'\n   \
    \ var paren_level_char_length_string_index ="
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    for char in paren_string.characters {\n \
    \       if char == '(' {\n            parens += 1\n            levels.append(level)\n\
    \            parens_count += 1\n        } else if char == ')' {\n            parens_count\
    \ -= 1\n            if parens_count == 0 {\n                levels.append(level)\n\
    \                level -= 1\n            }\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmyi4njdn.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpmyi4njdn.swift:17:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpmyi4njdn.swift:12:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in paren_string.characters\
    \ {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.characters {\n        if ch == '(' {\n     \
    \       paren_count++\n            levels.append(level)\n            level++\n\
    \        } else if ch == ')' {\n            levels[level] = levels[level] - 1\n\
    \            if levels[level] == 0 {\n                levels[level] = level\n\
    \                level--\n            }\n            paren_count--\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr26maidf.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpr26maidf.swift:16:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpr26maidf.swift:11:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr26maidf.swift:13:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmpr26maidf.swift:15:18: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpr26maidf.swift:20:22:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      level--\n                     ^~\n/tmp/tmpr26maidf.swift:22:24: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            paren_count--\n\
    \                       ^~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string {\n        if char == '(' {\n            levels[level]\
    \ = parens\n            level += 1\n            parens += 1\n        } else if\
    \ char == ')' {\n            levels[level] = parens\n            level -= 1\n\
    \            parens -= 1\n        } else {\n            levels[level] = parens\n\
    \            level -= 1\n            parens -= 1\n        }\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpetco4usx.swift:12:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpetco4usx.swift:16:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var parens_count = 0\n    var parens_level = 0\n    var parens_count\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6n2lc8o6.swift:13:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:14:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmp6n2lc8o6.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:15:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:16:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmp6n2lc8o6.swift:17:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:18:9:\
    \ error: invalid redeclaration of 'parens_level'\n    var parens_level = 0\n \
    \       ^\n/tmp/tmp6n2lc8o6.swift:12:9: note: 'parens_level' previously declared\
    \ here\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:19:9: error:\
    \ invalid redeclaration of 'parens_count'\n    var parens_count = 0\n        ^\n\
    /tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count' previously declared here\n \
    \   var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:20:9: error: invalid\
    \ redeclaration of 'parens_level'\n    var parens_level = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:12:9:\
    \ note: 'parens_level' previously declared here\n    var parens_level = 0\n  \
    \      ^\n/tmp/tmp6n2lc8o6.swift:21:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:11:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmp6n2lc8o6.swift:22:9:\
    \ error: invalid redeclaration o"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_nestings = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_levels = [Int]()\n    var paren_nestings =\
    \ [Int]()\n    var paren_level = 0\n    var paren_nesting = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6xi6j5k1.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:14:9:\
    \ error: invalid redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:10:9: note: 'paren_nesting' previously declared\
    \ here\n    var paren_nesting = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:15:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp6xi6j5k1.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:16:9:\
    \ error: invalid redeclaration of 'paren_nestings'\n    var paren_nestings = [Int]()\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:12:9: note: 'paren_nestings' previously declared\
    \ here\n    var paren_nestings = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp6xi6j5k1.swift:9:9: note: 'paren_level' previously declared here\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:18:9: error: invalid\
    \ redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:10:9:\
    \ note: 'paren_nesting' previously declared here\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp6xi6j5k1.swift:20:9: error: invalid redeclaration of 'paren_nestings'\n\
    \    var paren_nestings = [Int]()\n        ^\n/tmp/tmp6xi6j5k1.swift:12:9: note:\
    \ 'paren_nestings' previously declared here\n    var paren_nestings = [Int]()\n\
    \        ^\n/tmp/tmp6xi6j5k1.swift:21:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp6xi6j5k1.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/t"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string = \"\"\n    var parens_count = 0\n    var parens_string\
    \ = \"\"\n    var parens_count = 0\n    var parens_string = \"\"\n    var parens_count\
    \ = 0\n    var parens_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpavbo64_i.swift:14:9: error: invalid redeclaration of 'parens_count'\n\
    \    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count'\
    \ previously declared here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:15:9:\
    \ error: invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\
    \n        ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:16:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:17:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:18:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:19:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:20:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:21:9: error:\
    \ invalid redeclaration of 'parens_string'\n    var parens_string = \"\"\n   \
    \     ^\n/tmp/tmpavbo64_i.swift:13:9: note: 'parens_string' previously declared\
    \ here\n    var parens_string = \"\"\n        ^\n/tmp/tmpavbo64_i.swift:22:9:\
    \ error: invalid redeclaration of 'parens_count'\n    var parens_count = 0\n \
    \       ^\n/tmp/tmpavbo64_i.swift:12:9: note: 'parens_count' previously declared\
    \ here\n    var parens_count = 0\n        ^\n/tmp/tmpavbo64_i.swift:23:9: error:"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens = 0\n    var paren_level_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max = 0\n    var paren_level_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max = 0\n\
    \    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens_count_max_parens\
    \ = 0\n    var paren_level_parens_count_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8ez5rcuz.swift:35:9: error: type annotation missing in pattern\n\
    \    var paren_level_parens_count_\n        ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_level = 0\n    var paren_level_paren\
    \ = 0\n    var paren_level_paren_count = 0\n    var paren_level_paren_level =\
    \ 0\n    var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_count = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_count = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_count\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5mkjq2dk.swift:37:9: error: type annotation missing in pattern\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren\n \
    \       ^\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n   \
    \ var level = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char = \"\"\n    var paren_chars\
    \ = []\n    for index in 0..<paren_string.characters.count {\n        paren_char\
    \ = paren_string[paren_char_index..<index]\n        paren_char_count = paren_string.distance(paren_char_index,\
    \ index)\n        paren_char_index = index\n        paren_chars.append(paren_char)\n\
    \        if paren_char_count == 0 {\n            paren_char_count = 1\n      \
    \  }\n        if paren_char == \"(\" {\n            paren_count += 1\n       \
    \ } else if paren_char == \")\" {\n            paren_count -= 1\n            if\
    \ paren_count == 0 {\n                level += 1\n                if level > max_level\
    \ {\n                    max_level = level\n                    max_level_index\
    \ = level_index\n                }\n            }\n        }\n    }\n    return\
    \ max_level_index + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnzwimq8b.swift:16:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpnzwimq8b.swift:17:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in 0..<paren_string.characters.count {\n                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnzwimq8b.swift:18:22:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n        paren_char = paren_string[paren_char_index..<index]\n\
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpnzwimq8b.swift:19:41: error: no exact matches\
    \ in call to instance method 'distance'\n        paren_char_count = paren_string.distance(paren_char_index,\
    \ index)\n                                        ^\n/tmp/tmpnzwimq8b.swift:19:41:\
    \ note: candidate has partially matching parameter list (from: String.Index, to:\
    \ String.Index)\n        paren_char_count = paren_string.distance(paren_char_index,\
    \ index)\n                                        ^\n/tmp/tmpnzwimq8b.swift:19:41:\
    \ note: candidate has partially matching parameter list (from: String.Index, to:\
    \ String.Index)\n        paren_char_count = paren_string.distance(paren_char_index,\
    \ index)\n                                        ^\n/tmp/tmpnzwimq8b.swift:19:41:\
    \ note: candidate has partially matching parameter list (from: String.Index, to:\
    \ String.Index)\n        paren_char_count = paren_string.distance(paren_char_index,\
    \ index)\n                                        ^\n/tmp/tmpnzwimq8b.swift:38:28:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return max_level_index + 1\n           ~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpep18sx0r.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1659824947
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels\
    \ = [Int]()\n    for paren in paren_string.characters {\n        if paren == ')'\
    \ {\n            levels[level] = levels[level-1]\n            level--\n      \
    \  } else if paren == '(' {\n            level++\n        }\n        if level\
    \ == 0 {\n            max_level = level\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt5r6w5cx.swift:12:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == ')' {\n                    ^~~\n             \
    \       \")\"\n/tmp/tmpt5r6w5cx.swift:15:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if paren == '(' {\n                        \
    \   ^~~\n                           \"(\"\n/tmp/tmpt5r6w5cx.swift:11:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt5r6w5cx.swift:14:18: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            level--\n                 ^~\n/tmp/tmpt5r6w5cx.swift:16:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var\
    \ paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr6l5vrak.swift:18:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:19:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:23:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpr6l5vrak.swift:17:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nestin"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for char in paren_string {\n        if char\
    \ == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if char == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \                paren_level = 0\n            }\n        } else {\n          \
    \  paren_level += 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkoeuy0r1.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmpkoeuy0r1.swift:17:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmpkoeuy0r1.swift:9:9: warning: initialization\
    \ of variable 'level' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_level_count\
    \ = 0\n    var parens_level_max = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6qwixm_j.swift:17:9: error: invalid redeclaration of 'parens_level_max_count'\n\
    \    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9: note:\
    \ 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:18:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:19:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:20:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:21:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:22:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:23:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmp6qwixm_j.swift:15:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmp6qwixm_j.swift:24:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmp6qwixm_j.swift:16:9:\
    \ note: 'parens_level_max_index' previously declared here\n    v"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var level_index = 0\n    var levels = [Int]()\n    var levels_index\
    \ = 0\n    var paren_chars = [String]()\n    var paren_chars_index = 0\n    var\
    \ paren_char_index = 0\n    var paren_char = \"\"\n    var paren_char_length =\
    \ 0\n    var paren_char_length_index = 0\n    var paren_char_length_string = \"\
    \"\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_length_string_index\
    \ = 0\n    var paren_char_length_string_index = 0\n    var paren_char_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplxr9ykgc.swift:22:9: error: invalid redeclaration of 'paren_char_length_string_index'\n\
    \    var paren_char_length_string_index = 0\n        ^\n/tmp/tmplxr9ykgc.swift:21:9:\
    \ note: 'paren_char_length_string_index' previously declared here\n    var paren_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmplxr9ykgc.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_length_string_index'\n    var paren_char_length_string_index = 0\n\
    \        ^\n/tmp/tmplxr9ykgc.swift:21:9: note: 'paren_char_length_string_index'\
    \ previously declared here\n    var paren_char_length_string_index = 0\n     \
    \   ^\n/tmp/tmplxr9ykgc.swift:24:9: error: invalid redeclaration of 'paren_char_length_string_index'\n\
    \    var paren_char_length_string_index = 0\n        ^\n/tmp/tmplxr9ykgc.swift:21:9:\
    \ note: 'paren_char_length_string_index' previously declared here\n    var paren_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmplxr9ykgc.swift:25:9: error: invalid redeclaration of\
    \ 'paren_char_length_string_index'\n    var paren_char_length_string_index = 0\n\
    \        ^\n/tmp/tmplxr9ykgc.swift:21:9: note: 'paren_char_length_string_index'\
    \ previously declared here\n    var paren_char_length_string_index = 0\n     \
    \   ^\n/tmp/tmplxr9ykgc.swift:26:9: error: invalid redeclaration of 'paren_char_length_string_index'\n\
    \    var paren_char_length_string_index = 0\n        ^\n/tmp/tmplxr9ykgc.swift:21:9:\
    \ note: 'paren_char_length_string_index' previously declared here\n    var paren_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmplxr9ykgc.swift:27:9: error: invalid redeclaration of\
    \ 'paren_char_length_string_index'\n    var paren_char_length_string_index = 0\n\
    \        ^\n/tmp/tmplxr9ykgc.swift:21:9: note: 'paren_char_length_string_index'\
    \ previously declared here\n    var paren_char_length_string_index = 0\n     \
    \   ^\n/tmp/tmplxr9ykgc.swift:28:9: error: invalid redeclaration of 'paren_char_length_string_index'\n\
    \    var paren_char_length_string_index = 0\n        ^\n/tmp/tmplxr9ykgc.swift:21:9:\
    \ note: 'paren_char_length_string_index' previously declared here\n    var paren_char_length_string_index\
    \ = 0\n       "
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n  \
    \  var paren_levels_string_index = 0\n    var paren_levels_string_index2 = 0\n\
    \    var paren_levels_string_index3 = 0\n    var paren_levels_string_index4 =\
    \ 0\n    var paren_levels_string_index5 = 0\n    var paren_levels_string_index6\
    \ = 0\n    var paren_levels_string_index7 = 0\n    var paren_levels_string_index8\
    \ = 0\n    var paren_levels_string_index9 = 0\n    var paren_levels_string_index10\
    \ = 0\n    var paren_levels_string_index11 = 0\n    var paren_levels_string_index12\
    \ = 0\n    var paren_levels_string_index13 = 0\n    var paren_levels_string_index14\
    \ = 0\n    var paren_levels_string_index15 = 0\n    var paren_levels_string_index16\
    \ = 0\n    var paren_levels_string_index17 = 0\n    var paren_levels_string_index18\
    \ = 0\n    var paren_levels_string_index19 = 0\n    var paren_levels_string_index20\
    \ = 0\n    var paren_levels_string_index21 = 0\n    var paren_levels_string_index22\
    \ = 0\n    var paren_levels_string_index23 = 0\n    var paren_levels_string_index24\
    \ = 0\n    var paren_levels_string_index25 = 0\n    var paren_levels_string_index26\
    \ = 0\n    var paren_levels_string_index27 = 0\n    var paren_levels_string_index28\
    \ = 0\n    var paren_levels_string_index29 = 0\n    var paren_levels_string_index30\
    \ = 0\n    var paren_levels_string_index31 = 0\n    var paren_levels_string_index32\
    \ = 0\n    var paren_levels_string_index33 = 0\n    var paren_levels_string_index34\
    \ = 0\n    var paren_levels_string_index35 = 0\n    var paren_levels_string_index36\
    \ = 0\n    var paren_levels_string_index37 = 0\n    var paren_levels_string_index38\
    \ = 0\n    var paren_levels_string_index39 = 0\n    var paren_levels_string_index40\
    \ = 0\n    var paren_levels_string_index41 = 0\n    var paren_levels_string_index42\
    \ = 0\n    var paren_levels_string_index43 = 0\n    var paren_levels_string_index44\
    \ = 0\n    var paren_levels_string_index45 = 0\n    var paren_levels_string_index46\
    \ = 0\n    var paren_levels_string_index47 = 0\n    var paren_levels_string_index48\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3fwqvcwh.swift:61:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp3fwqvcwh.swift:8:9: warning: initialization of variable 'max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:9:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:10:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3fwqvcwh.swift:11:9: warning: initialization of variable 'paren_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:12:9:\
    \ warning: initialization of variable 'paren_levels_string' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_string\
    \ = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:13:9: warning:\
    \ initialization of variable 'paren_levels_string_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_string_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:14:9:\
    \ warning: initialization of variable 'paren_levels_string_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:15:9:\
    \ warning: initialization of variable 'paren_levels_string_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp3fwqvcwh.swift:16:9:\
    \ warning: initialization of variable 'paren_levels_string_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index4\
    \ = 0\n    ~~~~^~~~~~~"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppzv40zw9.swift:14:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmppzv40zw9.swift:12:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:15:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmppzv40zw9.swift:13:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmppzv40zw9.swift:12:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmppzv40zw9.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:13:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmppzv40zw9.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:12:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmppzv40zw9.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:13:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmppzv40zw9.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:12:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmppzv40zw9.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmppzv40zw9.swift:13:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n   \
    \ var level = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_count_index\
    \ = 0\n    var paren_count_string = \"\"\n    for index in 0..<paren_string.characters.count\
    \ {\n        let char = paren_string.characters[index]\n        if char == \"\
    (\" {\n            paren_count += 1\n            paren_count_string += \"(\"\n\
    \            level_index += 1\n            if level_index == max_level {\n   \
    \             max_level = level_index\n                max_level_index = index\n\
    \            }\n        } else if char == \")\" {\n            paren_count -=\
    \ 1\n            paren_count_string += \")\"\n            level_index -= 1\n \
    \           if level_index == 0 {\n                level = level_index\n     \
    \       }\n        } else if char == \" \" {\n            level_index += 1\n \
    \           if level_index == max_level {\n                max_level = level_index\n\
    \                max_level_index = index\n            }\n        }\n    }\n  \
    \  if paren_count_string == paren_count_string {\n        return [max_level]\n\
    \    } else {\n        return [max_level, level, level_index, max_level_index]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpze3xb1d1.swift:15:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<paren_string.characters.count {\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpze3xb1d1.swift:16:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpze3xb1d1.swift:16:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpze3xb1d1.swift:13:9:\
    \ warning: initialization of variable 'paren_count_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_count_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsmyd_6lu.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpsmyd_6lu.swift:11:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpsmyd_6lu.swift:14:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmpsmyd_6lu.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpsmyd_6lu.swift:15:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpsmyd_6lu.swift:11:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpsmyd_6lu.swift:16:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpsmyd_6lu.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpsmyd_6lu.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpsmyd_6lu.swift:11:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpsmyd_6lu.swift:18:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpsmyd_6lu.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpsmyd_6lu.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpsmyd_6lu.swift:11:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpsmyd_6lu.swift:20:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpsmyd_6lu.swift:12:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpsmyd_6lu.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpsmyd_6lu.swift:11:9: note: 'paren_level' previously declared\
    \ here\n    var paren_level = 0\n        ^\n/tmp/tmpsmyd_6lu.swift:22:9: er"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char_count = 0\n    var paren_chars\
    \ = [String]()\n    var paren_char_index = 0\n    var paren_char_index2 = 0\n\
    \    var paren_char_index3 = 0\n    var paren_char_index4 = 0\n    var paren_char_index5\
    \ = 0\n    var paren_char_index6 = 0\n    var paren_char_index7 = 0\n    var paren_char_index8\
    \ = 0\n    var paren_char_index9 = 0\n    var paren_char_index10 = 0\n    var\
    \ paren_char_index11 = 0\n    var paren_char_index12 = 0\n    var paren_char_index13\
    \ = 0\n    var paren_char_index14 = 0\n    var paren_char_index15 = 0\n    var\
    \ paren_char_index16 = 0\n    var paren_char_index17 = 0\n    var paren_char_index18\
    \ = 0\n    var paren_char_index19 = 0\n    var paren_char_index20 = 0\n    var\
    \ paren_char_index21 = 0\n    var paren_char_index22 = 0\n    var paren_char_index23\
    \ = 0\n    var paren_char_index24 = 0\n    var paren_char_index25 = 0\n    var\
    \ paren_char_index26 = 0\n    var paren_char_index27 = 0\n    var paren_char_index28\
    \ = 0\n    var paren_char_index29 = 0\n    var paren_char_index30 = 0\n    var\
    \ paren_char_index31 = 0\n    var paren_char_index32 = 0\n    var paren_char_index33\
    \ = 0\n    var paren_char_index34 = 0\n    var paren_char_index35 = 0\n    var\
    \ paren_char_index36 = 0\n    var paren_char_index37 = 0\n    var paren_char_index38\
    \ = 0\n    var paren_char_index39 = 0\n    var paren_char_index40 = 0\n    var\
    \ paren_char_index41 = 0\n    var paren_char_index42 = 0\n    var paren_char_index43\
    \ = 0\n    var paren_char_index44 = 0\n    var paren_char_index45 = 0\n    var\
    \ paren_char_index46 = 0\n    var paren_char_index47 = 0\n    var paren_char_index48\
    \ = 0\n    var paren_char_index49 = 0\n    var paren_char_index50 = 0\n    var\
    \ paren_char_index51 = 0\n    var paren_char_index52 = 0\n    var paren_char_index53\
    \ = 0\n    var paren_char_index54 = 0\n    var paren_char_index55 = 0\n    var\
    \ paren_char_index56 = 0\n    var paren_char_index57 = 0\n    var paren_char_index58\
    \ = 0\n    var paren_char_index59 = 0\n    var paren_char_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyy1pmc36.swift:73:9: error: type annotation missing in pattern\n\
    \    var paren_char_index\n        ^\n"
  stdout: ''
  timestamp: 1660009305
