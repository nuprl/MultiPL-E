language: swift
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] < smallest {\n            smallest = arr[i]\n            smallestIndex\
    \ = i\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0g348n9p.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp0g348n9p.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp0g348n9p.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp0g348n9p.swift:38:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp0g348n9p.swift:39:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index]\
    \ < smallest {\n                smallest = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    if smallest != 0 {\n        result\
    \ = [smallest, smallestIndex]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpoinxl4hc/tmpoinxl4hc.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c3e02bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c3dd22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c3dd22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c3dd217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoinxl4hc                        0x000055b3c961c954 <unavailable> + 6484

    5    libc.so.6                          0x00002b7c3e217460 __libc_start_main +
    245

    6    tmpoinxl4hc                        0x000055b3c961c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    var minIndex\
    \ = 0\n    \n    for node in arr {\n        if node.value % 2 == 0 {\n       \
    \     if result.count > 0 {\n                if result[0] < node.value {\n   \
    \                 minIndex = result.count\n                } else {\n        \
    \            minIndex = 0\n                }\n            }\n            result.append(node.value)\n\
    \        } else {\n            if result.count > 0 {\n                if result[0]\
    \ < node.value {\n                    minIndex = result.count\n              \
    \  } else {\n                    minIndex = 0\n                }\n           \
    \ }\n        }\n    }\n    \n    if result.count == 0 {\n        return result\n\
    \    }\n    \n    if result.count > 0 {\n        if result[0] < arr[minIndex].value\
    \ {\n            minIndex = 0\n        }\n    }\n    \n    if minIndex == result.count\
    \ {\n        return result\n    }\n    \n    if minIndex == 0 {\n        return\
    \ [arr[minIndex].value]\n    }\n    \n    if minIndex == 1 {\n        return [arr[minIndex].value,\
    \ arr[minIndex-1].value]\n    }\n    \n    return [arr[minIndex].value, arr[minIndex-1].value,\
    \ arr[minIndex-2].value, arr[minIndex-3].value, arr[minIndex-4].value]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpx78xsarf.swift:33:17: error: value of type 'Int' has no member\
    \ 'value'\n        if node.value % 2 == 0 {\n           ~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:35:37:\
    \ error: value of type 'Int' has no member 'value'\n                if result[0]\
    \ < node.value {\n                               ~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:41:32:\
    \ error: value of type 'Int' has no member 'value'\n            result.append(node.value)\n\
    \                          ~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:44:37: error: value\
    \ of type 'Int' has no member 'value'\n                if result[0] < node.value\
    \ {\n                               ~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:58:38:\
    \ error: value of type 'Int' has no member 'value'\n        if result[0] < arr[minIndex].value\
    \ {\n                       ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:68:31:\
    \ error: value of type 'Int' has no member 'value'\n        return [arr[minIndex].value]\n\
    \                ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:72:31: error: value\
    \ of type 'Int' has no member 'value'\n        return [arr[minIndex].value, arr[minIndex-1].value]\n\
    \                ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:72:54: error: value\
    \ of type 'Int' has no member 'value'\n        return [arr[minIndex].value, arr[minIndex-1].value]\n\
    \                                     ~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:75:27:\
    \ error: value of type 'Int' has no member 'value'\n    return [arr[minIndex].value,\
    \ arr[minIndex-1].value, arr[minIndex-2].value, arr[minIndex-3].value, arr[minIndex-4].value]\n\
    \            ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:75:50: error: value of\
    \ type 'Int' has no member 'value'\n    return [arr[minIndex].value, arr[minIndex-1].value,\
    \ arr[minIndex-2].value, arr[minIndex-3].value, arr[minIndex-4].value]\n     \
    \                            ~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpx78xsarf.swift:75:73:\
    \ error: value of type 'Int' has no member 'value'\n    return [arr[minIndex].value,\
    \ arr[minIndex-1].value, arr[minIndex-2].value, arr[minIndex-3].value, arr[minIndex-4].value]\n\
    \                                       "
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n\
    \                minIndex = index\n            } else {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n        }\n \
    \   }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpv8ndwyk_.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = 0\n    for i := 1; i < arr.count; i++ {\n\
    \        if arr[i] < smallestEven {\n            smallestEven = arr[i]\n     \
    \       smallestIndex = i\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwexmgdy3.swift:31:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpwexmgdy3.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpwexmgdy3.swift:31:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    // write your code here\n    \n \
    \   return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpppt_wrl4/tmpppt_wrl4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56ad6b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56ad3a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56ad3a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56ad3a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppt_wrl4                        0x0000555aaee653bc <unavailable> + 5052

    5    libc.so.6                          0x00002b56ad89c460 __libc_start_main +
    245

    6    tmpppt_wrl4                        0x0000555aaee64fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsvrlr0cz.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpsvrlr0cz.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpsvrlr0cz.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minIndex = -1\n    var minValue = arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9ruq41wr.swift:33:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp9ruq41wr.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp9ruq41wr.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for value in arr {\n        if value % 2\
    \ == 0 {\n            if value < minValue {\n                minValue = value\n\
    \                minIndex = result.count\n            }\n            result[minIndex]\
    \ = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce18d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce15c7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3ce15c7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3ce15c713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3ce15c6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3ce13c67ec <unavailable> + 186348

    6    tmpfz_eayaw                        0x000055d79153f1d9 <unavailable> + 8665

    7    tmpfz_eayaw                        0x000055d79153e5e4 <unavailable> + 5604

    8    libc.so.6                          0x00002b3ce1abc460 __libc_start_main +
    245

    9    tmpfz_eayaw                        0x000055d79153e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenValue:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallestEvenValue == 0 || arr[index]\
    \ < smallestEvenValue {\n                smallestEvenValue = arr[index]\n    \
    \            smallestIndex = index\n            }\n        }\n    }\n    if smallestEvenValue\
    \ == 0 {\n        return result\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpqm17s16_/tmpqm17s16_.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fc7464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fc715bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fc715b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fc715a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm17s16_                        0x000055b82b733a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b8fc7650460 __libc_start_main +
    245

    6    tmpqm17s16_                        0x000055b82b7332b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    var minValue = arr[0]\n    for value in arr {\n        if value % 2 == 0\
    \ {\n            if value < minValue {\n                minValue = value\n   \
    \             index = index + 1\n            }\n        } else {\n           \
    \ if value == minValue {\n                index = index + 1\n            }\n \
    \       }\n    }\n    if index == 0 {\n        return arr\n    }\n    result.append(minValue)\n\
    \    result.append(index)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpy5yw1_hz/tmpy5yw1_hz.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef85b5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef85853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef85853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef858527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5yw1_hz                        0x00005645861d47db <unavailable> + 6107

    5    libc.so.6                          0x00002aef85d48460 __libc_start_main +
    245

    6    tmpy5yw1_hz                        0x00005645861d42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index]\
    \ < smallest {\n                smallest = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    result = [smallest, smallestIndex]\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj5igkw37/tmpj5igkw37.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5020244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b501ff3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b501ff3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b501ff3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj5igkw37                        0x0000555efbc067f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5020430460 __libc_start_main +
    245

    6    tmpj5igkw37                        0x0000555efbc061f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == minValue {\n      \
    \      result.insert(i, minIndex)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkz6m7blk.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpkz6m7blk.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpkz6m7blk.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpkz6m7blk.swift:40:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpkz6m7blk.swift:40:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpkz6m7blk.swift:40:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i95hijw.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    // write your code in geeksforgeeks\
    \ IDE\n    \n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdo8ztiwz/tmpdo8ztiwz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aaed49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aaea40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aaea40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aaea3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo8ztiwz                        0x0000559293f743bc <unavailable> + 5052

    5    libc.so.6                          0x00002b8aaef35460 __libc_start_main +
    245

    6    tmpdo8ztiwz                        0x0000559293f73fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for index in 0..<arr.count {\n   \
    \     if arr[index] % 2 == 0 {\n            if smallestEven == arr[index] {\n\
    \                smallestEven = arr[index]\n                smallestIndex = index\n\
    \            }\n        } else {\n            if smallestIndex == -1 {\n     \
    \           smallestEven = arr[index]\n                smallestIndex = index\n\
    \            } else {\n                if arr[index] < smallestEven {\n      \
    \              smallestEven = arr[index]\n                    smallestIndex =\
    \ index\n                }\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp6tuqphrr/tmp6tuqphrr.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02c4cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02c49c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02c49c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02c49c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tuqphrr                        0x000055add17646ac <unavailable> + 5804

    5    libc.so.6                          0x00002b02c4ebd460 __libc_start_main +
    245

    6    tmp6tuqphrr                        0x000055add17642b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == minValue {\n      \
    \      result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7gxx_n8v.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp7gxx_n8v.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp7gxx_n8v.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp7gxx_n8v.swift:40:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp7gxx_n8v.swift:40:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp7gxx_n8v.swift:40:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for value in arr {\n        if value % 2\
    \ == 0 {\n            if value < minValue {\n                minValue = value\n\
    \                minIndex = result.count\n            }\n            result[minIndex]\
    \ = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce18d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce15c7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3ce15c7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3ce15c713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3ce15c6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3ce13c67ec <unavailable> + 186348

    6    tmpfz_eayaw                        0x000055d79153f1d9 <unavailable> + 8665

    7    tmpfz_eayaw                        0x000055d79153e5e4 <unavailable> + 5604

    8    libc.so.6                          0x00002b3ce1abc460 __libc_start_main +
    245

    9    tmpfz_eayaw                        0x000055d79153e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] >= minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8gdrcdoq/tmp8gdrcdoq.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b571dfa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b571dc9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b571dc9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b571dc9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gdrcdoq                        0x000055b9883a65ec <unavailable> + 5612

    5    libc.so.6                          0x00002b571e192460 __libc_start_main +
    245

    6    tmp8gdrcdoq                        0x000055b9883a61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprqvs8p_e.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmprqvs8p_e.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmprqvs8p_e.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = [smallest,\
    \ smallestIndex]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpr1p9ee0v.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpr1p9ee0v.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpr1p9ee0v.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for value in arr {\n        if value % 2\
    \ == 0 {\n            if value < minValue {\n                minValue = value\n\
    \                minIndex = result.count\n            }\n            result[minIndex]\
    \ = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce18d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce15c7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3ce15c7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3ce15c713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3ce15c6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3ce13c67ec <unavailable> + 186348

    6    tmpfz_eayaw                        0x000055d79153f1d9 <unavailable> + 8665

    7    tmpfz_eayaw                        0x000055d79153e5e4 <unavailable> + 5604

    8    libc.so.6                          0x00002b3ce1abc460 __libc_start_main +
    245

    9    tmpfz_eayaw                        0x000055d79153e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp70bd2pi6/tmp70bd2pi6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad52ee22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad52eb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad52eb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad52eb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70bd2pi6                        0x0000561f53dab70b <unavailable> + 5899

    5    libc.so.6                          0x00002ad52f00e460 __libc_start_main +
    245

    6    tmp70bd2pi6                        0x0000561f53dab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4zud9qqu.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp4zud9qqu.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp4zud9qqu.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp4zud9qqu.swift:40:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp4zud9qqu.swift:41:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpu918ydjq.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpu918ydjq.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpu918ydjq.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minValue % 2 == 0 {\n        result = [minValue]\n\
    \    } else {\n        for i := 0; i < len(arr); i++ {\n            if arr[i]\
    \ == minValue {\n                result.append(i)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmplsd4o05r.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmplsd4o05r.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmplsd4o05r.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmplsd4o05r.swift:40:16:\
    \ error: expected type\n        for i := 0; i < len(arr); i++ {\n            \
    \   ^\n                <#type#>\n/tmp/tmplsd4o05r.swift:40:16: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(arr); i++ {\n     \
    \          ^\n/tmp/tmplsd4o05r.swift:40:16: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(arr); i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == 0 {\n        return result\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == minValue {\n      \
    \      result.insert(minIndex, arr[i])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7yyteyns.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp7yyteyns.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp7yyteyns.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp7yyteyns.swift:40:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp7yyteyns.swift:40:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp7yyteyns.swift:40:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex\
    \ = 0\n    for i := 1; i < arr.count; i++ {\n        if arr[i] % 2 == 0 {\n  \
    \          if smallestEven == arr[i] {\n                smallestEven = arr[i]\n\
    \                smallestIndex = i\n            } else {\n                if arr[i]\
    \ < smallestEven {\n                    smallestEven = arr[i]\n              \
    \      smallestIndex = i\n                }\n            }\n        }\n    }\n\
    \    result.append(smallestEven)\n    result.append(smallestIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbqle73ny.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpbqle73ny.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpbqle73ny.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpbqle73ny.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for node in arr {\n        if node % 2 == 0 {\n            result.append(node)\n\
    \        }\n        if index == 0 {\n            index = node\n        }\n   \
    \ }\n    if index == 0 {\n        return result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp56bwn3mp/tmp56bwn3mp.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12c1bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12c18b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12c18b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12c18b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp56bwn3mp                        0x0000561c8f4b066c <unavailable> + 5740

    5    libc.so.6                          0x00002b12c1daa460 __libc_start_main +
    245

    6    tmp56bwn3mp                        0x0000561c8f4b0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenValue\
    \ = arr[0]\n    var smallestIndex = 0\n    for i := 1; i < arr.count; i++ {\n\
    \        if arr[i] < smallestEvenValue {\n            smallestEvenValue = arr[i]\n\
    \            smallestIndex = i\n        }\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfzyo6afa.swift:31:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpfzyo6afa.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpfzyo6afa.swift:31:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for value in arr {\n        if value ==\
    \ minValue {\n            minIndex += 1\n        }\n        if value < minValue\
    \ {\n            minValue = value\n            minIndex = 0\n        }\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpcytde0te/tmpcytde0te.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f8542bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f85122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f85122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f851217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcytde0te                        0x00005597f267c62c <unavailable> + 5676

    5    libc.so.6                          0x00002b1f85617460 __libc_start_main +
    245

    6    tmpcytde0te                        0x00005597f267c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenValue\
    \ = arr[0]\n    var smallestIndex = 0\n    for index in 0..<arr.count {\n    \
    \    if arr[index] % 2 == 0 {\n            if smallestEvenValue < arr[index] {\n\
    \                smallestEvenValue = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpw6njl3bn/tmpw6njl3bn.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0ce9a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0ce69ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0ce69a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0ce6997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6njl3bn                        0x0000559d2faf06ac <unavailable> + 5804

    5    libc.so.6                          0x00002ae0ceb8f460 __libc_start_main +
    245

    6    tmpw6njl3bn                        0x0000559d2faf02b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest == 0 {\n        return result\n\
    \    }\n    if smallest == arr[0] {\n        result = [smallest, smallestIndex]\n\
    \    } else {\n        for i := 0; i < len(arr); i++ {\n            if arr[i]\
    \ == smallest {\n                result = [arr[i], i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9znnr9zs.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp9znnr9zs.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp9znnr9zs.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp9znnr9zs.swift:45:16:\
    \ error: expected type\n        for i := 0; i < len(arr); i++ {\n            \
    \   ^\n                <#type#>\n/tmp/tmp9znnr9zs.swift:45:16: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(arr); i++ {\n     \
    \          ^\n/tmp/tmp9znnr9zs.swift:45:16: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(arr); i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for index in 0..<arr.count {\n   \
    \     if arr[index] % 2 == 0 {\n            if smallestEven == arr[index] {\n\
    \                smallestEven = arr[index]\n                smallestIndex = index\n\
    \            } else {\n                smallestEven = arr[index]\n           \
    \     smallestIndex = index\n            }\n        } else {\n            if smallestIndex\
    \ == -1 {\n                smallestEven = arr[index]\n                smallestIndex\
    \ = index\n            } else {\n                if arr[index] < smallestEven\
    \ {\n                    smallestEven = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    if smallestIndex\
    \ == -1 {\n        return result\n    }\n    result.append(smallestEven)\n   \
    \ result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c153ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c150c3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2c150c3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2c150c313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2c150c2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2c14ec2e83 <unavailable> + 188035

    6    tmpa471bpv3                        0x00005626bdb96ffe <unavailable> + 8190

    7    tmpa471bpv3                        0x00005626bdb967ee <unavailable> + 6126

    8    libc.so.6                          0x00002b2c155b8460 __libc_start_main +
    245

    9    tmpa471bpv3                        0x00005626bdb962b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == minValue {\n      \
    \      result.insert(i, minIndex)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkz6m7blk.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpkz6m7blk.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpkz6m7blk.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpkz6m7blk.swift:40:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpkz6m7blk.swift:40:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpkz6m7blk.swift:40:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpjj8lyk53/tmpjj8lyk53.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513b32ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513b021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513b021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513b0207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjj8lyk53                        0x000055ae63c937cb <unavailable> + 6091

    5    libc.so.6                          0x00002b513b516460 __libc_start_main +
    245

    6    tmpjj8lyk53                        0x000055ae63c932b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if minValue > arr[index] {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnnd2oq1b/tmpnnd2oq1b.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f4d7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f4a74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f4a74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f4a737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnd2oq1b                        0x000055fe15b637cb <unavailable> + 6091

    5    libc.so.6                          0x00002b50f4f69460 __libc_start_main +
    245

    6    tmpnnd2oq1b                        0x000055fe15b632b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n\
    \    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n      \
    \      minValue = arr[i]\n            minIndex = i\n        }\n        if arr[i]\
    \ < minValue {\n            minValue = arr[i]\n            minIndex2 = i\n   \
    \     }\n    }\n    return [minValue, minIndex, minIndex2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpc9k9_hvq.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpc9k9_hvq.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpc9k9_hvq.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpc9k9_hvq.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7i95hijw.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            if minValue < i {\n                minValue = i\n               \
    \ minIndex = i\n            }\n        } else {\n            if minValue == i\
    \ {\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpsprv09x5/tmpsprv09x5.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a05edbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a05bd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a05bd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a05bd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsprv09x5                        0x0000562f8097f6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b4a060c7460 __libc_start_main +
    245

    6    tmpsprv09x5                        0x0000562f8097f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = Int()\n    var smallestIndex = Int()\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallestEven == 0 || arr[i] < smallestEven\
    \ {\n                smallestEven = arr[i]\n                smallestIndex = i\n\
    \            }\n        }\n    }\n    if smallestEven != 0 {\n        result =\
    \ [smallestEven]\n        result.append(smallestIndex)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmplkchu50m.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmplkchu50m.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmplkchu50m.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = Int()\n    \n    for node in arr {\n        if node.value\
    \ % 2 == 0 {\n            if minValue == 0 || node.value < minValue {\n      \
    \          minValue = node.value\n                minIndex = node\n          \
    \  }\n        }\n    }\n    \n    if minValue != 0 {\n        result = [minValue,\
    \ minIndex]\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpp_9dqbsl.swift:34:17: error: value of type 'Int' has no member\
    \ 'value'\n        if node.value % 2 == 0 {\n           ~~~~ ^~~~~\n/tmp/tmpp_9dqbsl.swift:35:38:\
    \ error: value of type 'Int' has no member 'value'\n            if minValue ==\
    \ 0 || node.value < minValue {\n                                ~~~~ ^~~~~\n/tmp/tmpp_9dqbsl.swift:36:33:\
    \ error: value of type 'Int' has no member 'value'\n                minValue =\
    \ node.value\n                           ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpjj8lyk53/tmpjj8lyk53.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513b32ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513b021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513b021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513b0207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjj8lyk53                        0x000055ae63c937cb <unavailable> + 6091

    5    libc.so.6                          0x00002b513b516460 __libc_start_main +
    245

    6    tmpjj8lyk53                        0x000055ae63c932b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf9ty8g0d.swift:30:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpf9ty8g0d.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpf9ty8g0d.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for value in arr {\n        if value % 2\
    \ == 0 {\n            if value < minValue {\n                minValue = value\n\
    \                minIndex = result.count\n            }\n            result[minIndex]\
    \ = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce18d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce15c7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3ce15c7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3ce15c713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3ce15c6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3ce13c67ec <unavailable> + 186348

    6    tmpfz_eayaw                        0x000055d79153f1d9 <unavailable> + 8665

    7    tmpfz_eayaw                        0x000055d79153e5e4 <unavailable> + 5604

    8    libc.so.6                          0x00002b3ce1abc460 __libc_start_main +
    245

    9    tmpfz_eayaw                        0x000055d79153e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl_g_8nfc.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpl_g_8nfc.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpl_g_8nfc.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsvrlr0cz.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpsvrlr0cz.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpsvrlr0cz.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprqvs8p_e.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmprqvs8p_e.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmprqvs8p_e.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp70bd2pi6/tmp70bd2pi6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad52ee22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad52eb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad52eb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad52eb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70bd2pi6                        0x0000561f53dab70b <unavailable> + 5899

    5    libc.so.6                          0x00002ad52f00e460 __libc_start_main +
    245

    6    tmp70bd2pi6                        0x0000561f53dab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf9ty8g0d.swift:30:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpf9ty8g0d.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpf9ty8g0d.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpi6ub70wt.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpi6ub70wt.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpi6ub70wt.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < arr.count;\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpck6e_zh6.swift:33:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpck6e_zh6.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpck6e_zh6.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpck6e_zh6.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmvetd6w7/tmpmvetd6w7.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab15b98dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab15b684b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab15b684988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab15b6837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvetd6w7                        0x000055d82b6ac70b <unavailable> + 5899

    5    libc.so.6                          0x00002ab15bb79460 __libc_start_main +
    245

    6    tmpmvetd6w7                        0x000055d82b6ac1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenValue:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallestEvenValue == 0 || arr[i]\
    \ < smallestEvenValue {\n                smallestEvenValue = arr[i]\n        \
    \        smallestIndex = i\n            }\n        }\n    }\n    if smallestEvenValue\
    \ == 0 {\n        return result\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpj254rhu3.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpj254rhu3.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpj254rhu3.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    for i in arr {\n\
    \        if i % 2 == 0 {\n            if minValue < i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp17qxfa3x.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    // write your code here\n    \n \
    \   return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpppt_wrl4/tmpppt_wrl4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56ad6b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56ad3a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56ad3a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56ad3a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppt_wrl4                        0x0000555aaee653bc <unavailable> + 5052

    5    libc.so.6                          0x00002b56ad89c460 __libc_start_main +
    245

    6    tmpppt_wrl4                        0x0000555aaee64fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            result.append(arr[index])\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmprigkcy93/tmprigkcy93.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fac539c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fac230b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fac230988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fac22f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprigkcy93                        0x000055923ba2f6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b7fac725460 __libc_start_main +
    245

    6    tmprigkcy93                        0x000055923ba2f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for index in 1..<arr.count {\n        if arr[index] < minValue {\n      \
    \      minValue = arr[index]\n            minIndex = index\n        }\n    }\n\
    \    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8zzbl1o0/tmp8zzbl1o0.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66a2cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66a29aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66a29ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66a29ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zzbl1o0                        0x0000559ddbb2770b <unavailable> + 5899

    5    libc.so.6                          0x00002b66a2ea3460 __libc_start_main +
    245

    6    tmp8zzbl1o0                        0x0000559ddbb271f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var result: [Int] = []\n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n\
    \            minValue = arr[i]\n            minIndex = i\n        }\n    }\n \
    \   result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkmgmeaae.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpkmgmeaae.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpkmgmeaae.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpkmgmeaae.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp707445sy.swift:33:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp707445sy.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp707445sy.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp6m6fg69d.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp6m6fg69d.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp6m6fg69d.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox_5wr6m.swift:33:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpox_5wr6m.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpox_5wr6m.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n/tmp/tmpox_5wr6m.swift:28:12:\
    \ error: cannot call value of non-function type 'Bool'\n    if arr.isEmpty() {\n\
    \           ^      ~~\n                  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallest\
    \ = 0\n    var smallestIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < arr[smallest]\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest == 0 {\n        return result\n\
    \    }\n    if smallest == arr[smallest] {\n        return result\n    }\n   \
    \ result.append(smallest)\n    result.append(smallestIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpin5n3td0.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpin5n3td0.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpin5n3td0.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for index in 0..<arr.count {\n   \
    \     if arr[index] % 2 == 0 {\n            if smallestEven == arr[index] {\n\
    \                smallestEven = arr[index]\n                smallestIndex = index\n\
    \            }\n        } else {\n            if smallestEven == arr[index] {\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    if\
    \ smallestIndex == -1 {\n        return result\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxclmu3dr/tmpxclmu3dr.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23bcad7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23bc7ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23bc7ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23bc7cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxclmu3dr                        0x00005559207966ac <unavailable> + 5804

    5    libc.so.6                          0x00002b23bccc3460 __libc_start_main +
    245

    6    tmpxclmu3dr                        0x00005559207962b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for i := 1; i < arr.count; i++ {\n\
    \        if arr[i] < smallestEven {\n            smallestEven = arr[i]\n     \
    \       smallestIndex = i\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpj4m4abtd.swift:31:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpj4m4abtd.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpj4m4abtd.swift:31:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    let n = arr.count\n    \n    if n\
    \ == 0 {\n        return []\n    }\n    \n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    \n    for i in 1..<n {\n        if arr[i] < minValue {\n          \
    \  minValue = arr[i]\n            minIndex = i\n        }\n    }\n    \n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmprzxega00/tmprzxega00.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6602609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6602300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6602300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66022ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprzxega00                        0x0000559f3c17c70b <unavailable> + 5899

    5    libc.so.6                          0x00002b66027f5460 __libc_start_main +
    245

    6    tmprzxega00                        0x0000559f3c17c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == 0 {\n        return result\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == minValue {\n      \
    \      result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaz5nyjal.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpaz5nyjal.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpaz5nyjal.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpaz5nyjal.swift:40:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpaz5nyjal.swift:40:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpaz5nyjal.swift:40:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    if\
    \ arr.isEmpty {\n        return result\n    }\n    \n    var minValue = arr[0]\n\
    \    var minIndex = 0\n    \n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            if arr[index] < minValue {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n        }\n \
    \   }\n    \n    if minIndex == 0 {\n        return result\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdeu3l_cc/tmpdeu3l_cc.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b958ae01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b958aaf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b958aaf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b958aaf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdeu3l_cc                        0x000055ce2dd7585b <unavailable> + 6235

    5    libc.so.6                          0x00002b958afed460 __libc_start_main +
    245

    6    tmpdeu3l_cc                        0x000055ce2dd75349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    // write your code here\n    \n \
    \   return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpppt_wrl4/tmpppt_wrl4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56ad6b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56ad3a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56ad3a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56ad3a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppt_wrl4                        0x0000555aaee653bc <unavailable> + 5052

    5    libc.so.6                          0x00002b56ad89c460 __libc_start_main +
    245

    6    tmpppt_wrl4                        0x0000555aaee64fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = 0\n    for index in 0..<arr.count {\n    \
    \    if arr[index] % 2 == 0 {\n            if smallestEven > arr[index] {\n  \
    \              smallestEven = arr[index]\n                smallestIndex = index\n\
    \            }\n        }\n    }\n    result.append(smallestEven)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpl0nrwfmd/tmpl0nrwfmd.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a64e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a64b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a64b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a64b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0nrwfmd                        0x000055b5142a17cb <unavailable> + 6091

    5    libc.so.6                          0x00002b2a65038460 __libc_start_main +
    245

    6    tmpl0nrwfmd                        0x000055b5142a12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var result = [Int]()\n    var minValue = arr[0]\n    var minIndex =\
    \ 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n   \
    \         minValue = arr[i]\n            minIndex = i\n        }\n    }\n    if\
    \ minValue % 2 == 0 {\n        result.append(minValue)\n        result.append(minIndex)\n\
    \    } else {\n        var minValue2 = minValue\n        var minIndex2 = 0\n \
    \       for i := 0; i < len(arr); i++ {\n            if arr[i] < minValue2 {\n\
    \                minValue2 = arr[i]\n                minIndex2 = i\n         \
    \   }\n        }\n        if minValue2 % 2 == 0 {\n            result.append(minValue2)\n\
    \            result.append(minIndex2)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8kzjnekx.swift:34:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp8kzjnekx.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp8kzjnekx.swift:34:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp8kzjnekx.swift:46:16:\
    \ error: expected type\n        for i := 0; i < len(arr); i++ {\n            \
    \   ^\n                <#type#>\n/tmp/tmp8kzjnekx.swift:46:16: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(arr); i++ {\n     \
    \          ^\n/tmp/tmp8kzjnekx.swift:46:16: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(arr); i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl_g_8nfc.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpl_g_8nfc.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpl_g_8nfc.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            if minValue < i {\n                minValue = i\n               \
    \ minIndex = i\n            }\n        } else {\n            if minValue == i\
    \ {\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpsprv09x5/tmpsprv09x5.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a05edbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a05bd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a05bd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a05bd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsprv09x5                        0x0000562f8097f6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b4a060c7460 __libc_start_main +
    245

    6    tmpsprv09x5                        0x0000562f8097f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpft2s92l5.swift:33:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpft2s92l5.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpft2s92l5.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for node in arr {\n        if node % 2 == 0 {\n            result.append(node)\n\
    \            index += 1\n        }\n    }\n    if index == 0 {\n        return\
    \ arr\n    }\n    if index == 1 {\n        return result\n    }\n    if index\
    \ == arr.count {\n        return nil\n    }\n    if index == arr.count - 1 {\n\
    \        return result\n    }\n    var smallestValue = arr[0]\n    var smallestIndex\
    \ = 0\n    for node in arr {\n        if node % 2 == 0 {\n            if smallestValue\
    \ < node {\n                smallestValue = node\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    return [smallestValue, smallestIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpn67mguvt.swift:43:16: error: 'nil' is incompatible with return\
    \ type '[Int]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4zud9qqu.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp4zud9qqu.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp4zud9qqu.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp4zud9qqu.swift:40:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp4zud9qqu.swift:41:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    \n    for value in arr {\n        if value\
    \ % 2 == 0 {\n            if value < minValue {\n                minValue = value\n\
    \                minIndex = arr.index(value)\n            }\n        }\n    }\n\
    \    \n    result.append(minValue)\n    result.append(minIndex)\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmptllnm35s.swift:37:32: error: no exact matches in call to instance\
    \ method 'index'\n                minIndex = arr.index(value)\n              \
    \                 ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for index in 0..<arr.count {\n   \
    \     if arr[index] % 2 == 0 {\n            if smallestEven == arr[index] {\n\
    \                smallestEven = arr[index]\n                smallestIndex = index\n\
    \            } else {\n                smallestEven = arr[index]\n           \
    \     smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ad2035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ad1d2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ad1d2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ad1d2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ad1d2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9ad1b2be83 <unavailable> + 188035

    6    tmpfmh3cdwi                        0x000055e51ba2ffe8 <unavailable> + 8168

    7    tmpfmh3cdwi                        0x000055e51ba2f7ee <unavailable> + 6126

    8    libc.so.6                          0x00002b9ad2221460 __libc_start_main +
    245

    9    tmpfmh3cdwi                        0x000055e51ba2f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    var smallestValue\
    \ = arr[0]\n    var smallestIndex = 0\n    \n    for value in arr {\n        if\
    \ value < smallestValue {\n            smallestValue = value\n            smallestIndex\
    \ = 0\n        }\n        if value == smallestValue {\n            smallestIndex\
    \ += 1\n        }\n    }\n    \n    if smallestIndex == 0 {\n        return result\n\
    \    }\n    \n    for value in arr {\n        if value == smallestValue {\n  \
    \          result.append(smallestIndex)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpbtwx4xks/tmpbtwx4xks.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a13fddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a13cd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a13cd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a13cd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtwx4xks                        0x00005580d91f462c <unavailable> + 5676

    5    libc.so.6                          0x00002b6a141c9460 __libc_start_main +
    245

    6    tmpbtwx4xks                        0x00005580d91f4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    var\
    \ smallestEvenValue = arr[0]\n    var smallestIndex = 0\n    \n    for index in\
    \ 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < smallestEvenValue {\n                smallestEvenValue = arr[index]\n    \
    \            smallestIndex = index\n            }\n        }\n    }\n    \n  \
    \  if smallestEvenValue == arr[0] {\n        result = [smallestEvenValue, smallestIndex]\n\
    \    } else {\n        result = [smallestEvenValue, smallestIndex]\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpszzeh519/tmpszzeh519.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5378464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537815bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b537815b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b537815a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszzeh519                        0x000055e60db2176b <unavailable> + 5995

    5    libc.so.6                          0x00002b5378650460 __libc_start_main +
    245

    6    tmpszzeh519                        0x000055e60db21259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp70bd2pi6/tmp70bd2pi6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad52ee22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad52eb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad52eb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad52eb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70bd2pi6                        0x0000561f53dab70b <unavailable> + 5899

    5    libc.so.6                          0x00002ad52f00e460 __libc_start_main +
    245

    6    tmp70bd2pi6                        0x0000561f53dab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for element in arr {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n        if element == 0 {\n            if index != 0 {\n         \
    \       result.append(element)\n            }\n            index++\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjshnx621.swift:38:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4zud9qqu.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp4zud9qqu.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp4zud9qqu.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp4zud9qqu.swift:40:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp4zud9qqu.swift:41:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var result: [Int] = []\n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n\
    \            minValue = arr[i]\n            minIndex = i\n        }\n    }\n \
    \   result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpi5n7jd43.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpi5n7jd43.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpi5n7jd43.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenValue\
    \ = 0\n    var smallestIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] % 2 == 0 {\n            if smallestEvenValue == 0 {\n           \
    \     smallestEvenValue = arr[i]\n                smallestIndex = i\n        \
    \    } else {\n                if arr[i] < smallestEvenValue {\n             \
    \       smallestEvenValue = arr[i]\n                    smallestIndex = i\n  \
    \              }\n            }\n        }\n    }\n    if smallestEvenValue !=\
    \ 0 {\n        result = append(result, smallestEvenValue)\n        result = append(result,\
    \ smallestIndex)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpu7srsov5.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpu7srsov5.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpu7srsov5.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpu7srsov5.swift:45:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallestEvenValue)\n\
    \                 ^~~~~~\n/tmp/tmpu7srsov5.swift:46:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for node in arr {\n        if node % 2 == 0 {\n            result.append(node)\n\
    \        }\n        if index == 0 {\n            index = node\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpagiiya5d/tmpagiiya5d.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5881401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58810f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58810f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58810f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagiiya5d                        0x00005654e8d9a66c <unavailable> + 5740

    5    libc.so.6                          0x00002b58815ed460 __libc_start_main +
    245

    6    tmpagiiya5d                        0x00005654e8d9a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if minValue < arr[index] {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppnq2v5_u/tmppnq2v5_u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b474b0bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b474adb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b474adb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b474adb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnq2v5_u                        0x0000560460cce5ec <unavailable> + 5612

    5    libc.so.6                          0x00002b474b2a9460 __libc_start_main +
    245

    6    tmppnq2v5_u                        0x0000560460cce1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = -1\n    var minValue = arr[0]\n    for i := 1; i <\
    \ arr.count; i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n\
    \            minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpdeh86wgp.swift:33:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpdeh86wgp.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpdeh86wgp.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpdeh86wgp.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmvetd6w7/tmpmvetd6w7.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab15b98dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab15b684b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab15b684988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab15b6837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvetd6w7                        0x000055d82b6ac70b <unavailable> + 5899

    5    libc.so.6                          0x00002ab15bb79460 __libc_start_main +
    245

    6    tmpmvetd6w7                        0x000055d82b6ac1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4zud9qqu.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp4zud9qqu.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp4zud9qqu.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp4zud9qqu.swift:40:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp4zud9qqu.swift:41:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmvetd6w7/tmpmvetd6w7.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab15b98dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab15b684b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab15b684988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab15b6837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvetd6w7                        0x000055d82b6ac70b <unavailable> + 5899

    5    libc.so.6                          0x00002ab15bb79460 __libc_start_main +
    245

    6    tmpmvetd6w7                        0x000055d82b6ac1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    var smallestEvenValue = arr[0]\n    for value in arr {\n        if value\
    \ % 2 == 0 {\n            if value < smallestEvenValue {\n                smallestEvenValue\
    \ = value\n                index = index + 1\n            }\n        } else {\n\
    \            if smallestEvenValue == value {\n                index = index +\
    \ 1\n            }\n        }\n    }\n    if index == 0 {\n        return arr\n\
    \    }\n    if index == 1 {\n        result.append(smallestEvenValue)\n      \
    \  return result\n    }\n    if index == arr.count {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[0] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[1] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[2] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[3] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[4] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[5] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[6] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[7] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[8] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[9] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[10] {\n       \
    \ result.append(smallestEvenValue)\n        return result\n    }\n    if smallestEvenValue\
    \ == arr[11] {\n        result.append(smallestEvenValue)\n        return result\n\
    \    }\n    if smallestEvenValue == arr[12] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[13] {\n       \
    \ result.append(smallestEvenValue)\n        return result\n    }\n    if smallestEvenValue\
    \ == arr[14] {\n        result.append(smallestEvenValue)\n        return result\n\
    \    }\n    if smallestEvenValue == arr[15] {\n        result.append(smallestEvenValue)\n\
    \        return result\n    }\n    if smallestEvenValue == arr[16] {\n       \
    \ result.append(smallestEvenValue)\n        return result\n    }\n    if smallestEvenValue\
    \ == arr[17] {\n        result.append(smallestEvenValue)\n        return result\n\
    \    }\n    if smallestEvenValue == arr[18] {\n        result.append(smallestEvenValue)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsclmdxly.swift:150:48: error: expected '}' at end of brace statement\n\
    assert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])\n                            \
    \                   ^\n/tmp/tmpsclmdxly.swift:27:33: note: to match this opening\
    \ '{'\nfunc pluck(arr: [Int]) -> [Int] {\n                                ^\n\
    /tmp/tmpsclmdxly.swift:131:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            if minValue < i {\n                minValue = i\n               \
    \ minIndex = i\n            }\n        } else {\n            if minValue == i\
    \ {\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdnelppnn/tmpdnelppnn.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11fa130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11f9e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11f9e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11f9e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdnelppnn                        0x000056444dcd76bc <unavailable> + 5820

    5    libc.so.6                          0x00002b11fa31c460 __libc_start_main +
    245

    6    tmpdnelppnn                        0x000056444dcd72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for i := 1; i < arr.count; i++ {\n\
    \        if arr[i] < smallestEven {\n            smallestEven = arr[i]\n     \
    \       smallestIndex = i\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpj4m4abtd.swift:31:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpj4m4abtd.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpj4m4abtd.swift:31:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n\
    \    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n      \
    \      minValue = arr[i]\n            minIndex = i\n        }\n        if arr[i]\
    \ < minValue {\n            minValue = arr[i]\n            minIndex2 = i\n   \
    \     }\n    }\n    if minIndex2 == minIndex {\n        return [minValue, minIndex]\n\
    \    }\n    return [minValue, minIndex2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpesu2oykf.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpesu2oykf.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpesu2oykf.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if minValue < arr[index] {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxzyz3xd5/tmpxzyz3xd5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e973bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e970b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e970b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e970b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzyz3xd5                        0x00005569c0c456ac <unavailable> + 5804

    5    libc.so.6                          0x00002b8e975aa460 __libc_start_main +
    245

    6    tmpxzyz3xd5                        0x00005569c0c452b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpjj8lyk53/tmpjj8lyk53.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513b32ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513b021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513b021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513b0207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjj8lyk53                        0x000055ae63c937cb <unavailable> + 6091

    5    libc.so.6                          0x00002b513b516460 __libc_start_main +
    245

    6    tmpjj8lyk53                        0x000055ae63c932b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    for\
    \ element in arr {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    \n    if result.isEmpty {\n        return arr\n    }\n\
    \    \n    var smallestEvenValue = result[0]\n    var smallestIndex = 0\n    \n\
    \    for element in result {\n        if element % 2 == 0 {\n            if smallestEvenValue\
    \ < element {\n                smallestEvenValue = element\n                smallestIndex\
    \ = result.index(of: element)\n            }\n        }\n    }\n    \n    return\
    \ [smallestEvenValue, smallestIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpo5v4kuwk.swift:48:40: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n                smallestIndex = result.index(of: element)\n   \
    \                                    ^\n/tmp/tmpo5v4kuwk.swift:48:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \             smallestIndex = result.index(of: element)\n                    \
    \                   ^\n                                                      \
    \    ?? <#default value#>\n/tmp/tmpo5v4kuwk.swift:48:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n              \
    \  smallestIndex = result.index(of: element)\n                               \
    \        ^\n                                                         !\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    \n    for i in arr {\n        if\
    \ i % 2 == 0 {\n            if minValue < i {\n                minValue = i\n\
    \                minIndex = i\n            }\n        } else {\n            if\
    \ minValue == i {\n                minIndex += 1\n            }\n        }\n \
    \   }\n    \n    if minIndex == 0 {\n        return result\n    }\n    \n    if\
    \ minIndex == arr.count {\n        return result\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnxgcy9sq/tmpnxgcy9sq.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeba8dbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeba8ab4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeba8ab4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeba8ab37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxgcy9sq                        0x00005598b628371c <unavailable> + 5916

    5    libc.so.6                          0x00002aeba8fa9460 __libc_start_main +
    245

    6    tmpnxgcy9sq                        0x00005598b6283329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox_5wr6m.swift:33:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpox_5wr6m.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpox_5wr6m.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n/tmp/tmpox_5wr6m.swift:28:12:\
    \ error: cannot call value of non-function type 'Bool'\n    if arr.isEmpty() {\n\
    \           ^      ~~\n                  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprqvs8p_e.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmprqvs8p_e.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmprqvs8p_e.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = -1\n    for i := 1; i < len(arr); i++ {\n\
    \        if arr[i] < smallestEven {\n            smallestEven = arr[i]\n     \
    \       smallestIndex = i\n        }\n    }\n    if smallestIndex == -1 {\n  \
    \      return result\n    }\n    result.append(smallestEven)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp06b5qapo.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp06b5qapo.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp06b5qapo.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if minValue == arr[index] {\n                minIndex = index\n \
    \           } else {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7fe66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7fb5d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea7fb5d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea7fb5d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea7fb5cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aea7f95ce83 <unavailable> + 188035

    6    tmpluokci4a                        0x000055d52b423f10 <unavailable> + 7952

    7    tmpluokci4a                        0x000055d52b42372e <unavailable> + 5934

    8    libc.so.6                          0x00002aea80052460 __libc_start_main +
    245

    9    tmpluokci4a                        0x000055d52b4231f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = 0\n    for index in 0..<arr.count {\n    \
    \    if arr[index] % 2 == 0 {\n            if arr[index] < smallestEven {\n  \
    \              smallestEven = arr[index]\n                smallestIndex = index\n\
    \            }\n        }\n    }\n    result.append(smallestEven)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9isx4h86/tmp9isx4h86.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78196c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78193bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78193bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78193bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9isx4h86                        0x000055bba12797cb <unavailable> + 6091

    5    libc.so.6                          0x00002b78198b2460 __libc_start_main +
    245

    6    tmp9isx4h86                        0x000055bba12792b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for node in arr {\n        if node % 2 == 0 {\n            result.append(node)\n\
    \        }\n        if index == 0 {\n            index = node\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpagiiya5d/tmpagiiya5d.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5881401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58810f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58810f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58810f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagiiya5d                        0x00005654e8d9a66c <unavailable> + 5740

    5    libc.so.6                          0x00002b58815ed460 __libc_start_main +
    245

    6    tmpagiiya5d                        0x00005654e8d9a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index]\
    \ < smallest {\n                smallest = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    if smallest == 0 {\n        return\
    \ result\n    }\n    result.append(smallest)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpkaykffyd/tmpkaykffyd.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b239ef1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b239ec15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b239ec15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b239ec147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkaykffyd                        0x00005573a18ef9b4 <unavailable> + 6580

    5    libc.so.6                          0x00002b239f10a460 __libc_start_main +
    245

    6    tmpkaykffyd                        0x00005573a18ef259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpddpndgpk.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpddpndgpk.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpddpndgpk.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int64(math.MinInt64)\n    var minIndex = -1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzcxv7x5u.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpzcxv7x5u.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpzcxv7x5u.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpzcxv7x5u.swift:29:26:\
    \ error: cannot find 'math' in scope\n    var minValue = Int64(math.MinInt64)\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for node in arr {\n        if node.value % 2 == 0 {\n            result.append(node.value)\n\
    \            index = result.count\n        }\n    }\n    if index == 0 {\n   \
    \     return arr\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp__a9owtz.swift:31:17: error: value of type 'Int' has no member\
    \ 'value'\n        if node.value % 2 == 0 {\n           ~~~~ ^~~~~\n/tmp/tmp__a9owtz.swift:32:32:\
    \ error: value of type 'Int' has no member 'value'\n            result.append(node.value)\n\
    \                          ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmprbq4dp9x/tmprbq4dp9x.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78bce81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78bcb78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78bcb78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78bcb777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbq4dp9x                        0x0000564005c527cb <unavailable> + 6091

    5    libc.so.6                          0x00002b78bd06d460 __libc_start_main +
    245

    6    tmprbq4dp9x                        0x0000564005c522b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var result = [Int]()\n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n\
    \            minValue = arr[i]\n            minIndex = i\n        }\n    }\n \
    \   result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpiu_axzex.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpiu_axzex.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpiu_axzex.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpiu_axzex.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestValue\
    \ = arr[0]\n    var smallestIndex = 0\n    for i := 1; i < arr.count; i++ {\n\
    \        if arr[i] < smallestValue {\n            smallestValue = arr[i]\n   \
    \         smallestIndex = i\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpx93n6ysr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpx93n6ysr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpx93n6ysr.swift:31:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    for index in 1..<arr.count\
    \ {\n        if arr[index] < minValue {\n            minValue = arr[index]\n \
    \           minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpak573dq7.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var result = [Int]()\n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n\
    \            minValue = arr[i]\n            minIndex = i\n        }\n    }\n \
    \   result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpiu_axzex.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpiu_axzex.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpiu_axzex.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpiu_axzex.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    \n    for i in arr {\n        if i % 2 ==\
    \ 0 {\n            if minValue == 0 || minValue > i {\n                minValue\
    \ = i\n                minIndex = i\n            }\n        } else {\n       \
    \     if minValue == 0 || minValue > i {\n                minValue = i\n     \
    \           minIndex = i\n            }\n        }\n    }\n    \n    if minValue\
    \ == 0 {\n        return arr\n    }\n    \n    if minIndex == -1 {\n        return\
    \ arr\n    }\n    \n    for i in arr {\n        if i == minValue {\n         \
    \   result.append(i)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpnhtqyljv/tmpnhtqyljv.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4da5d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4da5a29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4da5a29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4da5a287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhtqyljv                        0x000055556a66766c <unavailable> + 5740

    5    libc.so.6                          0x00002b4da5f1e460 __libc_start_main +
    245

    6    tmpnhtqyljv                        0x000055556a667279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index]\
    \ < smallest {\n                smallest = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    result = [smallest, smallestIndex]\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj5igkw37/tmpj5igkw37.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5020244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b501ff3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b501ff3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b501ff3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj5igkw37                        0x0000555efbc067f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5020430460 __libc_start_main +
    245

    6    tmpj5igkw37                        0x0000555efbc061f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    let len = arr.count\n    \n    if\
    \ len == 0 {\n        return []\n    }\n    \n    var minValue = arr[0]\n    var\
    \ minIndex = 0\n    \n    for i in 1..<len {\n        if arr[i] < minValue {\n\
    \            minValue = arr[i]\n            minIndex = i\n        }\n    }\n \
    \   \n    var result = [minValue, minIndex]\n    \n    if minValue % 2 == 0 {\n\
    \        result[0] = minValue / 2\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpceig_0ay/tmpceig_0ay.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b52a2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b52721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b52721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b527207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpceig_0ay                        0x000055945a9a264c <unavailable> + 5708

    5    libc.so.6                          0x00002b4b52c16460 __libc_start_main +
    245

    6    tmpceig_0ay                        0x000055945a9a2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpi6ub70wt.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpi6ub70wt.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpi6ub70wt.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minValue == 0 {\n        return result\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] == minValue {\n      \
    \      result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp6mygfls1.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp6mygfls1.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp6mygfls1.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp6mygfls1.swift:40:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp6mygfls1.swift:40:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp6mygfls1.swift:40:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp05yrlnoz.swift:30:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp05yrlnoz.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp05yrlnoz.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    var smallestEvenValue = arr[0]\n    for value in arr {\n        if value\
    \ < smallestEvenValue {\n            smallestEvenValue = value\n        }\n  \
    \      if value == smallestEvenValue {\n            result.append(value)\n   \
    \         index += 1\n        }\n    }\n    if index == 0 {\n        return arr\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj1lvs8f_/tmpj1lvs8f_.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f6fb9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f6f892b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f6f892988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f6f8917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1lvs8f_                        0x0000559c5f56a62c <unavailable> + 5676

    5    libc.so.6                          0x00002b2f6fd87460 __libc_start_main +
    245

    6    tmpj1lvs8f_                        0x0000559c5f56a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpu918ydjq.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpu918ydjq.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpu918ydjq.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var result: [Int] = []\n    var smallestEvenValue: Int = 0\n    var\
    \ smallestIndex: Int = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            if smallestEvenValue == 0 || arr[index] < smallestEvenValue\
    \ {\n                smallestEvenValue = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    if smallestEvenValue == 0 {\n\
    \        return result\n    }\n    result.append(smallestEvenValue)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj3csh42b/tmpj3csh42b.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8037896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b803758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b803758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b803758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3csh42b                        0x000056192e010a44 <unavailable> + 6724

    5    libc.so.6                          0x00002b8037a82460 __libc_start_main +
    245

    6    tmpj3csh42b                        0x000056192e0102e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprqvs8p_e.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmprqvs8p_e.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmprqvs8p_e.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp70bd2pi6/tmp70bd2pi6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad52ee22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad52eb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad52eb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad52eb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70bd2pi6                        0x0000561f53dab70b <unavailable> + 5899

    5    libc.so.6                          0x00002ad52f00e460 __libc_start_main +
    245

    6    tmp70bd2pi6                        0x0000561f53dab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5a3l_brq/tmp5a3l_brq.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add9ebe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add9e8dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add9e8db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add9e8da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a3l_brq                        0x0000557e33ebf76b <unavailable> + 5995

    5    libc.so.6                          0x00002add9edd0460 __libc_start_main +
    245

    6    tmp5a3l_brq                        0x0000557e33ebf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n\
    \    var minIndex3 = 0\n    var minIndex4 = 0\n    var minIndex5 = 0\n    var\
    \ minIndex6 = 0\n    var minIndex7 = 0\n    var minIndex8 = 0\n    var minIndex9\
    \ = 0\n    var minIndex10 = 0\n    var minIndex11 = 0\n    var minIndex12 = 0\n\
    \    var minIndex13 = 0\n    var minIndex14 = 0\n    var minIndex15 = 0\n    var\
    \ minIndex16 = 0\n    var minIndex17 = 0\n    var minIndex18 = 0\n    var minIndex19\
    \ = 0\n    var minIndex20 = 0\n    var minIndex21 = 0\n    var minIndex22 = 0\n\
    \    var minIndex23 = 0\n    var minIndex24 = 0\n    var minIndex25 = 0\n    var\
    \ minIndex26 = 0\n    var minIndex27 = 0\n    var minIndex28 = 0\n    var minIndex29\
    \ = 0\n    var minIndex30 = 0\n    var minIndex31 = 0\n    var minIndex32 = 0\n\
    \    var minIndex33 = 0\n    var minIndex34 = 0\n    var minIndex35 = 0\n    var\
    \ minIndex36 = 0\n    var minIndex37 = 0\n    var minIndex38 = 0\n    var minIndex39\
    \ = 0\n    var minIndex40 = 0\n    var minIndex41 = 0\n    var minIndex42 = 0\n\
    \    var minIndex43 = 0\n    var minIndex44 = 0\n    var minIndex45 = 0\n    var\
    \ minIndex46 = 0\n    var minIndex47 = 0\n    var minIndex48 = 0\n    var minIndex49\
    \ = 0\n    var minIndex50 = 0\n    var minIndex51 = 0\n    var minIndex52 = 0\n\
    \    var minIndex53 = 0\n    var minIndex54 = 0\n    var minIndex55 = 0\n    var\
    \ minIndex56 = 0\n    var minIndex57 = 0\n    var minIndex58 = 0\n    var minIndex59\
    \ = 0\n    var minIndex60 = 0\n    var minIndex61 = 0\n    var minIndex62 = 0\n\
    \    var minIndex63 = 0\n    var minIndex64 = 0\n    var minIndex65 = 0\n    var\
    \ minIndex66 = 0\n    var minIndex67 = 0\n    var minIndex68 = 0\n    var minIndex69\
    \ = 0\n    var minIndex70 = 0\n    var minIndex71 = 0\n    var minIndex72 = 0\n\
    \    var minIndex73 = 0\n    var minIndex74 = 0\n    var minIndex75 = 0\n    var\
    \ minIndex76 = 0\n    var minIndex77 = 0\n    var minIndex78 = 0\n    var minIndex79\
    \ = 0\n    var minIndex80 = 0\n    var minIndex81 = 0\n    var minIndex82 = 0\n\
    \    var minIndex83 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuipto6q1.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            if minValue > i {\n                minValue = i\n               \
    \ minIndex = i\n            }\n        } else {\n            if minValue == i\
    \ {\n                minIndex = i\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptbya206r/tmptbya206r.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94b4653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94b434ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94b434a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94b43497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbya206r                        0x0000555f9b14d6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b94b483f460 __libc_start_main +
    245

    6    tmptbya206r                        0x0000555f9b14d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp70bd2pi6/tmp70bd2pi6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad52ee22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad52eb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad52eb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad52eb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70bd2pi6                        0x0000561f53dab70b <unavailable> + 5899

    5    libc.so.6                          0x00002ad52f00e460 __libc_start_main +
    245

    6    tmp70bd2pi6                        0x0000561f53dab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var index = 0\n\
    \    for node in arr {\n        if node % 2 == 0 {\n            result.append(node)\n\
    \        }\n        if index == 0 {\n            index = node\n        }\n   \
    \ }\n    if index == 0 {\n        return result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp56bwn3mp/tmp56bwn3mp.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12c1bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12c18b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12c18b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12c18b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp56bwn3mp                        0x0000561c8f4b066c <unavailable> + 5740

    5    libc.so.6                          0x00002b12c1daa460 __libc_start_main +
    245

    6    tmp56bwn3mp                        0x0000561c8f4b0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl_g_8nfc.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpl_g_8nfc.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpl_g_8nfc.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2\
    \ == 0 {\n            if minValue == arr[index] {\n                minIndex =\
    \ index\n            } else {\n                minValue = arr[index]\n       \
    \         minIndex = index\n            }\n        }\n    }\n    \n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95f068cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95f0383561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95f0383286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95f038313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95f0382bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95f0182e83 <unavailable> + 188035

    6    tmppomg22e_                        0x00005558fdb45f10 <unavailable> + 7952

    7    tmppomg22e_                        0x00005558fdb4572e <unavailable> + 5934

    8    libc.so.6                          0x00002b95f0878460 __libc_start_main +
    245

    9    tmppomg22e_                        0x00005558fdb451f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenIndex\
    \ = 0\n    var smallestEvenValue = arr[0]\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallestEvenValue < arr[index]\
    \ {\n                smallestEvenValue = arr[index]\n                smallestEvenIndex\
    \ = index\n            }\n        }\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestEvenIndex)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptqt5fw5v/tmptqt5fw5v.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae28283cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae282533b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae282533988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2825327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqt5fw5v                        0x000055c9728126ac <unavailable> + 5804

    5    libc.so.6                          0x00002ae282a28460 __libc_start_main +
    245

    6    tmptqt5fw5v                        0x000055c9728122b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenValue:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallestEvenValue == 0 || arr[index]\
    \ < smallestEvenValue {\n                smallestEvenValue = arr[index]\n    \
    \            smallestIndex = index\n            }\n        }\n    }\n    if smallestEvenValue\
    \ == 0 {\n        return result\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpqm17s16_/tmpqm17s16_.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fc7464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fc715bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fc715b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fc715a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm17s16_                        0x000055b82b733a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b8fc7650460 __libc_start_main +
    245

    6    tmpqm17s16_                        0x000055b82b7332b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < arr.count; i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpex54jmin.swift:31:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpex54jmin.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpex54jmin.swift:31:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    if\
    \ arr.isEmpty {\n        return result\n    }\n    \n    var smallestEvenValue\
    \ = arr[0]\n    var smallestIndex = 0\n    \n    for i in arr {\n        if i\
    \ % 2 == 0 {\n            if smallestEvenValue < i {\n                smallestEvenValue\
    \ = i\n                smallestIndex = i\n            }\n        }\n    }\n  \
    \  \n    if smallestEvenValue == 0 {\n        return result\n    }\n    \n   \
    \ if smallestIndex == 0 {\n        return [smallestEvenValue, smallestIndex]\n\
    \    }\n    \n    if smallestIndex < smallestEvenValue {\n        return [smallestEvenValue,\
    \ smallestIndex]\n    }\n    \n    return [smallestEvenValue, smallestIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp1tvwdrt4/tmp1tvwdrt4.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33d27a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33d2499b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33d2499988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33d24987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tvwdrt4                        0x0000562a293636bc <unavailable> + 5820

    5    libc.so.6                          0x00002b33d298e460 __libc_start_main +
    245

    6    tmp1tvwdrt4                        0x0000562a293632c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf9ty8g0d.swift:30:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpf9ty8g0d.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpf9ty8g0d.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl_g_8nfc.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpl_g_8nfc.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpl_g_8nfc.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n   \
    \         result.append(arr[i])\n            if arr[i] < arr[minIndex] {\n   \
    \             minIndex = i\n            }\n        }\n    }\n    if minIndex ==\
    \ 0 {\n        return result\n    }\n    if minIndex == len(arr) {\n        return\
    \ result\n    }\n    return result[minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaupygeyc.swift:30:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpaupygeyc.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpaupygeyc.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpaupygeyc.swift:41:20:\
    \ error: cannot find 'len' in scope\n    if minIndex == len(arr) {\n         \
    \          ^~~\n/tmp/tmpaupygeyc.swift:44:18: error: cannot convert return expression\
    \ of type 'Int' to return type '[Int]'\n    return result[minIndex]\n        \
    \   ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < smallest\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4zud9qqu.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp4zud9qqu.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp4zud9qqu.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp4zud9qqu.swift:40:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp4zud9qqu.swift:41:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n\
    \    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n      \
    \      minValue = arr[i]\n            minIndex = i\n        }\n        if arr[i]\
    \ < minValue {\n            minValue = arr[i]\n            minIndex2 = i\n   \
    \     }\n    }\n    return [minValue, minIndex2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjsb_9s0k.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpjsb_9s0k.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpjsb_9s0k.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    if minIndex == 0 {\n        return result\n\
    \    }\n    \n    if minIndex < arr.count {\n        result.append(minValue)\n\
    \        result.append(minIndex)\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp31xqljp1/tmp31xqljp1.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2657a32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2657729b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2657729988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26577287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31xqljp1                        0x0000556f2763a7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b2657c1e460 __libc_start_main +
    245

    6    tmp31xqljp1                        0x0000556f2763a2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var result = [Int]()\n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n\
    \            result = [minValue, minIndex]\n            break\n        }\n   \
    \     if arr[i] > minValue {\n            result = [arr[i], i]\n        }\n  \
    \      if arr[i] != minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqwtfx6oi.swift:34:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpqwtfx6oi.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpqwtfx6oi.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpqwtfx6oi.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for i in arr {\n        if i % 2 == 0 {\n            if\
    \ minValue > i {\n                minValue = i\n                minIndex = i\n\
    \            }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmps8zjfaeb/tmps8zjfaeb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83d4345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83d403cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83d403c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83d403b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8zjfaeb                        0x000055f68c01c61c <unavailable> + 5660

    5    libc.so.6                          0x00002b83d4531460 __libc_start_main +
    245

    6    tmps8zjfaeb                        0x000055f68c01c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = 0\n    for i := 1; i < len(arr); i++ {\n \
    \       if arr[i] < smallestEven {\n            smallestEven = arr[i]\n      \
    \      smallestIndex = i\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgr6yqg3h.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpgr6yqg3h.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpgr6yqg3h.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    var minVal = arr[0]\n    \n    for val in arr {\n        if val < minVal\
    \ {\n            minVal = val\n            minIndex = arr.index(of: val)\n   \
    \     }\n    }\n    \n    if minIndex == 0 {\n        return result\n    }\n \
    \   \n    for val in arr {\n        if val == minVal {\n            result.append(val)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmph_r9zdr7.swift:36:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            minIndex = arr.index(of: val)\n                   \
    \        ^\n/tmp/tmph_r9zdr7.swift:36:28: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            minIndex = arr.index(of:\
    \ val)\n                           ^\n                                       \
    \   ?? <#default value#>\n/tmp/tmph_r9zdr7.swift:36:28: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            minIndex\
    \ = arr.index(of: val)\n                           ^\n                       \
    \                  !\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < arr.count;\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7noo3u2u.swift:33:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp7noo3u2u.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmp7noo3u2u.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEvenIndex\
    \ = 0\n    var smallestEvenValue = 0\n    for index in 0..<arr.count {\n     \
    \   if arr[index] % 2 == 0 {\n            if smallestEvenValue == 0 || arr[index]\
    \ < smallestEvenValue {\n                smallestEvenValue = arr[index]\n    \
    \            smallestEvenIndex = index\n            }\n        }\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestEvenIndex)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpldci77uu/tmpldci77uu.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0e9032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0e8d29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0e8d29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0e8d287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldci77uu                        0x00005609b24a48b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ad0e921e460 __libc_start_main +
    245

    6    tmpldci77uu                        0x00005609b24a42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < arr.count;\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpck6e_zh6.swift:33:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpck6e_zh6.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpck6e_zh6.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmpck6e_zh6.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < arr.count();\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7f38eckr.swift:33:12: error: expected type\n    for i := 1; i <\
    \ arr.count(); i++ {\n           ^\n            <#type#>\n/tmp/tmp7f38eckr.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count();\
    \ i++ {\n           ^\n/tmp/tmp7f38eckr.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count(); i++ {\n     \
    \      ^\n/tmp/tmp7f38eckr.swift:28:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty() {\n        return []\n\
    \    }\n    var minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox_5wr6m.swift:33:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpox_5wr6m.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpox_5wr6m.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n/tmp/tmpox_5wr6m.swift:28:12:\
    \ error: cannot call value of non-function type 'Bool'\n    if arr.isEmpty() {\n\
    \           ^      ~~\n                  \n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var min: Int\
    \ = 0\n    var minIndex: Int = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] % 2 == 0 {\n            if arr[i] < min {\n                min =\
    \ arr[i]\n                minIndex = i\n            }\n        }\n    }\n    if\
    \ min == 0 {\n        return result\n    }\n    result.insert(min, minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpmr4dm117.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpmr4dm117.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpmr4dm117.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpmr4dm117.swift:42:12:\
    \ error: no exact matches in call to instance method 'insert'\n    result.insert(min,\
    \ minIndex)\n           ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    for i in arr {\n        if i % 2 == 0 {\n            if minValue\
    \ < i {\n                minValue = i\n                minIndex = i\n        \
    \    }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpjfcf0g5l/tmpjfcf0g5l.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e522ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e51fc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e51fc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e51fc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfcf0g5l                        0x00005643b47ef61c <unavailable> + 5660

    5    libc.so.6                          0x00002b6e524b8460 __libc_start_main +
    245

    6    tmpjfcf0g5l                        0x00005643b47ef229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n        if arr[i]\
    \ < minValue {\n            minValue = arr[i]\n            minIndex2 = i\n   \
    \     }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1s2al4_3.swift:34:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp1s2al4_3.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp1s2al4_3.swift:34:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n           \
    \     minIndex = index\n            } else {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae65cd38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae65ca2f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae65ca2f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae65ca2f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae65ca2ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae65c82ee83 <unavailable> + 188035

    6    tmp2n95675x                        0x000055e38df29ff0 <unavailable> + 8176

    7    tmp2n95675x                        0x000055e38df297ee <unavailable> + 6126

    8    libc.so.6                          0x00002ae65cf24460 __libc_start_main +
    245

    9    tmp2n95675x                        0x000055e38df292b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n       \
    \     minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf9ty8g0d.swift:30:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpf9ty8g0d.swift:30:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpf9ty8g0d.swift:30:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallest\
    \ = 0\n    var smallestIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < arr[smallest]\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest != 0 {\n        result = append(result,\
    \ smallest)\n        result = append(result, smallestIndex)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpytf9ma5f.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpytf9ma5f.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpytf9ma5f.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpytf9ma5f.swift:40:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmpytf9ma5f.swift:41:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var minIndex\
    \ = 0\n    for node in arr {\n        if node.value % 2 == 0 {\n            if\
    \ node.value < arr[minIndex].value {\n                minIndex = result.count\n\
    \            }\n            result.append(node.value)\n        }\n    }\n    if\
    \ minIndex == 0 {\n        return result\n    }\n    return result[minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgsttx26s.swift:31:17: error: value of type 'Int' has no member\
    \ 'value'\n        if node.value % 2 == 0 {\n           ~~~~ ^~~~~\n/tmp/tmpgsttx26s.swift:32:21:\
    \ error: value of type 'Int' has no member 'value'\n            if node.value\
    \ < arr[minIndex].value {\n               ~~~~ ^~~~~\n/tmp/tmpgsttx26s.swift:32:43:\
    \ error: value of type 'Int' has no member 'value'\n            if node.value\
    \ < arr[minIndex].value {\n                            ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpgsttx26s.swift:35:32:\
    \ error: value of type 'Int' has no member 'value'\n            result.append(node.value)\n\
    \                          ~~~~ ^~~~~\n/tmp/tmpgsttx26s.swift:41:18: error: cannot\
    \ convert return expression of type 'Int' to return type '[Int]'\n    return result[minIndex]\n\
    \           ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = 0\n    for index in 0..<arr.count {\n    \
    \    if arr[index] % 2 == 0 {\n            if smallestEven == arr[index] {\n \
    \               smallestEven = arr[index]\n                smallestIndex = index\n\
    \            } else {\n                smallestEven = arr[index]\n           \
    \     smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aef1298ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef12685561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef12685286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef1268513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef12684bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aef12484e83 <unavailable> + 188035

    6    tmpv40u6cgu                        0x000055982e3a9fe8 <unavailable> + 8168

    7    tmpv40u6cgu                        0x000055982e3a97ee <unavailable> + 6126

    8    libc.so.6                          0x00002aef12b7a460 __libc_start_main +
    245

    9    tmpv40u6cgu                        0x000055982e3a92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013722
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallest\
    \ = 0\n    var smallestIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] % 2 == 0 {\n            if smallest == 0 || arr[i] < arr[smallest]\
    \ {\n                smallest = arr[i]\n                smallestIndex = i\n  \
    \          }\n        }\n    }\n    if smallest == 0 {\n        return result\n\
    \    }\n    if smallest == arr[0] {\n        result[0] = smallest\n    } else\
    \ {\n        result[0] = smallestIndex\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpc_7vy4uf.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpc_7vy4uf.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpc_7vy4uf.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for value in arr {\n        if value < minValue\
    \ {\n            minValue = value\n            minIndex = result.count\n     \
    \   }\n        if value == minValue {\n            result[minIndex] = value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc4ccb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc4c9ad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc4c9ad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc4c9ad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc4c9acbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc4c7ac7ec <unavailable> + 186348

    6    tmpcc8dt3a_                        0x00005569d23920e8 <unavailable> + 8424

    7    tmpcc8dt3a_                        0x00005569d23915a4 <unavailable> + 5540

    8    libc.so.6                          0x00002abc4cea2460 __libc_start_main +
    245

    9    tmpcc8dt3a_                        0x00005569d2391289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013722
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuggqptlv.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuggqptlv.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuggqptlv.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var smallestValue\
    \ = arr[0]\n    var smallestIndex = 0\n    for index in 0..<arr.count {\n    \
    \    if arr[index] % 2 == 0 {\n            if smallestValue == arr[index] {\n\
    \                smallestIndex = index\n            } else {\n               \
    \ smallestValue = arr[index]\n                smallestIndex = index\n        \
    \    }\n        }\n    }\n    result.append(smallestValue)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cfd335c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cfd02c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5cfd02c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5cfd02c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5cfd02bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5cfce2be83 <unavailable> + 188035

    6    tmp71ycp1nt                        0x000055debe967fe8 <unavailable> + 8168

    7    tmp71ycp1nt                        0x000055debe9677ee <unavailable> + 6126

    8    libc.so.6                          0x00002b5cfd521460 __libc_start_main +
    245

    9    tmp71ycp1nt                        0x000055debe9672b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013722
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int()\n    var minIndex = -1\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if minValue == 0 || arr[index] < minValue\
    \ {\n                minValue = arr[index]\n                minIndex = index\n\
    \            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp1nk2om9z/tmp1nk2om9z.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae73b4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae73b1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae73b1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae73b1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nk2om9z                        0x00005628523d28b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ae73b698460 __libc_start_main +
    245

    6    tmp1nk2om9z                        0x00005628523d22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013722
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp958oai33/tmp958oai33.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af33524fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af334f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af334f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af334f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp958oai33                        0x00005631895cb70b <unavailable> + 5899

    5    libc.so.6                          0x00002af33543b460 __libc_start_main +
    245

    6    tmp958oai33                        0x00005631895cb1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = Int64(math.MaxInt64)\n    var minIndex = -1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7w3s_gfm.swift:31:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp7w3s_gfm.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp7w3s_gfm.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp7w3s_gfm.swift:29:26:\
    \ error: cannot find 'math' in scope\n    var minValue = Int64(math.MaxInt64)\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var smallest:\
    \ Int = 0\n    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index]\
    \ < smallest {\n                smallest = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    if smallest != 0 {\n        result\
    \ = [smallest, smallestIndex]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpoinxl4hc/tmpoinxl4hc.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c3e02bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c3dd22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c3dd22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c3dd217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoinxl4hc                        0x000055b3c961c954 <unavailable> + 6484

    5    libc.so.6                          0x00002b7c3e217460 __libc_start_main +
    245

    6    tmpoinxl4hc                        0x000055b3c961c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n \
    \   }\n    var minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < arr.count;\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_dcbb361.swift:33:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp_dcbb361.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmp_dcbb361.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue\
    \ = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwy8daipr.swift:31:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwy8daipr.swift:31:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwy8daipr.swift:31:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
    /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr:\
    \ [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3,\
    \ 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n/// so we will choose the first zero, which has the smallest\
    \ index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\n\
    func pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var minIndex\
    \ = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if minValue < arr[index] {\n            \
    \    minValue = arr[index]\n                minIndex = index\n            }\n\
    \        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxzyz3xd5/tmpxzyz3xd5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e973bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e970b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e970b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e970b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzyz3xd5                        0x00005569c0c456ac <unavailable> + 5804

    5    libc.so.6                          0x00002b8e975aa460 __libc_start_main +
    245

    6    tmpxzyz3xd5                        0x00005569c0c452b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013721
