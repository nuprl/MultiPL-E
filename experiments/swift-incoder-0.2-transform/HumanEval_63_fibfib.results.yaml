language: swift
name: HumanEval_63_fibfib
results:
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1...n {\n    result *= n\n    result %= 1000000\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp524y3q0v/tmp524y3q0v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8787f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8784efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8784ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8784ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp524y3q0v                        0x000055b67c2ee338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae8789e4460 __libc_start_main +
    245

    6    tmp524y3q0v                        0x000055b67c2edfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821069
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: recursion\
    \ here\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n \
    \ if n == 2 {\n    return 1\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpajn47i5j.swift:25:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpajn47i5j.swift:25:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpajn47i5j.swift:25:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821069
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp91oa27d5.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp91oa27d5.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp91oa27d5.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp9emx9ie.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpp9emx9ie.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpp9emx9ie.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqsaw1ida.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpqsaw1ida.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpqsaw1ida.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp91oa27d5.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp91oa27d5.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp91oa27d5.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
