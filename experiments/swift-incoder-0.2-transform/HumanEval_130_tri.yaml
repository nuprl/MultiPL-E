name: HumanEval_130_tri
language: swift
prompt: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>>\
  \ tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n:\
  \ 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n:\
  \ 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
  assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
  \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
  \ 1) == [1, 3])"
completions: ["    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(3)\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result", "    var result = [Int]()\n    \n    if n == 1 {\n      \
    \  result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result;\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n    \n    if n % 2 == 1\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(0)\n        result.append(1)\n       \
    \ result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n <= 0 {\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    var\
    \ a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n        result.append(a)\n\
    \        if n % 2 == 0 {\n            result.append(b)\n            a += b\n \
    \           b += c\n            c += a + b\n        } else {\n            result.append(c)\n\
    \            a += c\n            c += b\n            b += a\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 1 {\n      \
    \  result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(1)\n        result.append(3)\n    } else {\n      \
    \  result.append(1)\n        result.append(3)\n        result.append(3)\n    }\n\
    \    \n    for _ in 1...(n + 1) {\n        result.append(result[0] + result[1]\
    \ + result[2])\n    }\n    \n    return result", "    var result = [Int]()\n \
    \   \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n  \
    \      return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n <= 2 {\n        result.append(1)\n        result.append(2)\n \
    \       return result\n    }\n    \n    var firstTribonacci = tri(n - 1) + tri(n\
    \ - 2)\n    \n    if n % 2 == 0 {\n        result.append(firstTribonacci)\n  \
    \      result.append(firstTribonacci + tri(n + 1))\n    } else {\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n        result.append(firstTribonacci)\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        result.append(1)\n    } else {\n        result.append(1)\n        result.append(1\
    \ + n / 2)\n    }\n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n   \
    \ }\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n  \
    \      result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(1)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n    } else {\n        result.append(3)\n\
    \        result.append(1 + n / 2)\n        if n % 2 == 0 {\n            result.append(1\
    \ + n / 2 + n / 2)\n        }\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in\
    \ 0..<n {\n        tri3 = tri1 + tri2\n        tri2 = tri1\n        tri1 = tri3\n\
    \        result.append(tri3)\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result", "    var result = [Int]()\n    var a = Int(3)\n    var b\
    \ = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var\
    \ f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n   \
    \ var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n",
  "    var result = [Int]()\n    var tri1 = 3\n    var tri2 = 1\n    var tri3 = 2\n\
    \    var tri4 = 3\n    if n % 2 == 0 {\n        tri1 = tri1 + tri2\n        tri2\
    \ = tri1 + tri3\n        tri3 = tri2 + tri4\n        tri4 = tri3 + tri1\n    }\n\
    \    for _ in 1...n {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n\
    \        tri2 = tri1 + tri3\n        tri3 = tri2 + tri4\n        tri4 = tri3 +\
    \ tri1\n    }\n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(3)\n        return result\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(1 + n / 2)\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var firstThree = [Int]()\n    var secondThree = [Int]()\n    var thirdThree\
    \ = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree = [Int]()\n   \
    \ var sixthThree = [Int]()\n    var seventhThree = [Int]()\n    var eighthThree\
    \ = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree = [Int]()\n   \
    \ var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n    var thirteenthThree\
    \ = [Int]()\n    var fourteenthThree = [Int]()\n    var fifteenthThree = [Int]()\n\
    \    var sixteenthThree = [Int]()\n    var seventeenthThree = [Int]()\n    var\
    \ eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n    var twentiethThree\
    \ = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree = [Int]()\n\
    \    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n    var seventiethThree\
    \ = [Int]()\n    var eightiethThree = [Int]()\n    var ninetiethThree = [Int]()\n\
    \    var hundredthThree = [Int]()\n    var thousandthThree = [Int]()\n    var\
    \ millionthThree = [Int]()\n    var billionthThree = [Int]()\n    var trillionthThree\
    \ = [Int]()\n    var quadrillionthThree = [Int]()\n    var quintillionthThree\
    \ = [Int]()\n    var sextillionthThree = [Int]()\n    var septillionthThree =\
    \ [Int]()\n    var octillionthThree = [Int]()\n    var nonillionthThree = [Int]()\n\
    \    var decillionthThree = [Int]()\n    var undecillionthThree = [Int]()\n  \
    \  var duodecillionthThree = [Int]()\n    var tredecillionthThree = [Int]()\n\
    \    var quattuordecillionthThree = [Int]()\n    var quindecillionthThree = [Int]()\n\
    \    var sexdecillionthThree = [Int]()\n    var septendecillionthThree = [Int]()\n\
    \    var octodecillionthThree = [Int]()\n    var novemdecillionthThree = [Int]()\n\
    \    var vigintilli", "    var result = [Int]()\n    \n    switch n {\n    case\
    \ 0:\n        result.append(0)\n    case 1:\n        result.append(1)\n    case\
    \ 2:\n        result.append(3)\n    case 3:\n        result.append(2)\n    case\
    \ 4:\n        result.append(3)\n    case 5:\n        result.append(4)\n    case\
    \ 6:\n        result.append(5)\n    case 7:\n        result.append(6)\n    case\
    \ 8:\n        result.append(7)\n    case 9:\n        result.append(8)\n    case\
    \ 10:\n        result.append(9)\n    case 11:\n        result.append(10)\n   \
    \ case 12:\n        result.append(11)\n    case 13:\n        result.append(12)\n\
    \    case 14:\n        result.append(13)\n    case 15:\n        result.append(14)\n\
    \    case 16:\n        result.append(15)\n    case 17:\n        result.append(16)\n\
    \    case 18:\n        result.append(17)\n    case 19:\n        result.append(18)\n\
    \    case 20:\n        result.append(19)\n    case 21:\n        result.append(20)\n\
    \    case 22:\n        result.append(21)\n    case 23:\n        result.append(22)\n\
    \    case 24:\n        result.append(23)\n    case 25:\n        result.append(24)\n\
    \    case 26:\n        result.append(25)\n    case 27:\n        result.append(26)\n\
    \    case 28:\n        result.append(27)\n    case 29:\n        result.append(28)\n\
    \    case 30:\n        result.append(29)\n    case 31:\n        result.append(30)\n\
    \    case 32:\n        result.append(31)\n    case 33:\n        result.append(32)\n\
    \    case 34:\n        result.append(33)\n    case 35:\n        result.append(34)\n\
    \    case 36:\n        result.append(35)\n    case 37:\n        result.append(36)\n\
    \    case 38:\n        result.append(37)\n    case 39:\n        result.append(38)\n\
    \    case 40:\n        result.append(39)\n    case 41:\n        result.append(40)\n\
    \    case 42:\n        result.append(41)\n    case 43:\n        result.append(42)\n\
    \    case 44:\n        result.append(43)\n    case 45:\n        result.append(44)\n\
    \    case 46:\n        result.append(45)\n    case 47:\n        result.append(46)\n\
    \    case 48:\n        result.append(47)\n    case 49:\n        result.append(48)\n\
    \    case 50:\n        result.append(49)\n    case 51:\n        result.append(50)\n\
    \    case 52:\n        result.append(51)\n    case 53:\n        result.append(52)\n\
    \    case 54:\n        result.append(53)\n    case 55:\n        result.append(54)\n\
    \    case 56:\n        result.append(55)\n    case 57:\n        result.append(56)\n\
    \    case 58:\n        result.append(57)\n    case 59:\n        result.append(58)\n\
    \    case 60:\n        result.append(59)\n    case 61:\n        result.append(",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result", "    var result = [Int]()\n    var a = Int(3)\n   \
    \ var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n    var x = Int(1)\n    var y = Int(1)\n\
    \    var z = Int(1)\n    var a = Int(1)\n    var b = Int(1)\n    var c = Int(1)\n\
    \    var d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n\
    \    var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n    var x = Int(1)\n    var y = Int(1)\n\
    \    var z = Int(1)\n    var a = Int(1)\n    var b = Int(1)\n    var c = Int(1)\n\
    \    var d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n\
    \    var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n",
  "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n <= 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    func tri(n : Int, result : [Int]) -> [Int] {\n        if n <= 1 {\n\
    \            result.append(1)\n            return result\n        }\n        \n\
    \        func tri(n : Int, result : [Int]) -> [Int] {\n            if n <= 1 {\n\
    \                result.append(1)\n                return result\n           \
    \ }\n            \n            func tri(n : Int, result : [Int]) -> [Int] {\n\
    \                if n <= 1 {\n                    result.append(1)\n         \
    \           return result\n                }\n                \n             \
    \   func tri(n : Int, result : [Int]) -> [Int] {\n                    if n <=\
    \ 1 {\n                        result.append(1)\n                        return\
    \ result\n                    }\n                    \n                    func\
    \ tri(n : Int, result : [Int]) -> [Int] {\n                        if n <= 1 {\n\
    \                            result.append(1)\n                            return\
    \ result\n                        }\n                        \n              \
    \          func tri(n : Int, result : [Int]) -> [Int] {\n                    \
    \        if n <= 1 {\n                                result.append(1)\n     \
    \                           return result\n                            }\n   \
    \                         \n                            func tri(n : Int, result\
    \ : [Int]) -> [Int] {\n                                if n <= 1 {\n         \
    \                           result.append(1)\n                               \
    \     return result\n                                }\n                     \
    \           \n                                func tri(n : Int, result : [Int])\
    \ -> [Int] {\n                                    if n <= 1 {\n              \
    \                          result.append(1)\n                                \
    \        return result\n                                    }\n              \
    \                      \n                                    func tri(n : Int,\
    \ result : [Int]) -> [Int] {\n                                        if n <=\
    \ 1 {\n                                            result.append(1)\n        \
    \                                    return result\n                         \
    \               }\n                                        \n                \
    \                        func tri(n : Int, result : [Int]) -> [Int] {\n      \
    \                                      if n <= 1 {\n                         \
    \                       result.append(1)\n                                   \
    \             return result\n                                            }\n \
    \                                           \n                               \
    \             func tri(n : Int, result : [Int]) -> [Int] {\n                 \
    \                               if n <= 1 {\n                                \
    \                    result.append(1)\n                                      \
    \              return result\n                                               \
    \ }\n                                                \n                      \
    \                          func tri(n : Int, result : [Int]) -> [Int] {\n    \
    \                                                if n <= 1 {\n               \
    \                                         result.append(1)\n                 \
    \                                       return result\n                      \
    \                              }\n                                           \
    \         \n                                                    func tri(n : Int,\
    \ result : [Int]) -> [Int] {\n                                               \
    \         if n <= 1 {\n                                                      \
    \      result.append(1)\n                                                    \
    \        return result\n                                                     \
    \   }\n                                                        \n            \
    \                                            func tri(n : Int, result : [Int])\
    \ -> [Int] {\n                                                            if n\
    \ <= 1 {\n                                                                result.append(1)\n\
    \                                                                return result\n\
    \                                                            }\n             \
    \                                               \n                           \
    \                                 func tri(n ", "    var result = [Int]()\n  \
    \  \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        return result\n    }\n    \n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n  \
    \      result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(1)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n \
    \   return result", "    var result = [Int]()\n    \n    if n == 1 {\n       \
    \ result.append(1)\n        return result;\n    }\n    \n    if n % 2 == 0 {\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result", "    var result = [Int]()\n    \n  \
    \  if n <= 1 {\n        return result\n    }\n    \n    if n % 2 == 0 {\n    \
    \    result.append(1)\n        result.append(n / 2)\n    } else {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    for _ in 1...n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first = second\n        second = third\n        third = first + second\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n    } else {\n\
    \        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    var tri1 = 1\n    var tri2 =\
    \ 1\n    var tri3 = 1\n    if n % 2 == 0 {\n        tri1 = tri1 + tri2\n     \
    \   tri2 = tri3\n        tri3 = tri1 + tri2\n    }\n    for _ in 1...n {\n   \
    \     result.append(tri3)\n        tri3 = tri1 + tri2\n        tri2 = tri3\n \
    \       tri1 = tri1 + tri2\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    \n    return result", "    var result = [Int]()\n    \n    switch\
    \ n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n    case 2:\
    \ result.append(3)\n    default:\n        let firstTri = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        result.append(firstTri)\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var first = 0\n    var second = 1\n    var third = 1\n    var fourth = 1\n\
    \    for _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        result.append(fourth)\n        first =\
    \ second\n        second = third\n        third = fourth\n        fourth = first\
    \ + second + third\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n    \
    \    return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 2 {\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \        result.append(tri(n + 1))\n        return result\n    }\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    result.append(tri(n + 1))\n    return result", "   \
    \ var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    \
    \    return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result", "    var result = [Int]()\n    if n == 0 {\n      \
    \  result.append(0)\n        return result;\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    if n == 2 {\n        result.append(3)\n  \
    \      return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result", "    var result = [Int]()\n    var a = Int(3)\n  \
    \  var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result;\n    }\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(5)\n\
    \    }\n    \n    for _ in 1...n {\n        result.append(result[-1] + result[-2])\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n == 3 {\n        result.append(3)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "    var\
    \ result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result",
  "    var result = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n\
    \    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(0)\n    var o = Int(1)\n\
    \    var p = Int(2)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(0)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n\
    \    var x = Int(2)\n    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(2)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(0)\n    var o = Int(1)\n    var p = Int(2)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(0)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(1)\n    var x = Int(2)\n    var y = Int(1)\n\
    \    var z = Int(2)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n\
    \    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(0)\n    var o = Int(1)\n\
    \    var p = Int(2)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(0)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n\
    \    var x = Int(2)\n    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(2)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(0)\n    var o = Int(1)\n    var p = Int(2)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(0)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(1)\n", "    var result = [Int]()\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result", "    var result = [Int]()\n    var tri1 = 1\n    var\
    \ tri2 = 1\n    var tri3 = 1\n    if n % 2 == 0 {\n        tri1 = tri1 + tri2\n\
    \        tri2 = tri1 + tri3\n        tri3 = tri1 + tri2\n    }\n    for _ in 1...n\
    \ {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri1\
    \ + tri3\n        tri3 = tri1 + tri2\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(3)\n        return result\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(1)\n        result.append(n / 2)\n    } else\
    \ {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n  \
    \  \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result", "    var result = [Int]()\n    var tri1 = 3\n    var tri2\
    \ = 1\n    var tri3 = 2\n    if n % 2 == 0 {\n        tri1 = tri1 + tri2\n   \
    \     tri2 = tri1 + tri3\n        tri3 = tri2 + tri1\n    }\n    for _ in 1...n\
    \ {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri1\
    \ + tri3\n        tri3 = tri2 + tri1\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2))\n   \
    \ }\n    return result", "    var result = [Int]()\n    if n == 0 {\n        return\
    \ result;\n    }\n    if n == 1 {\n        result.append(3)\n        return result;\n\
    \    }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result =\
    \ [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n   \
    \ var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n    var x = Int(1)\n    var y = Int(1)\n\
    \    var z = Int(1)\n    var a = Int(1)\n    var b = Int(1)\n    var c = Int(1)\n\
    \    var d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n\
    \    var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n", "    var result = [Int]()\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)", "    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    \n    let firstTri = tri(n\
    \ - 1)\n    let secondTri = tri(n - 2)\n    \n    result.append(firstTri[0] +\
    \ secondTri[0])\n    result.append(firstTri[1] + secondTri[1])\n    result.append(firstTri[2]\
    \ + secondTri[2])\n    \n    return result", "    var result = [Int]()\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  \n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n <= 0 {\n\
    \        return result\n    }\n    \n    switch n {\n    case 1:\n        result.append(3)\n\
    \    case 2:\n        result.append(1)\n        result.append(3)\n    case 3:\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \    case 4:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n    case 5:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \    case 6:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \    case 7:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n    case 8:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \    case 9:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \    case 10:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n    case 11:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \    case 12:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \    case 13:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n    case 14:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \    case 15:\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    if n == 2 {\n        result.append(0)\n    \
    \    result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(3)\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result;\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    \n  \
    \  if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    var\
    \ a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n   \
    \ var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(0)\n    var l = Int(1)\n\
    \    var m = Int(0)\n    var n = Int(1)\n    var o = Int(0)\n    var p = Int(1)\n\
    \    var q = Int(0)\n    var r = Int(1)\n    var s = Int(0)\n    var t = Int(1)\n\
    \    var u = Int(0)\n    var v = Int(1)\n    var w = Int(0)\n    var x = Int(1)\n\
    \    var y = Int(0)\n    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(0)\n    var l = Int(1)\n    var m = Int(0)\n    var n = Int(1)\n\
    \    var o = Int(0)\n    var p = Int(1)\n    var q = Int(0)\n    var r = Int(1)\n\
    \    var s = Int(0)\n    var t = Int(1)\n    var u = Int(0)\n    var v = Int(1)\n\
    \    var w = Int(0)\n    var x = Int(1)\n    var y = Int(0)\n    var z = Int(1)\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(0)\n    var l = Int(1)\n\
    \    var m = Int(0)\n    var n = Int(1)\n    var o = Int(0)\n    var p = Int(1)\n\
    \    var q = Int(0)\n    var r = Int(1)\n    var s = Int(0)\n    var t = Int(1)\n\
    \    var u = Int(0)\n    var v = Int(1)\n    var w = Int(0)\n    var x = Int(1)\n\
    \    var y = Int(0)\n    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(0)\n    var l = Int(1)\n    var m = Int(0)\n    var n = Int(1)\n\
    \    var o = Int(0)\n    var p = Int(1)\n    var q = Int(0)\n    var r = Int(1)\n\
    \    var s = Int(0)\n    var t = Int(1)\n    var u = Int(0)\n    var v = Int(1)\n\
    \    var w = Int(0)\n", "    var result = [Int]()\n    \n    if n <= 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(n)\n        result.append(n + 2)\n    } else {\n  \
    \      result.append(n)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n\
    \ == 0 {\n        result.append(1)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(0)\n        result.append(1)\n       \
    \ result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    result.append(3)\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n    }\n    result.append(0)\n    result.append(1)\n    result.append(2)\n\
    \    result.append(3)\n    result.append(4)\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2) + tri(n + 3)", "    var result = [Int]()\n    \n \
    \   if n == 0 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    \n    if n == 1 {\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            a += b\n     \
    \       b += c\n        } else {\n            b += a\n            c += b\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var firstTribonacciNumber:\
    \ Int\n    var secondTribonacciNumber: Int\n    var thirdTribonacciNumber: Int\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        firstTribonacciNumber = 1\n        secondTribonacciNumber\
    \ = 2\n        thirdTribonacciNumber = 1\n    } else {\n        firstTribonacciNumber\
    \ = 1\n        secondTribonacciNumber = 1\n        thirdTribonacciNumber = 2\n\
    \    }\n    \n    for i in 1...n {\n        result.append(thirdTribonacciNumber)\n\
    \        thirdTribonacciNumber = secondTribonacciNumber + firstTribonacciNumber\n\
    \        secondTribonacciNumber = firstTribonacciNumber\n        firstTribonacciNumber\
    \ = thirdTribonacciNumber\n    }\n    \n    return result", "    var result =\
    \ [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n    }\n    \n    if n % 2 == 1 {\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n    }\n    \n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n    result.append(88)\n    result.append(89)\n\
    \    result.append(90)\n    result.append(91)\n    result.append(92)\n    result.append(93)\n\
    \    result.append(94)\n", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result;\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n <=\
    \ 1 {\n        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n / 2)\n    } else {\n        result.append(1)\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n <= 1 {\n        return result\n\
    \    }\n    \n    var first = 1\n    var second = 2\n    var third = 3\n    \n\
    \    for _ in 1...n {\n        result.append(first)\n        \n        if n %\
    \ 2 == 0 {\n            third = first + second\n            first = second\n \
    \           second = third\n        } else {\n            third = first + second\n\
    \            first = second\n            second = third\n        }\n    }\n  \
    \  \n    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 0 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    \n    if n == 1 {\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n    } else {\n        result.append(3)\n        result.append(1\
    \ + n / 2)\n        if n % 2 == 0 {\n            result.append(1 + n / 2 + n /\
    \ 2)\n        }\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n <= 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(n)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n == 1 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n       \
    \ result.append(n)\n        result.append(n + 2)\n        return result\n    }\n\
    \    \n    result.append(1)\n    result.append(n)\n    result.append(n + 2)\n\
    \    result.append(n + 3)\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    default:\n        let firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        result.append(firstTribonacci)\n   \
    \ }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n  \
    \      result.append(1)\n        return result\n    }\n    if n == 2 {\n     \
    \   result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n    \
    \    result.append(1)\n        result.append(3)\n    }\n    else {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n    }\n    for _ in 1...n\
    \ {\n        result.append(result[n-2] + result[n-1])\n    }\n    return result",
  "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result;\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "   \
    \ var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    \
    \    return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    \        result.append(95)\n        result.append(96)\n        result.append(97)\n\
    \        result.append(98)\n", "    var result = [Int]()\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        result.append(1)\n        result.append(n)\n        result.append(n +\
    \ 1)\n        return result\n    }\n    \n    result.append(1)\n    result.append(n)\n\
    \    result.append(1)\n    result.append(n)\n    result.append(n + 1)\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n       \
    \ result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    var first = 3\n    var second = 1\n\
    \    var third = 1\n    var fourth = 1\n    var fifth = 1\n    var sixth = 1\n\
    \    var seventh = 1\n    var eighth = 1\n    var nineth = 1\n    var tenth =\
    \ 1\n    var eleventh = 1\n    var twelfth = 1\n    var thirteenth = 1\n    var\
    \ fourteenth = 1\n    var fifteenth = 1\n    var sixteenth = 1\n    var seventeenth\
    \ = 1\n    var eighteenth = 1\n    var nineteenth = 1\n    var twentieth = 1\n\
    \    var twentyfirst = 1\n    var twentysecond = 1\n    var twentythird = 1\n\
    \    var twentyfourth = 1\n    var twentyfifth = 1\n    var twentysixth = 1\n\
    \    var twentyseventh = 1\n    var twentyeighth = 1\n    var twentynineth = 1\n\
    \    var thirtieth = 1\n    var thirtyfirst = 1\n    var thirtysecond = 1\n  \
    \  var thirtythird = 1\n    var thirtyfourth = 1\n    var thirtyfifth = 1\n  \
    \  var thirtysixth = 1\n    var thirtyseventh = 1\n    var thirtyeighth = 1\n\
    \    var thirtynineth = 1\n    var fourtieth = 1\n    var fourtyfirst = 1\n  \
    \  var fourtysecond = 1\n    var fourtythird = 1\n    var fourtyfourth = 1\n \
    \   var fourtyfifth = 1\n    var fourtysixth = 1\n    var fourtyseventh = 1\n\
    \    var fourtyeighth = 1\n    var fourtynineth = 1\n    var fiftieth = 1\n  \
    \  var fiftyfirst = 1\n    var fiftysecond = 1\n    var fiftythird = 1\n    var\
    \ fiftyfourth = 1\n    var fiftyfifth = 1\n    var fiftysixth = 1\n    var fiftyseventh\
    \ = 1\n    var fiftyeighth = 1\n    var fiftynineth = 1\n    var sixtieth = 1\n\
    \    var sixtyfirst = 1\n    var sixtysecond = 1\n    var sixtythird = 1\n   \
    \ var sixtyfourth = 1\n    var sixtyfifth = 1\n    var sixtysixth = 1\n    var\
    \ sixtyseventh = 1\n    var sixtyeighth = 1\n    var sixtynineth = 1\n    var\
    \ seventieth = 1\n    var seventyfirst = 1\n    var seventysecond = 1\n    var\
    \ seventythird = 1\n    var seventyfourth = 1\n    var se", "    var result =\
    \ [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    } else {\n   \
    \     result.append(1)\n        result.append(n / 2)\n        if n % 2 == 0 {\n\
    \            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    var a = 1\n    var b = 2\n  \
    \  var c = 3\n    for _ in 0..<n {\n        result.append(a)\n        if n % 2\
    \ == 0 {\n            result.append(b)\n        } else {\n            result.append(c)\n\
    \        }\n        a = b\n        b = c\n        c = a + b\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    switch n {\n    case 0:\n    \
    \    result.append(0)\n    case 1:\n        result.append(1)\n    case 2:\n  \
    \      result.append(3)\n    case 3:\n        result.append(2)\n    case 4:\n\
    \        result.append(3)\n    case 5:\n        result.append(4)\n    case 6:\n\
    \        result.append(5)\n    case 7:\n        result.append(6)\n    case 8:\n\
    \        result.append(7)\n    case 9:\n        result.append(8)\n    case 10:\n\
    \        result.append(9)\n    case 11:\n        result.append(10)\n    case 12:\n\
    \        result.append(11)\n    case 13:\n        result.append(12)\n    case\
    \ 14:\n        result.append(13)\n    case 15:\n        result.append(14)\n  \
    \  case 16:\n        result.append(15)\n    case 17:\n        result.append(16)\n\
    \    case 18:\n        result.append(17)\n    case 19:\n        result.append(18)\n\
    \    case 20:\n        result.append(19)\n    case 21:\n        result.append(20)\n\
    \    case 22:\n        result.append(21)\n    case 23:\n        result.append(22)\n\
    \    case 24:\n        result.append(23)\n    case 25:\n        result.append(24)\n\
    \    case 26:\n        result.append(25)\n    case 27:\n        result.append(26)\n\
    \    case 28:\n        result.append(27)\n    case 29:\n        result.append(28)\n\
    \    case 30:\n        result.append(29)\n    case 31:\n        result.append(30)\n\
    \    case 32:\n        result.append(31)\n    case 33:\n        result.append(32)\n\
    \    case 34:\n        result.append(33)\n    case 35:\n        result.append(34)\n\
    \    case 36:\n        result.append(35)\n    case 37:\n        result.append(36)\n\
    \    case 38:\n        result.append(37)\n    case 39:\n        result.append(38)\n\
    \    case 40:\n        result.append(39)\n    case 41:\n        result.append(40)\n\
    \    case 42:\n        result.append(41)\n    case 43:\n        result.append(42)\n\
    \    case 44:\n        result.append(43)\n    case 45:\n        result.append(44)\n\
    \    case 46:\n        result.append(45)\n    case 47:\n        result.append(46)\n\
    \    case 48:\n        result.append(47)\n    case 49:\n        result.append(48)\n\
    \    case 50:\n        result.append(49)\n    case 51:\n        result.append(50)\n\
    \    case 52:\n        result.append(51)\n    case 53:\n        result.append(52)\n\
    \    case 54:\n        result.append(53)\n    case 55:\n        result.append(54)\n\
    \    case 56:\n        result.append(55)\n    case 57:\n        result.append(56)\n\
    \    case 58:\n        result.append(57)\n    case 59:\n        result.append(58)\n\
    \    case 60:\n        result.append(59)\n    case 61:\n        result.append(",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n   \
    \     result.append(2)\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(2)\n    var f = Int(3)\n    var g = Int(1)\n   \
    \ var h = Int(2)\n    var i = Int(1)\n    var j = Int(2)\n    var k = Int(3)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(1)\n    var o = Int(2)\n\
    \    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(3)\n    var v = Int(1)\n    var w = Int(2)\n\
    \    var x = Int(1)\n    var y = Int(2)\n    var z = Int(1)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(2)\n\
    \    var f = Int(3)\n    var g = Int(1)\n    var h = Int(2)\n    var i = Int(1)\n\
    \    var j = Int(2)\n    var k = Int(3)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(3)\n\
    \    var v = Int(1)\n    var w = Int(2)\n    var x = Int(1)\n    var y = Int(2)\n\
    \    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(2)\n    var f = Int(3)\n    var g = Int(1)\n\
    \    var h = Int(2)\n    var i = Int(1)\n    var j = Int(2)\n    var k = Int(3)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(1)\n    var o = Int(2)\n\
    \    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(3)\n    var v = Int(1)\n    var w = Int(2)\n\
    \    var x = Int(1)\n    var y = Int(2)\n    var z = Int(1)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(2)\n\
    \    var f = Int(3)\n    var g = Int(1)\n    var h = Int(2)\n    var i = Int(1)\n\
    \    var j = Int(2)\n    var k = Int(3)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(3)\n\
    \    var v = Int(1)\n    var w = Int(2)\n", "    var result = [Int]()\n    \n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n\
    \    var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n\
    \    var thirteenthThree = [Int]()\n    var fourteenthThree = [Int]()\n    var\
    \ fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n    var seventeenthThree\
    \ = [Int]()\n    var eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n\
    \    var twentiethThree = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree\
    \ = [Int]()\n    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n\
    \    var seventiethThree = [Int]()\n    var eightiethThree = [Int]()\n    var\
    \ ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n    var thousandthThree\
    \ = [Int]()\n    var tenthousandthThree = [Int]()\n    var hundredthousandthThree\
    \ = [Int]()\n    var thousandthousandthThree = [Int]()\n    var onehundredthousandthThree\
    \ = [Int]()\n    var onethousandthousandthThree = [Int]()\n    var onehundredthousandthousandthThree\
    \ = [Int]()\n    var onethousandthousandthousandthThree = [Int]()\n    var onehundredthousandthousandthousandthThree\
    \ = [Int]()\n    var onethousandthousandthousandthousandthThree = [Int]()\n  \
    \  var onehundredthousandthousandthousandthousandthThree = [Int]()\n    var onethousandthousandthousandthousandthousandthThree\
    \ = [Int]()\n    var onehundredthousandthousandthousandthousandthousandthThree\
    \ = [Int]()\n    var onethousandthousandthousandthousandthousandthousandthousandthThree\
    \ = [Int]()\n    var onehundredthousandthousandthousand", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 0\
    \ {\n        result.append(0)\n        return result;\n    }\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n\
    \    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n\
    \    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n\
    \    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n\
    \    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n\
    \    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n\
    \    var y = Int(0)\n    var z = Int(0)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n\
    \    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n\
    \    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n\
    \    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n\
    \    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n\
    \    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n\
    \    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n\
    \    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n\
    \    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n\
    \    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result;\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n <= 0 {\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(3)\n    }\n    \n    if n % 2 == 1 {\n        result.append(1)\n\
    \    }\n    \n    for _ in 1...n / 2 {\n        result.append(result[-1] + result[-2])\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result;\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    \n  \
    \  if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result;\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(3)\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    if n % 2 == 0 {\n        for _ in\
    \ 0..<n {\n            result.append(a)\n            a = b\n            b = c\n\
    \            c = d\n            d = a + b + c\n        }\n    } else {\n     \
    \   for _ in 0..<n {\n            result.append(b)\n            a = c\n      \
    \      b = d\n            c = a + b + c\n            d = a + b + c\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n\
    \    case 1: result.append(1)\n    case 2: result.append(3)\n    case 3: result.append(3)\n\
    \    case 4: result.append(5)\n    case 5: result.append(5)\n    case 6: result.append(8)\n\
    \    case 7: result.append(8)\n    case 8: result.append(13)\n    case 9: result.append(13)\n\
    \    case 10: result.append(17)\n    case 11: result.append(17)\n    case 12:\
    \ result.append(21)\n    case 13: result.append(21)\n    case 14: result.append(25)\n\
    \    case 15: result.append(25)\n    case 16: result.append(29)\n    case 17:\
    \ result.append(29)\n    case 18: result.append(34)\n    case 19: result.append(34)\n\
    \    case 20: result.append(39)\n    case 21: result.append(39)\n    case 22:\
    \ result.append(44)\n    case 23: result.append(44)\n    case 24: result.append(49)\n\
    \    case 25: result.append(49)\n    case 26: result.append(54)\n    case 27:\
    \ result.append(54)\n    case 28: result.append(59)\n    case 29: result.append(59)\n\
    \    case 30: result.append(62)\n    case 31: result.append(62)\n    case 32:\
    \ result.append(67)\n    case 33: result.append(67)\n    case 34: result.append(71)\n\
    \    case 35: result.append(71)\n    case 36: result.append(76)\n    case 37:\
    \ result.append(76)\n    case 38: result.append(81)\n    case 39: result.append(81)\n\
    \    case 40: result.append(86)\n    case 41: result.append(86)\n    case 42:\
    \ result.append(91)\n    case 43: result.append(91)\n    case 44: result.append(96)\n\
    \    case 45: result.append(96)\n    case 46: result.append(101)\n    case 47:\
    \ result.append(101)\n    case 48: result.append(106)\n    case 49: result.append(106)\n\
    \    case 50: result.append(111)\n    case 51: result.append(111)\n    case 52:\
    \ result.append(116)\n    case 53: result.append(116)\n    case 54: result.append(121)\n\
    \    case 55: result.append(121)\n    case 56: result.append(126)\n    case 57:\
    \ result.append(126)\n    case 58: result.append(131)\n    case 59: result.append(131)\n\
    \    case 60: result.append(136)\n    case 61: result.append(136)\n    case 62:\
    \ result.append(141)\n    case 63: result.append(141)\n    case 64: result.append(146)\n\
    \    case 65: result", "    var result = [Int]()\n    var a = 2\n    var b = 2\n\
    \    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n        if n %\
    \ 2 == 0 {\n            c += a + b\n        } else {\n            c += b + a\n\
    \        }\n        a = b\n        b = c\n    }\n    return result", "    var\
    \ result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    \n    if n == 2 {\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n       \
    \ result.append(2)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n", "    var result = [Int]()\n    \n    if n <= 1 {\n \
    \       result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(1 + n / 2)\n    } else\
    \ {\n        result.append(1 + n / 2)\n        result.append(1 + n / 2)\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    if n == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    \n    var a = tri(n - 1)\n    var b = tri(n - 2)\n    var\
    \ c = tri(n + 1)\n    \n    result.append(a[0] + b[0] + c[0])\n    result.append(a[1]\
    \ + b[1] + c[1])\n    result.append(a[2] + b[2] + c[2])\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(3)\n        result.append(1)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result", "    var result = [Int]()\n    \n    if n == 1 {\n       \
    \ result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n  \
    \  \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    \n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n   \
    \     result.append(2)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(1)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(n - 1)\n\
    \        result.append(n + 1 )\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    \n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(1 + n / 2)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(1 + n / 2)\n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(n)\n        result.append(1 + n / 2)\n    } else\
    \ {\n        result.append(n)\n        result.append(1 + n / 2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(n)\n        result.append(n +\
    \ 2)\n        return result\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(n)\n    result.append(n + 2)\n    result.append(n + 3)\n  \
    \  return result"]
stop_tokens:
- "\n}"
