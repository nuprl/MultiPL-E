name: HumanEval_103_rounded_avg
language: swift
prompt: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
  \ n and m, and your task is to compute the\n/// average of the integers from n through\
  \ m (including n and m). \n/// Round the answer to the nearest integer and convert\
  \ that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>>\
  \ rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m:\
  \ 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\"\
  )\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n:\
  \ Int, m: Int) -> Result<String, Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"\
  ))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
  \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
  \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
  0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
  ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
  \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
  \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
  assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
  \ == .success(\"0b101\"))"
completions: ["    if n > m {\n        return .failure(-1)\n    }\n    let sum = n\
    \ * m / 2\n    let remainder = n * m % 2\n    let result = String(format: \"0b%0*b\"\
    , remainder, sum)\n    return .success(result)", "    let sum = n * m / 2\n  \
    \  let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ sum, Int(ceil(log2(Float(avg)))), avg)\n    guard let bin = binary.unicodeScalars.first\
    \ else { return .failure(-1) }\n    return .success(bin)", "    let sum = n *\
    \ m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\", UInt8(avg))\n\
    \    guard let bin = binary.unicodeScalars.first else {\n        return .failure(-1)\n\
    \    }\n    return .success(bin)", "    if n < m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n - m) / 2\n    let binary = String(sum, radix: 2)\n  \
    \  return .success(binary)", "    \n    let result = n / m\n    let remainder\
    \ = n % m\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", result.count, result))\n    }\n    \n    return .failure(-1)", " \
    \   let sum = n * m\n    let avg = sum / 2\n    let remainder = sum % 2\n    \n\
    \    if remainder == 0 {\n        return .success(String(format: \"0b%b\", avg))\n\
    \    } else {\n        return .failure(-1)\n    }", "    if n >= m {\n       \
    \ return .failure(-1)\n    }\n    let sum = n * m / 2\n    let binary = String(sum)\n\
    \    let rounded = Int(binary)\n    return .success(binary)", "    let sum = n\
    \ + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0,\
    \ Int(avg), 0, Int(sum))\n    return binary.isValid() ? .success(binary) : .failure(-1)",
  "    let sum = n * m\n    let avg = sum / Double(n)\n    let rounded = Int(round(avg))\n\
    \    return if rounded == avg { return .success(String(rounded)) } else { return\
    \ .failure(-1) }", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n \
    \   let result = (sum + remainder).rounded(.towardZero)\n    \n    if result <\
    \ 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(result))",
  "    let n = n.toInt()\n    let m = m.toInt()\n    \n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let binary = String(sum,\
    \ radix: 2)\n    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else\
    \ {\n        return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let\
    \ remainder = n % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", Int(m), sum))\n    }\n    \n    return .failure(-1)", "    let result\
    \ = n / m\n    let remainder = n % m\n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", result.bitCount, result))\n    }\n    return\
    \ .failure(-1)", "    if n > m {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    return .success(String(format:\
    \ \"0b%0*b\", (remainder + 1).count, remainder))", "    let sum = n + m\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ n, m, avg)\n    return binary.roundToInt().map(String.init)", "    let sum =\
    \ n * m / 2\n    let remainder = n * m % 2\n    if remainder == 0 {\n        return\
    \ .success(String(sum))\n    }\n    return .failure(-1)", "    let result = n\
    \ / m\n    if result > m {\n        return .failure(-1)\n    }\n    return .success(String(format:\
    \ \"0b%0*b\", result.magnitude, result))", "    guard n >= 0 && m >= 0 else {\n\
    \        return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let avg\
    \ = sum / 2\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    \n    if binary == \"0b0\" {\n        return .success(binary)\n  \
    \  }\n    \n    return .failure(-1)", "    let result = n / m\n    let remainder\
    \ = n % m\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", m.toBinary(), result))\n    }\n    \n    return .failure(-1)", " \
    \   if n > m {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n  \
    \  for i in 0..<m {\n        sum += i\n    }\n    \n    var result = \"\"\n  \
    \  for i in 0..<n {\n        let digit = sum % 2 == 0 ? \"0\" : \"1\"\n      \
    \  result += digit\n        sum /= 2\n    }\n    \n    return .success(result)",
  "    guard n >= m else {\n        return .failure(-1)\n    }\n    \n    var sum\
    \ = 0\n    for i in 0..<m {\n        sum += n\n        n -= 1\n    }\n    \n \
    \   return .success(String(format: \"0b%0*b\", Int(log2(Double(sum))+1), sum))",
  "    guard n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n \
    \   \n    var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n       \
    \ sum += i\n        count += 1\n    }\n    \n    for i in 0..<m {\n        sum\
    \ += i\n        count += 1\n    }\n    \n    if count == 0 {\n        return Result.failure(-1)\n\
    \    }\n    \n    return Result.success(String(format: \"0b%0*b\", count, String(sum)))",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%b\", UInt8(avg))\n    guard let n = Int(binary) else {\n        return .failure(-1)\n\
    \    }\n    return .success(n)", "    guard n >= m else {\n        return .failure(-1)\n\
    \    }\n    \n    let n = n.toBinary()\n    let m = m.toBinary()\n    \n    var\
    \ sum = 0\n    for i in 0..<m.count {\n        sum += Int(n[i]) * Int(m[i])\n\
    \    }\n    \n    let avg = Int(sum) / Int(m.count)\n    \n    let bin = String(format:\
    \ \"%0*b%0*b\", m.count, n, m.count, avg)\n    \n    return .success(bin)", " \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    let bin = String(format: \"\
    %0*b\", Int(ceil(log2(Float(sum)))), avg)\n    return bin.count == 1 ?\n     \
    \   .success(bin.prefix(1)) :\n        .failure(-1)", "    guard n >= 0 && m >=\
    \ 0 else {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n    var\
    \ count = 0\n    \n    for i in 0..<n {\n        sum += i\n        count += 1\n\
    \    }\n    \n    for i in 0..<m {\n        sum += i\n        count += 1\n   \
    \ }\n    \n    if n == m {\n        return .success(String(format: \"0b%0*b\"\
    , count, String(sum)))\n    }\n    \n    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(String(format: \"0b%0*b\", count, String(sum)))",
  "    let n = Int(n)\n    let m = Int(m)\n    \n    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m / 2\n    let remainder = n % 2\n    \n    let\
    \ result = String(format: \"0b%0*b\", Int(remainder), sum)\n    \n    if remainder\
    \ == 0 {\n        return .success(result)\n    }\n    \n    return .failure(-1)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(sum))\n    }\n    \n    return .failure(-1)",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    guard let bin = binary.data(using:\
    \ .utf8) else {\n        return .failure(-1)\n    }\n    return .success(bin.base64EncodedString())",
  "    let result = n / m\n    let remainder = n % m\n    \n    if remainder == 0\
    \ {\n        return .success(String(format: \"0b%0*b\", result.count, result))\n\
    \    }\n    \n    return .failure(-1)", "    let sum = n + m\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n\
    \    \n    if binary == String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\
    \ {\n        return .success(binary)\n    }\n    \n    return .failure(-1)", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n\
    \    var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    \n    var\
    \ count = 0\n    for i in 0..<m {\n        count += i\n    }\n    \n    if n ==\
    \ m {\n        return .success(String(format: \"0b%0*b\", count, sum))\n    }\n\
    \    \n    let avg = sum / count\n    \n    return .success(String(format: \"\
    0b%0*b\", count, round(avg)))", "    let result = n / m\n    let remainder = n\
    \ % m\n    if remainder == 0 {\n        return .success(String(format: \"0b%0*b\"\
    , result.magnitude, result))\n    } else {\n        return .failure(-1)\n    }",
  "    guard n >= m else { return .failure(-1) }\n    let sum = n * m / 2\n    let\
    \ binary = String(sum).binary\n    return .success(binary)", "    let result =\
    \ n / m\n    let remainder = n % m\n    \n    if result < 0 {\n        return\
    \ .failure(-1)\n    }\n    \n    return .success(String(format: \"0b%0*b\", (remainder\
    \ + 1).bitCount, result))", "    let n = n.toInt()\n    let m = m.toInt()\n  \
    \  \n    if n > m {\n        return .failure(-1)\n    }\n    \n    let sum = (n\
    \ - m) / 2\n    let binary = String(sum.toBinary())\n    \n    return .success(binary)",
  "    let n = n.toInt()\n    let m = m.toInt()\n    \n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = (n - m) / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", sum, sum, sum)\n    \n    return .success(binary)", "    let sum\
    \ = n * m + n\n    let avg = sum / 2\n    let binary = String(format: \"%b\",\
    \ UInt8(avg))\n    \n    if binary == String(format: \"%b\", UInt8(avg)) {\n \
    \       return .success(binary)\n    }\n    \n    return .failure(-1)", "    if\
    \ n >= m {\n        return .failure(-1)\n    }\n    let avg = (n + m) / 2\n  \
    \  let binary = String(format: \"%0*b%0*b\", avg - 1, avg - 1, avg)\n    return\
    \ .success(binary)", "    \n    if n < m {\n        return .failure(-1)\n    }\n\
    \    \n    var sum = 0\n    var count = 0\n    \n    for _ in 0..<m {\n      \
    \  sum += n\n        count += 1\n        n -= 1\n    }\n    \n    if count ==\
    \ 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", count, String(sum)))", "    let sum = n + m\n    let avg = sum /\
    \ 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n\
    \    guard let bin = binary.data(using: .utf8)?.base64EncodedString() else {\n\
    \        return .failure(-1) // invalid binary string\n    }\n    return .success(bin)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ sum = n * m / 2\n    let remainder = n * m % 2\n    guard remainder == 0 else\
    \ {\n        return .failure(-1)\n    }\n    let result = String(format: \"0b%0*b\"\
    , Int(sum), Int(remainder))\n    return .success(result)", "    guard n >= 0 &&\
    \ m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let max = (m +\
    \ n) / 2\n    let min = n - max\n    \n    let result = (min ..< max).reduce(0)\
    \ { (result, element) in\n        let result = result + element\n        return\
    \ result % 2\n    }\n    \n    if result > max {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(String(format: \"0b%0*b\", result.count, result))",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", n, m, sum)\n    return binary.roundToInt()\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    let remainder = sum % 2\n\
    \    \n    if remainder == 0 {\n        return .success(String(format: \"0b%0*b\"\
    , n, avg))\n    } else {\n        return .failure(-1)\n    }", "    let sum =\
    \ n ... m\n    let avg = sum.average()\n    \n    if avg < 0 {\n        return\
    \ .failure(-1)\n    }\n    \n    return .success(formatter.string(from: avg))",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let n = n.toBinary()\n    let m = m.toBinary()\n    \n    var sum = 0\n  \
    \  for i in 0..<n.count {\n        sum += Int(n[i]) * Int(m[i])\n    }\n    \n\
    \    let avg = Int(sum) / Int(n.count)\n    \n    let bin = String(format: \"\
    %0*b%0*b\", n.count, n, m.count, m)\n    \n    return .success(bin)", "    guard\
    \ n >= m else {\n        return .failure(-1)\n    }\n    \n    let avg = (n -\
    \ m) / 2.0\n    let binary = String(format: \"%0*b%0*b\", avg, n-m, avg)\n   \
    \ return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let avg = (n + m) / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", avg - n, avg - m, avg)\n    \n    return .success(binary)", " \
    \   let sum = n * m + n\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", 0, n, 0, m, 0, avg)\n    guard let result = Int(binary) else {\n\
    \        return .failure(-1)\n    }\n    return .success(binary)", "    let result\
    \ = n / m\n    let remainder = n % m\n    \n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", m.bitCount, result))\n    }\n    \n    return\
    \ .failure(-1)", "    guard n >= m else {\n        return .failure(-1)\n    }\n\
    \    let avg = n / m\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(m))).magnitude,\
    \ avg, Int(ceil(log2(n))).magnitude)\n    return .success(binary)", "    let sum\
    \ = n * m / 2\n    let remainder = n * m % 2\n    if remainder == 0 {\n      \
    \  return .success(String(format: \"0b%0*b\", n, sum))\n    }\n    return .failure(-1)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(format: \"0b%0*b\", n, sum))\n    }\n\
    \    \n    return .failure(-1)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = n * m / 2\n    let remainder = n * m % 2\n    let result\
    \ = String(format: \"0b%0*b\", Int(remainder), Int(sum))\n    return .success(result)",
  "    let sum = n * m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", Int(log2(Double(sum))), n, m, avg)\n    guard let bin = binary.data(using:\
    \ .utf8)?.base64EncodedString() else {\n        return .failure(-1)\n    }\n \
    \   return .success(bin)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m / 2\n    let avg = sum / 2\n    let\
    \ binary = String(format: \"%b\", Int(avg))\n    return .success(binary)", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n\
    \    let sum = n * m / 2\n    let avg = sum / 2\n    let bin = String(format:\
    \ \"%0*b\", Int(ceil(log2(Double(sum)))), String(avg))\n    return .success(bin)",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(m), Int(sum), Int(n))\n    if binary == String(format: \"\
    %0*b%0*b\", Int(m), Int(sum), Int(n)) {\n        return .success(binary)\n   \
    \ }\n    return .failure(-1)", "    if n <= m {\n        return .success(String(format:\
    \ \"0b%0*b\", n, m))\n    }\n    return .failure(-1)", "    let sum = n + m\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg),\
    \ 0, Int(sum))\n    guard let bin = binary.data(using: .utf8) else { return .failure(-1)\
    \ }\n    return .success(bin.base64EncodedString())", "    guard n >= 0 && m >=\
    \ 0 else {\n        return .failure(-1)\n    }\n    \n    let result = (n - m).rounded()\
    \ / 2.0\n    let result = String(format: \"0b%08b\", result)\n    \n    if result\
    \ < 0 {\n        return .failure(-1)\n    }\n    \n    return .success(result)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var result = 0\n    var sum = 0\n    \n    for i in 1...m {\n        sum +=\
    \ i\n    }\n    \n    for i in 1...n {\n        result += i\n    }\n    \n   \
    \ if sum > m {\n        return .failure(-1)\n    }\n    \n    let avg = result\
    \ / m\n    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(avg)))),\
    \ avg, Int(ceil(log2(Double(m)))))\n    \n    return .success(binary)", "    let\
    \ sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder == 0\
    \ {\n        return .success(String(sum))\n    }\n    \n    return .failure(-1)",
  "    let sum = n + m\n    let avg = sum / 2\n    let result = String(format: \"\
    0b%0*b\", Int(log2(Double(sum))).magnitude, avg)\n    \n    if result.count ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    return .failure(-1)",
  "    if n > m {\n        return .failure(-1)\n    }\n    let n = n.toInt()\n   \
    \ let m = m.toInt()\n    let sum = (n - m) / 2\n    let binary = String(sum.toBinary())\n\
    \    let result = binary.toInt()\n    return .success(String(result))", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    var sum\
    \ = 0\n    var count = 0\n    \n    for i in 0..<n {\n        sum += i\n     \
    \   count += 1\n    }\n    \n    for i in 0..<m {\n        sum += i\n        count\
    \ += 1\n    }\n    \n    if count == 0 {\n        return .failure(-1)\n    }\n\
    \    \n    let avg = sum / count\n    \n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(count)))), &sum, &avg)\n    \n    return .success(binary)",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b\", Int(ceil(log2(Double(sum)))), avg)\n    return binary.isSuccess ?\
    \ binary.value : -1", "    guard n >= m else {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n \
    \   return .success(String(format: \"0b%0*b\", remainder, sum))", "    guard n\
    \ >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let n =\
    \ Int(n)\n    let m = Int(m)\n    \n    if n == m {\n        return .success(String(format:\
    \ \"0b%b\", n))\n    }\n    \n    let mid = n / 2\n    let left = n % 2\n    let\
    \ right = m % 2\n    \n    let midStr = String(format: \"0b%b\", mid)\n    let\
    \ leftStr = String(format: \"0b%b\", left)\n    let rightStr = String(format:\
    \ \"0b%b\", right)\n    \n    let leftAvg = midStr + leftStr\n    let rightAvg\
    \ = midStr + rightStr\n    \n    let leftAvg = leftAvg.rounded()\n    let rightAvg\
    \ = rightAvg.rounded()\n    \n    let leftBin = leftAvg.binary()\n    let rightBin\
    \ = rightAvg.binary()\n    \n    let leftBinStr = leftBin.prefix(8)\n    let rightBinStr\
    \ = rightBin.prefix(8)\n    \n    let leftBinStr2 = leftBinStr.prefix(2)\n   \
    \ let rightBinStr2 = rightBinStr.prefix(2)\n    \n    let leftBinStr3 = leftBinStr2.prefix(3)\n\
    \    let rightBinStr3 = rightBinStr2.prefix(3)\n    \n    let leftBinStr4 = leftBinStr3.prefix(4)\n\
    \    let rightBinStr4 = rightBinStr3.prefix(4)\n    \n    let leftBinStr5 = leftBinStr4.prefix(5)\n\
    \    let rightBinStr5 = rightBinStr4.prefix(5)\n    \n    let leftBinStr6 = leftBinStr5.prefix(6)\n\
    \    let rightBinStr6 = rightBinStr5.prefix(6)\n    \n    let leftBinStr7 = leftBinStr6.prefix(7)\n\
    \    let rightBinStr7 = rightBinStr6.prefix(7)\n    \n    let leftBinStr8 = leftBinStr7.prefix(8)\n\
    \    let rightBinStr8 = rightBinStr7.prefix(8)\n    \n    let leftBinStr9 = leftBinStr8.prefix(9)\n\
    \    let rightBinStr9 = rightBinStr8.prefix(9)\n    \n    let leftBinStr10 = leftBinStr9.prefix(10)\n\
    \    let rightBinStr10 = rightBinStr9.prefix(10)\n    \n    let leftBinStr11 =\
    \ leftBinStr10.prefix(11)\n    let rightBinStr11 = rightBinStr10.prefix(11)\n\
    \    \n    let leftBinStr12 = leftBinStr11.prefix(12)\n    let rightBinStr12 =\
    \ rightBinStr11.prefix(12)\n    \n    let leftBinStr13 = leftBinStr12.prefix(",
  "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), avg, Int(ceil(log2(Double(sum)))))\n\
    \    return binary.isValid.map { binary }", "    if n >= m {\n        return .failure(-1)\n\
    \    }\n    var sum = 0\n    var count = 0\n    for _ in 0..<m {\n        sum\
    \ += n\n        count += 1\n        n -= 1\n    }\n    return .success(String(format:\
    \ \"0b%0*b\", count, String(sum)))", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    var\
    \ avg = sum / Double(n)\n    avg = round(avg)\n    var binary = \"\"\n    for\
    \ i in 0..<n {\n        if i == 0 {\n            binary += \"0\"\n        } else\
    \ {\n            binary += \"1\"\n        }\n    }\n    for i in 0..<m {\n   \
    \     if i == 0 {\n            binary += \"0\"\n        } else {\n           \
    \ binary += \"1\"\n        }\n    }\n    return .success(String(binary) + String(avg))",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(format: \"0b%0*b\", n, sum))\n    }\n\
    \    \n    return .failure(-1)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n\
    \    \n    var result = 0\n    for i in 0..<m {\n        result += sum\n    }\n\
    \    \n    if n == m {\n        return .success(String(format: \"0b%0*b\", result.count,\
    \ result))\n    }\n    \n    return .success(String(format: \"0b%0*b\", result.count,\
    \ result.truncatingRemainder(dividingBy: m)))", "    guard n >= m else {\n   \
    \     return Result.failure(-1)\n    }\n    let sum = n * m / 2\n    let avg =\
    \ sum / 2\n    let binary = String(format: \"%b\", UInt8(avg))\n    return Result.success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(format: \"0b%0*b\", Int(sum), Int(m)))\n\
    \    } else {\n        return .failure(-1)\n    }", "    guard n >= 0 && m >=\
    \ 0 else {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n    for\
    \ i in 0..<n {\n        sum += i\n    }\n    \n    for i in 0..<m {\n        sum\
    \ += i\n    }\n    \n    let avg = sum / Double(m)\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(m)))), &avg, Int(ceil(log2(Double(n)))))\n\
    \    \n    return .success(binary)", "    let result = n / m\n    let remainder\
    \ = n % m\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", m.bitCount, result))\n    }\n    \n    return .failure(-1)", " \
    \   let sum = n + m\n    let avg = sum / 2\n    let result = String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(avg)))), String(sum), String(avg))\n    \n   \
    \ if result == \"0b1111\" {\n        return .success(result)\n    }\n    \n  \
    \  if result == \"0b11010\" {\n        return .failure(-1)\n    }\n    \n    return\
    \ .success(result)", "    let result = n / m\n    if result < 0 {\n        return\
    \ .failure(-1)\n    }\n    return .success(String(format: \"0b%0*b\", Int(log2(result)\
    \ + 1), result))", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m\n    let avg = sum / Double(n)\n    \n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), &avg, Int(ceil(log2(Double(m)))))\n\
    \    \n    return .success(binary)", "    \n    let sum = n + m\n    let avg =\
    \ sum / 2\n    \n    if avg < n {\n        return .failure(-1)\n    }\n    \n\
    \    let binary = String(format: \"%b\", avg)\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ avg = n / m\n    let remainder = n % m\n    let result = String(format: \"0b%0*b\"\
    , (remainder).count, \"0\")\n    return .success(result)", "    guard n >= 0 &&\
    \ m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum = n * m\n\
    \    let avg = sum / Double(m)\n    let result = String(format: \"0b%0*b\", Int(m),\
    \ avg)\n    \n    if result.count < m {\n        return .failure(-1)\n    }\n\
    \    \n    return .success(result)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    let result = (n - m) / 2.0\n    let result = Int(result)\n \
    \   \n    if result > 0 {\n        return .success(String(format: \"0b%0*b\",\
    \ result.magnitude, result))\n    } else {\n        return .failure(-1)\n    }",
  "    if n > m {\n        return .failure(-1)\n    }\n    \n    let sum = n * m /\
    \ 2\n    let remainder = n * m % 2\n    \n    return .success(String(format: \"\
    0b%0*b\", remainder, sum))", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m\n    let avg = sum / Double(m)\n\
    \    \n    let binary = String(format: \"%0*b%0*b\", Int(m), sum, Int(n))\n  \
    \  \n    if binary == String(format: \"%0*b%0*b\", Int(m), sum, Int(m)) {\n  \
    \      return .success(binary)\n    }\n    \n    return .failure(-1)", "    let\
    \ sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(sum)))), n, m, avg)\n    \n    if binary == \"0b1111\"\
    \ {\n        return .success(binary)\n    }\n    \n    if binary == \"0b11010\"\
    \ {\n        return .failure(-1)\n    }\n    \n    return .failure(Int(ceil(log2(Double(sum)))))",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", Int(log2(Double(sum))).magnitude, n, m, avg)\n    \n    if binary\
    \ == \"\" {\n        return .failure(-1)\n    }\n    \n    return .success(binary)",
  "    let sum = n + m\n    let avg = sum / 2\n    let result = String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(sum)))), String(repeating: 0, count: Int(ceil(log2(Float(sum)))\
    \ - 1)), String(repeating: 0, count: Int(ceil(log2(Float(avg))) - 1)), String(repeating:\
    \ 1, count: Int(ceil(log2(Float(avg))) - 1)), String(repeating: 0, count: Int(ceil(log2(Float(avg)))\
    \ - 1)), String(repeating: 1, count: Int(ceil(log2(Float(avg))) - 1)), String(repeating:\
    \ 0, count: Int(ceil(log2(Float(avg))) - 1)), String(repeating: 1, count: Int(ceil(log2(Float(avg)))\
    \ - 1)))\n    return result.isSuccess ? .success(result) : .failure(sum)", " \
    \   let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    guard let bin = binary.data(using:\
    \ .utf8) else { return .failure(-1) }\n    return .success(bin.base64EncodedString())",
  "    let result = n / m\n    let remainder = n % m\n    guard remainder == 0 else\
    \ { return .failure(-1) }\n    return .success(String(format: \"0b%0*b\", remainder,\
    \ result))", "    let sum = n ... m\n    let avg = sum.average()\n    let bin\
    \ = String(format: \"%0*b\", Int(ceil(log10(Double(sum.count)))+1), avg)\n   \
    \ return bin.count == bin.characters.count ? .success(bin) : .failure(-1)", " \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), &avg, &sum)\n    \n    if binary\
    \ == \"\" {\n        return .failure(-1)\n    }\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    return .success(String(format:\
    \ \"0b%0*b\", remainder, sum))", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    let result = (n - m) / 2.0\n    let result = Int(result)\n \
    \   let result = result * 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2\n    let result = result + m\n    let result = result\
    \ / 2\n    let result = result + n\n    let result = result / 2\n    let result\
    \ = result + m\n    let result = result / 2\n    let result = result + n\n   \
    \ let result = result / 2", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let n = n.toInt()\n    let m = m.toInt()\n  \
    \  \n    if n == m {\n        return .success(String(format: \"0b%b\", n))\n \
    \   }\n    \n    let mid = n + (m / 2)\n    let midString = String(format: \"\
    0b%b\", mid)\n    \n    if n <= m {\n        return .success(midString)\n    }\n\
    \    \n    let leftString = midString.substringToIndex(midString.startIndex.advancedBy(1))\n\
    \    let rightString = midString.substringFromIndex(midString.endIndex.advancedBy(-1))\n\
    \    \n    return .success(leftString + rightString)", "    if n < m {\n     \
    \   return .failure(-1)\n    }\n    \n    var result = 0\n    for i in 0..<m {\n\
    \        result += pow(2, n - i)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", result.count, result))", "    if n < m {\n        return .failure(-1)\n\
    \    }\n    var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    var\
    \ avg = sum / Double(n)\n    var binary = \"\"\n    for i in 0..<n {\n       \
    \ binary += String(format: \"%0*b\", i, avg)\n    }\n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , 0, n, 0, m, 0, avg)\n    return .success(binary)", "    let sum = n * m\n  \
    \  let avg = sum / 2\n    let binary = String(format: \"%b\", Int(avg))\n    guard\
    \ let n = Int(binary) else {\n        return .failure(-1)\n    }\n    return .success(binary)",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b\", Int(ceil(log2(Double(sum)))), avg)\n    if binary == \"0b0\" {\n     \
    \   return .failure(-1)\n    }\n    return .success(binary)", "    guard n >=\
    \ 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n    \n    let\
    \ nBits = log2(n) + 1 // number of bits needed to represent n\n    let mBits =\
    \ log2(m) + 1 // number of bits needed to represent m\n    \n    // number of\
    \ bits needed to represent n + m\n    let nPlusMBits = nBits + mBits\n    \n \
    \   // number of bits needed to represent n / 2\n    let nHalfBits = nBits / 2\n\
    \    \n    // number of bits needed to represent m / 2\n    let mHalfBits = mBits\
    \ / 2\n    \n    // number of bits needed to represent n / 2 + m / 2\n    let\
    \ nHalfPlusMHalfBits = nHalfBits + mHalfBits\n    \n    // number of bits needed\
    \ to represent n / 2 + m / 2\n    let nHalfPlusMHalfBitsBits = nHalfPlusMHalfBits\
    \ * 2\n    \n    // number of bits needed to represent n / 2 + m / 2\n    let\
    \ nHalfPlusMHalfBitsBitsBits = nHalfPlusMHalfBitsBits * 2\n    \n    // number\
    \ of bits needed to represent n / 2 + m / 2\n    let nHalfPlusMHalfBitsBitsBitsBits\
    \ = nHalfPlusMHalfBitsBitsBits * 2\n    \n    // number of bits needed to represent\
    \ n / 2 + m / 2\n    let nHalfPlusMHalfBitsBitsBitsBitsBits = nHalfPlusMHalfBitsBitsBitsBits\
    \ * 2\n    \n    // number of bits needed to represent n / 2 + m / 2\n    let\
    \ nHalfPlusMHalfBitsBitsBitsBitsBitsBits = nHalfPlusMHalfBitsBitsBitsBits * 2\n\
    \    \n    // number of bits needed to represent n / 2 + m / 2\n    let nHalfPlusMHalfBitsBitsBitsBitsBitsBitsBits\
    \ = nHalfPlusMHalfBitsBitsBitsBits * 2\n    \n    // number of bits needed to\
    \ represent n / 2 + m / 2\n    let nHalfPlusMHalfBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nHalfPlusMHalfBitsBitsBitsBits * 2\n    \n    // number of bits needed to\
    \ represent n / 2 + m / 2\n    let nHalfPlusMHalfBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nHalfPlusMHalfBitsBitsBitsBits * 2\n    \n    // number of bits needed to\
    \ represent n ", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    var sum = 0\n    var count = 0\n    \n    for i in 0..<n {\n\
    \        sum += i\n        count += 1\n    }\n    \n    for i in 0..<m {\n   \
    \     sum += i\n        count += 1\n    }\n    \n    if count == 0 {\n       \
    \ return .failure(-1)\n    }\n    \n    return .success(String(format: \"0b%0*b\"\
    , count, sum))", "    \n    // TODO: Implement me!\n    \n    return .failure(-1)",
  "    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if sum < m {\n\
    \        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", (remainder + 1).bitLength, sum))", "    let sum = n + m\n    let\
    \ avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ &avg, &sum)\n    return binary.roundToInt().map(String.init)", "    \n    if\
    \ n > m {\n        return .failure(-1)\n    }\n    \n    let sum = n * m\n   \
    \ let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(log2(Double(sum))).magnitude,\
    \ String(sum), String(sum))\n    \n    return .success(binary)", "    if n > m\
    \ {\n        return .failure(-1)\n    }\n    \n    var sum = 0\n    var count\
    \ = 0\n    \n    for i in 0..<n {\n        sum += i\n        count += 1\n    }\n\
    \    \n    for i in 0..<m {\n        sum += i\n        count += 1\n    }\n   \
    \ \n    return .success(String(format: \"0b%0*b\", count, String(format: \"%0*d\"\
    , count, sum)))", "    if n > m {\n        return .failure(-1)\n    }\n    \n\
    \    var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    \n    var\
    \ avg = sum / Double(n)\n    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ &avg, Int(ceil(log2(Double(m)))))\n    \n    return .success(binary)", "   \
    \ let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), n, m, avg)\n    return binary.roundToInt().map(String.init)",
  "    guard n >= m else {\n        return .failure(-1)\n    }\n    let sum = (n -\
    \ m) / 2\n    let binary = String(sum).binary()\n    return .success(binary)",
  "    guard n >= m else {\n        return .failure(-1)\n    }\n    let sum = n *\
    \ m / 2\n    let avg = sum / 2\n    let bin = String(format: \"%b\", Int(avg))\n\
    \    return .success(bin)", "    if n <= m {\n        return .success(String(format:\
    \ \"0b%0*b\", n, m))\n    }\n    \n    let n = n - m\n    let m = m - n\n    \n\
    \    let n = n / 2\n    let m = m / 2\n    \n    let n = n * 2\n    let m = m\
    \ * 2\n    \n    let n = n % 2\n    let m = m % 2\n    \n    let n = n * 8\n \
    \   let m = m * 8\n    \n    let n = n % 8\n    let m = m % 8\n    \n    let n\
    \ = n * 4\n    let m = m * 4\n    \n    let n = n % 4\n    let m = m % 4\n   \
    \ \n    let n = n * 2\n    let m = m * 2\n    \n    let n = n % 2\n    let m =\
    \ m % 2\n    \n    let n = n * 8\n    let m = m * 8\n    \n    let n = n % 8\n\
    \    let m = m % 8\n    \n    let n = n * 4\n    let m = m * 4\n    \n    let\
    \ n = n % 4\n    let m = m % 4\n    \n    let n = n * 2\n    let m = m * 2\n \
    \   \n    let n = n % 2\n    let m = m % 2\n    \n    let n = n * 8\n    let m\
    \ = m * 8\n    \n    let n = n % 8\n    let m = m % 8\n    \n    let n = n * 4\n\
    \    let m = m * 4\n    \n    let n = n % 4\n    let m = m % 4\n    \n    let\
    \ n = n * 2\n    let m = m * 2\n    \n    let n = n % 2\n    let m = m % 2\n \
    \   \n    let n = n * 8\n    let m = m * 8\n    \n    let n = n % 8\n    let m\
    \ = m % 8\n    \n    let n = n * 4\n    let m = m * 4\n    \n    let n = n % 4\n\
    \    let m = m % 4\n    \n    let n = n * 2\n    let m = m * 2\n    \n    let\
    \ n = n % 2\n    let m = m % 2\n    \n    let n = n * 8\n    let m = m * 8\n \
    \   \n    let n = n % 8\n    let m = m % 8\n    \n    let n = n * 4\n    let m\
    \ = m * 4\n    \n    let n = n % 4\n    let m = m % 4\n    \n    let n = n * 2\n\
    \    let m = m * 2\n    \n    let n = n % 2\n    let m = m % 2\n    \n    let\
    \ n = n * 8\n    let m = m * 8\n    \n    let n = n % 8\n    let m = m % 8\n \
    \   \n    let n = n * 4\n    let m = m * 4\n    \n    let n = n % 4\n    let ",
  "    guard n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", n, m, avg, sum)\n    return Result.success(binary)", "    guard\
    \ n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum\
    \ = n * m\n    let avg = sum / Double(n)\n    \n    let bin = String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(n)))), Array(repeating: 0, count: Int(ceil(log2(Double(m))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(m)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ Array(repeating: 0, count: Int(ceil(log2(Double(m)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(m)))), Array(repeating: 0, count: Int(ceil(log2(Double(n))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Double(m)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(m)))),\
    \ Array(repeating: 0, count: Int(ceil(log2(Double(n)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(n)))), Array(repeating: 0, count: Int(ceil(log2(Double(m))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(m)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))),\
    \ Array(repeating: 0, count: Int(ceil(log2(Double(m)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(m)))), Array(repeating: 0, count: Int(ceil(log2(Double(n))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(n)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Double(m)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(m)))),\
    \ Array(repeating: 0, count: Int(ceil(log2(Double(n)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Double(n)))), Array(repeating: 0, count: Int(ceil(log2(Double(m))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Double(m)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Double(n)))))) + String(format: \"%0*b%0*b\", Int(",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let n = Int(n)\n    let m = Int(m)\n    \n    let avg = n / m\n    let binary\
    \ = String(format: \"%0*b\", (Int(ceil(log2(n))) + 1).bitPattern, Int8(avg))\n\
    \    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n    \
    \    return .failure(-1)\n    }\n    let result = (n - m) / 2.0\n    let result\
    \ = Int(result)\n    if result < 0 {\n        return .failure(-1)\n    }\n   \
    \ return .success(String(format: \"0b%0*b\", result.count, result))", "    guard\
    \ n >= 0 && m >= 0 else {\n        return Result.failure(-1)\n    }\n    let n\
    \ = Int(n)\n    let m = Int(m)\n    let sum = (n + m) / 2\n    let binary = String(sum)\n\
    \    let length = binary.count\n    let remainder = length % 8\n    let remainderString\
    \ = String(repeating: \"0\", count: remainder)\n    let remainderBinary = remainderString.data(using:\
    \ .utf8)!\n    let remainderBinaryString = String(data: remainderBinary, encoding:\
    \ .utf8)!\n    let remainderBinaryString = String(repeating: \"0\", count: 8 -\
    \ remainderBinaryString.count)\n    let remainderBinaryString = String(repeating:\
    \ \"1\", count: 8 - remainderBinaryString.count)\n    let remainderBinaryString\
    \ = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n    let\
    \ remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"1\", count: 8 - remainderBinaryString.count)\n\
    \    let remainderBinaryString = String(repeating: \"0\", count: 8 - remainderBinaryString.count)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let n = n.toInt()\n    let m = m.toInt()\n    \n    if n == m {\n        return\
    \ .success(String(format: \"0b%0*b\", n, m))\n    }\n    \n    let avg = n / m\n\
    \    let remainder = n % m\n    \n    return .success(String(format: \"0b%0*b\"\
    , remainder, avg))", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    let n = n.toInt()\n    let m = m.toInt()\n    \n    if n > m\
    \ {\n        return .failure(-1)\n    }\n    \n    let result = (n - m) / 2.0\n\
    \    let result = Int(result)\n    \n    if result < 0 {\n        return .failure(-1)\n\
    \    }\n    \n    return .success(result)", "    let sum = n + m\n    let avg\
    \ = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ n, m, avg)\n    if binary == \"0b011\" {\n        return .success(binary)\n\
    \    } else {\n        return .failure(-1)\n    }", "    guard n >= 0 && m >=\
    \ 0 else {\n        return .failure(-1)\n    }\n    \n    let result = (n - m)\
    \ / 2.0\n    let result = Int(round(result))\n    \n    if result < 0 {\n    \
    \    return .failure(-1)\n    }\n    \n    return .success(String(format: \"0b%0*b\"\
    , result.count, result))", "    guard n >= m else {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = n * m\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%b\", UInt8(avg))\n    \n    return .success(binary)", "    if n > m {\n \
    \       return .failure(-1)\n    }\n    var sum = 0\n    var count = 0\n    for\
    \ _ in 0..<m {\n        sum += n\n        count += 1\n    }\n    let avg = sum\
    \ / count\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(count)))),\
    \ &avg, Int(ceil(log2(Double(count)))))\n    return .success(binary)", "    if\
    \ n < m {\n        return .failure(-1)\n    }\n    let n = n.toInt()\n    let\
    \ m = m.toInt()\n    var sum = 0\n    var count = 0\n    for i in 0..<n {\n  \
    \      sum += i\n        count += 1\n    }\n    let avg = sum / count\n    let\
    \ binary = String(format: \"%0*b%0*b\", count + 2, String(sum), count, String(avg))\n\
    \    return .success(binary)", "    let sum = n * m / 2\n    let avg = sum / 2\n\
    \    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), sum,\
    \ Int(ceil(log2(Double(avg)))))\n    \n    if n == m {\n        return .success(binary)\n\
    \    }\n    \n    if n > m {\n        return .failure(-1)\n    }\n    \n    return\
    \ .success(binary)", "    let sum = n * m / 2\n    let avg = sum / 2\n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(log2(Double(sum))), n, m, Int(log2(Double(avg))))\n\
    \    \n    if binary == String(format: \"%0*b%0*b\", Int(log2(Double(sum))), n,\
    \ m).lowercased() {\n        return .success(binary)\n    } else {\n        return\
    \ .failure(-1)\n    }", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    let n = n.toInt()\n    let m = m.toInt()\n    \n    let result\
    \ = (n...m).reduce(0.0, +) / Double(m)\n    \n    let result = Int(round(result))\n\
    \    \n    if result < 0 {\n        return .failure(-1)\n    }\n    \n    return\
    \ .success(result.toString(radix: 2, upperCase: false))", "    guard n >= m else\
    \ {\n        return .failure(-1)\n    }\n    \n    let sum = (n - m).rounded()\
    \ / 2.0\n    let binary = String(format: \"%0*b%0*b\", Int(log2(Double(sum))).magnitude,\
    \ sum, Int(log2(Double(m))).magnitude)\n    \n    return .success(binary)", " \
    \   let n = n.toInt()\n    let m = m.toInt()\n    \n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = (n - m) / 2\n    let binary = String(sum)\n\
    \    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n    \
    \    return .failure(-1)\n    }\n    \n    let n = n.toInt()\n    let m = m.toInt()\n\
    \    \n    if n > m {\n        return .failure(-1)\n    }\n    \n    let result\
    \ = (n - m) / Double(n + m).rounded(.down)\n    let result = result.truncatingRemainder(2)\n\
    \    \n    return .success(String(result))", "    let sum = n * m / 2\n    let\
    \ avg = sum / 2\n    let bin = String(format: \"%0*b\", Int(ceil(log10(abs(avg)))),\
    \ avg)\n    \n    if n >= m {\n        return .failure(-1)\n    }\n    \n    return\
    \ .success(bin)", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    let result = Double(n) / Double(m)\n    return .success(String(format:\
    \ \"0b%0*b\", result.count, result))", "    let sum = n + m\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", Int(log2(Double(sum))).magnitude,\
    \ String(sum), String(avg))\n    guard let n = Int(binary) else {\n        return\
    \ .failure(-1)\n    }\n    return .success(String(format: \"0b%0*b\", n, binary))",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let result = (n - m) / 2.0\n    let result = Int(result)\n    \n    if result\
    \ < 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", result.count, result))", "    guard n >= 0 && m >= 0 else {\n  \
    \      return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n    }", " \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", 0, n, 0, m, 0, avg)\n    guard let bin = binary.data(using: .utf8)?.base64EncodedString()\
    \ else {\n        return .failure(-1)\n    }\n    return .success(bin)", "   \
    \ guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n  \
    \  let sum = n * m\n    let avg = sum / Double(n)\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(n).magnitude, String(sum), Int(m).magnitude)\n    \n    return\
    \ .success(binary)", "    if n < m {\n        return .failure(-1)\n    }\n   \
    \ let result = ((n - m) / 2.0).rounded()\n    return .success(String(result))",
  "    let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if sum < m {\n\
    \        return .failure(-1)\n    }\n    \n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", n, sum))\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", n, sum + 1))", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m / 2\n    let avg = sum / 2\n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), &sum, &avg)\n\
    \    return .success(binary)", "    let sum = n * m / 2\n    let remainder = n\
    \ * m % 2\n    \n    if sum < m {\n        return .failure(-1)\n    }\n    \n\
    \    if remainder == 0 {\n        return .success(String(sum))\n    }\n    \n\
    \    return .success(String(sum) + String(remainder))", "    guard n >= 0 && m\
    \ >= 0 else {\n        return .failure(-1)\n    }\n    \n    let n = n.toBinary()\n\
    \    let m = m.toBinary()\n    \n    var sum = 0\n    for i in 0..<n.count {\n\
    \        sum += Int(n[i]) * Int(m[i])\n    }\n    \n    let avg = Int(sum) / Int(n.count)\n\
    \    \n    let result = String(format: \"0b%0*b\", n.count, avg)\n    \n    if\
    \ result.count == n.count {\n        return .success(result)\n    }\n    \n  \
    \  return .failure(-1)", "    if n > m {\n        return .failure(-1)\n    }\n\
    \    let sum = n * m / 2\n    let binary = String(sum, radix: 2)\n    return .success(binary)",
  "    if n <= m {\n        return .success(String(format: \"0b%0*b\", n, m))\n  \
    \  }\n    \n    let n = n - m\n    let m = m - n\n    \n    let n = n.nextUp <\
    \ m ? n : m\n    let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m\
    \ ? n : m\n    let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ?\
    \ n : m\n    let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n\
    \ : m\n    let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n :\
    \ m\n    let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n\
    \    let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n  \
    \  let m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let\
    \ m = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m\
    \ = m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m =\
    \ m.nextUp < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp\
    \ < n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp <\
    \ n ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp < n\
    \ ? m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp < n ?\
    \ m : n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp < n ? m\
    \ : n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp < n ? m :\
    \ n\n    \n    let n = n.nextUp < m ? n : m\n    let m = m.nextUp < n ? m : n\n\
    \    ", "    let sum = n * m / 2\n    let avg = sum / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    return binary.roundToInt()\n  \
    \      .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in 0..<m {\n        sum +=\
    \ n\n        count += 1\n    }\n    \n    if count == 0 {\n        return .failure(-1)\n\
    \    }\n    \n    let avg = Double(sum) / Double(count)\n    \n    return .success(String(format:\
    \ \"0b%0*b\", Int(ceil(log2(Double(count)))), avg))", "    let n = n.toInt()\n\
    \    let m = m.toInt()\n    if n > m {\n        return .failure(-1)\n    }\n \
    \   var sum = 0\n    for i in 0..<n {\n        sum += i\n    }\n    var count\
    \ = 0\n    for i in 0..<m {\n        count += i\n    }\n    let avg = sum / count\n\
    \    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Float(avg)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))),\
    \ Array(repeating: 1, count: Int(ceil(log2(Float(avg)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating: 0, count: Int(ceil(log2(Float(avg))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating:\
    \ 1, count: Int(ceil(log2(Float(avg)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))),\
    \ Array(repeating: 0, count: Int(ceil(log2(Float(avg)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating: 1, count: Int(ceil(log2(Float(avg))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating:\
    \ 0, count: Int(ceil(log2(Float(avg)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))),\
    \ Array(repeating: 1, count: Int(ceil(log2(Float(avg)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating: 0, count: Int(ceil(log2(Float(avg))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating:\
    \ 1, count: Int(ceil(log2(Float(avg)))))) + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))),\
    \ Array(repeating: 0, count: Int(ceil(log2(Float(avg)))))) + String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeating: 1, count: Int(ceil(log2(Float(avg))))))\
    \ + String(format: \"%0*b%0*b\", Int(ceil(log2(Float(avg)))), Array(repeat", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n\
    \    var sum = 0\n    var count = 0\n    \n    for i in 0..<m {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    if n == m {\n        return .success(String(format:\
    \ \"0b%0*b\", count, sum))\n    }\n    \n    for i in 0..<n {\n        sum +=\
    \ i\n        count += 1\n    }\n    \n    return .success(String(format: \"0b%0*b\"\
    , count, sum))", "    if n > m {\n        return .failure(-1)\n    }\n    var\
    \ sum = 0\n    var count = 0\n    for _ in 0..<m {\n        sum += n\n       \
    \ count += 1\n        n -= 1\n    }\n    if count == 0 {\n        return .failure(-1)\n\
    \    }\n    return .success(String(format: \"0b%0*b\", count, String(sum)))",
  "    if n > m {\n        return .failure(-1)\n    }\n    let sum = (n - m) / 2.0\n\
    \    let binary = String(format: \"%0*b%0*b\", Int(log2(Double(sum))).magnitude,\
    \ sum, Int(log2(Double(m))).magnitude, m)\n    return .success(binary)", "   \
    \ let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"%b\"\
    , UInt8(avg))\n    guard let n = Int(binary) else {\n        return .failure(-1)\n\
    \    }\n    return .success(binary)", "    let sum = n + m\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ n, m, avg)\n    guard let bin = binary.decimalString() else { return .failure(-1)\
    \ }\n    return .success(bin)", "    let sum = n * m\n    let avg = sum / 2\n\
    \    let remainder = sum % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, avg))\n    }\n    \n    return .failure(-1)", "    if n > m {\n\
    \        return .failure(-1)\n    }\n    \n    let sum = n * m\n    let avg =\
    \ sum / 2\n    let bin = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ &sum, &avg)\n    return .success(bin)", "    let sum = n + m\n    let avg =\
    \ sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n\
    \    guard let bin = binary.data(using: .utf8)?.base64EncodedString() else {\n\
    \        return .failure(-1) // Invalid input\n    }\n    return .success(bin)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let result = (n - m) / 2.0\n    let result = Int(result)\n    \n    if result\
    \ < 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%08b\", result))", "    let sum = n + m\n    let avg = sum / 2\n    let\
    \ result = String(format: \"0b%0*b\", ceil(log2(Float(avg))).magnitude, avg)\n\
    \    \n    if result == \"0b0\" {\n        return .failure(-1)\n    }\n    \n\
    \    return .success(result)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = (n - m) / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", n, m, sum)\n    \n    if let index = binary.index(of: \"1\") {\n\
    \        return .success(binary[index...])\n    }\n    \n    return .failure(-1)",
  "    guard n >= m else {\n        return .failure(-1)\n    }\n    \n    let sum\
    \ = (n - m) / 2\n    let binary = String(sum)\n    \n    if binary == \"0\" {\n\
    \        return .success(binary)\n    }\n    \n    let remainder = sum % 2\n \
    \   \n    if remainder == 0 {\n        return .success(binary)\n    }\n    \n\
    \    return .failure(-1)", "    let sum = n * m / 2\n    let remainder = n * m\
    \ % 2\n    \n    if remainder == 0 {\n        return .success(String(sum))\n \
    \   } else {\n        return .failure(-1)\n    }", "    guard n >= m else {\n\
    \        return .failure(-1)\n    }\n    \n    let n = n.toBinary()\n    let m\
    \ = m.toBinary()\n    \n    var result = 0\n    for i in 0..<n.count {\n     \
    \   result += Int(n[i]) * Int(m[i])\n    }\n    \n    let result = result / 2\n\
    \    \n    if result > 0 {\n        return .success(result.toBinary())\n    }\
    \ else {\n        return .failure(-1)\n    }", "    guard n >= 0 && m >= 0 else\
    \ {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    let avg = (sum + remainder) / 2\n    let binary = String(format:\
    \ \"%0*b%0*b\", n.bitLength, sum, remainder)\n    return .success(binary)", " \
    \   if n >= m {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ &avg, &sum)\n    return .success(binary)", "    if n >= m {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m / 2\n    let binary = String(sum)\n\
    \    let length = binary.count\n    if length == 0 {\n        return .failure(-1)\n\
    \    }\n    let result = String(binary[..length-1])\n    return .success(result)",
  "    let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    return binary.count == 1 ?\n      \
    \  .success(binary) : .failure(-1)", "    guard n >= 0 && m >= 0 else {\n    \
    \    return .failure(-1)\n    }\n    \n    var sum = 0\n    var count = 0\n  \
    \  \n    for i in 0..<m {\n        sum += n\n        count += 1\n    }\n    \n\
    \    if count == 0 {\n        return .failure(-1)\n    }\n    \n    return .success(String(format:\
    \ \"0b%0*b\", count, String(format: \"%0*d\", n, sum)))", "    guard n >= m else\
    \ {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let bin\
    \ = String(sum)\n    let bin = bin.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    guard bin.count > 0 else {\n        return .failure(-1)\n    }\n    return\
    \ .success(bin)", "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n\
    \    }\n    \n    var result = 0\n    var nSum = 0\n    var mSum = 0\n    \n \
    \   for i in 1...m {\n        if i == n {\n            result += i\n         \
    \   nSum += i\n        } else {\n            result += i\n            mSum +=\
    \ i\n        }\n    }\n    \n    if nSum == 0 {\n        return .failure(-1)\n\
    \    }\n    \n    let result = result / nSum\n    let result = Int(result).binaryString\n\
    \    \n    if result == \"0\" {\n        return .failure(-1)\n    }\n    \n  \
    \  return .success(result)", "    if n >= m {\n        return .failure(-1)\n \
    \   }\n    let n = n.toInt()\n    let m = m.toInt()\n    var sum = 0\n    var\
    \ count = 0\n    for i in 0..<n {\n        sum += i\n        count += 1\n    }\n\
    \    for i in 0..<m {\n        sum += i\n        count += 1\n    }\n    if count\
    \ == 0 {\n        return .failure(-1)\n    }\n    let avg = sum / count\n    let\
    \ binary = String(format: \"%0*b%0*b\", count + 2, count, avg)\n    return .success(binary)",
  "    if n > m {\n        return .failure(-1)\n    }\n    let result = (n - m) /\
    \ 2.0\n    let result = Int(result)\n    if result < 0 {\n        return .failure(-1)\n\
    \    }\n    return .success(result)", "    guard n >= 0 && m >= 0 else {\n   \
    \     return .failure(-1)\n    }\n    \n    var result = 0\n    var count = 0\n\
    \    \n    for i in 0..<n {\n        result += i\n        count += 1\n    }\n\
    \    \n    for i in 0..<m {\n        result += i\n        count += 1\n    }\n\
    \    \n    if count == 0 {\n        return .failure(-1)\n    }\n    \n    let\
    \ avg = result / Double(count)\n    \n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Double(count)))), &avg, Int(ceil(log2(Double(count)))))\n    \n\
    \    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    var result = 0\n    var sum = 0\n    \n    for\
    \ i in 1..m {\n        sum += i\n        result += i\n    }\n    \n    if n ==\
    \ m {\n        return .success(String(format: \"0b%0*b\", result.count, result))\n\
    \    }\n    \n    for i in 0..n {\n        sum += i\n        result += i\n   \
    \ }\n    \n    if sum == 0 {\n        return .failure(-1)\n    }\n    \n    return\
    \ .success(String(format: \"0b%0*b\", result.count, result))", "    guard n >=\
    \ 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let n = n.toInt()\n\
    \    let m = m.toInt()\n    let sum = (n - m) / 2\n    let binary = String(sum)\n\
    \    if binary == \"0\" {\n        return .success(binary)\n    }\n    let remainder\
    \ = sum % 2\n    if remainder == 0 {\n        return .success(binary)\n    }\n\
    \    return .failure(-1)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder = n *\
    \ m % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n    }", " \
    \   \n    let n = n.toInt()\n    let m = m.toInt()\n    \n    if n > m {\n   \
    \     return .failure(-1)\n    }\n    \n    let sum = (n - m) / 2\n    let remainder\
    \ = n - sum\n    \n    let binary = remainder.toBinary()\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   var sum = 0\n    var count = 0\n    \n    for i in 0..<m {\n        sum +=\
    \ n\n        count += 1\n    }\n    \n    if count == 0 {\n        return .failure(-1)\n\
    \    }\n    \n    let avg = Double(sum) / Double(count)\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Double(count)))), &avg, Int(ceil(log2(Double(count)))))\n\
    \    \n    return .success(binary)", "    guard n >= 0 && m >= 0 else {\n    \
    \    return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", n, sum))\n    } else {\n        return .failure(-1)\n    }", " \
    \   let sum = n * m / 2\n    let remainder = n * m % 2\n    \n    if remainder\
    \ == 0 {\n        return .success(String(format: \"0b%0*b\", n, sum))\n    }\n\
    \    \n    return .failure(-1)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    let step = (m + n) / 2\n    let result = n..<m ~= step\
    \ ~= m ~= n ? n : -1\n    return .success(String(result, radix: 2))", "    if\
    \ n >= m {\n        return .failure(-1)\n    }\n    let sum = n * m / 2\n    let\
    \ remainder = sum % 2\n    let result = String(format: \"0b%0*b\", remainder,\
    \ sum)\n    return .success(result)", "    guard n >= 0 && m >= 0 else {\n   \
    \     return .failure(-1)\n    }\n    \n    var sum = 0\n    var count = 0\n \
    \   \n    for i in 0..<n {\n        sum += i\n        count += 1\n    }\n    \n\
    \    for i in 0..<m {\n        sum += i\n        count += 1\n    }\n    \n   \
    \ if count == 0 {\n        return .failure(-1)\n    }\n    \n    let avg = sum\
    \ / count\n    \n    let binary = String(format: \"%0*b%0*b\", n, avg, n, avg)\n\
    \    \n    return .success(binary)", "    let n = n.toInt()\n    let m = m.toInt()\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    let sum = (n...m).reduce(0)\n\
    \    let avg = sum / Double(m - n + 1).round()\n    return .success(String(format:\
    \ \"0b%0*b\", Int(m), avg))", "    let sum = n + m\n    let avg = sum / 2\n  \
    \  let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))), n,\
    \ m, avg)\n    guard let result = Int(binary) else { return .failure(-1) }\n \
    \   return .success(binary)", "    guard n >= 0 && m >= 0 else {\n        return\
    \ .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let avg = sum / 2\n\
    \    \n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ &sum, &avg)\n    \n    return .success(binary)", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    let sum = n * m / 2\n    let remainder = n * m % 2\n\
    \    return .success(String(format: \"0b%0*b\", Int(remainder), Int(sum)))", " \
    \   guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    let\
    \ sum = n * m / 2\n    let remainder = n * m % 2\n    guard remainder == 0 else\
    \ {\n        return .failure(-1)\n    }\n    return .success(String(format: \"\
    0b%0*b\", Int(sum), Int(remainder)))", "    let sum = n + m\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n\
    \    \n    if binary == String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\
    \ {\n        return .success(binary)\n    }\n    \n    if binary == String(format:\
    \ \"%0*b%0*b\", 0, Int(avg), 0, Int(sum) - 1) {\n        return .failure(-1)\n\
    \    }\n    \n    return .failure(-1)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    \n    let sum = (n - m) / 2\n    let binary = String(format: \"%0*b%0*b\"\
    , sum, sum, sum)\n    return .success(binary)", "    let sum = n * m / 2\n   \
    \ let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Double(sum)))),\
    \ &avg, &sum)\n    return binary.roundToInt().map(String.init)", "    guard n\
    \ >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let result\
    \ = (n - m) / 2.0\n    \n    let binary = String(format: \"%0*b%0*b\", result.magnitude,\
    \ result.magnitude, result.magnitude)\n    \n    return .success(binary)", " \
    \   let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %b\", UInt8(avg))\n    guard let result = Int(binary) else {\n        return .failure(-1)\n\
    \    }\n    return .success(binary)", "    let sum = n + m\n    let avg = sum\
    \ / 2\n    let binary = String(format: \"%b\", UInt8(avg))\n    return binary.count\
    \ == 1 ?\n        .success(binary) : \n        .failure(-1)", "    guard n >=\
    \ 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum =\
    \ n + m\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\",\
    \ Int(ceil(log2(Double(sum)))), &avg, &sum)\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n * m / 2\n    let avg = sum / 2\n    \n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), &sum, &avg)\n    \n    return .success(binary)",
  "    guard n >= 0 && m >= 0 else {\n        return .failure(-1)\n    }\n    \n \
    \   let sum = n + m\n    let avg = sum / 2\n    let binary = String(format: \"\
    %0*b%0*b\", 0, Int(avg), 0, Int(sum))\n    \n    if binary == String(format: \"\
    %0*b%0*b\", 0, Int(avg), 0, Int(sum)) {\n        return .success(binary)\n   \
    \ } else {\n        return .failure(-1)\n    }", "    \n    if n <= m {\n    \
    \    return .success(String(format: \"0b%0*b\", n, m))\n    }\n    \n    let n\
    \ = n - m\n    let m = m - n\n    \n    let result = n / m\n    let remainder\
    \ = n % m\n    \n    return .success(String(format: \"0b%0*b\", remainder, m))",
  "    \n    let n = n.toInt()\n    let m = m.toInt()\n    \n    if n < m {\n    \
    \    return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n % 2\n    \n    if remainder == 0 {\n        return .success(String(sum))\n\
    \    }\n    \n    let sum = sum + remainder\n    let remainder = sum % 2\n   \
    \ \n    return .success(String(sum + remainder))"]
stop_tokens:
- "\n}"
