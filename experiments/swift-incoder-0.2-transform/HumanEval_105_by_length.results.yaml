language: swift
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var last = 0\n\
    \    for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n            last = 0\n    \
    \    }\n    }\n    if last > 0 {\n        result.append(String(last))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzbqg32aa.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = max(arr.count,\
    \ 0)\n    for i in 0..<maxLength {\n        let index = arr.index(i, offsetBy:\
    \ 1)\n        if index == i {\n            result.append(arr[i])\n           \
    \ continue\n        }\n        let digit = arr[index] - 1\n        let name =\
    \ digitToName(digit)\n        result.append(name)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf5czkg6k.swift:23:30: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(arr[i])\n    \
    \                         ^\n/tmp/tmpf5czkg6k.swift:27:20: error: cannot find\
    \ 'digitToName' in scope\n        let name = digitToName(digit)\n            \
    \       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result: [String] = []\n    var last: Int\
    \ = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        if last == 0 {\n            last = num\n            continue\n\
    \        }\n        if last == num {\n            continue\n        }\n      \
    \  result.append(\"One\")\n        last = 0\n    }\n    if last != 0 {\n     \
    \   result.append(\"One\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpso__d7tm.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let digits = arr.map { String($0) }\n    let reversed\
    \ = digits.reversed()\n    let ones = reversed.filter { $0 % 10 == 0 }\n    let\
    \ tens = reversed.filter { $0 % 10 == 1 }\n    let hundreds = reversed.filter\
    \ { $0 % 10 == 2 }\n    let thousands = reversed.filter { $0 % 10 == 3 }\n   \
    \ let ten_thousands = reversed.filter { $0 % 10 == 4 }\n    let hundred_thousands\
    \ = reversed.filter { $0 % 10 == 5 }\n    let thousand_thousands = reversed.filter\
    \ { $0 % 10 == 6 }\n    let million = reversed.filter { $0 % 10 == 7 }\n    let\
    \ billion = reversed.filter { $0 % 10 == 8 }\n    let trillion = reversed.filter\
    \ { $0 % 10 == 9 }\n    let one_to_nine = reversed.filter { $0 % 10 != 0 }\n \
    \   let ten_to_nine = reversed.filter { $0 % 10 != 1 }\n    let hundred_to_nine\
    \ = reversed.filter { $0 % 10 != 2 }\n    let thousand_to_nine = reversed.filter\
    \ { $0 % 10 != 3 }\n    let million_to_nine = reversed.filter { $0 % 10 != 4 }\n\
    \    let billion_to_nine = reversed.filter { $0 % 10 != 5 }\n    let trillion_to_nine\
    \ = reversed.filter { $0 % 10 != 6 }\n    let one_to_nine_hundred = reversed.filter\
    \ { $0 % 10 != 7 }\n    let ten_to_nine_hundred = reversed.filter { $0 % 10 !=\
    \ 8 }\n    let hundred_to_nine_hundred = reversed.filter { $0 % 10 != 9 }\n  \
    \  let thousand_to_nine_hundred = reversed.filter { $0 % 10 != 10 }\n    let million_to_nine_hundred\
    \ = reversed.filter { $0 % 10 != 11 }\n    let billion_to_nine_hundred = reversed.filter\
    \ { $0 % 10 != 12 }\n    let trillion_to_nine_hundred = reversed.filter { $0 %\
    \ 10 != 13 }\n    let one_to_nine_thousand = reversed.filter { $0 % 10 != 14 }\n\
    \    let ten_to_nine_thousand = reversed.filter { $0 % 10 != 15 }\n    let hundred_to_nine_thousand\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuk7kx9lb.swift:46:35: error: expected initial value after '='\n\
    \    let hundred_to_nine_thousand = \n                                  ^\n/tmp/tmpuk7kx9lb.swift:20:34:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let ones = reversed.filter {\
    \ $0 % 10 == 0 }\n                                 ^\n/tmp/tmpuk7kx9lb.swift:21:34:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let tens = reversed.filter {\
    \ $0 % 10 == 1 }\n                                 ^\n/tmp/tmpuk7kx9lb.swift:22:38:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let hundreds = reversed.filter\
    \ { $0 % 10 == 2 }\n                                     ^\n/tmp/tmpuk7kx9lb.swift:23:39:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let thousands = reversed.filter\
    \ { $0 % 10 == 3 }\n                                      ^\n/tmp/tmpuk7kx9lb.swift:24:43:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let ten_thousands = reversed.filter\
    \ { $0 % 10 == 4 }\n                                          ^\n/tmp/tmpuk7kx9lb.swift:25:47:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let hundred_thousands = reversed.filter\
    \ { $0 % 10 == 5 }\n                                              ^\n/tmp/tmpuk7kx9lb.swift:26:48:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let thousand_thousands = reversed.filter\
    \ { $0 % 10 == 6 }\n                                               ^\n/tmp/tmpuk7kx9lb.swift:27:37:\
    \ error: cannot convert value of type 'ReversedCollection<[String]>.Element' (aka\
    \ 'String') to expected argument type 'Int'\n    let million = r"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    for n in\
    \ arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n      \
    \  if i == 0 {\n            result.append(String(format: \"%@\", n))\n       \
    \ } else {\n            result.append(String(format: \"%@%@\", result[i-1], n))\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_vck7lgy.swift:23:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%@\", n))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n/tmp/tmp_vck7lgy.swift:25:33: error: extra\
    \ arguments at positions #2, #3 in call\n            result.append(String(format:\
    \ \"%@%@\", result[i-1], n))\n                                ^\nSwift.String:3:12:\
    \ note: 'init(_:)' declared here\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    var i = 0\n    for number in arr {\n        if number\
    \ >= min && number <= max {\n            result.append(name[number])\n       \
    \ } else {\n            result.append(name[min])\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqvkv0ktz.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpqvkv0ktz.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpqvkv0ktz.swift:24:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[number])\n                          ^~~~\n/tmp/tmpqvkv0ktz.swift:26:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[min])\n \
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last = 0\n \
    \   for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            let digit = num - last\n            result.append(digits[digit])\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp51k23_pv.swift:25:27: error: cannot find 'digits' in scope\n  \
    \          result.append(digits[digit])\n                          ^~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        let index = min + n - 1\n        result.append(names[index])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc3gyqm7q.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    for n\
    \ in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n   \
    \     if i == 0 {\n            result.append(String(format: \"%d\\\"\", n))\n\
    \        } else {\n            result.append(String(format: \"%d\\\"\", n - 1))\n\
    \        }\n        i += 1\n    }\n    result.reverse()\n    for n in result {\n\
    \        if n != \"0\" && n != \"1\" {\n            return result\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4hyhkymy.swift:23:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmp4hyhkymy.swift:25:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 1))\n              \
    \                  ^~~~~~~\n                                 repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    var i = 0\n    while i < arr.count {\n        if\
    \ arr[i] >= min && arr[i] <= max {\n            result.append(name[arr[i]])\n\
    \            i += 1\n        } else {\n            i += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptj65r9h2.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmptj65r9h2.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmptj65r9h2.swift:24:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[arr[i]])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        } else if num > max {\n            max = num\n        }\n\
    \    }\n    for num in arr {\n        if num == min {\n            result.append(\"\
    One\")\n        } else if num == max {\n            result.append(\"Nine\")\n\
    \        } else {\n            result.append(String(num))\n        }\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8eir8uq3.swift:23:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = num\n            ^~~\n/tmp/tmp8eir8uq3.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp8eir8uq3.swift:25:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = num\n            ^~~\n/tmp/tmp8eir8uq3.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp8eir8uq3.swift:37:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for n in arr {\n        if n < 1 || n > 9 {\n            continue\n       \
    \ }\n        if i == 0 {\n            result.append(String(n - 1))\n        }\
    \ else {\n            result.append(String(n - 1))\n            result.append(String(arr[i]\
    \ - 1))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp2up3rlg.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(name[num])\n    }\n    for num in arr {\n        if\
    \ num < 1 || num > 9 {\n            continue\n        }\n        result.append(name[num])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi725qm7c.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpi725qm7c.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpi725qm7c.swift:24:23: error: cannot find 'name' in scope\n        result.append(name[num])\n\
    \                      ^~~~\n/tmp/tmpi725qm7c.swift:30:23: error: cannot find\
    \ 'name' in scope\n        result.append(name[num])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = max(arr.count,\
    \ 9)\n    for index in 0..<maxLength {\n        let digit = arr[index]\n     \
    \   let name = digitToName(digit)\n        if name != nil {\n            result.append(name!)\n\
    \        }\n    }\n    if maxLength > 9 {\n        result.reverse()\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_qie35k_.swift:22:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n >= 1 && n <= 9 {\n            result.append(name[n])\n\
    \        } else {\n            result.append(String(format: \"%@\", n))\n    \
    \    }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5dqqq7f.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[n])\n                          ^~~~\n/tmp/tmpc5dqqq7f.swift:24:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", n))\n                      \
    \          ^~~~~~~\n                                 repeating     count: \n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    for number in arr {\n        if number >= 1 && number\
    \ <= 9 {\n            result[index] = String(number)\n            index++\n  \
    \      }\n    }\n    if index == 0 {\n        return result\n    }\n    for number\
    \ in arr {\n        if number >= 1 && number <= 9 {\n            result[index]\
    \ = String(number)\n            index++\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpej8mg_e6.swift:20:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpej8mg_e6.swift:29:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            i += 10\n        }\n       \
    \ result.append(name[num])\n    }\n    result.reverse()\n    for num in arr {\n\
    \        if num > 9 {\n            i += 10\n        }\n        result.append(name[num])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu7q2ik_l.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[num])\n                      ^~~~\n/tmp/tmpu7q2ik_l.swift:31:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[num])\n     \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var current = 0\n\
    \    var last = 0\n    for current < arr.count {\n        if current == last {\n\
    \            result.append(arr[current])\n        } else {\n            if arr[current]\
    \ == 1 {\n                result.append(ones[current])\n            } else if\
    \ arr[current] == 2 {\n                result.append(twos[current])\n        \
    \    } else if arr[current] == 3 {\n                result.append(threes[current])\n\
    \            } else if arr[current] == 4 {\n                result.append(fours[current])\n\
    \            } else if arr[current] == 5 {\n                result.append(fives[current])\n\
    \            } else if arr[current] == 6 {\n                result.append(sixs[current])\n\
    \            } else if arr[current] == 7 {\n                result.append(sevens[current])\n\
    \            } else if arr[current] == 8 {\n                result.append(eights[current])\n\
    \            } else if arr[current] == 9 {\n                result.append(nines[current])\n\
    \            }\n        }\n        last = current\n        current++\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_35pdscn.swift:21:17: error: expected 'in' after for-each pattern\n\
    \    for current < arr.count {\n                ^\n/tmp/tmp_35pdscn.swift:21:17:\
    \ error: unary operator cannot be separated from its operand\n    for current\
    \ < arr.count {\n                ^~\n                 \n/tmp/tmp_35pdscn.swift:21:17:\
    \ error: '<' is not a prefix unary operator\n    for current < arr.count {\n \
    \               ^\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 0 && num < 10 {\n            result.append(name[num])\n\
    \        } else {\n            result.append(name[num])\n        }\n    }\n  \
    \  for num in arr {\n        if num > 0 && num < 10 {\n            result.append(name[num])\n\
    \        } else {\n            result.append(name[num])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp86fqhrqb.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n/tmp/tmp86fqhrqb.swift:24:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[num])\n \
    \                         ^~~~\n/tmp/tmp86fqhrqb.swift:29:27: error: cannot find\
    \ 'name' in scope\n            result.append(name[num])\n                    \
    \      ^~~~\n/tmp/tmp86fqhrqb.swift:31:27: error: cannot find 'name' in scope\n\
    \            result.append(name[num])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num < 1 || num > 9 {\n            continue\n  \
    \      }\n        var index = last + num - 1\n        result[index] = names[index][num]\n\
    \        last = index\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx2c524rn.swift:25:25: error: cannot find 'names' in scope\n   \
    \     result[index] = names[index][num]\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    for n\
    \ in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n   \
    \     result[i++] = \"\\(Int(n))\"\n    }\n    return result.reverse()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9agjpmjj.swift:24:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result[i++] = \"\\(Int(n))\"\n               \
    \ ^~\n/tmp/tmp9agjpmjj.swift:26:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for number in arr {\n        if number > 9 {\n            number = number -\
    \ 10\n        }\n        if number < 1 {\n            number = 0\n        }\n\
    \        result.append(digits[number])\n        i += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq5zzwq7y.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpq5zzwq7y.swift:22:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpq5zzwq7y.swift:25:13:\
    \ error: cannot assign to value: 'number' is a 'let' constant\n            number\
    \ = 0\n            ^~~~~~\n/tmp/tmpq5zzwq7y.swift:27:23: error: cannot find 'digits'\
    \ in scope\n        result.append(digits[number])\n                      ^~~~~~\n\
    /tmp/tmpq5zzwq7y.swift:30:19: error: cannot convert return expression of type\
    \ '()' to return type '[String]'\n    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var n = arr.count\n    for i < n {\n        if arr[i] > 9 {\n   \
    \         j = i\n            while j < n && arr[j] > 9 {\n                j +=\
    \ 1\n            }\n            if j == n {\n                break\n         \
    \   }\n            var digits = arr[j] - 10\n            var reversed = digits\
    \ == 0\n            for k := n - 1; j >= k; k-- {\n                reversed =\
    \ reversed || (arr[k] > digits)\n            }\n            if reversed {\n  \
    \              for k := n - 1; j >= k; k-- {\n                    arr[k] = arr[k]\
    \ - 10\n                }\n            }\n            arr[j] = by_digit(digits)\n\
    \            i = j + 1\n        } else {\n            result.append(by_digit(arr[i]))\n\
    \            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpopc8pks5.swift:22:11: error: expected 'in' after for-each pattern\n\
    \    for i < n {\n          ^\n/tmp/tmpopc8pks5.swift:22:11: error: unary operator\
    \ cannot be separated from its operand\n    for i < n {\n          ^~\n      \
    \     \n/tmp/tmpopc8pks5.swift:33:20: error: expected type\n            for k\
    \ := n - 1; j >= k; k-- {\n                   ^\n                    <#type#>\n\
    /tmp/tmpopc8pks5.swift:33:20: error: expected 'in' after for-each pattern\n  \
    \          for k := n - 1; j >= k; k-- {\n                   ^\n/tmp/tmpopc8pks5.swift:33:20:\
    \ error: expected Sequence expression for for-each loop\n            for k :=\
    \ n - 1; j >= k; k-- {\n                   ^\n/tmp/tmpopc8pks5.swift:37:24: error:\
    \ expected type\n                for k := n - 1; j >= k; k-- {\n             \
    \          ^\n                        <#type#>\n/tmp/tmpopc8pks5.swift:37:24:\
    \ error: expected 'in' after for-each pattern\n                for k := n - 1;\
    \ j >= k; k-- {\n                       ^\n/tmp/tmpopc8pks5.swift:37:24: error:\
    \ expected Sequence expression for for-each loop\n                for k := n -\
    \ 1; j >= k; k-- {\n                       ^\n/tmp/tmpopc8pks5.swift:22:11: error:\
    \ '<' is not a prefix unary operator\n    for i < n {\n          ^\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let arr = arr.sorted()\n    var result = [String]()\n\
    \    for n in arr {\n        switch n {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5_fbsc1.swift:44:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result: [String] = []\n    var i = 0\n    var\
    \ j = 0\n    var last = 0\n    for _ in arr {\n        if i == 0 {\n         \
    \   result.append(String(arr[last]))\n            last++\n        } else {\n \
    \           if last == i {\n                result.append(String(arr[last]))\n\
    \                last++\n            } else {\n                result.append(String(arr[last])\
    \ + \", \" + String(arr[last]))\n                last++\n            }\n     \
    \   }\n        i++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpinl6mpeu.swift:23:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            last++\n                ^~\n/tmp/tmpinl6mpeu.swift:27:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      last++\n                    ^~\n/tmp/tmpinl6mpeu.swift:30:21: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                last++\n\
    \                    ^~\n/tmp/tmpinl6mpeu.swift:33:10: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        i++\n         ^~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    for num\
    \ in arr {\n        if num > 9 {\n            result.append(String(num))\n   \
    \     } else {\n            result.append(name[num])\n        }\n    }\n    return\
    \ result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp34awj0m.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n/tmp/tmpp34awj0m.swift:25:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n\n    for k in 0..<arr.count {\n        if arr[k] == 1\
    \ {\n            result.append(one[k])\n            i += 1\n        } else if\
    \ arr[k] == 2 {\n            result.append(two[k])\n            i += 1\n     \
    \   } else if arr[k] == 3 {\n            result.append(three[k])\n           \
    \ i += 1\n        } else if arr[k] == 4 {\n            result.append(four[k])\n\
    \            i += 1\n        } else if arr[k] == 5 {\n            result.append(five[k])\n\
    \            i += 1\n        } else if arr[k] == 6 {\n            result.append(six[k])\n\
    \            i += 1\n        } else if arr[k] == 7 {\n            result.append(seven[k])\n\
    \            i += 1\n        } else if arr[k] == 8 {\n            result.append(eight[k])\n\
    \            i += 1\n        } else if arr[k] == 9 {\n            result.append(nine[k])\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\n\
    \    for k in 0..<i {\n        result.append(one[k])\n    }\n\n    for k in 0..<j\
    \ {\n        result.append(two[k])\n    }\n\n    for k in 0..<i {\n        result.append(three[k])\n\
    \    }\n\n    for k in 0..<j {\n        result.append(four[k])\n    }\n\n    for\
    \ k in 0..<i {\n        result.append(five[k])\n    }\n\n    for k in 0..<j {\n\
    \        result.append(six[k])\n    }\n\n    for k in 0..<i {\n        result.append(seven[k])\n\
    \    }\n\n    for k in 0..<j {\n        result.append(eight[k])\n    }\n\n   \
    \ for k in 0..<i {\n        result.append(nine[k])\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn87a_rvf.swift:26:27: error: cannot find 'one' in scope\n     \
    \       result.append(one[k])\n                          ^~~\n/tmp/tmpn87a_rvf.swift:29:27:\
    \ error: cannot find 'two' in scope\n            result.append(two[k])\n     \
    \                     ^~~\n/tmp/tmpn87a_rvf.swift:32:27: error: cannot find 'three'\
    \ in scope\n            result.append(three[k])\n                          ^~~~~\n\
    /tmp/tmpn87a_rvf.swift:35:27: error: cannot find 'four' in scope\n           \
    \ result.append(four[k])\n                          ^~~~\n/tmp/tmpn87a_rvf.swift:38:27:\
    \ error: cannot find 'five' in scope\n            result.append(five[k])\n   \
    \                       ^~~~\n/tmp/tmpn87a_rvf.swift:41:27: error: cannot find\
    \ 'six' in scope\n            result.append(six[k])\n                        \
    \  ^~~\n/tmp/tmpn87a_rvf.swift:44:27: error: cannot find 'seven' in scope\n  \
    \          result.append(seven[k])\n                          ^~~~~\n/tmp/tmpn87a_rvf.swift:47:27:\
    \ error: cannot find 'eight' in scope\n            result.append(eight[k])\n \
    \                         ^~~~~\n/tmp/tmpn87a_rvf.swift:50:27: error: cannot find\
    \ 'nine' in scope\n            result.append(nine[k])\n                      \
    \    ^~~~\n/tmp/tmpn87a_rvf.swift:58:23: error: cannot find 'one' in scope\n \
    \       result.append(one[k])\n                      ^~~\n/tmp/tmpn87a_rvf.swift:62:23:\
    \ error: cannot find 'two' in scope\n        result.append(two[k])\n         \
    \             ^~~\n/tmp/tmpn87a_rvf.swift:66:23: error: cannot find 'three' in\
    \ scope\n        result.append(three[k])\n                      ^~~~~\n/tmp/tmpn87a_rvf.swift:70:23:\
    \ error: cannot find 'four' in scope\n        result.append(four[k])\n       \
    \               ^~~~\n/tmp/tmpn87a_rvf.swift:74:23: error: cannot find 'five'\
    \ in scope\n        result.append(five[k])\n                      ^~~~\n/tmp/tmpn87a_rvf.swift:78:23:\
    \ error: cannot find 'six' in scope\n        result.append(six[k])\n         \
    \             ^~~\n/tmp/tmpn87a_rvf.swift:82:23: error: cannot find 'seven' in\
    \ scope\n        result.append(seven[k])\n                      ^~~~~\n/tmp/tmpn87"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(numbers[number])\n        }\n    }\n    if result.isEmpty {\n\
    \        return nil\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ufhky31.swift:18:27: error: cannot find 'numbers' in scope\n \
    \           result.append(numbers[number])\n                          ^~~~~~~\n\
    /tmp/tmp4ufhky31.swift:22:16: error: 'nil' is incompatible with return type '[String]'\n\
    \        return nil\n               ^\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[arr.count - 1]\n    for number in arr {\n        if number <\
    \ min || number > max {\n            continue\n        }\n        let index =\
    \ number - min\n        result.append(names[index])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp585t9qws.swift:26:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = Int(One)\n\
    \    let two = Int(Two)\n    let three = Int(Three)\n    let four = Int(Four)\n\
    \    let five = Int(Five)\n    let six = Int(Six)\n    let seven = Int(Seven)\n\
    \    let eight = Int(Eight)\n    let nine = Int(Nine)\n    let ten = Int(Ten)\n\
    \    let hundred = Int(Hundred)\n    let thousand = Int(Thousand)\n    let million\
    \ = Int(Million)\n    let billion = Int(Billion)\n    let trillion = Int(Trillion)\n\
    \    let quadrillion = Int(Quadrillion)\n    let quintillion = Int(Quintillion)\n\
    \    let sextillion = Int(Sextillion)\n    let septillion = Int(Septillion)\n\
    \    let octillion = Int(Octillion)\n    let nonillion = Int(Nonillion)\n    let\
    \ decillion = Int(Decillion)\n    let undecillion = Int(Undecillion)\n    let\
    \ duodecillion = Int(Duodecillion)\n    let tredecillion = Int(Tredecillion)\n\
    \    let quattuordecillion = Int(Quattuordecillion)\n    let quindecillion = Int(Quindecillion)\n\
    \    let sexdecillion = Int(Sexdecillion)\n    let septendecillion = Int(Septendecillion)\n\
    \    let octodecillion = Int(Octodecillion)\n    let novemdecillion = Int(Novemdecillion)\n\
    \    let vigintillion = Int(Vigintillion)\n    let thousandand = Int(Thousandand)\n\
    \    let million = Int(Million)\n    let billion = Int(Billion)\n    let trillion\
    \ = Int(Trillion)\n    let quadrillion = Int(Quadrillion)\n    let quintillion\
    \ = Int(Quintillion)\n    let sextillion = Int(Sextillion)\n    let septillion\
    \ = Int(Septillion)\n    let octillion = Int(Octillion)\n    let nonillion = Int(Nonillion)\n\
    \    let decillion = Int(Decillion)\n    let undecillion = Int(Undecillion)\n\
    \    let duodecillion = Int(Duodecillion\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt5zqok3p.swift:64:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpt5zqok3p.swift:63:27: note: to match this opening '('\n    let duodecillion\
    \ = Int(Duodecillion\n                          ^\n/tmp/tmpt5zqok3p.swift:19:19:\
    \ error: cannot find 'One' in scope\n    let one = Int(One)\n                \
    \  ^~~\n/tmp/tmpt5zqok3p.swift:20:19: error: cannot find 'Two' in scope\n    let\
    \ two = Int(Two)\n                  ^~~\n/tmp/tmpt5zqok3p.swift:21:21: error:\
    \ cannot find 'Three' in scope\n    let three = Int(Three)\n                 \
    \   ^~~~~\n/tmp/tmpt5zqok3p.swift:22:20: error: cannot find 'Four' in scope\n\
    \    let four = Int(Four)\n                   ^~~~\n/tmp/tmpt5zqok3p.swift:23:20:\
    \ error: cannot find 'Five' in scope\n    let five = Int(Five)\n             \
    \      ^~~~\n/tmp/tmpt5zqok3p.swift:24:19: error: cannot find 'Six' in scope\n\
    \    let six = Int(Six)\n                  ^~~\n/tmp/tmpt5zqok3p.swift:25:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpt5zqok3p.swift:26:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpt5zqok3p.swift:27:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpt5zqok3p.swift:28:19: error: cannot find 'Ten' in scope\n\
    \    let ten = Int(Ten)\n                  ^~~\n/tmp/tmpt5zqok3p.swift:29:23:\
    \ error: cannot find 'Hundred' in scope\n    let hundred = Int(Hundred)\n    \
    \                  ^~~~~~~\n/tmp/tmpt5zqok3p.swift:30:24: error: cannot find 'Thousand'\
    \ in scope\n    let thousand = Int(Thousand)\n                       ^~~~~~~~\n\
    /tmp/tmpt5zqok3p.swift:31:23: error: cannot find 'Million' in scope\n    let million\
    \ = Int(Million)\n                      ^~~~~~~\n/tmp/tmpt5zqok3p.swift:32:23:\
    \ error: cannot find 'Billion' in scope\n    let billion = Int(Billion)\n    \
    \                  ^~~~~~~\n/tmp/tmpt5zqok3p.swift:33:24: error: cannot find 'Trillion'\
    \ in scope\n    let trillion = Int(Trillion)\n                       ^~~~~~~~\n\
    /tmp/tmpt5zqok3p.swift:34:27: error: cannot find 'Quadri"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for number in arr {\n        if number < 1 || number > 9 {\n\
    \            continue\n        }\n        i += 1\n        if i == 1 {\n      \
    \      result.append(String(number))\n        } else {\n            result.append(String(number))\n\
    \            result.append(\" One\")\n        }\n    }\n    if i == 0 {\n    \
    \    return result\n    }\n    for number in arr {\n        if number < 1 || number\
    \ > 9 {\n            continue\n        }\n        i += 1\n        if i == 1 {\n\
    \            result.append(String(number))\n        } else {\n            result.append(String(number))\n\
    \            result.append(\" Two\")\n        }\n    }\n    if i == 0 {\n    \
    \    return result\n    }\n    for number in arr {\n        if number < 1 || number\
    \ > 9 {\n            continue\n        }\n        i += 1\n        if i == 1 {\n\
    \            result.append(String(number))\n        } else {\n            result.append(String(number))\n\
    \            result.append(\" Three\")\n        }\n    }\n    if i == 0 {\n  \
    \      return result\n    }\n    for number in arr {\n        if number < 1 ||\
    \ number > 9 {\n            continue\n        }\n        i += 1\n        if i\
    \ == 1 {\n            result.append(String(number))\n        } else {\n      \
    \      result.append(String(number))\n            result.append(\" Four\")\n \
    \       }\n    }\n    if i == 0 {\n        return result\n    }\n    for number\
    \ in arr {\n        if number < 1 || number > 9 {\n            continue\n    \
    \    }\n        i += 1\n        if i == 1 {\n            result.append(String(number))\n\
    \        } else {\n            result.append(String(number))\n            result.append(\"\
    \ Five\")\n        }\n    }\n    if i == 0 {\n        return result\n    }\n \
    \   for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(number))\n\
    \        } else {\n            result.append(String(number))\n            result.append(\"\
    \ Six\")\n        }\n    }\n    if i == 0 {\n        return result\n    }\n  \
    \  for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(number))\n\
    \        } else {\n            result.append(String(number))\n            result.append(\"\
    \ Seven\")\n        }\n    }\n    if i == 0 {\n        return result\n    }\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(number))\n\
    \        } else {\n            result.append(String(number))\n            result.append(\"\
    \ Eight\")\n        }\n    }\n    if i == 0 {\n        return result\n    }\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(number))\n\
    \        } else {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmlns9dpk.swift:165:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpmlns9dpk.swift:137:23:\
    \ note: to match this opening '{'\n    for number in arr {\n                 \
    \     ^\n/tmp/tmpmlns9dpk.swift:165:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpmlns9dpk.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpmlns9dpk.swift:149:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num > 9 {\n            result.append(\"Nine\"\
    )\n        } else {\n            result.append(\"One\")\n        }\n        if\
    \ num < 1 {\n            result.append(\"Zero\")\n        } else {\n         \
    \   result[i] += String(num)\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpidqyoo3k.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed = ones.reverse()\n\
    \    let onesReversedString = onesReversed.map{ onesReversed[$0] }\n    let tensReversedString\
    \ = tensReversed.map{ tensReversed[$0] }\n    return onesReversedString + tensReversedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppd3an9ka.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmppd3an9ka.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmppd3an9ka.swift:19:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmppd3an9ka.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n/tmp/tmppd3an9ka.swift:22:31: error: cannot convert return expression\
    \ of type 'String' to return type '[String]'\n    return onesReversedString +\
    \ tensReversedString\n           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n      \
    \      continue\n        }\n        i += 1\n        if i == 1 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n            result.append(\"\
    \ Two\")\n        }\n    }\n    if i == 0 {\n        return arr\n    }\n    result.reverse()\n\
    \    for num in result {\n        if num == \"One\" {\n            result.removeFirst()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9cdscwu7.swift:30:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp9cdscwu7.swift:30:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let maxLength = arr.maxElement()\n    var result =\
    \ [String]()\n    for num in arr {\n        let digit = String(num)\n        if\
    \ digit == \"1\" {\n            result.append(contentsOf: [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n     \
    \   } else if digit == \"2\" {\n            result.append(contentsOf: [\"Two\"\
    , \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ])\n        } else if digit == \"3\" {\n            result.append(contentsOf:\
    \ [\"Three\", \"Two\", \"One\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == \"4\" {\n            result.append(contentsOf:\
    \ [\"Four\", \"Three\", \"Two\", \"One\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == \"5\" {\n            result.append(contentsOf:\
    \ [\"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == \"6\" {\n            result.append(contentsOf:\
    \ [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == \"7\" {\n            result.append(contentsOf:\
    \ [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Eight\"\
    , \"Nine\"])\n        } else if digit == \"8\" {\n            result.append(contentsOf:\
    \ [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    , \"Nine\"])\n        } else if digit == \"9\" {\n            result.append(contentsOf:\
    \ [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\"])\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_4157o4.swift:16:25: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    let maxLength = arr.maxElement()\n                    ~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 0 && num < 10 {\n            result.append(name[num])\n\
    \        } else {\n            result.append(name[num])\n        }\n    }\n  \
    \  for num in arr {\n        if num > 0 && num < 10 {\n            result.append(name[num])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2ntu4im6.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n/tmp/tmp2ntu4im6.swift:24:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[num])\n \
    \                         ^~~~\n/tmp/tmp2ntu4im6.swift:29:27: error: cannot find\
    \ 'name' in scope\n            result.append(name[num])\n                    \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    for i in arr {\n    \
    \    switch i {\n        case 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20:\n\
    \            result.append(String(format: \"%@\", i))\n        case 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31:\n            result.append(String(format: \"\
    %@\", i))\n        case 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44:\n\
    \            result.append(String(format: \"%@\", i))\n        case 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61:\n            result.append(String(format:\
    \ \"%@\", i))\n        case 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81:\n            result.append(String(format: \"%@\"\
    , i))\n        case 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99:\n            result.append(String(format: \"%@\", i))\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl81v8h63.swift:20:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%@\", i))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n/tmp/tmpl81v8h63.swift:22:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"%@\", i))\n                        \
    \        ^~~~~~~\n                                 repeating     count: \n/tmp/tmpl81v8h63.swift:24:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", i))\n                      \
    \          ^~~~~~~\n                                 repeating     count: \n/tmp/tmpl81v8h63.swift:26:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", i))\n                      \
    \          ^~~~~~~\n                                 repeating     count: \n/tmp/tmpl81v8h63.swift:28:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", i))\n                      \
    \          ^~~~~~~\n                                 repeating     count: \n/tmp/tmpl81v8h63.swift:30:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", i))\n                      \
    \          ^~~~~~~\n                                 repeating     count: \n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       if i == 0 {\n            result.append(String(n - 1))\n        } else\
    \ {\n            result.append(String(n - 1))\n            result.append(String(arr[i]\
    \ - 1))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmptoa8hcwf/tmptoa8hcwf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb9a545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb9a23cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb9a23c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb9a23b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptoa8hcwf                        0x000055f9f3ecb9a1 <unavailable> + 6561

    5    libc.so.6                          0x00002adb9a731460 __libc_start_main +
    245

    6    tmptoa8hcwf                        0x000055f9f3ecb449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       if i == 0 {\n            result.append(String(format: \"One\", n))\n \
    \       } else {\n            result.append(String(format: \"%@\", result[i-1]))\n\
    \        }\n        i += 1\n    }\n    if i == 0 {\n        return result\n  \
    \  }\n    result.append(String(format: \"%@\", result[i-1]))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv3sq17h6.swift:25:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"One\", n))\n                                ^~~~~~~\n                    \
    \             repeating      count: \n/tmp/tmpv3sq17h6.swift:27:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"%@\", result[i-1]))\n              \
    \                  ^~~~~~~\n                                 repeating     count:\
    \ \n/tmp/tmpv3sq17h6.swift:27:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n            result.append(String(format: \"\
    %@\", result[i-1]))\n                                                     ^\n\
    /tmp/tmpv3sq17h6.swift:34:25: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    result.append(String(format: \"%@\", result[i-1]))\n\
    \                        ^~~~~~~\n                         repeating     count:\
    \ \n/tmp/tmpv3sq17h6.swift:34:46: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n    result.append(String(format: \"%@\", result[i-1]))\n\
    \                                             ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result: [String] = []\n    var i = 0\n    for n\
    \ in arr {\n        if n > 0 && n < 10 {\n            result.append(nameForNumber(n))\n\
    \        } else {\n            result.append(\"\")\n        }\n    }\n    for\
    \ n in arr {\n        if n > 0 && n < 10 {\n            result[i] = nameForNumber(n)\n\
    \            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt1sddpcp.swift:20:27: error: cannot find 'nameForNumber' in scope\n\
    \            result.append(nameForNumber(n))\n                          ^~~~~~~~~~~~~\n\
    /tmp/tmpt1sddpcp.swift:27:25: error: cannot find 'nameForNumber' in scope\n  \
    \          result[i] = nameForNumber(n)\n                        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var current = 0\n    var last = 0\n    var lastDigit = 0\n    var lastDigitIndex\
    \ = 0\n    var lastDigitName = \"\"\n    for current in arr {\n        if current\
    \ > 9 {\n            lastDigit = current\n            lastDigitIndex = index\n\
    \            lastDigitName = digitNames[lastDigit]\n        }\n        if current\
    \ < 1 {\n            if lastDigit > 0 {\n                result[lastDigitIndex]\
    \ = lastDigitName\n            }\n            lastDigit = 0\n            lastDigitIndex\
    \ = 0\n            lastDigitName = \"\"\n        }\n        if current == 1 {\n\
    \            result[index] = \"One\"\n        }\n        if current == 2 {\n \
    \           result[index] = \"Two\"\n        }\n        if current == 3 {\n  \
    \          result[index] = \"Three\"\n        }\n        if current == 4 {\n \
    \           result[index] = \"Four\"\n        }\n        if current == 5 {\n \
    \           result[index] = \"Five\"\n        }\n        if current == 6 {\n \
    \           result[index] = \"Six\"\n        }\n        if current == 7 {\n  \
    \          result[index] = \"Seven\"\n        }\n        if current == 8 {\n \
    \           result[index] = \"Eight\"\n        }\n        if current == 9 {\n\
    \            result[index] = \"Nine\"\n        }\n        index++\n    }\n   \
    \ if lastDigit > 0 {\n        result[lastDigitIndex] = lastDigitName\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf5uyp9_f.swift:29:29: error: cannot find 'digitNames' in scope\n\
    \            lastDigitName = digitNames[lastDigit]\n                         \
    \   ^~~~~~~~~~\n/tmp/tmpf5uyp9_f.swift:66:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n >= min && n <= max {\n\
    \            result.append(name(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp76oqwlbj.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp76oqwlbj.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp76oqwlbj.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last != 0 {\n                let index = last - 10\n     \
    \           result.append(String(index))\n            }\n            result.append(String(num))\n\
    \            last = num\n        }\n    }\n    if last != 0 {\n        let index\
    \ = last - 10\n        result.append(String(index))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpkt7497zo/tmpkt7497zo.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad99f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad99c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad99c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad99c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkt7497zo                        0x000055db0c263951 <unavailable> + 6481

    5    libc.so.6                          0x00002aad9a157460 __libc_start_main +
    245

    6    tmpkt7497zo                        0x000055db0c2633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var n = arr.count\n\n    while i < n {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1\n            continue\n        }\n\n      \
    \  if i == 0 {\n            result.append(String(arr[i]))\n            i += 1\n\
    \            continue\n        }\n\n        if j == 0 {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n\n        if arr[i] < arr[j]\
    \ {\n            result.append(String(arr[i]))\n            i += 1\n        }\
    \ else {\n            result.append(String(arr[j]))\n            j += 1\n    \
    \    }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpim6ov8wi/tmpim6ov8wi.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b114c93dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114c634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b114c634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b114c6337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpim6ov8wi                        0x0000562862b4e8d1 <unavailable> + 6353

    5    libc.so.6                          0x00002b114cb29460 __libc_start_main +
    245

    6    tmpim6ov8wi                        0x0000562862b4e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number > 9 {\n            number = number\
    \ - 10\n        }\n        result.append(name[number])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt4iagl_y.swift:18:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpt4iagl_y.swift:20:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[number])\n  \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let digit = String(num)\n        result.append(digit)\n        i\
    \ += 1\n        if i == 3 {\n            i = 0\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmptym5_en3/tmptym5_en3.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d20ef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d20bedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d20bed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d20bec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptym5_en3                        0x0000557f1e04e9b1 <unavailable> + 6577

    5    libc.so.6                          0x00002b5d210e2460 __libc_start_main +
    245

    6    tmptym5_en3                        0x0000557f1e04e459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for n in arr {\n        if n > 0 && n < 10 {\n            result.append(nameOf(n))\n\
    \        } else {\n            result.append(\"\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp30ek53pt.swift:18:27: error: cannot find 'nameOf' in scope\n  \
    \          result.append(nameOf(n))\n                          ^~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       if i == 0 {\n            result.append(String(format: \"One\", n))\n \
    \       } else {\n            result.append(String(format: \"%@\", result[i-1]))\n\
    \        }\n        i += 1\n    }\n    if i == 0 {\n        return result\n  \
    \  }\n    result.append(String(format: \"%@\", result[i-1]))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv3sq17h6.swift:25:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"One\", n))\n                                ^~~~~~~\n                    \
    \             repeating      count: \n/tmp/tmpv3sq17h6.swift:27:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"%@\", result[i-1]))\n              \
    \                  ^~~~~~~\n                                 repeating     count:\
    \ \n/tmp/tmpv3sq17h6.swift:27:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n            result.append(String(format: \"\
    %@\", result[i-1]))\n                                                     ^\n\
    /tmp/tmpv3sq17h6.swift:34:25: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    result.append(String(format: \"%@\", result[i-1]))\n\
    \                        ^~~~~~~\n                         repeating     count:\
    \ \n/tmp/tmpv3sq17h6.swift:34:46: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n    result.append(String(format: \"%@\", result[i-1]))\n\
    \                                             ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[arr.count - 1]\n    for number in arr {\n        if number <\
    \ min {\n            continue\n        }\n        if number > max {\n        \
    \    continue\n        }\n        let index = number - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpizwwk37x.swift:29:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n >= min && n <= max {\n\
    \            result.append(name(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp76oqwlbj.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp76oqwlbj.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp76oqwlbj.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        let digit = n % 10\n      \
    \  let name = digitToName[digit]\n        if name != nil {\n            result.append(name!)\n\
    \        } else {\n            result.append(String(digit))\n        }\n    }\n\
    \    result.reverse()\n    for n in result {\n        if n > max {\n         \
    \   result.removeLast()\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzw85kwj5.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpzw85kwj5.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpzw85kwj5.swift:21:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName[digit]\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let digits = arr.map { String($0) }\n    let reversed\
    \ = digits.reverse()\n    let ones = reversed.map { $0 == \"1\" ? \"One\" : $0\
    \ }\n    let tens = reversed.map { $0 == \"10\" ? \"Ten\" : $0 }\n    let hundreds\
    \ = reversed.map { $0 == \"100\" ? \"Hundred\" : $0 }\n    let thousands = reversed.map\
    \ { $0 == \"1000\" ? \"Thousand\" : $0 }\n    let millions = reversed.map { $0\
    \ == \"1000000\" ? \"Million\" : $0 }\n    let billions = reversed.map { $0 ==\
    \ \"1000000000\" ? \"Billion\" : $0 }\n    let trillions = reversed.map { $0 ==\
    \ \"1000000000000\" ? \"Trillion\" : $0 }\n    let quadrillions = reversed.map\
    \ { $0 == \"1000000000000000\" ? \"Quadrillion\" : $0 }\n    let quintillions\
    \ = reversed.map { $0 == \"1000000000000000000\" ? \"Quintillion\" : $0 }\n  \
    \  let sextillions = reversed.map { $0 == \"1000000000000000000000\" ? \"Sextillion\"\
    \ : $0 }\n    let septillions = reversed.map { $0 == \"1000000000000000000000000\"\
    \ ? \"Septillion\" : $0 }\n    let octillions = reversed.map { $0 == \"1000000000000000000000000000\"\
    \ ? \"Octillion\" : $0 }\n    let nonillions = reversed.map { $0 == \"1000000000000000000000000000000\"\
    \ ? \"Nonillion\" : $0 }\n    let decillions = reversed.map { $0 == \"100000000000000000000000000000000\"\
    \ ? \"Decillion\" : $0 }\n    let undecillions = reversed.map { $0 == \"1000000000000000000000000000000000\"\
    \ ? \"Undecillion\" : $0 }\n    let duodecillions = reversed.map { $0 == \"10000000000000000000000000000000000\"\
    \ ? \"Duodecillion\" : $0 }\n    let tredecillions = reversed.map { $0 == \"100000000000000000000000000000000000\"\
    \ ? \"Tredecillion\" : $0 }\n    let quattuordecillions = reversed.map { $0 ==\
    \ \"100000000000000000000000000000000000000\" ? \"Quattuordecillion\" : $0 }\n\
    \    let quindecillions = reversed.map { $0 == \"10000000000000000000000000000000000000000\"\
    \ ? \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwkzaly43.swift:36:93: error: unterminated string literal\n    let\
    \ quindecillions = reversed.map { $0 == \"10000000000000000000000000000000000000000\"\
    \ ? \"\n                                                                     \
    \                       ^\n/tmp/tmpwkzaly43.swift:56:63: error: expected '}' at\
    \ end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])\n                                                              ^\n\
    /tmp/tmpwkzaly43.swift:14:40: note: to match this opening '{'\nfunc by_length(arr:\
    \ [Int]) -> [String] {\n                                       ^\n/tmp/tmpwkzaly43.swift:17:27:\
    \ error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n\
    \    let reversed = digits.reverse()\n                   ~~~~~~ ^\n/tmp/tmpwkzaly43.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let digits = arr.map { String($0)\
    \ }\n    ^~~\n    var\n/tmp/tmpwkzaly43.swift:40:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var digits = [0]\n\
    \    for num in arr {\n        digits.append(num)\n    }\n    digits.reverse()\n\
    \    for digit in digits {\n        if digit < 10 {\n            result.append(String(digit))\n\
    \        } else {\n            result.append(by_length_digit(digit))\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6abjqh4g.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp6abjqh4g.swift:28:27: error: cannot find 'by_length_digit' in scope\n\
    \            result.append(by_length_digit(digit))\n                         \
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(String(num))\n        i += 1\n        if i == 3 {\n\
    \            result.reverse()\n            i = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpyoep1k7g/tmpyoep1k7g.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da915cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da8e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da8e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da8e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyoep1k7g                        0x000055925588fa31 <unavailable> + 6705

    5    libc.so.6                          0x00002b5da9348460 __libc_start_main +
    245

    6    tmpyoep1k7g                        0x000055925588f4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    let digits = arr.sorted()\n    let reversed\
    \ = digits.reversed()\n    let ones = reversed.prefix(while: { $0 < 10 })\n  \
    \  let tens = reversed.prefix(while: { $0 >= 10 })\n    let onesAndTens = ones\
    \ + tens\n    let onesAndTensAndOnes = onesAndTens + ones\n    let onesAndTensAndOnesAndTens\
    \ = onesAndTensAndOnes + tens\n    let onesAndTensAndOnesAndTensAndOnes = onesAndTensAndOnesAndTens\
    \ + ones\n    let onesAndTensAndOnesAndTensAndOnesAndTens = onesAndTensAndOnesAndTensAndOnes\
    \ + tens\n    let onesAndTensAndOnesAndTensAndOnesAndTensAndOnes = onesAndTensAndOnesAndTensAndOnesAndTens\
    \ + ones\n    let onesAndTensAndOnesAndTensAndOnesAndTensAndOnesAndTens = onesAndTensAndOnesAndTensAndOnesAndTensAndOnes\
    \ + tens\n    let onesAndTensAndOnesAndTensAndOnesAndTensAndOnesAndOnes = onesAndTensAndOnesAndTensAndOnesAndTensAndOnesAndTens\
    \ + ones\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnes\
    \ + tens\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens\
    \ + ones\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens + tens\n    let\
    \ onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ + ones\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens + tens\n\
    \    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ + ones\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTen\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7f8dn0v_.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp7f8dn0v_.swift:22:28: error: binary operator '+' cannot be applied\
    \ to two 'Slice<ReversedCollection<[Int]>>' operands\n    let onesAndTens = ones\
    \ + tens\n                      ~~~~ ^ ~~~~\n/tmp/tmp7f8dn0v_.swift:30:65: error:\
    \ cannot find 'onesAndTensAndOnesAndTensAndOnesAndOnesAndOnes' in scope\n    let\
    \ onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnes\
    \ + tens\n                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7f8dn0v_.swift:32:72: error: use of local variable 'onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens'\
    \ before its declaration\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens + tens\n    \
    \                                                                   ^\n/tmp/tmp7f8dn0v_.swift:32:9:\
    \ note: 'onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens' declared\
    \ here\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens =\
    \ onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens + tens\n      \
    \  ^\n/tmp/tmp7f8dn0v_.swift:33:79: error: use of local variable 'onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens'\
    \ before its declaration\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens + ones\n\
    \                                                                            \
    \  ^\n/tmp/tmp7f8dn0v_.swift:33:9: note: 'onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens'\
    \ declared here\n    let onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = onesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens + ones\n\
    \        ^\n/tmp/tmp7f8dn0v_.swift:35:86: error: use of local variable 'onesAndTensAndOnesAndTensAn"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  for number in arr {\n        if number >= 1 && number <= 9 {\n            result[index]\
    \ = String(number)\n            index++\n        }\n    }\n    result.reverse()\n\
    \    for number in result {\n        if number == \"One\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Two\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Three\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Four\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Five\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Six\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Seven\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Eight\" {\n            result.removeAtIndex(index)\n\
    \        }\n        if number == \"Nine\" {\n            result.removeAtIndex(index)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxaobspap.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpxaobspap.swift:29:20:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:32:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:35:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:38:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:41:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:44:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:47:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:50:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpxaobspap.swift:53:20: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n            result.removeAtIndex(index)\n\
    \            ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    var result = [String]()\n    var digits = arr.map\
    \ { $0 }\n    \n    if digits.count < 10 { return result }\n    \n    let ones\
    \ = digits.filter { $0 % 10 == 0 }\n    let tens = digits.filter { $0 % 10 !=\
    \ 0 }\n    \n    let ones_count = ones.count\n    let tens_count = tens.count\n\
    \    \n    if ones_count > tens_count {\n        digits.reverse()\n    }\n   \
    \ \n    let ones_digits = ones\n    let tens_digits = tens\n    \n    if ones_count\
    \ > tens_count {\n        ones_digits.reverse()\n        tens_digits.reverse()\n\
    \    }\n    \n    let tens_digits_count = tens_digits.count\n    \n    for i in\
    \ 0..<tens_digits_count {\n        let tens_digit = tens_digits[i]\n        \n\
    \        if tens_digit == 0 {\n            continue\n        }\n        \n   \
    \     let tens_digit_index = tens_digits.index(of: tens_digit)\n        \n   \
    \     let tens_digit_name = ones_digits[tens_digit_index].description\n      \
    \  \n        if tens_digit_index == 0 {\n            result.append(tens_digit_name)\n\
    \        } else {\n            result.append(ones_digits[tens_digit_index - 1].description\
    \ + \", \" + tens_digit_name)\n        }\n    }\n    \n    for i in 0..<ones_count\
    \ {\n        let ones_digit = ones[i]\n        \n        if ones_digit == 0 {\n\
    \            continue\n        }\n        \n        let ones_digit_index = ones_digits.index(of:\
    \ ones_digit)\n        \n        let ones_digit_name = tens_digits[ones_digit_index].description\n\
    \        \n        if ones_digit_index == 0 {\n            result.append(ones_digit_name)\n\
    \        } else {\n            result.append(tens_digits[ones_digit_index - 1].description\
    \ + \", \" + ones_digit_name)\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmt9ifl01.swift:36:21: error: cannot use mutating member on immutable\
    \ value: 'ones_digits' is a 'let' constant\n        ones_digits.reverse()\n  \
    \      ~~~~~~~~~~~ ^\n/tmp/tmpmt9ifl01.swift:32:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let ones_digits = ones\n    ^~~\n    var\n/tmp/tmpmt9ifl01.swift:37:21:\
    \ error: cannot use mutating member on immutable value: 'tens_digits' is a 'let'\
    \ constant\n        tens_digits.reverse()\n        ~~~~~~~~~~~ ^\n/tmp/tmpmt9ifl01.swift:33:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let tens_digits = tens\n\
    \    ^~~\n    var\n/tmp/tmpmt9ifl01.swift:49:44: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let tens_digit_index = tens_digits.index(of:\
    \ tens_digit)\n                                           ^\n/tmp/tmpmt9ifl01.swift:49:44:\
    \ note: use 'firstIndex(of:)' instead\n        let tens_digit_index = tens_digits.index(of:\
    \ tens_digit)\n                                           ^~~~~\n            \
    \                               firstIndex\n/tmp/tmpmt9ifl01.swift:51:43: error:\
    \ value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n        let tens_digit_name\
    \ = ones_digits[tens_digit_index].description\n                              \
    \            ^\n/tmp/tmpmt9ifl01.swift:51:43: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        let tens_digit_name\
    \ = ones_digits[tens_digit_index].description\n                              \
    \            ^\n                                                           ??\
    \ <#default value#>\n/tmp/tmpmt9ifl01.swift:51:43: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        let tens_digit_name\
    \ = ones_digits[tens_digit_index].description\n                              \
    \            ^\n                                                          !\n\
    /tmp/tmpmt9ifl01.swift:56:39: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'A"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        result.append(String(num))\n    }\n    for num in arr {\n \
    \       if num < 1 || num > 9 {\n            continue\n        }\n        result[i]\
    \ = \"One\"\n        i += 1\n        result[i] = \"Two\"\n        i += 1\n   \
    \     result[i] = \"Three\"\n        i += 1\n        result[i] = \"Four\"\n  \
    \      i += 1\n        result[i] = \"Five\"\n        i += 1\n        result[i]\
    \ = \"Six\"\n        i += 1\n        result[i] = \"Seven\"\n        i += 1\n \
    \       result[i] = \"Eight\"\n        i += 1\n        result[i] = \"Nine\"\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzwblzz6h.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for i := 0; i < len(arr); i++ {\n        if arr[i] > last {\n            result.append(arr[last])\n\
    \        }\n        result.append(name[arr[i]])\n        last = arr[i]\n    }\n\
    \    if last < 9 {\n        result.append(name[last])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwc3kfwxs.swift:20:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwc3kfwxs.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwc3kfwxs.swift:20:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpwc3kfwxs.swift:28:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[last])\n    \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n >= min && n <= max {\n\
    \            result.append(name(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp026_kfqn.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp026_kfqn.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp026_kfqn.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result: [String] = []\n    var index =\
    \ 0\n    var last = 0\n    var lastDigit = 0\n    var lastDigitDigit = 0\n   \
    \ var lastDigitDigitDigit = 0\n    var lastDigitDigitDigitDigit = 0\n    var lastDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigit = 0\n    var lastDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var\
    \ lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n\
    \    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n\
    \    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ylss59t.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp3ylss59t.swift:30:9: error: invalid redeclaration of 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n\
    \    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n        ^\n/tmp/tmp3ylss59t.swift:29:9:\
    \ note: 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigit' previously declared\
    \ here\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n      \
    \  ^\n/tmp/tmp3ylss59t.swift:33:9: error: invalid redeclaration of 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n\
    \    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n   \
    \     ^\n/tmp/tmp3ylss59t.swift:32:9: note: 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\
    \ previously declared here\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmp3ylss59t.swift:36:9: error: invalid redeclaration of\
    \ 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n  \
    \  var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n        ^\n/tmp/tmp3ylss59t.swift:35:9: note: 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\
    \ previously declared here\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmp3ylss59t.swift:37:9: error: invalid redeclaration of\
    \ 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n  \
    \  var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n        ^\n/tmp/tmp3ylss59t.swift:35:9: note: 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\
    \ previously declared here\n    var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmp3ylss59t.swift:38:9: error: invalid redeclaration of\
    \ 'lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n  \
    \  var lastDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n        ^\n/"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let digits = arr.map { String($0) }\n    let reversed\
    \ = digits.reverse()\n    let ones = reversed.filter { ($0 as Int) == 1 }\n  \
    \  let tens = reversed.filter { ($0 as Int) == 10 }\n    let hundreds = reversed.filter\
    \ { ($0 as Int) == 100 }\n    let thousands = reversed.filter { ($0 as Int) ==\
    \ 1000 }\n    let ten_thousands = reversed.filter { ($0 as Int) == 10000 }\n \
    \   let hundred_thousands = reversed.filter { ($0 as Int) == 100000 }\n    let\
    \ millions = reversed.filter { ($0 as Int) == 1000000 }\n    let billions = reversed.filter\
    \ { ($0 as Int) == 10000000 }\n    let trillions = reversed.filter { ($0 as Int)\
    \ == 100000000 }\n    let quadrillions = reversed.filter { ($0 as Int) == 1000000000\
    \ }\n    let quintillions = reversed.filter { ($0 as Int) == 10000000000 }\n \
    \   let sextillions = reversed.filter { ($0 as Int) == 100000000000 }\n    let\
    \ septillions = reversed.filter { ($0 as Int) == 1000000000000 }\n    let octillions\
    \ = reversed.filter { ($0 as Int) == 10000000000000 }\n    let nonillions = reversed.filter\
    \ { ($0 as Int) == 100000000000000 }\n    let decillions = reversed.filter { ($0\
    \ as Int) == 1000000000000000 }\n    let undecillions = reversed.filter { ($0\
    \ as Int) == 10000000000000000 }\n    let duodecillions = reversed.filter { ($0\
    \ as Int) == 100000000000000000 }\n    let tredecillions = reversed.filter { ($0\
    \ as Int) == 1000000000000000000 }\n    let quattuordecillions = reversed.filter\
    \ { ($0 as Int) == 10000000000000000000 }\n    let quindecillions = reversed.filter\
    \ { ($0 as Int) == 100000000000000000000 }\n    let sexdecillions = reversed.filter\
    \ { ($0 as Int) == 1000000000000000000000 }\n    let septendecillions = reversed.filter\
    \ { ($0 as Int) == 10000000000000000000000 }\n    let octodecillions = reversed.filter\
    \ { ($0 as Int) == 100000000000000000000000 }\n    let nove\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo27o0auy.swift:19:27: error: cannot use mutating member on immutable\
    \ value: 'digits' is a 'let' constant\n    let reversed = digits.reverse()\n \
    \                  ~~~~~~ ^\n/tmp/tmpo27o0auy.swift:18:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let digits = arr.map { String($0) }\n    ^~~\n\
    \    var\n/tmp/tmpo27o0auy.swift:44:9: error: type annotation missing in pattern\n\
    \    let nove\n        ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    var last = 0\n    for num in arr {\n        if num == 1 {\n            result.append(ones[index])\n\
    \            index++\n            last = num\n        } else if num == 2 {\n \
    \           result.append(twos[index])\n            index++\n            last\
    \ = num\n        } else if num == 3 {\n            result.append(threes[index])\n\
    \            index++\n            last = num\n        } else if num == 4 {\n \
    \           result.append(fours[index])\n            index++\n            last\
    \ = num\n        } else if num == 5 {\n            result.append(fives[index])\n\
    \            index++\n            last = num\n        } else if num == 6 {\n \
    \           result.append(sixes[index])\n            index++\n            last\
    \ = num\n        } else if num == 7 {\n            result.append(sevens[index])\n\
    \            index++\n            last = num\n        } else if num == 8 {\n \
    \           result.append(eights[index])\n            index++\n            last\
    \ = num\n        } else if num == 9 {\n            result.append(nines[index])\n\
    \            index++\n            last = num\n        } else {\n            if\
    \ num != last {\n                result.append(ones[num - 1])\n            }\n\
    \            last = num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxhg18tuw.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpxhg18tuw.swift:23:27: error: cannot find 'ones' in scope\n      \
    \      result.append(ones[index])\n                          ^~~~\n/tmp/tmpxhg18tuw.swift:24:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n/tmp/tmpxhg18tuw.swift:27:27: error: cannot find\
    \ 'twos' in scope\n            result.append(twos[index])\n                  \
    \        ^~~~\n/tmp/tmpxhg18tuw.swift:28:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpxhg18tuw.swift:31:27:\
    \ error: cannot find 'threes' in scope\n            result.append(threes[index])\n\
    \                          ^~~~~~\n/tmp/tmpxhg18tuw.swift:32:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            index++\n   \
    \              ^~\n/tmp/tmpxhg18tuw.swift:35:27: error: cannot find 'fours' in\
    \ scope\n            result.append(fours[index])\n                          ^~~~~\n\
    /tmp/tmpxhg18tuw.swift:36:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpxhg18tuw.swift:39:27:\
    \ error: cannot find 'fives' in scope\n            result.append(fives[index])\n\
    \                          ^~~~~\n/tmp/tmpxhg18tuw.swift:40:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            index++\n   \
    \              ^~\n/tmp/tmpxhg18tuw.swift:43:27: error: cannot find 'sixes' in\
    \ scope\n            result.append(sixes[index])\n                          ^~~~~\n\
    /tmp/tmpxhg18tuw.swift:44:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpxhg18tuw.swift:47:27:\
    \ error: cannot find 'sevens' in scope\n            result.append(sevens[index])\n\
    \                          ^~~~~~\n/tmp/tmpxhg18tuw.swift:48:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            index++\n   \
    \              ^"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var current = 0\n    var last = 0\n    var lastDigit = 0\n    var lastDigitIndex\
    \ = 0\n    for current in arr {\n        if current < 1 {\n            continue\n\
    \        }\n        if current > 9 {\n            continue\n        }\n      \
    \  if current == last {\n            continue\n        }\n        lastDigit =\
    \ current\n        lastDigitIndex = index\n        last = current\n        index\
    \ += 1\n    }\n    if last == 0 {\n        return arr\n    }\n    for current\
    \ in arr {\n        if current == last {\n            continue\n        }\n  \
    \      if current < 1 {\n            continue\n        }\n        if current >\
    \ 9 {\n            continue\n        }\n        if current == lastDigit {\n  \
    \          continue\n        }\n        if current == lastDigit - 1 {\n      \
    \      result.append(String(lastDigitIndex))\n            continue\n        }\n\
    \        result.append(String(lastDigitIndex))\n        result.append(String(lastDigitIndex))\n\
    \        lastDigitIndex += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmfx7m3oh.swift:40:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpmfx7m3oh.swift:40:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    for number in arr {\n        if number > 9 {\n       \
    \     number = number - 10\n        }\n        result[index] = names[number]\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfxwq4zze.swift:19:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpfxwq4zze.swift:21:25:\
    \ error: cannot find 'names' in scope\n        result[index] = names[number]\n\
    \                        ^~~~~\n/tmp/tmpfxwq4zze.swift:22:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let digits = arr.sorted()\n    let reversed = digits.reversed()\n\
    \    let ones = reversed.filter{$0 % 10 == 1}\n    let tens = reversed.filter{$0\
    \ % 10 == 0}\n    let tensNames = tens.map{ String($0 / 10) }\n    let onesNames\
    \ = ones.map{ String($0 / 10) }\n    let names = onesNames.append(tensNames)\n\
    \    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_lzyffk9.swift:24:27: error: no exact matches in call to instance\
    \ method 'append'\n    let names = onesNames.append(tensNames)\n             \
    \             ^\n/tmp/tmp_lzyffk9.swift:24:27: note: found candidate with type\
    \ '(__owned [String]) -> ()'\n    let names = onesNames.append(tensNames)\n  \
    \                        ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed = ones.reverse()\n\
    \    let onesReversedString = onesReversed.map{ $0.description }\n    let tensReversedString\
    \ = tensReversed.map{ $0.description }\n    return onesReversedString.append(tensReversedString)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn5bu_dmd.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpn5bu_dmd.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmpn5bu_dmd.swift:19:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpn5bu_dmd.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var last = 0\n\
    \    for i := 0; i < arr.count; i++ {\n        if arr[i] > 9 {\n            last\
    \ = i\n            break\n        }\n    }\n    for i := 0; i < arr.count; i++\
    \ {\n        if arr[i] > 9 {\n            result.append(arr[last])\n         \
    \   last += 1\n        } else {\n            result.append(arr[i])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0d8p8qa1.swift:20:12: error: expected type\n    for i := 0; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp0d8p8qa1.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmp0d8p8qa1.swift:20:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmp0d8p8qa1.swift:26:12: error: expected type\n    for i := 0; i\
    \ < arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp0d8p8qa1.swift:26:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmp0d8p8qa1.swift:26:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < arr.count; i++ {\n       \
    \    ^\n/tmp/tmp0d8p8qa1.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last: Int =\
    \ 0\n    for num in arr {\n        if num > 9 {\n            last = num\n    \
    \    } else {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n            last = 0\n    \
    \    }\n    }\n    if last != 0 {\n        result.append(String(last))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4pq6r5f8/tmp4pq6r5f8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ffc32ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ffc021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ffc021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ffc0207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pq6r5f8                        0x000055800c0eb901 <unavailable> + 6401

    5    libc.so.6                          0x00002b4ffc516460 __libc_start_main +
    245

    6    tmp4pq6r5f8                        0x000055800c0eb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    let maxLen = arr.max()!\n    var result = [String]()\n\
    \    for num in arr {\n        let len = String(num).count\n        if len <=\
    \ maxLen {\n            result.append(String(num))\n        } else {\n       \
    \     let start = String(num).index(num.startIndex, offsetBy: maxLen - len)\n\
    \            let end = String(num).index(start, offsetBy: 0)\n            result.append(String(num[start..<end]))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfmb6c63x.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpfmb6c63x.swift:25:47: error: value of type 'Int' has no member 'startIndex'\n\
    \            let start = String(num).index(num.startIndex, offsetBy: maxLen -\
    \ len)\n                                          ~~~ ^~~~~~~~~~\n/tmp/tmpfmb6c63x.swift:27:37:\
    \ error: value of type 'Int' has no subscripts\n            result.append(String(num[start..<end]))\n\
    \                                 ~~~^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    var j =\
    \ 0\n    var k = arr.count\n    while i < k {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1\n            continue\n        }\n        j += 1\n\
    \        result[j] = name[arr[i]]\n        i += 1\n    }\n    result.reverse()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmd7jt5pl.swift:26:21: error: cannot find 'name' in scope\n    \
    \    result[j] = name[arr[i]]\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let len = arr.count\n    let reversed = arr.reverse()\n\
    \    var result = [String]()\n    for i in 0..<len {\n        let digit = reversed[i]\n\
    \        if digit < 10 {\n            result.append(String(digit))\n        }\
    \ else {\n            let index = digit - 10\n            let name = oneDigitNames[index]\n\
    \            result.append(name)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuhjycd2r.swift:19:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    let reversed = arr.reverse()\n       \
    \            ~~~ ^\n/tmp/tmpuhjycd2r.swift:27:24: error: cannot find 'oneDigitNames'\
    \ in scope\n            let name = oneDigitNames[index]\n                    \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let index = number - 1\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2y37urjo.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpezak15mw/tmpezak15mw.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c46311c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c46008b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c46008988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c460077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezak15mw                        0x00005648830cf841 <unavailable> + 6209

    5    libc.so.6                          0x00002b7c464fd460 __libc_start_main +
    245

    6    tmpezak15mw                        0x00005648830cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed = ones.reverse()\n\
    \    let onesReversedString = onesReversed.map { String($0) }\n    let tensReversedString\
    \ = tensReversed.map { String($0) }\n    let reversedString = onesReversedString.append(tensReversedString)\n\
    \    let reversedStringArray = reversedString.map { String($0) }\n    return reversedStringArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6g0xvxc3.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmp6g0xvxc3.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmp6g0xvxc3.swift:19:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmp6g0xvxc3.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n\n    var result = [String]()\n    var index\
    \ = 0\n    while index < arr.count {\n        let value = arr[index]\n       \
    \ let digit = value % 10\n        let name = String(digit)\n        if digit ==\
    \ 0 {\n            result.append(name)\n        } else {\n            result.append(reverseName(name))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphmprjvr3.swift:28:27: error: cannot find 'reverseName' in scope\n\
    \            result.append(reverseName(name))\n                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    for num in arr {\n        if num > 9 {\n            index = index + 1\n \
    \           result[index] = String(num - 10)\n        } else {\n            result[index]\
    \ = String(num)\n        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmputeq5cvt.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmputeq5cvt.swift:28:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  while index < arr.count {\n        let value = arr[index]\n        if value\
    \ < 1 || value > 9 {\n            index += 1\n            continue\n        }\n\
    \        let digit = value - 10\n        let name = digitToName(digit)\n     \
    \   result.append(name)\n        index += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoorqm1k9.swift:27:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpoorqm1k9.swift:31:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result: [String] = []\n    var last = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let digit = num - last\n        result.append(String(digit))\n \
    \       last = num\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4vposi9p/tmp4vposi9p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab00bfdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab00bcd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab00bcd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab00bcd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vposi9p                        0x0000561721b42961 <unavailable> + 6497

    5    libc.so.6                          0x00002ab00c1cb460 __libc_start_main +
    245

    6    tmp4vposi9p                        0x0000561721b42409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    for number\
    \ in arr {\n        if number >= 1 && number <= 9 {\n            result.append(String(number))\n\
    \        } else {\n            result.append(String(number))\n        }\n    }\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result[i] = \"One\"\n            i += 1\n        }\n        if number >= 10\
    \ && number <= 99 {\n            result[i] = \"Two\"\n            i += 1\n   \
    \     }\n        if number >= 100 && number <= 999 {\n            result[i] =\
    \ \"Three\"\n            i += 1\n        }\n        if number >= 1000 && number\
    \ <= 9999 {\n            result[i] = \"Four\"\n            i += 1\n        }\n\
    \        if number >= 10000 && number <= 99999 {\n            result[i] = \"Five\"\
    \n            i += 1\n        }\n        if number >= 100000 && number <= 999999\
    \ {\n            result[i] = \"Six\"\n            i += 1\n        }\n        if\
    \ number >= 1000000 && number <= 9999999 {\n            result[i] = \"Seven\"\n\
    \            i += 1\n        }\n        if number >= 10000000 && number <= 99999999\
    \ {\n            result[i] = \"Eight\"\n            i += 1\n        }\n      \
    \  if number >= 100000000 && number <= 999999999 {\n            result[i] = \"\
    Nine\"\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpm8v7zgrj/tmpm8v7zgrj.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1979afcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19797f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19797f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19797f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8v7zgrj                        0x00005569257419a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b1979ce8460 __libc_start_main +
    245

    6    tmpm8v7zgrj                        0x0000556925741449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num > 0 && num < 10 {\n            result.append(digits[num])\n\
    \        } else {\n            result.append(digits[num - 10] + digits[num - 1])\n\
    \        }\n        i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbrq1rfq6.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpbrq1rfq6.swift:22:27: error: cannot find 'digits' in scope\n    \
    \        result.append(digits[num])\n                          ^~~~~~\n/tmp/tmpbrq1rfq6.swift:24:27:\
    \ error: cannot find 'digits' in scope\n            result.append(digits[num -\
    \ 10] + digits[num - 1])\n                          ^~~~~~\n/tmp/tmpbrq1rfq6.swift:24:46:\
    \ error: cannot find 'digits' in scope\n            result.append(digits[num -\
    \ 10] + digits[num - 1])\n                                             ^~~~~~\n\
    /tmp/tmpbrq1rfq6.swift:28:19: error: cannot convert return expression of type\
    \ '()' to return type '[String]'\n    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    if min == max {\n        return arr\n    }\n    var\
    \ i = 0\n    for num in arr {\n        if num == min {\n            result.append(one[i\
    \ % len(one)])\n            i += 1\n        } else if num == max {\n         \
    \   result.append(one[i % len(one)])\n            i += 1\n        } else {\n \
    \           result.append(two[num % len(two)])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8xhih5x2.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp8xhih5x2.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp8xhih5x2.swift:22:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp8xhih5x2.swift:22:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmp8xhih5x2.swift:27:27: error: cannot find 'one' in scope\n            result.append(one[i\
    \ % len(one)])\n                          ^~~\n/tmp/tmp8xhih5x2.swift:27:35: error:\
    \ cannot find 'len' in scope\n            result.append(one[i % len(one)])\n \
    \                                 ^~~\n/tmp/tmp8xhih5x2.swift:27:39: error: cannot\
    \ find 'one' in scope\n            result.append(one[i % len(one)])\n        \
    \                              ^~~\n/tmp/tmp8xhih5x2.swift:30:27: error: cannot\
    \ find 'one' in scope\n            result.append(one[i % len(one)])\n        \
    \                  ^~~\n/tmp/tmp8xhih5x2.swift:30:35: error: cannot find 'len'\
    \ in scope\n            result.append(one[i % len(one)])\n                   \
    \               ^~~\n/tmp/tmp8xhih5x2.swift:30:39: error: cannot find 'one' in\
    \ scope\n            result.append(one[i % len(one)])\n                      \
    \                ^~~\n/tmp/tmp8xhih5x2.swift:33:27: error: cannot find 'two' in\
    \ scope\n            result.append(two[num % len(two)])\n                    \
    \      ^~~\n/tmp/tmp8xhih5x2.swift:33:37: error: cannot find 'len' in scope\n\
    \            result.append(two[num % len(two)])\n                     "
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var current = 0\n\
    \    var last = 0\n    for current < arr.count {\n        last = current\n   \
    \     current = current + 1\n        if current < arr.count {\n            if\
    \ arr[current] == 1 {\n                result.append(\"One\")\n            }\n\
    \            if arr[current] == 2 {\n                result.append(\"Two\")\n\
    \            }\n            if arr[current] == 3 {\n                result.append(\"\
    Three\")\n            }\n            if arr[current] == 4 {\n                result.append(\"\
    Four\")\n            }\n            if arr[current] == 5 {\n                result.append(\"\
    Five\")\n            }\n            if arr[current] == 6 {\n                result.append(\"\
    Six\")\n            }\n            if arr[current] == 7 {\n                result.append(\"\
    Seven\")\n            }\n            if arr[current] == 8 {\n                result.append(\"\
    Eight\")\n            }\n            if arr[current] == 9 {\n                result.append(\"\
    Nine\")\n            }\n        }\n    }\n    if last == 0 {\n        return result\n\
    \    }\n    result.reverse()\n    for current in 0..<last {\n        result[current]\
    \ = result[current].capitalized\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpar4zqrpg.swift:21:17: error: expected 'in' after for-each pattern\n\
    \    for current < arr.count {\n                ^\n/tmp/tmpar4zqrpg.swift:21:17:\
    \ error: unary operator cannot be separated from its operand\n    for current\
    \ < arr.count {\n                ^~\n                 \n/tmp/tmpar4zqrpg.swift:21:17:\
    \ error: '<' is not a prefix unary operator\n    for current < arr.count {\n \
    \               ^\n/tmp/tmpar4zqrpg.swift:59:43: error: value of type 'String'\
    \ has no member 'capitalized'\n        result[current] = result[current].capitalized\n\
    \                          ~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if min <= n && n <= max {\n            result.append(names[n\
    \ - 1])\n        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm39rk2l7.swift:21:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[n - 1])\n                          ^~~~~\n/tmp/tmpm39rk2l7.swift:24:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result = [String]()\n    var i = 0\n   \
    \ var j = 0\n    var k = arr.count\n    while i < k {\n        if arr[i] < 1 {\n\
    \            i += 1\n            continue\n        }\n        if arr[i] > 9 {\n\
    \            i += 1\n            continue\n        }\n        if i == k {\n  \
    \          break\n        }\n        \n        let digit = arr[i]\n        \n\
    \        if digit == 1 {\n            result.append(one)\n            i += 1\n\
    \            continue\n        }\n        if digit == 2 {\n            result.append(two)\n\
    \            i += 1\n            continue\n        }\n        if digit == 3 {\n\
    \            result.append(three)\n            i += 1\n            continue\n\
    \        }\n        if digit == 4 {\n            result.append(four)\n       \
    \     i += 1\n            continue\n        }\n        if digit == 5 {\n     \
    \       result.append(five)\n            i += 1\n            continue\n      \
    \  }\n        if digit == 6 {\n            result.append(six)\n            i +=\
    \ 1\n            continue\n        }\n        if digit == 7 {\n            result.append(seven)\n\
    \            i += 1\n            continue\n        }\n        if digit == 8 {\n\
    \            result.append(eight)\n            i += 1\n            continue\n\
    \        }\n        if digit == 9 {\n            result.append(nine)\n       \
    \     i += 1\n            continue\n        }\n        \n        i += 1\n    }\n\
    \    \n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp60wizhco.swift:37:27: error: cannot find 'one' in scope\n     \
    \       result.append(one)\n                          ^~~\n/tmp/tmp60wizhco.swift:42:27:\
    \ error: cannot find 'two' in scope\n            result.append(two)\n        \
    \                  ^~~\n/tmp/tmp60wizhco.swift:47:27: error: cannot find 'three'\
    \ in scope\n            result.append(three)\n                          ^~~~~\n\
    /tmp/tmp60wizhco.swift:52:27: error: cannot find 'four' in scope\n           \
    \ result.append(four)\n                          ^~~~\n/tmp/tmp60wizhco.swift:57:27:\
    \ error: cannot find 'five' in scope\n            result.append(five)\n      \
    \                    ^~~~\n/tmp/tmp60wizhco.swift:62:27: error: cannot find 'six'\
    \ in scope\n            result.append(six)\n                          ^~~\n/tmp/tmp60wizhco.swift:67:27:\
    \ error: cannot find 'seven' in scope\n            result.append(seven)\n    \
    \                      ^~~~~\n/tmp/tmp60wizhco.swift:72:27: error: cannot find\
    \ 'eight' in scope\n            result.append(eight)\n                       \
    \   ^~~~~\n/tmp/tmp60wizhco.swift:77:27: error: cannot find 'nine' in scope\n\
    \            result.append(nine)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var temp = 0\n    var temp2 = 0\n    var temp3 = 0\n\
    \    var temp4 = 0\n    var temp5 = 0\n    var temp6 = 0\n    var temp7 = 0\n\
    \    var temp8 = 0\n    var temp9 = 0\n\n    for i < arr.count {\n        if arr[i]\
    \ < 1 {\n            continue\n        }\n\n        if arr[i] < 10 {\n       \
    \     temp = \"\\(arr[i])\"\n        } else {\n            temp = \"\\(arr[i]%10)\"\
    \n        }\n\n        if temp < \"1\" {\n            temp2 = \"One\"\n      \
    \  } else {\n            temp2 = \"Two\"\n        }\n\n        if temp2 < \"1\"\
    \ {\n            temp3 = \"One\"\n        } else {\n            temp3 = \"Two\"\
    \n        }\n\n        if temp3 < \"1\" {\n            temp4 = \"One\"\n     \
    \   } else {\n            temp4 = \"Two\"\n        }\n\n        if temp4 < \"\
    1\" {\n            temp5 = \"One\"\n        } else {\n            temp5 = \"Two\"\
    \n        }\n\n        if temp5 < \"1\" {\n            temp6 = \"One\"\n     \
    \   } else {\n            temp6 = \"Two\"\n        }\n\n        if temp6 < \"\
    1\" {\n            temp7 = \"One\"\n        } else {\n            temp7 = \"Two\"\
    \n        }\n\n        if temp7 < \"1\" {\n            temp8 = \"One\"\n     \
    \   } else {\n            temp8 = \"Two\"\n        }\n\n        if temp8 < \"\
    1\" {\n            temp9 = \"One\"\n        } else {\n            temp9 = \"Two\"\
    \n        }\n\n        if temp9 < \"1\" {\n            temp = \"One\"\n      \
    \  } else {\n            temp = \"Two\"\n        }\n\n        if temp < \"2\"\
    \ {\n            temp2 = \"One\"\n        } else {\n            temp2 = \"Two\"\
    \n        }\n\n        if temp2 < \"2\" {\n            temp3 = \"One\"\n     \
    \   } else {\n            temp3 = \"Two\"\n        }\n\n        if temp3 < \"\
    2\" {\n            temp4 = \"One\"\n        } else {\n            temp4 = \"Two\"\
    \n        }\n\n        if temp4 < \"2\" {\n            temp5 = \"One\"\n     \
    \   } else {\n            temp5 = \"Two\"\n        }\n\n        if temp5 < \"\
    2\" {\n            temp6 = \"One\"\n        } else {\n            temp6 = \"Two\"\
    \n        }\n\n        if temp6 < \"2\" {\n            temp7 = \"One\"\n     \
    \   } else {\n            temp7 = \"Two\"\n        }\n\n        if temp7 < \"\
    2\" {\n            temp8 = \"One\"\n        } else {\n            temp8 = \"Two\"\
    \n        }\n\n        if temp8 < \"2\" {\n            temp9 = \"One\"\n     \
    \   } else {\n            temp9 = \"Two\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp14jd9s5q.swift:33:11: error: expected 'in' after for-each pattern\n\
    \    for i < arr.count {\n          ^\n/tmp/tmp14jd9s5q.swift:33:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < arr.count {\n   \
    \       ^~\n           \n/tmp/tmp14jd9s5q.swift:163:63: error: expected '}' at\
    \ end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])\n                                                              ^\n\
    /tmp/tmp14jd9s5q.swift:33:23: note: to match this opening '{'\n    for i < arr.count\
    \ {\n                      ^\n/tmp/tmp14jd9s5q.swift:163:63: error: expected '}'\
    \ at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"\
    Eight\", \"Four\"])\n                                                        \
    \      ^\n/tmp/tmp14jd9s5q.swift:14:40: note: to match this opening '{'\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n                                      \
    \ ^\n/tmp/tmp14jd9s5q.swift:33:11: error: '<' is not a prefix unary operator\n\
    \    for i < arr.count {\n          ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result: [String] = []\n    \n    for i in\
    \ 0 ..< arr.count {\n        let value = arr[i]\n        \n        if value <\
    \ 1 || value > 9 {\n            continue\n        }\n        \n        let digit\
    \ = String(value - 1)\n        \n        if digit == \"0\" {\n            digit\
    \ = \"One\"\n        } else if digit == \"1\" {\n            digit = \"Two\"\n\
    \        } else if digit == \"2\" {\n            digit = \"Three\"\n        }\
    \ else if digit == \"3\" {\n            digit = \"Four\"\n        } else if digit\
    \ == \"4\" {\n            digit = \"Five\"\n        } else if digit == \"5\" {\n\
    \            digit = \"Six\"\n        } else if digit == \"6\" {\n           \
    \ digit = \"Seven\"\n        } else if digit == \"7\" {\n            digit = \"\
    Eight\"\n        } else if digit == \"8\" {\n            digit = \"Nine\"\n  \
    \      }\n        \n        result.append(digit)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1ijxpl1l.swift:29:13: error: cannot assign to value: 'digit' is\
    \ a 'let' constant\n            digit = \"One\"\n            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(value\
    \ - 1)\n        ^~~\n        var\n/tmp/tmp1ijxpl1l.swift:31:13: error: cannot\
    \ assign to value: 'digit' is a 'let' constant\n            digit = \"Two\"\n\
    \            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let digit = String(value - 1)\n        ^~~\n      \
    \  var\n/tmp/tmp1ijxpl1l.swift:33:13: error: cannot assign to value: 'digit' is\
    \ a 'let' constant\n            digit = \"Three\"\n            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(value\
    \ - 1)\n        ^~~\n        var\n/tmp/tmp1ijxpl1l.swift:35:13: error: cannot\
    \ assign to value: 'digit' is a 'let' constant\n            digit = \"Four\"\n\
    \            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let digit = String(value - 1)\n        ^~~\n      \
    \  var\n/tmp/tmp1ijxpl1l.swift:37:13: error: cannot assign to value: 'digit' is\
    \ a 'let' constant\n            digit = \"Five\"\n            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(value\
    \ - 1)\n        ^~~\n        var\n/tmp/tmp1ijxpl1l.swift:39:13: error: cannot\
    \ assign to value: 'digit' is a 'let' constant\n            digit = \"Six\"\n\
    \            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let digit = String(value - 1)\n        ^~~\n      \
    \  var\n/tmp/tmp1ijxpl1l.swift:41:13: error: cannot assign to value: 'digit' is\
    \ a 'let' constant\n            digit = \"Seven\"\n            ^~~~~\n/tmp/tmp1ijxpl1l.swift:26:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(value\
    \ - 1)\n        ^~~\n        var\n/tmp/tmp1ijxpl1l.swift:43:13: error: cannot\
    \ assign to value: 'digit' is a 'let' constant\n            digit = \"Eight\"\n\
    \            ^~~~~\n/tmp/tmp1i"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        i += 1\n        if i == 1 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n            result.append(String(i))\n\
    \        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6ilvlyw9.swift:32:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last: Int =\
    \ 0\n    for num in arr {\n        if num > 9 {\n            last = num\n    \
    \    } else {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n            last = 0\n    \
    \    }\n    }\n    if last != 0 {\n        result.append(String(last))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4pq6r5f8/tmp4pq6r5f8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ffc32ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ffc021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ffc021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ffc0207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pq6r5f8                        0x000055800c0eb901 <unavailable> + 6401

    5    libc.so.6                          0x00002b4ffc516460 __libc_start_main +
    245

    6    tmp4pq6r5f8                        0x000055800c0eb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = arr[0]\n    let max = arr[arr.count - 1]\n\
    \    var result = [String]()\n    for n in arr {\n        if min <= n && n <=\
    \ max {\n            result.append(nameForNumber(n))\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfacnxpz1.swift:21:27: error: cannot find 'nameForNumber' in scope\n\
    \            result.append(nameForNumber(n))\n                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var index = 0\n\
    \    var last = 0\n    var lastDigit = 0\n    var lastDigitIndex = 0\n\n    for\
    \ index in 0..<arr.count {\n        let digit = arr[index]\n        if digit <\
    \ 10 {\n            result.append(String(digit))\n        } else {\n         \
    \   lastDigit = digit\n            lastDigitIndex = index\n        }\n    }\n\n\
    \    if lastDigit == 0 {\n        return result\n    }\n\n    let lastDigitName\
    \ = digitName[lastDigit]\n    var reversedArray = [Int]()\n\n    for index in\
    \ 0..<arr.count {\n        let digit = arr[index]\n        if digit < 10 {\n \
    \           reversedArray.append(digit)\n        } else {\n            if digit\
    \ == lastDigit {\n                reversedArray.append(lastDigit)\n          \
    \  } else {\n                reversedArray.append(digit - 10)\n            }\n\
    \        }\n    }\n\n    for index in 0..<reversedArray.count {\n        let digit\
    \ = reversedArray[index]\n        if digit < 10 {\n            result.append(String(digit))\n\
    \        } else {\n            result.append(digitName[digit])\n        }\n  \
    \  }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv61osa_p.swift:39:25: error: cannot find 'digitName' in scope\n\
    \    let lastDigitName = digitName[lastDigit]\n                        ^~~~~~~~~\n\
    /tmp/tmpv61osa_p.swift:60:27: error: cannot find 'digitName' in scope\n      \
    \      result.append(digitName[digit])\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    for num\
    \ in arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n\
    \        result[i++] = \"\\(num)\" // \"\\(num)\" is a string interpolation\n\
    \    }\n    result.reverse()\n    for char in result {\n        if char == \"\
    One\" || char == \"Two\" || char == \"Three\" || char == \"Four\" ||\n       \
    \     char == \"Five\" || char == \"Six\" || char == \"Seven\" || char == \"Eight\"\
    \ ||\n            char == \"Nine\" {\n            continue\n        }\n      \
    \  char = char.stringByReplacingOccurrencesOfString(\" \", withString: \"\")\n\
    \        char = char.stringByReplacingOccurrencesOfString(\"-\", withString: \"\
    \")\n        char = char.stringByReplacingOccurrencesOfString(\",\", withString:\
    \ \"\")\n        char = char.stringByReplacingOccurrencesOfString(\".\", withString:\
    \ \"\")\n        char = char.stringByReplacingOccurrencesOfString(\"0\", withString:\
    \ \"\")\n        char = char.stringByReplacingOccurrencesOfString(\"1\", withString:\
    \ \"One\")\n        char = char.stringByReplacingOccurrencesOfString(\"2\", withString:\
    \ \"Two\")\n        char = char.stringByReplacingOccurrencesOfString(\"3\", withString:\
    \ \"Three\")\n        char = char.stringByReplacingOccurrencesOfString(\"4\",\
    \ withString: \"Four\")\n        char = char.stringByReplacingOccurrencesOfString(\"\
    5\", withString: \"Five\")\n        char = char.stringByReplacingOccurrencesOfString(\"\
    6\", withString: \"Six\")\n        char = char.stringByReplacingOccurrencesOfString(\"\
    7\", withString: \"Seven\")\n        char = char.stringByReplacingOccurrencesOfString(\"\
    8\", withString: \"Eight\")\n        char = char.stringByReplacingOccurrencesOfString(\"\
    9\", withString: \"Nine\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpekwppafr.swift:22:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result[i++] = \"\\(num)\" // \"\\(num)\" is a\
    \ string interpolation\n                ^~\n/tmp/tmpekwppafr.swift:31:9: error:\
    \ cannot assign to value: 'char' is a 'let' constant\n        char = char.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\")\n        ^~~~\n/tmp/tmpekwppafr.swift:31:21: error: value\
    \ of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n    \
    \    char = char.stringByReplacingOccurrencesOfString(\" \", withString: \"\"\
    )\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekwppafr.swift:32:9:\
    \ error: cannot assign to value: 'char' is a 'let' constant\n        char = char.stringByReplacingOccurrencesOfString(\"\
    -\", withString: \"\")\n        ^~~~\n/tmp/tmpekwppafr.swift:32:21: error: value\
    \ of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n    \
    \    char = char.stringByReplacingOccurrencesOfString(\"-\", withString: \"\"\
    )\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekwppafr.swift:33:9:\
    \ error: cannot assign to value: 'char' is a 'let' constant\n        char = char.stringByReplacingOccurrencesOfString(\"\
    ,\", withString: \"\")\n        ^~~~\n/tmp/tmpekwppafr.swift:33:21: error: value\
    \ of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n    \
    \    char = char.stringByReplacingOccurrencesOfString(\",\", withString: \"\"\
    )\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekwppafr.swift:34:9:\
    \ error: cannot assign to value: 'char' is a 'let' constant\n        char = char.stringByReplacingOccurrencesOfString(\"\
    .\", withString: \"\")\n        ^~~~\n/tmp/tmpekwppafr.swift:34:21: error: value\
    \ of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n    \
    \    char = char.stringByReplacingOccurrencesOfString(\".\", withString: \"\"\
    )\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpekwppafr.swift:35:9:\
    \ error: cannot assign to value: 'char' is a 'let' constant\n        char = char.stringByReplacingOccurrencesOfString(\"\
    0\", withString: \""
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var index = 0\n    while\
    \ index < arr.count {\n        let value = arr[index]\n        if value < 1 ||\
    \ value > 9 {\n            index += 1\n            continue\n        }\n     \
    \   let digit = value - 10\n        result.append(names[index])\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz_ko8dr1.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed = ones.reverse()\n\
    \    let onesReversedString = onesReversed.map { $0.description }\n    let tensReversedString\
    \ = tensReversed.map { $0.description }\n    return onesReversedString.append(tensReversedString)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt2xba1of.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpt2xba1of.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmpt2xba1of.swift:19:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpt2xba1of.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var index\
    \ = 0\n    while index < arr.count {\n        let value = arr[index]\n       \
    \ switch value {\n        case 1:\n            result.append(\"One\")\n      \
    \  case 2:\n            result.append(\"Two\")\n        case 3:\n            result.append(\"\
    Three\")\n        case 4:\n            result.append(\"Four\")\n        case 5:\n\
    \            result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n        index++\n   \
    \ }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1xp9md6r.swift:44:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last = 0\n \
    \   for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        if num == last {\n            continue\n        }\n      \
    \  result.append(String(num))\n        last = num\n    }\n    return result.reverse().map\
    \ { name -> String in\n        if let num = Int(name) {\n            return String(num)\n\
    \        }\n        return name\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf3ubu71d.swift:30:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map { name -> String in\n           ~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let maxLength = arr.max()!\n    var result = [String]()\n\
    \    for num in arr {\n        let length = String(num).count\n        if length\
    \ == 1 {\n            result.append(String(num))\n        } else if length ==\
    \ 2 {\n            result.append(String(num))\n            result.append(String(num))\n\
    \        } else if length == 3 {\n            result.append(String(num))\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \        } else if length == 4 {\n            result.append(String(num))\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n        } else if length == 5 {\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n        } else if length == 6 {\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n        } else if length == 7 {\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \        } else if length == 8 {\n            result.append(String(num))\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n        } else if length == 9 {\n   \
    \         result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n            result.append(String(num))\n\
    \            result.append(String(num))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1dbc_cnl.swift:117:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp1dbc_cnl.swift:18:20:\
    \ note: to match this opening '{'\n    for num in arr {\n                   ^\n\
    /tmp/tmp1dbc_cnl.swift:117:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp1dbc_cnl.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp1dbc_cnl.swift:101:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp1dbc_cnl.swift:16:9:\
    \ warning: initialization of immutable value 'maxLength' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let maxLength = arr.max()!\n\
    \    ~~~~^~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(String(num))\n        i += 1\n    }\n    for _ in\
    \ 0..<i {\n        result.append(String(arr[arr.index(arr.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2dfa78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2df76f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae2df76f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae2df76f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae2df76ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae2df56ee83 <unavailable> + 188035

    6    tmpfp5g8861                        0x0000556478d2b540 <unavailable> + 9536

    7    tmpfp5g8861                        0x0000556478d2a9e0 <unavailable> + 6624

    8    libc.so.6                          0x00002ae2dfc64460 __libc_start_main +
    245

    9    tmpfp5g8861                        0x0000556478d2a699 <unavailable> + 5785

    '
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    for num\
    \ in arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n\
    \        if i == 0 {\n            result.append(String(num))\n        } else {\n\
    \            result.append(String(num))\n            result.append(\" as \\(name[num\
    \ - 1])\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcotvexi.swift:28:34: error: cannot find 'name' in scope\n    \
    \        result.append(\" as \\(name[num - 1])\")\n                          \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    for number in arr {\n        if number >= 1 && number\
    \ <= 9 {\n            result[index] = String(number)\n            index++\n  \
    \      }\n    }\n    if index == 0 {\n        return result\n    }\n    for number\
    \ in arr.reverse() {\n        if number >= 1 && number <= 9 {\n            result[index]\
    \ = String(number)\n            index++\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuqceivqf.swift:20:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpuqceivqf.swift:26:23:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for number in\
    \ arr.reverse() {\n                  ~~~~^~~~~~~~~\n/tmp/tmpuqceivqf.swift:26:23:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \    for number in arr.reverse() {\n                  ~~~ ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num >= 1 && num <= 9 {\n            result.append(name[num])\n\
    \        } else {\n            result.append(name[num - 1])\n        }\n     \
    \   i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpukc2d_cv.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n/tmp/tmpukc2d_cv.swift:24:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[num - 1])\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    for number in arr {\n        if number == last {\n      \
    \      continue\n        }\n        last = number\n        result[index] = names[number]\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkezf969n.swift:26:25: error: cannot find 'names' in scope\n   \
    \     result[index] = names[number]\n                        ^~~~~\n/tmp/tmpkezf969n.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result: [String] = []\n    var index = 0\n    while\
    \ index < arr.count {\n        let value = arr[index]\n        if value < 1 ||\
    \ value > 9 {\n            index += 1\n            continue\n        }\n     \
    \   let digit = value - 10\n        let name = String(digit)\n        result.append(name)\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3fr30rbd/tmp3fr30rbd.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f6698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f638fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f638f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f638e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fr30rbd                        0x00005573d6ad6881 <unavailable> + 6273

    5    libc.so.6                          0x00002b62f6884460 __libc_start_main +
    245

    6    tmp3fr30rbd                        0x00005573d6ad6329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return nil\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n            result.append(\" \")\n\
    \        }\n        i += 1\n    }\n    return result.reverse().map { $0.substring($0.startIndex,\
    \ $0.endIndex) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo5bn3f74.swift:16:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmpo5bn3f74.swift:32:29:\
    \ error: value of tuple type '()' has no member 'map'\n    return result.reverse().map\
    \ { $0.substring($0.startIndex, $0.endIndex) }\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let digit = String(n - min)\n        result.append(name[digit])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbwr86kr.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result: [String] = []\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        result.append(String(num))\n        i += 1\n    }\n    for\
    \ _ in 0..<i {\n        result.append(String(arr[i]))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aea6d212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6cf09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea6cf09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea6cf0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea6cf08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aea6cd08e83 <unavailable> + 188035

    6    tmp_mqeuryh                        0x0000560da0f1d412 <unavailable> + 9234

    7    tmp_mqeuryh                        0x0000560da0f1c8d0 <unavailable> + 6352

    8    libc.so.6                          0x00002aea6d3fe460 __libc_start_main +
    245

    9    tmp_mqeuryh                        0x0000560da0f1c589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr.min()!\n\
    \    let max = arr.max()!\n    if min == max {\n        return arr\n    }\n  \
    \  var i = 0\n    while i < arr.count {\n        if arr[i] == min {\n        \
    \    result.append(String(arr[i]))\n            i += 1\n        } else if arr[i]\
    \ == max {\n            result.append(String(arr[i]))\n            i += 1\n  \
    \      } else {\n            result.append(String(arr[i]))\n            i += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpczb8o6k3.swift:22:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpczb8o6k3.swift:22:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        let index = min + n - 1\n        result.append(names[index])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc3gyqm7q.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014287
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    for number in arr {\n        if number == 1 {\n         \
    \   result.append(One[index])\n            index += 1\n            last = number\n\
    \        } else if number == 2 {\n            result.append(Two[index])\n    \
    \        index += 1\n            last = number\n        } else if number == 3\
    \ {\n            result.append(Three[index])\n            index += 1\n       \
    \     last = number\n        } else if number == 4 {\n            result.append(Four[index])\n\
    \            index += 1\n            last = number\n        } else if number ==\
    \ 5 {\n            result.append(Five[index])\n            index += 1\n      \
    \      last = number\n        } else if number == 6 {\n            result.append(Six[index])\n\
    \            index += 1\n            last = number\n        } else if number ==\
    \ 7 {\n            result.append(Seven[index])\n            index += 1\n     \
    \       last = number\n        } else if number == 8 {\n            result.append(Eight[index])\n\
    \            index += 1\n            last = number\n        } else if number ==\
    \ 9 {\n            result.append(Nine[index])\n            index += 1\n      \
    \      last = number\n        }\n    }\n    if last == 0 {\n        return arr\n\
    \    }\n    result.append(One[index])\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl4j_5179.swift:23:27: error: cannot find 'One' in scope\n     \
    \       result.append(One[index])\n                          ^~~\n/tmp/tmpl4j_5179.swift:27:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two[index])\n \
    \                         ^~~\n/tmp/tmpl4j_5179.swift:31:27: error: cannot find\
    \ 'Three' in scope\n            result.append(Three[index])\n                \
    \          ^~~~~\n/tmp/tmpl4j_5179.swift:35:27: error: cannot find 'Four' in scope\n\
    \            result.append(Four[index])\n                          ^~~~\n/tmp/tmpl4j_5179.swift:39:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five[index])\n\
    \                          ^~~~\n/tmp/tmpl4j_5179.swift:43:27: error: cannot find\
    \ 'Six' in scope\n            result.append(Six[index])\n                    \
    \      ^~~\n/tmp/tmpl4j_5179.swift:47:27: error: cannot find 'Seven' in scope\n\
    \            result.append(Seven[index])\n                          ^~~~~\n/tmp/tmpl4j_5179.swift:51:27:\
    \ error: cannot find 'Eight' in scope\n            result.append(Eight[index])\n\
    \                          ^~~~~\n/tmp/tmpl4j_5179.swift:55:27: error: cannot\
    \ find 'Nine' in scope\n            result.append(Nine[index])\n             \
    \             ^~~~\n/tmp/tmpl4j_5179.swift:61:16: error: cannot convert return\
    \ expression of type '[Int]' to return type '[String]'\n        return arr\n \
    \              ^\n/tmp/tmpl4j_5179.swift:61:16: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n        return arr\n\
    \               ^\n/tmp/tmpl4j_5179.swift:63:19: error: cannot find 'One' in scope\n\
    \    result.append(One[index])\n                  ^~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n < min || n > max {\n \
    \           continue\n        }\n        let digit = Int(log2(n))\n        result.append(digitNames[digit])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzco55nhz.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpzco55nhz.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpzco55nhz.swift:23:25: error: cannot find 'log2' in scope\n    \
    \    let digit = Int(log2(n))\n                        ^~~~\n/tmp/tmpzco55nhz.swift:24:23:\
    \ error: cannot find 'digitNames' in scope\n        result.append(digitNames[digit])\n\
    \                      ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    var lastDigit = 0\n    for digit in arr {\n        if digit\
    \ > 9 {\n            lastDigit = digit\n            break\n        }\n       \
    \ if digit > lastDigit {\n            lastDigit = digit\n        }\n    }\n  \
    \  for digit in arr {\n        if digit > lastDigit {\n            result += [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][digit-lastDigit]\n        } else {\n            result += [String](repeating:\
    \ String(), count: digit-lastDigit)\n        }\n        last = digit\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfifkt0i3.swift:33:24: error: cannot convert value of type 'String'\
    \ to expected element type 'Array<String>'\n            result += [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][digit-lastDigit]\n                       ^\n/tmp/tmpfifkt0i3.swift:33:31: error:\
    \ cannot convert value of type 'String' to expected element type 'Array<String>'\n\
    \            result += [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][digit-lastDigit]\n                         \
    \     ^\n/tmp/tmpfifkt0i3.swift:33:38: error: cannot convert value of type 'String'\
    \ to expected element type 'Array<String>'\n            result += [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][digit-lastDigit]\n                                     ^\n/tmp/tmpfifkt0i3.swift:33:47:\
    \ error: cannot convert value of type 'String' to expected element type 'Array<String>'\n\
    \            result += [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][digit-lastDigit]\n                         \
    \                     ^\n/tmp/tmpfifkt0i3.swift:33:55: error: cannot convert value\
    \ of type 'String' to expected element type 'Array<String>'\n            result\
    \ += [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][digit-lastDigit]\n                                        \
    \              ^\n/tmp/tmpfifkt0i3.swift:33:63: error: cannot convert value of\
    \ type 'String' to expected element type 'Array<String>'\n            result +=\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][digit-lastDigit]\n                                               \
    \               ^\n/tmp/tmpfifkt0i3.swift:33:70: error: cannot convert value of\
    \ type 'String' to expected element type 'Array<String>'\n            result +=\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][digit-lastDigit]\n                                               \
    \                      ^\n/tmp/tmpfifkt0i3.swift:33:79: error: cannot convert\
    \ value of type 'String' to expected element type 'Array<String>'\n "
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n            result.append(\" \")\n\
    \        }\n        i += 1\n    }\n    result.reverse()\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpw3antwdl/tmpw3antwdl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afabe8dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afabe5d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afabe5d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afabe5d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3antwdl                        0x000055b5fa03ba31 <unavailable> + 6705

    5    libc.so.6                          0x00002afabeacb460 __libc_start_main +
    245

    6    tmpw3antwdl                        0x000055b5fa03b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var last = 0\n    for num in arr {\n        if num < 1 || num > 9\
    \ {\n            continue\n        }\n        last = num\n        result.append(String(last))\n\
    \    }\n    if last > 0 {\n        result.append(String(last))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpob9fhr3r/tmpob9fhr3r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cfc0d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cfbdccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cfbdcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cfbdcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob9fhr3r                        0x00005565df7418b1 <unavailable> + 6321

    5    libc.so.6                          0x00002b4cfc2c1460 __libc_start_main +
    245

    6    tmpob9fhr3r                        0x00005565df741359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n >= min && n <= max {\n            result.append(names[n])\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk3kfte4u.swift:21:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[n])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n      \
    \      continue\n        }\n        if i == 0 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n            result.append(\"\
    \ as \\(name[num - 1])\")\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy3o9nofl.swift:25:34: error: cannot find 'name' in scope\n    \
    \        result.append(\" as \\(name[num - 1])\")\n                          \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let max = arr.max()!\n    let min = arr.min()!\n \
    \   var result = [String]()\n    for i in 0..<arr.count {\n        if arr[i] ==\
    \ min {\n            result.append(String(format: \"One\", arguments: [arr[i]]))\n\
    \        } else if arr[i] == max {\n            result.append(String(format: \"\
    Nine\", arguments: [arr[i]]))\n        } else {\n            result.append(String(format:\
    \ \"%@\", arguments: [arr[i]]))\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpehto32v6.swift:21:60: error: extra argument 'arguments' in call\n\
    \            result.append(String(format: \"One\", arguments: [arr[i]]))\n   \
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpehto32v6.swift:23:61:\
    \ error: extra argument 'arguments' in call\n            result.append(String(format:\
    \ \"Nine\", arguments: [arr[i]]))\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpehto32v6.swift:25:59: error: extra argument 'arguments' in call\n    \
    \        result.append(String(format: \"%@\", arguments: [arr[i]]))\n        \
    \                        ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        let index = n - min\n     \
    \   result.append(String(index))\n    }\n    for n in arr {\n        let index\
    \ = n - max\n        result.append(String(index))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpviw8wwxh.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpviw8wwxh.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for n in arr {\n        if n < 1 || n > 9 {\n            continue\n       \
    \ }\n        let digit = String(n)\n        if i == 0 {\n            result.append(digit)\n\
    \        } else {\n            result.append(digit.reversed())\n        }\n  \
    \      i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjwvvpdi7.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpjwvvpdi7.swift:28:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(digit.reversed())\n             \
    \      ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for\
    \ parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got '[String.Element]' (aka\
    \ 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpjwvvpdi7.swift:28:20:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            result.append(digit.reversed())\n   \
    \                ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n < min || n > max {\n \
    \           continue\n        }\n        let index = n - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdcip79ir.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpdcip79ir.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpdcip79ir.swift:24:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014288
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            i += 10\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n            result.append(String(i\
    \ - 1))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwyi53ulo/tmpwyi53ulo.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4740bbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47408b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47408b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47408b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwyi53ulo                        0x00005574b164a951 <unavailable> + 6481

    5    libc.so.6                          0x00002b4740da7460 __libc_start_main +
    245

    6    tmpwyi53ulo                        0x00005574b164a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    for n\
    \ in arr {\n        if n > 0 && n < 10 {\n            result.append(String(format:\
    \ \"%d\\t%s\", n, names[n]))\n        } else {\n            result.append(String(format:\
    \ \"%d\\t%s\", n, \"\"))\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp64c5ecyj.swift:20:55: error: cannot find 'names' in scope\n   \
    \         result.append(String(format: \"%d\\t%s\", n, names[n]))\n          \
    \                                            ^~~~~\n/tmp/tmp64c5ecyj.swift:20:33:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \            result.append(String(format: \"%d\\t%s\", n, names[n]))\n       \
    \                         ^~~~~~~~~\n                                        \
    \           radix:  uppercase: \n/tmp/tmp64c5ecyj.swift:22:33: error: incorrect\
    \ argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \            result.append(String(format: \"%d\\t%s\", n, \"\"))\n           \
    \                     ^~~~~~~~~\n                                            \
    \       radix:  uppercase: \n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp107ym1nf/tmp107ym1nf.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fefa0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fef701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fef701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fef7007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp107ym1nf                        0x0000555cc7e35841 <unavailable> + 6209

    5    libc.so.6                          0x00002b7fefbf6460 __libc_start_main +
    245

    6    tmp107ym1nf                        0x0000555cc7e352e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last = 0\n \
    \   for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n            last = 0\n    \
    \    }\n    }\n    if last != 0 {\n        result.append(String(last))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpro77jjqi/tmpro77jjqi.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61925f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61922e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61922e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61922e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpro77jjqi                        0x0000560bd5d79901 <unavailable> + 6401

    5    libc.so.6                          0x00002b61927dd460 __libc_start_main +
    245

    6    tmpro77jjqi                        0x0000560bd5d793a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n     \
    \       continue\n        }\n        if last < num {\n            result.append(String(arr[last]))\n\
    \        }\n        result.append(String(num))\n        last = num + 1\n    }\n\
    \    if last < 9 {\n        result.append(String(arr[last]))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpf0q0u2wg/tmpf0q0u2wg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3941c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39418fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39418fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39418f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0q0u2wg                        0x0000558184eca9a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b3941def460 __libc_start_main +
    245

    6    tmpf0q0u2wg                        0x0000558184eca449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        switch number {\n        case 1:\n         \
    \   result.append(\"One\")\n        case 2:\n            result.append(\"Two\"\
    )\n        case 3:\n            result.append(\"Three\")\n        case 4:\n  \
    \          result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp6q4whch5/tmp6q4whch5.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d51feac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d51ce1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d51ce1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d51ce07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q4whch5                        0x0000563f75f09841 <unavailable> + 6209

    5    libc.so.6                          0x00002b9d521d6460 __libc_start_main +
    245

    6    tmp6q4whch5                        0x0000563f75f092e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    for n in\
    \ arr {\n        if n > 9 {\n            result.append(String(n - 10))\n     \
    \   } else {\n            result.append(String(n))\n        }\n        i += 1\n\
    \    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm2m5if0c.swift:26:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for num in arr {\n        let index = num - min\n \
    \       result.append(String(index))\n    }\n    for num in arr {\n        let\
    \ index = num - max\n        result.append(String(index))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpllnc8ir9.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpllnc8ir9.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let digits = arr.sorted()\n    let reversed = digits.reversed()\n\
    \    let ones = reversed.prefix(9)\n    let tens = reversed.suffix(9)\n    let\
    \ names = ones + tens.map { $0.isOdd ? \"One\" : \"Ten\" }\n    return names\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp082wcyu0.swift:22:38: error: value of type 'Slice<ReversedCollection<[Int]>>.Element'\
    \ (aka 'Int') has no member 'isOdd'\n    let names = ones + tens.map { $0.isOdd\
    \ ? \"One\" : \"Ten\" }\n                                  ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        switch number {\n        case 1:\n         \
    \   result.append(one)\n        case 2:\n            result.append(two)\n    \
    \    case 3:\n            result.append(three)\n        case 4:\n            result.append(four)\n\
    \        case 5:\n            result.append(five)\n        case 6:\n         \
    \   result.append(six)\n        case 7:\n            result.append(seven)\n  \
    \      case 8:\n            result.append(eight)\n        case 9:\n          \
    \  result.append(nine)\n        default:\n            continue\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgdj8_tor.swift:19:27: error: cannot find 'one' in scope\n     \
    \       result.append(one)\n                          ^~~\n/tmp/tmpgdj8_tor.swift:21:27:\
    \ error: cannot find 'two' in scope\n            result.append(two)\n        \
    \                  ^~~\n/tmp/tmpgdj8_tor.swift:23:27: error: cannot find 'three'\
    \ in scope\n            result.append(three)\n                          ^~~~~\n\
    /tmp/tmpgdj8_tor.swift:25:27: error: cannot find 'four' in scope\n           \
    \ result.append(four)\n                          ^~~~\n/tmp/tmpgdj8_tor.swift:27:27:\
    \ error: cannot find 'five' in scope\n            result.append(five)\n      \
    \                    ^~~~\n/tmp/tmpgdj8_tor.swift:29:27: error: cannot find 'six'\
    \ in scope\n            result.append(six)\n                          ^~~\n/tmp/tmpgdj8_tor.swift:31:27:\
    \ error: cannot find 'seven' in scope\n            result.append(seven)\n    \
    \                      ^~~~~\n/tmp/tmpgdj8_tor.swift:33:27: error: cannot find\
    \ 'eight' in scope\n            result.append(eight)\n                       \
    \   ^~~~~\n/tmp/tmpgdj8_tor.swift:35:27: error: cannot find 'nine' in scope\n\
    \            result.append(nine)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  for num in arr {\n        if num >= 1 && num <= 9 {\n            result[index]\
    \ = String(num)\n            index++\n        }\n    }\n    return result.reverse().map\
    \ { $0.replaceFirst(\"^0\", \"\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo4ttbdit.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpo4ttbdit.swift:26:29:\
    \ error: value of tuple type '()' has no member 'map'\n    return result.reverse().map\
    \ { $0.replaceFirst(\"^0\", \"\") }\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var index\
    \ = 0\n    var last = 0\n    var lastDigit = 0\n    var lastDigitIndex = 0\n \
    \   for index in 0..<arr.count {\n        let digit = arr[index]\n        if digit\
    \ > 9 {\n            lastDigit = digit\n            lastDigitIndex = index\n \
    \       }\n        if digit > 0 {\n            if digit > last {\n           \
    \     last = digit\n                lastDigit = digit\n                lastDigitIndex\
    \ = index\n            }\n        }\n    }\n    if lastDigit > 0 {\n        result.insert(lastDigitIndex,\
    \ String(lastDigit))\n    }\n    if lastDigit < 9 {\n        result.insert(lastDigitIndex\
    \ + 1, String(lastDigit))\n    }\n    if arr.count > 0 {\n        let firstDigit\
    \ = arr[0]\n        if firstDigit > 9 {\n            lastDigit = firstDigit\n\
    \            lastDigitIndex = 0\n        }\n        if firstDigit > 0 {\n    \
    \        if firstDigit > last {\n                last = firstDigit\n         \
    \       lastDigit = firstDigit\n                lastDigitIndex = 0\n         \
    \   }\n        }\n        if lastDigit > 0 {\n            result.insert(lastDigitIndex,\
    \ String(lastDigit))\n        }\n        if lastDigit < 9 {\n            result.insert(lastDigitIndex\
    \ + 1, String(lastDigit))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2m9qofzz.swift:38:9: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n        result.insert(lastDigitIndex,\
    \ String(lastDigit))\n        ^\nSwift.RangeReplaceableCollection:7:37: note:\
    \ where 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf\
    \ newElements: __owned C, at i: Self.Index) where C : Collection, Self.Element\
    \ == C.Element\n                                    ^\n/tmp/tmp2m9qofzz.swift:38:22:\
    \ error: missing argument labels 'contentsOf:at:' in call\n        result.insert(lastDigitIndex,\
    \ String(lastDigit))\n                     ^\n                      contentsOf:\
    \     at: \n/tmp/tmp2m9qofzz.swift:38:39: error: cannot convert value of type\
    \ 'String' to expected argument type 'Array<String>.Index' (aka 'Int')\n     \
    \   result.insert(lastDigitIndex, String(lastDigit))\n                       \
    \               ^\n/tmp/tmp2m9qofzz.swift:41:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(lastDigitIndex + 1, String(lastDigit))\n\
    \               ^\n/tmp/tmp2m9qofzz.swift:41:16: note: candidate has partially\
    \ matching parameter list (__owned String, at: Int)\n        result.insert(lastDigitIndex\
    \ + 1, String(lastDigit))\n               ^\n/tmp/tmp2m9qofzz.swift:41:16: note:\
    \ candidate has partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \        result.insert(lastDigitIndex + 1, String(lastDigit))\n              \
    \ ^\n/tmp/tmp2m9qofzz.swift:57:13: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n            result.insert(lastDigitIndex,\
    \ String(lastDigit))\n            ^\nSwift.RangeReplaceableCollection:7:37: note:\
    \ where 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf\
    \ newElements: __owned C, at i: Self.Index) where C : Collection, Self.Element\
    \ == C.Element\n                                    ^\n/tmp/tmp2m9qofzz.swift:57:26:\
    \ error: missing argument labels 'contentsOf:at:' in call\n            result.insert(lastDigitIndex,\
    \ String(lastDigit))\n                   "
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(name[number])\n        } else {\n            result.append(String(number))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu9_be0ph.swift:18:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[number])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var last = 0\n    for num\
    \ in arr {\n        if num > 9 {\n            last = num\n        } else {\n \
    \           if last != 0 {\n                result.append(String(last))\n    \
    \        }\n            result.append(String(num))\n            last = 0\n   \
    \     }\n    }\n    if last != 0 {\n        result.append(String(last))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp5b85k_nj/tmp5b85k_nj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bfafa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bfac99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bfac99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bfac987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5b85k_nj                        0x00005639b28a5951 <unavailable> + 6481

    5    libc.so.6                          0x00002b0bfb18e460 __libc_start_main +
    245

    6    tmp5b85k_nj                        0x00005639b28a53f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let digit = String(number)\n        if index == 0 {\n    \
    \        result.append(digit)\n        } else {\n            result[index] = digit\n\
    \        }\n        index++\n    }\n    return result.reversed()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp33tluhvz.swift:30:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var last = 0\n \
    \   for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n        }\n    }\n    return\
    \ result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp80nhtj5p.swift:33:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    for k in arr {\n        if k == 1 {\n            result.append(One)\n\
    \        } else if k == 2 {\n            result.append(Two)\n        } else if\
    \ k == 3 {\n            result.append(Three)\n        } else if k == 4 {\n   \
    \         result.append(Four)\n        } else if k == 5 {\n            result.append(Five)\n\
    \        } else if k == 6 {\n            result.append(Six)\n        } else if\
    \ k == 7 {\n            result.append(Seven)\n        } else if k == 8 {\n   \
    \         result.append(Eight)\n        } else if k == 9 {\n            result.append(Nine)\n\
    \        } else {\n            result.append(String(k))\n        }\n        if\
    \ j == i {\n            j = 0\n            i += 1\n        }\n    }\n    return\
    \ result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptrlejzn6.swift:23:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmptrlejzn6.swift:25:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmptrlejzn6.swift:27:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmptrlejzn6.swift:29:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmptrlejzn6.swift:31:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmptrlejzn6.swift:33:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmptrlejzn6.swift:35:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmptrlejzn6.swift:37:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~~\n/tmp/tmptrlejzn6.swift:39:27: error: cannot find 'Nine' in scope\n\
    \            result.append(Nine)\n                          ^~~~\n/tmp/tmptrlejzn6.swift:48:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n >= 1 && n <= 9 {\n          \
    \  result.append(name[n - 1])\n        } else {\n            result.append(String(format:\
    \ \"%#d\", n))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpil_lcoqt.swift:19:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[n - 1])\n                          ^~~~\n/tmp/tmpil_lcoqt.swift:21:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%#d\", n))\n                     \
    \           ^~~~~~~\n                                 repeating      count: \n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last > 0 {\n                result.append(\"\\(last)\")\n\
    \            }\n            result.append(\"\\(num)\")\n            last = num\n\
    \        }\n    }\n    if last > 0 {\n        result.append(\"\\(last)\")\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps7m4acy4/tmps7m4acy4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e4ccb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e4c9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e4c9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e4c9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7m4acy4                        0x000055743efe2af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b1e4cea0460 __libc_start_main +
    245

    6    tmps7m4acy4                        0x000055743efe2599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num < 1 || num > 9 {\n            continue\n  \
    \      }\n        if num == last {\n            continue\n        }\n        last\
    \ = num\n        result.append(String(num))\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpnya4qcoa/tmpnya4qcoa.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add26cf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add269edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add269ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add269ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnya4qcoa                        0x00005573155a39b1 <unavailable> + 6577

    5    libc.so.6                          0x00002add26ee2460 __libc_start_main +
    245

    6    tmpnya4qcoa                        0x00005573155a3459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result: [String] = []\n    var last: Int = 0\n \
    \   for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            if last > 0 {\n                result.append(String(last))\n\
    \            }\n            result.append(String(num))\n            last = 0\n\
    \        }\n    }\n    if last > 0 {\n        result.append(String(last))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4syb5_cc/tmp4syb5_cc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b920619cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9205e93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9205e93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9205e927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4syb5_cc                        0x0000562659642901 <unavailable> + 6401

    5    libc.so.6                          0x00002b9206388460 __libc_start_main +
    245

    6    tmp4syb5_cc                        0x00005626596423a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        if i == 0 {\n            result.append(String(num))\n     \
    \   } else {\n            result.append(String(num))\n            result.append(\"\
    \ \")\n        }\n        i += 1\n    }\n    return result.reverse().map { $0.substring($0.startIndex,\
    \ $0.endIndex) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8cfegvis.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp8cfegvis.swift:32:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map { $0.substring($0.startIndex, $0.endIndex)\
    \ }\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpgspqw0dh/tmpgspqw0dh.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadc4a57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadc474eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadc474e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadc474d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgspqw0dh                        0x0000558010bf2841 <unavailable> + 6209

    5    libc.so.6                          0x00002aadc4c43460 __libc_start_main +
    245

    6    tmpgspqw0dh                        0x0000558010bf22e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    var j\
    \ = 0\n    for _ in arr {\n        if i == 0 {\n            result.append(String(arr[j]))\n\
    \            j++\n            continue\n        }\n        if arr[j] < 1 {\n \
    \           result.append(String(arr[j]))\n            j++\n            continue\n\
    \        }\n        if arr[j] > 9 {\n            result.append(String(arr[j]))\n\
    \            j++\n            continue\n        }\n        if arr[j] == 1 {\n\
    \            result.append(String(arr[j]))\n            j++\n            continue\n\
    \        }\n        if arr[j] == 2 {\n            result.append(String(arr[j]))\n\
    \            j++\n            continue\n        }\n        if arr[j] == 3 {\n\
    \            result.append(String(arr[j]))\n            j++\n            continue\n\
    \        }\n        if arr[j] == 4 {\n            result.append(String(arr[j]))\n\
    \            j++\n            continue\n        }\n        if arr[j] == 5 {\n\
    \            result.append(String(arr[j]))\n            j++\n            continue\n\
    \        }\n        if arr[j] == 6 {\n            result.append(String(arr[j]))\n\
    \            j++\n            continue\n        }\n        if arr[j] == 7 {\n\
    \            result.append(String(arr[j]))\n            j++\n            continue\n\
    \        }\n        if arr[j] == 8 {\n            result.append(String(arr[j]))\n\
    \            j++\n            continue\n        }\n        if arr[j] == 9 {\n\
    \            result.append(String(arr[j]))\n            j++\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiifucbk5.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpiifucbk5.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n/tmp/tmpiifucbk5.swift:32:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpiifucbk5.swift:37:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n/tmp/tmpiifucbk5.swift:42:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpiifucbk5.swift:47:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n/tmp/tmpiifucbk5.swift:52:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpiifucbk5.swift:57:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n/tmp/tmpiifucbk5.swift:62:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpiifucbk5.swift:67:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n/tmp/tmpiifucbk5.swift:72:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            j++\n             ^~\n/tmp/tmpiifucbk5.swift:77:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var len = arr.count\n    for _ in 0..<len {\n        if arr[i] <\
    \ 1 || arr[i] > 9 {\n            continue\n        }\n        if i == 0 {\n  \
    \          result.append(String(arr[i]))\n        } else {\n            if j ==\
    \ 0 {\n                result.append(String(arr[i]))\n            } else {\n \
    \               result.append(String(arr[i]) + \", \" + String(arr[j]))\n    \
    \        }\n        }\n        i += 1\n        j += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpei0yg1d1/tmpei0yg1d1.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b993b9ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b993b6e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b993b6e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b993b6e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpei0yg1d1                        0x000055e34dbf1ab1 <unavailable> + 6833

    5    libc.so.6                          0x00002b993bbd8460 __libc_start_main +
    245

    6    tmpei0yg1d1                        0x000055e34dbf1559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let digit = String(num)\n        result[i++] = digit\n    }\n  \
    \  return result.reverse().map { digit -> String in\n        switch digit {\n\
    \        case \"0\":\n            return \"Zero\"\n        case \"1\":\n     \
    \       return \"One\"\n        case \"2\":\n            return \"Two\"\n    \
    \    case \"3\":\n            return \"Three\"\n        case \"4\":\n        \
    \    return \"Four\"\n        case \"5\":\n            return \"Five\"\n     \
    \   case \"6\":\n            return \"Six\"\n        case \"7\":\n           \
    \ return \"Seven\"\n        case \"8\":\n            return \"Eight\"\n      \
    \  case \"9\":\n            return \"Nine\"\n        default:\n            return\
    \ digit\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpei_5uqj4.swift:25:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result[i++] = digit\n                ^~\n/tmp/tmpei_5uqj4.swift:27:29:\
    \ error: value of tuple type '()' has no member 'map'\n    return result.reverse().map\
    \ { digit -> String in\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(format:\
    \ \"One\", n))\n        } else if i == 2 {\n            result.append(String(format:\
    \ \"Two\", n))\n        } else if i == 3 {\n            result.append(String(format:\
    \ \"Three\", n))\n        } else if i == 4 {\n            result.append(String(format:\
    \ \"Four\", n))\n        } else if i == 5 {\n            result.append(String(format:\
    \ \"Five\", n))\n        } else if i == 6 {\n            result.append(String(format:\
    \ \"Six\", n))\n        } else if i == 7 {\n            result.append(String(format:\
    \ \"Seven\", n))\n        } else if i == 8 {\n            result.append(String(format:\
    \ \"Eight\", n))\n        } else if i == 9 {\n            result.append(String(format:\
    \ \"Nine\", n))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmper2sqcsl.swift:23:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"One\", n))\n                                ^~~~~~~\n                    \
    \             repeating      count: \n/tmp/tmper2sqcsl.swift:25:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"Two\", n))\n                       \
    \         ^~~~~~~\n                                 repeating      count: \n/tmp/tmper2sqcsl.swift:27:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Three\", n))\n                   \
    \             ^~~~~~~\n                                 repeating        count:\
    \ \n/tmp/tmper2sqcsl.swift:29:33: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"Four\", n))\n                                ^~~~~~~\n                   \
    \              repeating       count: \n/tmp/tmper2sqcsl.swift:31:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"Five\", n))\n                      \
    \          ^~~~~~~\n                                 repeating       count: \n\
    /tmp/tmper2sqcsl.swift:33:33: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n            result.append(String(format: \"Six\"\
    , n))\n                                ^~~~~~~\n                             \
    \    repeating      count: \n/tmp/tmper2sqcsl.swift:35:33: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n           \
    \ result.append(String(format: \"Seven\", n))\n                              \
    \  ^~~~~~~\n                                 repeating        count: \n/tmp/tmper2sqcsl.swift:37:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Eight\""
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(name[number])\n        } else {\n            result.append(String(number))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu9_be0ph.swift:18:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[number])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    var j =\
    \ 0\n    while i < arr.count {\n        if arr[i] < 1 || arr[i] > 9 {\n      \
    \      i += 1\n            continue\n        }\n        if i == 0 {\n        \
    \    result.append(String(arr[i]))\n        } else {\n            if j == 0 {\n\
    \                result.append(String(arr[i]))\n            } else {\n       \
    \         result.append(String(arr[i]) + \" \" + String(result[j-1]))\n      \
    \      }\n        }\n        i += 1\n        j += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp3gsr8r64/tmp3gsr8r64.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff525a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff5229db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff5229d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff5229c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3gsr8r64                        0x00005630559cca91 <unavailable> + 6801

    5    libc.so.6                          0x00002aff52792460 __libc_start_main +
    245

    6    tmp3gsr8r64                        0x00005630559cc539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let len = arr.count\n    let ones = arr.filter{ $0\
    \ < 10 }\n    let tens = arr.filter{ $0 >= 10 }\n    let tensReversed = tens.reverse()\n\
    \    let onesReversed = ones.reverse()\n    var result = [String]()\n    for n\
    \ in onesReversed {\n        result.append(\"One\")\n    }\n    for n in tensReversed\
    \ {\n        result.append(\"Ten\")\n    }\n    for n in onesReversed {\n    \
    \    result.append(\"Two\")\n    }\n    for n in tensReversed {\n        result.append(\"\
    Three\")\n    }\n    for n in onesReversed {\n        result.append(\"Four\")\n\
    \    }\n    for n in tensReversed {\n        result.append(\"Five\")\n    }\n\
    \    for n in onesReversed {\n        result.append(\"Six\")\n    }\n    for n\
    \ in tensReversed {\n        result.append(\"Seven\")\n    }\n    for n in onesReversed\
    \ {\n        result.append(\"Eight\")\n    }\n    for n in tensReversed {\n  \
    \      result.append(\"Nine\")\n    }\n    for n in onesReversed {\n        result.append(\"\
    Ten\")\n    }\n    for n in tensReversed {\n        result.append(\"One\")\n \
    \   }\n    for n in onesReversed {\n        result.append(\"Two\")\n    }\n  \
    \  for n in tensReversed {\n        result.append(\"Three\")\n    }\n    for n\
    \ in onesReversed {\n        result.append(\"Four\")\n    }\n    for n in tensReversed\
    \ {\n        result.append(\"Five\")\n    }\n    for n in onesReversed {\n   \
    \     result.append(\"Six\")\n    }\n    for n in tensReversed {\n        result.append(\"\
    Seven\")\n    }\n    for n in onesReversed {\n        result.append(\"Eight\"\
    )\n    }\n    for n in tensReversed {\n        result.append(\"Nine\")\n    }\n\
    \    for n in onesReversed {\n        result.append(\"Ten\")\n    }\n    for n\
    \ in tensReversed {\n        result.append(\"One\")\n    }\n    for n in onesReversed\
    \ {\n        result.append(\"Two\")\n    }\n    for n in tensReversed {\n    \
    \    result.append(\"Three\")\n    }\n    for n in onesReversed {\n        result.append(\"\
    Four\")\n    }\n    for n in tensReversed {\n        result.append(\"Five\")\n\
    \    }\n    for n in onesReversed {\n        result.append(\"Six\")\n    }\n \
    \   for n in ten\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjg7m7m_s.swift:103:17: error: expected '{' to start the body of\
    \ for-each loop\n    for n in ten\n                ^\n/tmp/tmpjg7m7m_s.swift:19:29:\
    \ error: cannot use mutating member on immutable value: 'tens' is a 'let' constant\n\
    \    let tensReversed = tens.reverse()\n                       ~~~~ ^\n/tmp/tmpjg7m7m_s.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let tens = arr.filter{ $0\
    \ >= 10 }\n    ^~~\n    var\n/tmp/tmpjg7m7m_s.swift:20:29: error: cannot use mutating\
    \ member on immutable value: 'ones' is a 'let' constant\n    let onesReversed\
    \ = ones.reverse()\n                       ~~~~ ^\n/tmp/tmpjg7m7m_s.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let ones = arr.filter{ $0\
    \ < 10 }\n    ^~~\n    var\n/tmp/tmpjg7m7m_s.swift:103:14: error: cannot find\
    \ 'ten' in scope\n    for n in ten\n             ^~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed = ones.reverse()\n\
    \    let onesReversedString = onesReversed.map{ onesReversed[$0] }\n    let tensReversedString\
    \ = tensReversed.map{ tensReversed[$0] }\n    return onesReversedString + tensReversedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpem2baoq4.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpem2baoq4.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmpem2baoq4.swift:19:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpem2baoq4.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n/tmp/tmpem2baoq4.swift:22:31: error: cannot convert return expression\
    \ of type 'String' to return type '[String]'\n    return onesReversedString +\
    \ tensReversedString\n           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    var last = 0\n    for number in arr {\n        if number == last {\n    \
    \        continue\n        }\n        last = number\n        result[index] = numberToName(number)\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr965dhxa.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpr965dhxa.swift:26:25: error: cannot find 'numberToName' in scope\n\
    \        result[index] = numberToName(number)\n                        ^~~~~~~~~~~~\n\
    /tmp/tmpr965dhxa.swift:27:14: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n < min || n > max {\n \
    \           continue\n        }\n        let digit = Int(log2(n))\n        result.append(name[digit])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprwyseu0c.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmprwyseu0c.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmprwyseu0c.swift:23:25: error: cannot find 'log2' in scope\n    \
    \    let digit = Int(log2(n))\n                        ^~~~\n/tmp/tmprwyseu0c.swift:24:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[digit])\n   \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        let digit = n % 10\n      \
    \  let name = digitName(digit)\n        if digit == min {\n            result.append(name)\n\
    \        } else if digit == max {\n            result.append(name)\n        }\
    \ else {\n            result.append(name)\n            result.append(digitName(digit))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyycxeun6.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpyycxeun6.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpyycxeun6.swift:21:20: error: cannot find 'digitName' in scope\n\
    \        let name = digitName(digit)\n                   ^~~~~~~~~\n/tmp/tmpyycxeun6.swift:28:27:\
    \ error: cannot find 'digitName' in scope\n            result.append(digitName(digit))\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    let len = arr.count\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n\
    \        }\n        let digit = String(n)\n        result.append(digit)\n    \
    \    i += 1\n        if i == len {\n            break\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp754dtx89.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp754dtx89.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(by_length_helper(arr, i, num))\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxr80aja9.swift:24:27: error: cannot find 'by_length_helper' in\
    \ scope\n            result.append(by_length_helper(arr, i, num))\n          \
    \                ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let arr = arr.sorted()\n    let result = arr.map {\
    \ $0.description.characters.first! }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3nz321t8.swift:17:43: error: 'characters' is unavailable: Please\
    \ use String directly\n    let result = arr.map { $0.description.characters.first!\
    \ }\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3nz321t8.swift:18:12: error: cannot convert\
    \ return expression of type '[String.Element]' (aka 'Array<Character>') to return\
    \ type '[String]'\n    return result\n           ^\n/tmp/tmp3nz321t8.swift:18:12:\
    \ note: arguments to generic parameter 'Element' ('String.Element' (aka 'Character')\
    \ and 'String') are expected to be equal\n    return result\n           ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    let digits = arr.sorted()\n    let reversed =\
    \ digits.reversed()\n    let ones = reversed.prefix(6)\n    let tens = reversed.prefix(10)\n\
    \    let hundreds = reversed.prefix(100)\n    let thousands = reversed.prefix(1000)\n\
    \    let names = ones + tens + hundreds + thousands\n    return names.map { name\
    \ -> String in\n        switch name {\n        case \"One\":\n            return\
    \ \"1\"\n        case \"Two\":\n            return \"2\"\n        case \"Three\"\
    :\n            return \"3\"\n        case \"Four\":\n            return \"4\"\n\
    \        case \"Five\":\n            return \"5\"\n        case \"Six\":\n   \
    \         return \"6\"\n        case \"Seven\":\n            return \"7\"\n  \
    \      case \"Eight\":\n            return \"8\"\n        case \"Nine\":\n   \
    \         return \"9\"\n        default:\n            return name\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq5f1fa1i.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpq5f1fa1i.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpq5f1fa1i.swift:24:22: error: binary operator '+' cannot be applied to\
    \ two 'Slice<ReversedCollection<[Int]>>' operands\n    let names = ones + tens\
    \ + hundreds + thousands\n                ~~~~ ^ ~~~~\n/tmp/tmpq5f1fa1i.swift:24:29:\
    \ error: binary operator '+' cannot be applied to two 'Slice<ReversedCollection<[Int]>>'\
    \ operands\n    let names = ones + tens + hundreds + thousands\n             \
    \   ~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpq5f1fa1i.swift:24:40: error: binary operator\
    \ '+' cannot be applied to two 'Slice<ReversedCollection<[Int]>>' operands\n \
    \   let names = ones + tens + hundreds + thousands\n                ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n            result.append(\" as \\\
    (One[num - 1])\")\n        }\n        i += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4mro0dlv.swift:28:34: error: cannot find 'One' in scope\n     \
    \       result.append(\" as \\(One[num - 1])\")\n                            \
    \     ^~~\n/tmp/tmp4mro0dlv.swift:32:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    for k in arr {\n        if k > 9 {\n            j = k\n        }\
    \ else {\n            result[i++] = names[k]\n        }\n    }\n    result.reverse()\n\
    \    for k in result {\n        result[k] = names[k]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuzehdn1l.swift:25:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            result[i++] = names[k]\n                 \
    \   ^~\n/tmp/tmpuzehdn1l.swift:25:27: error: cannot find 'names' in scope\n  \
    \          result[i++] = names[k]\n                          ^~~~~\n/tmp/tmpuzehdn1l.swift:30:21:\
    \ error: cannot find 'names' in scope\n        result[k] = names[k]\n        \
    \            ^~~~~\n/tmp/tmpuzehdn1l.swift:30:15: error: no exact matches in call\
    \ to subscript \n        result[k] = names[k]\n              ^\n/tmp/tmpuzehdn1l.swift:30:15:\
    \ note: found candidate with type '(Int) -> @lvalue String'\n        result[k]\
    \ = names[k]\n              ^\n/tmp/tmpuzehdn1l.swift:30:15: note: found candidate\
    \ with type '(Range<Int>) -> @lvalue ArraySlice<String>'\n        result[k] =\
    \ names[k]\n              ^\n/tmp/tmpuzehdn1l.swift:30:15: note: found candidate\
    \ with type '((UnboundedRange_) -> ()) -> @lvalue ArraySlice<String>'\n      \
    \  result[k] = names[k]\n              ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = arr.max()!\n\
    \    let minLength = arr.min()!\n    for number in arr {\n        let length =\
    \ number - minLength\n        if length < 0 {\n            length += maxLength\n\
    \        }\n        let name = String(format: \"%0*d\", maxLength, length)\n \
    \       result.append(name)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmvgyk9r.swift:24:20: error: left side of mutating operator isn't\
    \ mutable: 'length' is a 'let' constant\n            length += maxLength\n   \
    \         ~~~~~~ ^\n/tmp/tmpqmvgyk9r.swift:22:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let length = number - minLength\n        ^~~\n    \
    \    var\n/tmp/tmpqmvgyk9r.swift:26:26: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        let name = String(format:\
    \ \"%0*d\", maxLength, length)\n                         ^~~~~~~~~\n         \
    \                                 radix:     uppercase: \n/tmp/tmpqmvgyk9r.swift:26:54:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     let name = String(format: \"%0*d\", maxLength, length)\n               \
    \                                      ^\n                                   \
    \                  (      != 0)\n/tmp/tmpqmvgyk9r.swift:26:20: error: initializer\
    \ 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \        let name = String(format: \"%0*d\", maxLength, length)\n            \
    \       ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public init<T>(_\
    \ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var temp = 0\n    for i < arr.count {\n        temp\
    \ = arr[i]\n        if temp < 10 {\n            result.append(String(temp))\n\
    \        } else {\n            if temp < 100 {\n                result.append(String(temp\
    \ / 10) + String(temp % 10))\n            } else {\n                if temp <\
    \ 1000 {\n                    result.append(String(temp / 100) + String(temp %\
    \ 100))\n                } else {\n                    if temp < 10000 {\n   \
    \                     result.append(String(temp / 1000) + String(temp % 1000))\n\
    \                    } else {\n                        if temp < 100000 {\n  \
    \                          result.append(String(temp / 10000) + String(temp %\
    \ 10000))\n                        } else {\n                            if temp\
    \ < 1000000 {\n                                result.append(String(temp / 100000)\
    \ + String(temp % 100000))\n                            } else {\n           \
    \                     if temp < 10000000 {\n                                 \
    \   result.append(String(temp / 1000000) + String(temp % 1000000))\n         \
    \                       } else {\n                                    if temp\
    \ < 100000000 {\n                                        result.append(String(temp\
    \ / 10000000) + String(temp % 10000000))\n                                   \
    \ } else {\n                                        if temp < 1000000000 {\n \
    \                                           result.append(String(temp / 100000000)\
    \ + String(temp % 100000000))\n                                        } else\
    \ {\n                                            if temp < 10000000000 {\n   \
    \                                             result.append(String(temp / 1000000000)\
    \ + String(temp % 1000000000))\n                                            }\
    \ else {\n                                                if temp < 100000000000\
    \ {\n                                                    result.append(String(temp\
    \ / 10000000000) + String(temp % 10000000000))\n                             \
    \                   } else {\n                                               \
    \     if temp < 1000000000000 {\n                                            \
    \            result.append(String(temp / 100000000000) + String(temp % 100000000000))\n\
    \                                                    } else {\n              \
    \                                          if temp < 10000000000000 {\n      \
    \                                                      result.append(String(temp\
    \ / 1000000000000) + String(temp % 1000000000000))\n                         \
    \                               } else {\n                                   \
    \                         if temp < 100000000000000 {\n                      \
    \                                          result.append(String(temp / 10000000000000)\
    \ + String(temp % 10000000000000))\n                                         \
    \                   } else {\n                                               \
    \                 if temp < 1000000000000000 {\n                             \
    \                                       result.append(String(temp / 100000000000000)\
    \ + String(temp % 100000000000000))\n                                        \
    \                        } else {\n                                          \
    \                          if temp < 10000000000000000 {\n                   \
    \                                                     result.append(String(temp\
    \ / 1000000000000000) + String(temp % 1000000000000000))\n                   \
    \                                                 } else {\n                 \
    \                                                       if temp < 100000000000000000\
    \ {\n                                                                        \
    \    result.append(String(temp / 10000000000000000) + String(temp % 10000000000000000))\n\
    \                                                                        } else\
    \ {\n                                                                        \
    \    if temp < 100000000000000000 {\n                                        \
    \                                        result.append(String(temp / 100000000000000000)\
    \ + String(temp % 100000000000000000))\n                                     \
    \                                       } else {\n                           \
    \                                     \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplk51zpfe.swift:23:11: error: expected 'in' after for-each pattern\n\
    \    for i < arr.count {\n          ^\n/tmp/tmplk51zpfe.swift:23:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < arr.count {\n   \
    \       ^~\n           \n/tmp/tmplk51zpfe.swift:99:63: error: expected '}' at\
    \ end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])\n                                                              ^\n\
    /tmp/tmplk51zpfe.swift:75:80: note: to match this opening '{'\n              \
    \                                                          } else {\n        \
    \                                                                       ^\n/tmp/tmplk51zpfe.swift:99:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmplk51zpfe.swift:72:76: note: to match this\
    \ opening '{'\n                                                              \
    \      } else {\n                                                            \
    \               ^\n/tmp/tmplk51zpfe.swift:99:63: error: expected '}' at end of\
    \ brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"\
    Four\"])\n                                                              ^\n/tmp/tmplk51zpfe.swift:69:72:\
    \ note: to match this opening '{'\n                                          \
    \                      } else {\n                                            \
    \                           ^\n/tmp/tmplk51zpfe.swift:99:63: error: expected '}'\
    \ at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"\
    Eight\", \"Four\"])\n                                                        \
    \      ^\n/tmp/tmplk51zpfe.swift:66:68: note: to match this opening '{'\n    \
    \                                                        } else {\n          \
    \                                                         ^\n/tmp/tmplk51zpfe.swift:99:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n "
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last == 0 {\n                last = num\n            } else\
    \ {\n                result.append(\"One\")\n            }\n            result.append(\"\
    Two\")\n            result.append(\"Three\")\n            result.append(\"Four\"\
    )\n            result.append(\"Five\")\n            result.append(\"Six\")\n \
    \           result.append(\"Seven\")\n            result.append(\"Eight\")\n \
    \           result.append(\"Nine\")\n            result.append(\"Ten\")\n    \
    \        result.append(\"Eleven\")\n            result.append(\"Twelve\")\n  \
    \          result.append(\"Thirteen\")\n            result.append(\"Fourteen\"\
    )\n            result.append(\"Fifteen\")\n            result.append(\"Sixteen\"\
    )\n            result.append(\"Seventeen\")\n            result.append(\"Eighteen\"\
    )\n            result.append(\"Nineteen\")\n            result.append(\"Twenty\"\
    )\n            result.append(\"Twenty-one\")\n            result.append(\"Twenty-two\"\
    )\n            result.append(\"Twenty-three\")\n            result.append(\"Twenty-four\"\
    )\n            result.append(\"Twenty-five\")\n            result.append(\"Twenty-six\"\
    )\n            result.append(\"Twenty-seven\")\n            result.append(\"Twenty-eight\"\
    )\n            result.append(\"Twenty-nine\")\n            result.append(\"Thirty\"\
    )\n            result.append(\"Thirty-one\")\n            result.append(\"Thirty-two\"\
    )\n            result.append(\"Thirty-three\")\n            result.append(\"Thirty-four\"\
    )\n            result.append(\"Thirty-five\")\n            result.append(\"Thirty-six\"\
    )\n            result.append(\"Thirty-seven\")\n            result.append(\"Thirty-eight\"\
    )\n            result.append(\"Thirty-nine\")\n            result.append(\"Fourty\"\
    )\n            result.append(\"Fourty-one\")\n            result.append(\"Fourty-two\"\
    )\n            result.append(\"Fourty-three\")\n            result.append(\"Fourty-four\"\
    )\n            result.append(\"Fourty-five\")\n            result.append(\"Fourty-six\"\
    )\n            result.append(\"Fourty-seven\")\n            result.append(\"Fourty-eight\"\
    )\n            result.append(\"Fourty-nine\")\n            result.append(\"Fifty\"\
    )\n            result.append(\"Fifty-one\")\n            result.append(\"Fifty-two\"\
    )\n            result.append(\"Fifty-three\")\n            result.append(\"Fifty-four\"\
    )\n            result.append(\"Fifty-five\")\n            result.append(\"Fifty-six\"\
    )\n            result.append(\"Fifty-seven\")\n            result.append(\"Fifty-eight\"\
    )\n            result.append(\"Fifty-nine\")\n            result.append(\"Sixty\"\
    )\n            result.append(\"Sixty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpllsv8zws.swift:88:27: error: unterminated string literal\n    \
    \        result.append(\"Sixty\n                          ^\n/tmp/tmpllsv8zws.swift:108:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpllsv8zws.swift:20:20: note: to match this\
    \ opening '{'\n    for num in arr {\n                   ^\n/tmp/tmpllsv8zws.swift:108:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpllsv8zws.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpllsv8zws.swift:88:27: error: missing argument for\
    \ parameter #1 in call\n            result.append(\"Sixty\n                  \
    \        ^\n                          <#String#>\nSwift.Array:6:37: note: 'append'\
    \ declared here\n    @inlinable public mutating func append(_ newElement: __owned\
    \ Element)\n                                    ^\n/tmp/tmpllsv8zws.swift:92:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var k = arr.count\n\n    while i < k {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1\n            continue\n        }\n\n      \
    \  if j == 0 {\n            result.append(String(arr[i]))\n            i += 1\n\
    \            continue\n        }\n\n        if arr[i] != result[j-1] {\n     \
    \       result.append(String(arr[i]))\n            i += 1\n            continue\n\
    \        }\n\n        i += 1\n        j += 1\n    }\n\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm0m7asx1.swift:36:28: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n        if arr[i] != result[j-1] {\n      \
    \                     ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    var i = 0\n    while i < arr.count {\n        if\
    \ arr[i] >= min && arr[i] <= max {\n            result.append(name[arr[i]])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpem7r681r.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpem7r681r.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpem7r681r.swift:24:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[arr[i]])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        }\n        if num > max {\n            max = num\n     \
    \   }\n    }\n    var digits = [String]()\n    for num in arr {\n        if num\
    \ == min {\n            digits.append(\"One\")\n        } else if num == max {\n\
    \            digits.append(\"Nine\")\n        } else if num < min {\n        \
    \    digits.append(\"One\")\n        } else if num > max {\n            digits.append(\"\
    Nine\")\n        } else {\n            digits.append(String(num))\n        }\n\
    \    }\n    result.reverse()\n    for digit in digits {\n        result.append(digit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnphz8rot.swift:23:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = num\n            ^~~\n/tmp/tmpnphz8rot.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpnphz8rot.swift:26:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = num\n            ^~~\n/tmp/tmpnphz8rot.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let index = number - 10\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqv26ga9f.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num > 9 {\n            i += 10\n            continue\n\
    \        }\n        i += 1\n        if i == 1 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n            result.append(String(i\
    \ - 1))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpih_69zwr.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n >= min && n <= max {\n            result.append(name(n))\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgronxjrs.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last = 0\n \
    \   for num in arr {\n        if num > 9 {\n            num = num - 10\n     \
    \   }\n        if num > last {\n            result.append(String(num))\n     \
    \   } else {\n            result.append(String(last))\n        }\n        last\
    \ = num\n    }\n    result.append(String(last))\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe191o9xa.swift:22:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = num - 10\n            ^~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    for n in\
    \ arr {\n        if n < 10 && n > 0 {\n            result.append(String(format:\
    \ \"%d\\t%s\", n, ones[Int(n)]))\n        } else if n < 100 && n > 10 {\n    \
    \        result.append(String(format: \"%d\\t%s\", n, tens[Int(n)]))\n       \
    \ } else if n < 1000 && n > 100 {\n            result.append(String(format: \"\
    %d\\t%s\", n, hundreds[Int(n)]))\n        } else {\n            result.append(String(format:\
    \ \"%d\\t%s\", n, thousands[Int(n)]))\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqon57fa8.swift:20:55: error: cannot find 'ones' in scope\n    \
    \        result.append(String(format: \"%d\\t%s\", n, ones[Int(n)]))\n       \
    \                                               ^~~~\n/tmp/tmpqon57fa8.swift:20:33:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \            result.append(String(format: \"%d\\t%s\", n, ones[Int(n)]))\n   \
    \                             ^~~~~~~~~\n                                    \
    \               radix:  uppercase: \n/tmp/tmpqon57fa8.swift:22:55: error: cannot\
    \ find 'tens' in scope\n            result.append(String(format: \"%d\\t%s\",\
    \ n, tens[Int(n)]))\n                                                      ^~~~\n\
    /tmp/tmpqon57fa8.swift:22:33: error: incorrect argument labels in call (have 'format:_:_:',\
    \ expected '_:radix:uppercase:')\n            result.append(String(format: \"\
    %d\\t%s\", n, tens[Int(n)]))\n                                ^~~~~~~~~\n    \
    \                                               radix:  uppercase: \n/tmp/tmpqon57fa8.swift:24:55:\
    \ error: cannot find 'hundreds' in scope\n            result.append(String(format:\
    \ \"%d\\t%s\", n, hundreds[Int(n)]))\n                                       \
    \               ^~~~~~~~\n/tmp/tmpqon57fa8.swift:24:33: error: incorrect argument\
    \ labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n       \
    \     result.append(String(format: \"%d\\t%s\", n, hundreds[Int(n)]))\n      \
    \                          ^~~~~~~~~\n                                       \
    \            radix:  uppercase: \n/tmp/tmpqon57fa8.swift:26:55: error: cannot\
    \ find 'thousands' in scope\n            result.append(String(format: \"%d\\t%s\"\
    , n, thousands[Int(n)]))\n                                                   \
    \   ^~~~~~~~~\n/tmp/tmpqon57fa8.swift:26:33: error: incorrect argument labels\
    \ in call (have 'format:_:_:', expected '_:radix:uppercase:')\n            result.append(String(format:\
    \ \"%d\\t%s\", n, thousands[Int(n)]))\n                                ^~~~~~~~~\n\
    \                                                   radix:  uppercase: \n"
  stdout: ''
  timestamp: 1660014290
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = max(arr.count,\
    \ 9)\n    for i in 0..<maxLength {\n        let index = arr[i] % 10\n        let\
    \ digit = arr[i] / 10\n        if index == 0 {\n            result.append(digit)\n\
    \        } else {\n            result.append(names[index])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc07032ij.swift:24:27: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(digit)\n     \
    \                     ^\n/tmp/tmpc07032ij.swift:26:27: error: cannot find 'names'\
    \ in scope\n            result.append(names[index])\n                        \
    \  ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    var last = 0\n    for element in arr {\n        if element < 1 || element\
    \ > 9 {\n            continue\n        }\n        last = element\n        result[index]\
    \ = names[element]\n        index++\n    }\n    result.reverse()\n    for element\
    \ in result {\n        if element == \"\" {\n            continue\n        }\n\
    \        element = element.reversed()\n        if last == 0 {\n            element\
    \ = element.capitalized()\n        }\n        last--\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp82kt9oqn.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp82kt9oqn.swift:26:25: error: cannot find 'names' in scope\n     \
    \   result[index] = names[element]\n                        ^~~~~\n/tmp/tmp82kt9oqn.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n/tmp/tmp82kt9oqn.swift:34:9: error: cannot assign to value:\
    \ 'element' is a 'let' constant\n        element = element.reversed()\n      \
    \  ^~~~~~~\n/tmp/tmp82kt9oqn.swift:34:27: error: no 'reversed' candidates produce\
    \ the expected contextual result type 'String'\n        element = element.reversed()\n\
    \                          ^\nSwift.Sequence:2:40: note: 'reversed()' produces\
    \ '[String.Element]' (aka 'Array<Character>'), not the expected contextual result\
    \ type 'String'\n    @inlinable public __consuming func reversed() -> [Self.Element]\n\
    \                                       ^\nSwift.BidirectionalCollection:2:40:\
    \ note: 'reversed()' produces 'ReversedCollection<String>', not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func reversed() -> ReversedCollection<Self>\n\
    \                                       ^\n/tmp/tmp82kt9oqn.swift:36:13: error:\
    \ cannot assign to value: 'element' is a 'let' constant\n            element =\
    \ element.capitalized()\n            ^~~~~~~\n/tmp/tmp82kt9oqn.swift:36:31: error:\
    \ value of type 'String' has no member 'capitalized'\n            element = element.capitalized()\n\
    \                      ~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp82kt9oqn.swift:38:13: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n        last--\n \
    \           ^~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        let digit = n % 10\n        if digit < min || digit\
    \ > max {\n            continue\n        }\n        result.append(name[digit])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpci14k585.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    while i\
    \ < arr.count {\n        if arr[i] > 9 {\n            result.append(String(arr[i]\
    \ - 10))\n        } else {\n            result.append(String(arr[i]))\n      \
    \  }\n        i += 1\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpukjjgti5/tmpukjjgti5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6fbb71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6fb868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6fb868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6fb8677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukjjgti5                        0x000055d5f2902931 <unavailable> + 6449

    5    libc.so.6                          0x00002af6fbd5d460 __libc_start_main +
    245

    6    tmpukjjgti5                        0x000055d5f29023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num < 1 || num > 9 {\n            continue\n  \
    \      }\n        if num == last {\n            continue\n        }\n        result.append(String(num))\n\
    \        last = num\n    }\n    return result.reverse().map {\n        switch\
    \ $0 {\n        case \"0\":\n            return \"Zero\"\n        case \"1\":\n\
    \            return \"One\"\n        case \"2\":\n            return \"Two\"\n\
    \        case \"3\":\n            return \"Three\"\n        case \"4\":\n    \
    \        return \"Four\"\n        case \"5\":\n            return \"Five\"\n \
    \       case \"6\":\n            return \"Six\"\n        case \"7\":\n       \
    \     return \"Seven\"\n        case \"8\":\n            return \"Eight\"\n  \
    \      case \"9\":\n            return \"Nine\"\n        default:\n          \
    \  return String($0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4553lut8.swift:30:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map {\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let len = arr.count\n    var result = [String]()\n\
    \    for i in 0..<len {\n        let num = arr[i]\n        if num < 1 || num >\
    \ 9 {\n            continue\n        }\n        let digit = num % 10\n       \
    \ let name = digitToName(digit)\n        result.append(name)\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxi7h0zhy.swift:26:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    var j =\
    \ 0\n    for k in arr {\n        if k == 1 {\n            result.append(One)\n\
    \        } else if k == 2 {\n            result.append(Two)\n        } else if\
    \ k == 3 {\n            result.append(Three)\n        } else if k == 4 {\n   \
    \         result.append(Four)\n        } else if k == 5 {\n            result.append(Five)\n\
    \        } else if k == 6 {\n            result.append(Six)\n        } else if\
    \ k == 7 {\n            result.append(Seven)\n        } else if k == 8 {\n   \
    \         result.append(Eight)\n        } else if k == 9 {\n            result.append(Nine)\n\
    \        } else {\n            result.append(String(k))\n        }\n        i\
    \ += 1\n        if i == 3 {\n            i = 0\n            j += 1\n        }\n\
    \    }\n    if j > 0 {\n        result.reverse()\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppegahkld.swift:21:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmppegahkld.swift:23:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmppegahkld.swift:25:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmppegahkld.swift:27:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmppegahkld.swift:29:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmppegahkld.swift:31:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmppegahkld.swift:33:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmppegahkld.swift:35:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~~\n/tmp/tmppegahkld.swift:37:27: error: cannot find 'Nine' in scope\n\
    \            result.append(Nine)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num >= 1 && num <= 9 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n        }\n    }\n\
    \    for num in arr {\n        if num >= 1 && num <= 9 {\n            result[i]\
    \ = \"One\"\n        } else if num >= 10 && num <= 99 {\n            result[i]\
    \ = \"Two\"\n        } else if num >= 100 && num <= 999 {\n            result[i]\
    \ = \"Three\"\n        } else if num >= 1000 && num <= 9999 {\n            result[i]\
    \ = \"Four\"\n        } else if num >= 10000 && num <= 99999 {\n            result[i]\
    \ = \"Five\"\n        } else if num >= 100000 && num <= 999999 {\n           \
    \ result[i] = \"Six\"\n        } else if num >= 1000000 && num <= 9999999 {\n\
    \            result[i] = \"Seven\"\n        } else if num >= 10000000 && num <=\
    \ 99999999 {\n            result[i] = \"Eight\"\n        } else if num >= 100000000\
    \ && num <= 999999999 {\n            result[i] = \"Nine\"\n        }\n       \
    \ i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8p38oonf/tmp8p38oonf.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d0fb2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d0f826b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d0f826988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0f8257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p38oonf                        0x0000560271dd99a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b3d0fd1b460 __libc_start_main +
    245

    6    tmp8p38oonf                        0x0000560271dd9449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014290
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var last = 0\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 {\n            last\
    \ = i\n            break\n        }\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        if arr[i] > 9 {\n            result.append(arr[last])\n         \
    \   last += 1\n        } else {\n            result.append(String(arr[i]))\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpns0tvnm5.swift:20:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpns0tvnm5.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpns0tvnm5.swift:20:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpns0tvnm5.swift:26:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpns0tvnm5.swift:26:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpns0tvnm5.swift:26:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n/tmp/tmpns0tvnm5.swift:15:12: error: cannot call value\
    \ of non-function type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n\
    \                  \n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let ones = arr.filter{$0 >= 1}\n    let tens =\
    \ arr.filter{$0 >= 10}\n    let hundreds = arr.filter{$0 >= 100}\n    let thousands\
    \ = arr.filter{$0 >= 1000}\n    let ten_thousands = arr.filter{$0 >= 10000}\n\
    \    let hundred_thousands = arr.filter{$0 >= 100000}\n    let millions = arr.filter{$0\
    \ >= 1000000}\n    let billions = arr.filter{$0 >= 1000000000}\n    let trillions\
    \ = arr.filter{$0 >= 1000000000000}\n    let quadrillions = arr.filter{$0 >= 1000000000000000}\n\
    \    let quintillions = arr.filter{$0 >= 1000000000000000000}\n    let thousand_millions\
    \ = arr.filter{$0 >= 10000000000000000000}\n    let million_billions = arr.filter{$0\
    \ >= 100000000000000000000}\n    let billion_trillions = arr.filter{$0 >= 100000000000000000000000}\n\
    \    let trillion_quadrillions = arr.filter{$0 >= 100000000000000000000000000}\n\
    \    let quadrillion_quintillions = arr.filter{$0 >= 1000000000000000000000000000}\n\
    \    let quintillion_thousand_millions = arr.filter{$0 >= 10000000000000000000000000000}\n\
    \    let thousand_million_billions = arr.filter{$0 >= 10000000000000000000000000000000}\n\
    \    let million_billion_trillions = arr.filter{$0 >= 1000000000000000000000000000000000}\n\
    \    let billion_trillion_quadrillions = arr.filter{$0 >= 1000000000000000000000000000000000000}\n\
    \    let trillion_quadrillion_quintillions = arr.filter{$0 >= 1000000000000000000000000000000000000000}\n\
    \    let quadrillion_quintillion_thousand_millions = arr.filter{$0 >= 100000000000000000000000000000000000000000}\n\
    \    let thousand_million_billion_trillion_quadrillions = arr.filter{$0 >= 100000000000000000000000000000000000000000000}\n\
    \    let million_billion_trillion_quadrillion_quintillions = arr.filter{$0 >=\
    \ 100000000000000000000000000000000000000000000000}\n    let billion_trillion_quadrillion_quintillion_thousand_millions\
    \ = arr.filter{$0 >= 10000000000000000000000000000000000000000000000000}\n   \
    \ let trillion_quadrillion_quintillion_thousand_million_billions = arr.filter{$0\
    \ >= 1000000000000000000000000000000000000000000\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3yyficpk.swift:63:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp3yyficpk.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp3yyficpk.swift:47:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp3yyficpk.swift:18:9:\
    \ warning: initialization of immutable value 'ones' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let ones = arr.filter{$0 >= 1}\n\
    \    ~~~~^~~~\n    _\n/tmp/tmp3yyficpk.swift:19:9: warning: initialization of\
    \ immutable value 'tens' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let tens = arr.filter{$0 >= 10}\n    ~~~~^~~~\n    _\n\
    /tmp/tmp3yyficpk.swift:20:9: warning: initialization of immutable value 'hundreds'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let hundreds = arr.filter{$0 >= 100}\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp3yyficpk.swift:21:9:\
    \ warning: initialization of immutable value 'thousands' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let thousands = arr.filter{$0\
    \ >= 1000}\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp3yyficpk.swift:22:9: warning: initialization\
    \ of immutable value 'ten_thousands' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let ten_thousands = arr.filter{$0 >= 10000}\n   \
    \ ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp3yyficpk.swift:23:9: warning: initialization\
    \ of immutable value 'hundred_thousands' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let hundred_thousands = arr.filter{$0\
    \ >= 100000}\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp3yyficpk.swift:24:9: warning:\
    \ initialization of immutable value 'millions' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let millions = arr.filter{$0"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n < min || n > max {\n \
    \           continue\n        }\n        let index = n - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm977qtz8.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpm977qtz8.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpm977qtz8.swift:24:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let ones = arr.filter{ $0 < 10 }\n    let tens\
    \ = arr.filter{ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed\
    \ = ones.reverse()\n    var result = [String]()\n    for i in onesReversed {\n\
    \        result.append(ones[onesReversed.index(of: i)!])\n    }\n    for i in\
    \ tensReversed {\n        result.append(tens[tensReversed.index(of: i)!])\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmg3vqro8.swift:20:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpmg3vqro8.swift:19:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmpmg3vqro8.swift:21:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpmg3vqro8.swift:18:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(name[num])\n        }\n    }\n  \
    \  return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps6smdkfi.swift:24:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n/tmp/tmps6smdkfi.swift:27:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    if min == max {\n        return arr\n    }\n    var\
    \ i = 0\n    for n in arr {\n        if n == min {\n            result.append(ones[i\
    \ - 1])\n        }\n        if n == max {\n            result.append(tens[i -\
    \ 1])\n        }\n        if n >= 1 && n <= 9 {\n            result.append(names[n\
    \ - 1])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxxt4br9t.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpxxt4br9t.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpxxt4br9t.swift:22:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpxxt4br9t.swift:22:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpxxt4br9t.swift:27:27: error: cannot find 'ones' in scope\n           \
    \ result.append(ones[i - 1])\n                          ^~~~\n/tmp/tmpxxt4br9t.swift:30:27:\
    \ error: cannot find 'tens' in scope\n            result.append(tens[i - 1])\n\
    \                          ^~~~\n/tmp/tmpxxt4br9t.swift:33:27: error: cannot find\
    \ 'names' in scope\n            result.append(names[n - 1])\n                \
    \          ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        let digit = String(format:\
    \ \"%2d\", n)\n        if digit == \"1\" {\n            result.append(one)\n \
    \       } else if digit == \"2\" {\n            result.append(two)\n        }\
    \ else if digit == \"3\" {\n            result.append(three)\n        } else if\
    \ digit == \"4\" {\n            result.append(four)\n        } else if digit ==\
    \ \"5\" {\n            result.append(five)\n        } else if digit == \"6\" {\n\
    \            result.append(six)\n        } else if digit == \"7\" {\n        \
    \    result.append(seven)\n        } else if digit == \"8\" {\n            result.append(eight)\n\
    \        } else if digit == \"9\" {\n            result.append(nine)\n       \
    \ } else {\n            result.append(digit)\n        }\n    }\n    result.reverse()\n\
    \    for n in result {\n        if n < min {\n            result.removeFirst()\n\
    \        } else if n > max {\n            result.removeLast()\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsk4833fq.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpsk4833fq.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpsk4833fq.swift:20:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let digit = String(format:\
    \ \"%2d\", n)\n                          ^~~~~~~\n                           repeating\
    \      count: \n/tmp/tmpsk4833fq.swift:22:27: error: cannot find 'one' in scope\n\
    \            result.append(one)\n                          ^~~\n/tmp/tmpsk4833fq.swift:24:27:\
    \ error: cannot find 'two' in scope\n            result.append(two)\n        \
    \                  ^~~\n/tmp/tmpsk4833fq.swift:26:27: error: cannot find 'three'\
    \ in scope\n            result.append(three)\n                          ^~~~~\n\
    /tmp/tmpsk4833fq.swift:28:27: error: cannot find 'four' in scope\n           \
    \ result.append(four)\n                          ^~~~\n/tmp/tmpsk4833fq.swift:30:27:\
    \ error: cannot find 'five' in scope\n            result.append(five)\n      \
    \                    ^~~~\n/tmp/tmpsk4833fq.swift:32:27: error: cannot find 'six'\
    \ in scope\n            result.append(six)\n                          ^~~\n/tmp/tmpsk4833fq.swift:34:27:\
    \ error: cannot find 'seven' in scope\n            result.append(seven)\n    \
    \                      ^~~~~\n/tmp/tmpsk4833fq.swift:36:27: error: cannot find\
    \ 'eight' in scope\n            result.append(eight)\n                       \
    \   ^~~~~\n/tmp/tmpsk4833fq.swift:38:27: error: cannot find 'nine' in scope\n\
    \            result.append(nine)\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    var j\
    \ = 0\n    for k in arr {\n        if i == 0 {\n            result.append(String(k))\n\
    \        } else {\n            if k == 1 {\n                result.append(String(k))\n\
    \                i += 1\n            } else {\n                if j == 0 {\n \
    \                   result.append(String(k))\n                    j += 1\n   \
    \             } else {\n                    if k == 2 {\n                    \
    \    result.append(String(k))\n                        i += 1\n              \
    \          j += 1\n                    } else {\n                        if k\
    \ == 3 {\n                            result.append(String(k))\n             \
    \               i += 1\n                            j += 1\n                 \
    \       } else {\n                            if k == 4 {\n                  \
    \              result.append(String(k))\n                                i +=\
    \ 1\n                                j += 1\n                            } else\
    \ {\n                                if k == 5 {\n                           \
    \         result.append(String(k))\n                                    i += 1\n\
    \                                    j += 1\n                                }\
    \ else {\n                                    if k == 6 {\n                  \
    \                      result.append(String(k))\n                            \
    \            i += 1\n                                        j += 1\n        \
    \                            } else {\n                                      \
    \  if k == 7 {\n                                            result.append(String(k))\n\
    \                                            i += 1\n                        \
    \                    j += 1\n                                        } else {\n\
    \                                            if k == 8 {\n                   \
    \                             result.append(String(k))\n                     \
    \                           i += 1\n                                         \
    \       j += 1\n                                            } else {\n       \
    \                                         if k == 9 {\n                      \
    \                              result.append(String(k))\n                    \
    \                                i += 1\n                                    \
    \                j += 1\n                                                } else\
    \ {\n                                                    result.append(String(k))\n\
    \                                                }\n                         \
    \                   }\n                                        }\n           \
    \                         }\n                                }\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprb22h10j/tmprb22h10j.swift:100: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c2f75dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c2f454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c2f454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c2f4537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb22h10j                        0x000055da5e7ac951 <unavailable> + 6481

    5    libc.so.6                          0x00002b5c2f949460 __libc_start_main +
    245

    6    tmprb22h10j                        0x000055da5e7ac3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014290
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return nil\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    for _ in arr {\n        if i == 0 {\n            result.append(\"\
    \")\n        }\n        if i == 1 {\n            result.append(One)\n        }\n\
    \        if i == 2 {\n            result.append(Two)\n        }\n        if i\
    \ == 3 {\n            result.append(Three)\n        }\n        if i == 4 {\n \
    \           result.append(Four)\n        }\n        if i == 5 {\n            result.append(Five)\n\
    \        }\n        if i == 6 {\n            result.append(Six)\n        }\n \
    \       if i == 7 {\n            result.append(Seven)\n        }\n        if i\
    \ == 8 {\n            result.append(Eight)\n        }\n        if i == 9 {\n \
    \           result.append(Nine)\n        }\n        if i == 10 {\n           \
    \ result.append(Ten)\n        }\n        if i == 11 {\n            result.append(Eleven)\n\
    \        }\n        if i == 12 {\n            result.append(Twelve)\n        }\n\
    \        if i == 13 {\n            result.append(Thirteen)\n        }\n      \
    \  if i == 14 {\n            result.append(Fourteen)\n        }\n        if i\
    \ == 15 {\n            result.append(Fifteen)\n        }\n        if i == 16 {\n\
    \            result.append(Sixteen)\n        }\n        if i == 17 {\n       \
    \     result.append(Seventeen)\n        }\n        if i == 18 {\n            result.append(Eighteen)\n\
    \        }\n        if i == 19 {\n            result.append(Nineteen)\n      \
    \  }\n        if i == 20 {\n            result.append(Twenty)\n        }\n   \
    \     if i == 21 {\n            result.append(TwentyOne)\n        }\n        if\
    \ i == 22 {\n            result.append(TwentyTwo)\n        }\n        if i ==\
    \ 23 {\n            result.append(TwentyThree)\n        }\n        if i == 24\
    \ {\n            result.append(TwentyFour)\n        }\n        if i == 25 {\n\
    \            result.append(TwentyFive)\n        }\n        if i == 26 {\n    \
    \        result.append(TwentySix)\n        }\n        if i == 27 {\n         \
    \   result.append(TwentySeven)\n        }\n        if i == 28 {\n            result.append(Twentyeight)\n\
    \        }\n        if i == 29 {\n            result.append(Twentynine)\n    \
    \    }\n        if i == 30 {\n            result.append(Thirty)\n        }\n \
    \       if i == 31 {\n            result.append(ThirtyOne)\n        }\n      \
    \  if i32 == 32 {\n            result.append(ThirtyTwo)\n        }\n        if\
    \ i == 33 {\n            result.append(ThirtyThree)\n        }\n        if i ==\
    \ 34 {\n            result.append(ThirtyFour)\n        }\n        if i == 35 {\n\
    \            result.append(Thirty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5lk3fbs5.swift:129:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmp5lk3fbs5.swift:128:26: note: to match this opening '('\n       \
    \     result.append(Thirty\n                         ^\n/tmp/tmp5lk3fbs5.swift:148:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp5lk3fbs5.swift:21:18: note: to match this\
    \ opening '{'\n    for _ in arr {\n                 ^\n/tmp/tmp5lk3fbs5.swift:148:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp5lk3fbs5.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmp5lk3fbs5.swift:16:16: error: 'nil' is incompatible\
    \ with return type '[String]'\n        return nil\n               ^\n/tmp/tmp5lk3fbs5.swift:26:27:\
    \ error: cannot find 'One' in scope\n            result.append(One)\n        \
    \                  ^~~\n/tmp/tmp5lk3fbs5.swift:29:27: error: cannot find 'Two'\
    \ in scope\n            result.append(Two)\n                          ^~~\n/tmp/tmp5lk3fbs5.swift:32:27:\
    \ error: cannot find 'Three' in scope\n            result.append(Three)\n    \
    \                      ^~~~~\n/tmp/tmp5lk3fbs5.swift:35:27: error: cannot find\
    \ 'Four' in scope\n            result.append(Four)\n                         \
    \ ^~~~\n/tmp/tmp5lk3fbs5.swift:38:27: error: cannot find 'Five' in scope\n   \
    \         result.append(Five)\n                          ^~~~\n/tmp/tmp5lk3fbs5.swift:41:27:\
    \ error: cannot find 'Six' in scope\n            result.append(Six)\n        \
    \                  ^~~\n/tmp/tmp5lk3fbs5.swift:44:27: error: cannot find 'Seven'\
    \ in scope\n            result.append(Seven)\n                          ^~~~~\n\
    /tmp/tmp5lk3fbs5.swift:47:27: error: cannot find 'Eight' in scope\n          \
    \  result.append(Eight)\n                          ^~~~~\n/tmp/tmp5lk3fbs5.swift:50:27:\
    \ error: cannot find 'Nin"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        }\n        if num > max {\n            max = num\n     \
    \   }\n    }\n    if min == max {\n        return result\n    }\n    var reversed\
    \ = [Int]()\n    var i = 0\n    for num in arr {\n        reversed.append(num)\n\
    \        i += 1\n        if i == min {\n            break\n        }\n    }\n\
    \    reversed.reverse()\n    for num in reversed {\n        result.append(names[num])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd8a12zbg.swift:23:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = num\n            ^~~\n/tmp/tmpd8a12zbg.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpd8a12zbg.swift:26:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = num\n            ^~~\n/tmp/tmpd8a12zbg.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpd8a12zbg.swift:43:23: error: cannot find 'names' in scope\n\
    \        result.append(names[num])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    var j\
    \ = 0\n    var n = arr.count\n    for _ in 0..<n {\n        if i == 0 {\n    \
    \        result.append(arr[j])\n            i += 1\n            j += 1\n     \
    \   } else if j == 0 {\n            result.append(arr[i])\n            i += 1\n\
    \        } else {\n            if arr[j-1] < arr[i] {\n                result.append(arr[j])\n\
    \                j += 1\n            } else {\n                result.append(arr[i])\n\
    \                i += 1\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx_t7qo9n.swift:24:30: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(arr[j])\n    \
    \                         ^\n/tmp/tmpx_t7qo9n.swift:28:30: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result.append(arr[i])\n\
    \                             ^\n/tmp/tmpx_t7qo9n.swift:32:34: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n                result.append(arr[j])\n\
    \                                 ^\n/tmp/tmpx_t7qo9n.swift:35:34: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String'\n           \
    \     result.append(arr[i])\n                                 ^\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(String(num))\n        i += 1\n        if i == 3 {\n\
    \            i = 1\n        }\n    }\n    return result.reverse()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_koydrd6.swift:30:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014290
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var index = 0\n    while\
    \ index < arr.count {\n        let value = arr[index]\n        if value < 1 ||\
    \ value > 9 {\n            index += 1\n            continue\n        }\n     \
    \   let digit = value - 10\n        let name = digitToName(digit)\n        result.append(name)\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6bzv4dig.swift:25:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    var i = 0\n    for n in arr {\n        if n >= min\
    \ && n <= max {\n            result.append(names[i])\n        }\n        i +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpac52k0_e.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpac52k0_e.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpac52k0_e.swift:24:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[i])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    let arr = arr.sorted()\n    let reversed\
    \ = arr.map { $0 < 10 ? $0 + 1 : $0 - 10 }.reversed()\n    return reversed.map\
    \ { names[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuri4_hto.swift:20:27: error: cannot find 'names' in scope\n   \
    \ return reversed.map { names[$0] }\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014289
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    var j\
    \ = 0\n    for _ in arr {\n        if i == 0 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if j == arr.count\
    \ - 1 {\n            result.append(String(arr[i]))\n            i += 1\n     \
    \       continue\n        }\n        if arr[i] < arr[j] {\n            result.append(String(arr[i]))\n\
    \            i += 1\n        } else {\n            result.append(String(arr[j]))\n\
    \            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpwydc8dvm/tmpwydc8dvm.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab447990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab447687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab447687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4476867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwydc8dvm                        0x000055aa67aee9a1 <unavailable> + 6561

    5    libc.so.6                          0x00002ab447b7c460 __libc_start_main +
    245

    6    tmpwydc8dvm                        0x000055aa67aee449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014290
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        let index = n - min\n     \
    \   if index < 10 {\n            result.append(String(index))\n        } else\
    \ {\n            result.append(String(index - 10))\n            result.append(One[index\
    \ - 10])\n        }\n    }\n    result.reverse()\n    result.removeFirst()\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvq0f0mev.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpvq0f0mev.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpvq0f0mev.swift:25:27: error: cannot find 'One' in scope\n     \
    \       result.append(One[index - 10])\n                          ^~~\n"
  stdout: ''
  timestamp: 1660014290
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    for num in arr {\n        if num >= min && num <=\
    \ max {\n            result.append(name[num])\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3svmyu10.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp3svmyu10.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp3svmyu10.swift:23:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014290
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    for number in arr {\n        if number == last {\n      \
    \      result.append(String(number))\n        } else {\n            if number\
    \ > 9 {\n                result.append(String(number))\n            } else {\n\
    \                last = number\n                result.append(String(number))\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxrq1nzom/tmpxrq1nzom.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1492c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b149297cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b149297c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b149297b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrq1nzom                        0x0000559a92cb2951 <unavailable> + 6481

    5    libc.so.6                          0x00002b1492e71460 __libc_start_main +
    245

    6    tmpxrq1nzom                        0x0000559a92cb23f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014290
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result = [String]()\n    var last = 0\n\
    \    for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            result.append(String(last))\n            result.append(String(num))\n\
    \            last = 0\n        }\n    }\n    result.append(String(last))\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpbw3i1n3c/tmpbw3i1n3c.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e863e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e860dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e860db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e860da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbw3i1n3c                        0x000055def6aea951 <unavailable> + 6481

    5    libc.so.6                          0x00002b8e865d0460 __libc_start_main +
    245

    6    tmpbw3i1n3c                        0x000055def6aea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014290
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last > 0 {\n                result.append(String(last))\n\
    \            }\n            result.append(String(num))\n            last = 0\n\
    \        }\n    }\n    if last > 0 {\n        result.append(String(last))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpe9xgt9wt/tmpe9xgt9wt.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78174d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78171c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78171c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78171c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9xgt9wt                        0x0000557441117951 <unavailable> + 6481

    5    libc.so.6                          0x00002b78176be460 __libc_start_main +
    245

    6    tmpe9xgt9wt                        0x00005574411173f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014290
- exit_code: -1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var n = arr.count\n    while i < n {\n        if arr[i]\
    \ < 1 {\n            i += 1\n            continue\n        }\n        if arr[i]\
    \ > 9 {\n            i += 1\n            continue\n        }\n        if i ==\
    \ 0 {\n            result.append(String(arr[i]))\n            i += 1\n       \
    \     continue\n        }\n        if arr[i] != arr[i-1] {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n        if arr[i] > arr[i-1]\
    \ {\n            j += 1\n            k += 2\n        } else {\n            j +=\
    \ 1\n        }\n        if j == k {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            j = 0\n            k = 0\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014295
