name: HumanEval_83_starts_one_ends
language: swift
prompt: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
  /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
  \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
  \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
completions: ["    var count = 0\n    for x in 1...n {\n        if x == 1 {\n    \
    \        count += 1\n        } else if x == n {\n            count -= 1\n    \
    \    } else {\n            count += 0\n        }\n    }\n    return count", " \
    \   var count = 0\n    for number in 1...n {\n        if number == 1 {\n     \
    \       count += 1\n        }\n        if number == n {\n            count -=\
    \ 1\n        }\n    }\n    return count", "    guard n >= 0 else {\n        return\
    \ 0\n    }\n    \n    var count = 0\n    \n    for _ in 0..<n {\n        if n\
    \ % 10 == 1 {\n            count += 1\n        }\n        n /= 10\n    }\n   \
    \ \n    return count", "    var count = 0\n    for num in 1...n {\n        if\
    \ num == 1 {\n            count += 1\n        } else if num == n {\n         \
    \   count -= 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ number in 1...n {\n        if number == 1 {\n            count += 1\n      \
    \  } else if number == n {\n            count -= 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for num in 1...n {\n        if num == 1 {\n\
    \            count += 1\n        }\n        if num == n {\n            count -=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for num in 1...n\
    \ {\n        if num == 1 {\n            count += 1\n        } else if num == n\
    \ {\n            count -= 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for num in 1...n {\n        if num == 1 {\n            count += 1\n\
    \        } else if num == n {\n            count -= 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for number in 1...n {\n        if number ==\
    \ 1 {\n            count += 1\n        } else if number == n {\n            count\
    \ -= 1\n        }\n    }\n    return count", "    var count = 0\n    for digit\
    \ in n.digits() {\n        if digit == 1 {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for number in 1...n {\n   \
    \     if number == 1 {\n            count += 1\n        } else if number == n\
    \ {\n            count -= 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for num in 1...n {\n        if num == 1 {\n            count += 1\n\
    \        } else if num == n {\n            count -= 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for number in 1...n {\n        if number ==\
    \ 1 {\n            count += 1\n        } else if number == n {\n            count\
    \ -= 1\n        }\n    }\n    return count", "    var count = 0\n    for number\
    \ in 1...n {\n        if number % 10 == 1 {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for number in 1...n {\n   \
    \     if number == 1 {\n            count += 1\n        } else {\n           \
    \ if number % 10 == 1 {\n                count += 1\n            }\n        }\n\
    \    }\n    return count", "    var count = 0\n    for number in 1...n {\n   \
    \     if number == 1 {\n            count += 1\n        } else if number == n\
    \ {\n            count -= 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for number in 1...n {\n        if number == 1 {\n            count\
    \ += 1\n        } else if number == n {\n            count -= 1\n        }\n \
    \   }\n    return count", "    var count = 0\n    for number in 1...n {\n    \
    \    if number % 10 == 1 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for number in 1...n {\n        if number ==\
    \ 1 {\n            count += 1\n        } else if number == n {\n            count\
    \ -= 1\n        }\n    }\n    return count", "    var count = 0\n    for number\
    \ in 1...n {\n        if number == 1 {\n            count += 1\n        } else\
    \ if number == n {\n            count -= 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
