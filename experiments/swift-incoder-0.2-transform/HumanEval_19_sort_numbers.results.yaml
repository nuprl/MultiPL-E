language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp84omm6xt.swift:55:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp84omm6xt.swift:54:27: note: to match this opening '('\n    numbers\
    \ = strings.Trim(number\n                          ^\n/tmp/tmp84omm6xt.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp84omm6xt.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp84omm6xt.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmp84omm6xt.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmp84omm6xt.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmp84omm6xt.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmp84omm6xt.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmp84omm6xt.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmp84omm6xt.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmp84omm6xt.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmp84omm6xt.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmp84omm6xt.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmp84omm6xt.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"2\", \"\", -1)\n        "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpadndzf8e.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpadndzf8e.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    zero\", \"0\", -1)\n\tnumbers = strings.Replace(numbers, \"one\", \"1\", -1)\n\
    \tnumbers = strings.Replace(numbers, \"two\", \"2\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"three\", \"3\", -1)\n\tnumbers = strings.Replace(numbers, \"four\", \"4\"\
    , -1)\n\tnumbers = strings.Replace(numbers, \"five\", \"5\", -1)\n\tnumbers =\
    \ strings.Replace(numbers, \"six\", \"6\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"seven\", \"7\", -1)\n\tnumbers = strings.Replace(numbers, \"eight\", \"8\"\
    , -1)\n\tnumbers = strings.Replace(numbers, \"nine\", \"9\", -1)\n\tnumbers =\
    \ strings.Trim(numbers, \" \")\n\tnumbers = strings.Trim(numbers, \"-\")\n\tnumbers\
    \ = strings.Trim(numbers, \",\")\n\tnumbers = strings.Trim(numbers, \" \")\n\t\
    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnbgsaw10.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpnbgsaw10.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpnbgsaw10.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpnbgsaw10.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpnbgsaw10.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Replace(numbers, \"zero\", \"0\", -1)\n   \
    \               ^~~~~~~\n/tmp/tmpnbgsaw10.swift:10:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"zero\", \"0\", -1)\n        ^~~~~~~\n/tmp/tmpnbgsaw10.swift:11:12: error:\
    \ cannot find 'strings' in scope\n        numbers = strings.Replace(numbers, \"\
    one\", \"1\", -1)\n                  ^~~~~~~\n/tmp/tmpnbgsaw10.swift:11:2: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"one\", \"1\", -1)\n        ^~~~~~~\n/tmp/tmpnbgsaw10.swift:12:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"two\"\
    , \"2\", -1)\n                  ^~~~~~~\n/tmp/tmpnbgsaw10.swift:12:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"two\", \"2\", -1)\n        ^~~~~~~\n/tmp/tmpnbgsaw10.swift:13:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"three\"\
    , \"3\", -1)\n                  ^~~~~~~\n/tmp/tmpnbgsaw10.swift:13:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"three\", \"3\", -1)\n        ^~~~~~~\n/tmp/tmpnbgsaw10.swift:14:12: error:\
    \ cannot find 'strings' in scope\n        numbers = strings.Replace(numbers, \"\
    four\", \"4\", -1)\n                  ^~~~~~~\n/tmp/tmpnbgsaw10.swift:14:2: error:\
    \ cannot a"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_sikca_j.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp_sikca_j.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp544w4f9f.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmp544w4f9f.swift:9:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmp544w4f9f.swift:8:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n \
    \             ^~~~~~~\n/tmp/tmp544w4f9f.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp544w4f9f.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSpace(numbers)\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcvbp8p00.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpcvbp8p00.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpcvbp8p00.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpcvbp8p00.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpcvbp8p00.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmpcvbp8p00.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmpcvbp8p00.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmpcvbp8p00.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmpcvbp8p00.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmpcvbp8p00.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmpcvbp8p00.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpcvbp8p00.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpcvbp8p00.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpcvbp8p00.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map{ Int($0) }\n    numbers.sort()\n    return numbers.map{ String($0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb4ig0sq3.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{ Int($0) }\n           \
    \                     ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \"0\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers := strings.TrimSuffix(numbers, \"2\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers := strings.TrimSuffix(numbers, \"4\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers := strings.TrimSuffix(numbers, \"6\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers := strings.TrimSuffix(numbers, \"8\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers := strings.TrimSuffix(numbers, \"10\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"11\")\n\tnumbers := strings.TrimSuffix(numbers, \"12\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"13\")\n\tnumbers := strings.TrimSuffix(numbers, \"14\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"15\")\n\tnumbers := strings.TrimSuffix(numbers, \"16\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"17\")\n\tnumbers := strings.TrimSuffix(numbers, \"18\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"19\")\n\tnumbers := strings.TrimSuffix(numbers, \"20\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"21\")\n\tnumbers := strings.TrimSuffix(numbers, \"22\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"23\")\n\tnumbers := strings.TrimSuffix(numbers, \"24\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"25\")\n\tnumbers := strings.TrimSuffix(numbers, \"26\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"27\")\n\tnumbers := strings.TrimSuffix(numbers, \"28\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"29\")\n\tnumbers := strings.TrimSuffix(numbers, \"30\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"31\")\n\tnumbers := strings.TrimSuffix(numbers, \"32\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"33\")\n\tnumbers := strings.TrimSuffix(numbers, \"34\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"35\")\n\tnumbers := strings.TrimSuffix(numbers, \"36\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"37\")\n\tnumbers := strings.TrimSuffix(numbers, \"38\")\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5tu2b0iw.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp5tu2b0iw.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpr5cnpz0e.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n           \
    \       ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n\
    /tmp/tmpr5cnpz0e.swift:13:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:14:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:14:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Tri"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = append(numbers, \"zero\")\n    numbers = append(numbers,\
    \ \"one\")\n    numbers = append(numbers, \"two\")\n    numbers = append(numbers,\
    \ \"three\")\n    numbers = append(numbers, \"four\")\n    numbers = append(numbers,\
    \ \"five\")\n    numbers = append(numbers, \"six\")\n    numbers = append(numbers,\
    \ \"seven\")\n    numbers = append(numbers, \"eight\")\n    numbers = append(numbers,\
    \ \"nine\")\n    numbers = append(numbers, \"ten\")\n    numbers = append(numbers,\
    \ \"eleven\")\n    numbers = append(numbers, \"twelve\")\n    numbers = append(numbers,\
    \ \"thirteen\")\n    numbers = append(numbers, \"fourteen\")\n    numbers = append(numbers,\
    \ \"fifteen\")\n    numbers = append(numbers, \"sixteen\")\n    numbers = append(numbers,\
    \ \"seventeen\")\n    numbers = append(numbers, \"eighteen\")\n    numbers = append(numbers,\
    \ \"nineteen\")\n    numbers = append(numbers, \"twenty\")\n    numbers = append(numbers,\
    \ \"thirty\")\n    numbers = append(numbers, \"forty\")\n    numbers = append(numbers,\
    \ \"fifty\")\n    numbers = append(numbers, \"sixty\")\n    numbers = append(numbers,\
    \ \"seventy\")\n    numbers = append(numbers, \"eighty\")\n    numbers = append(numbers,\
    \ \"ninety\")\n    numbers = append(numbers, \"hundred\")\n    numbers = append(numbers,\
    \ \"thousand\")\n    numbers = append(numbers, \"million\")\n    numbers = append(numbers,\
    \ \"billion\")\n    numbers = append(numbers, \"trillion\")\n    numbers = append(numbers,\
    \ \"quadrillion\")\n    numbers = append(numbers, \"quintillion\")\n    numbers\
    \ = append(numbers, \"sextillion\")\n    numbers = append(numbers, \"septillion\"\
    )\n    numbers = append(numbers, \"octillion\")\n    numbers = append(numbers,\
    \ \"nonillion\")\n    numbers = append(numbers, \"decillion\")\n    numbers =\
    \ append(numbers, \"undecillion\")\n    numbers = append(numbers, \"duodecillion\"\
    )\n    numbers = append(numbers, \"tredecillion\")\n    numbers = append(numbers,\
    \ \"quattuordecillion\")\n    numbers = append(numbers, \"quindecillion\")\n \
    \   numbers = append(numbers, \"sexdecillion\")\n    numbers = append(numbers,\
    \ \"septendecillion\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprq66ntvw.swift:55:31: error: unterminated string literal\n    numbers\
    \ = append(numbers, \"septendecillion\n                              ^\n/tmp/tmprq66ntvw.swift:8:19:\
    \ error: cannot find 'strings' in scope\n    var numbers = strings.Split(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmprq66ntvw.swift:9:15: error: cannot\
    \ find 'append' in scope\n    numbers = append(numbers, \"zero\")\n          \
    \    ^~~~~~\n/tmp/tmprq66ntvw.swift:10:15: error: cannot find 'append' in scope\n\
    \    numbers = append(numbers, \"one\")\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:11:15:\
    \ error: cannot find 'append' in scope\n    numbers = append(numbers, \"two\"\
    )\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:12:15: error: cannot find 'append'\
    \ in scope\n    numbers = append(numbers, \"three\")\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:13:15:\
    \ error: cannot find 'append' in scope\n    numbers = append(numbers, \"four\"\
    )\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:14:15: error: cannot find 'append'\
    \ in scope\n    numbers = append(numbers, \"five\")\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:15:15:\
    \ error: cannot find 'append' in scope\n    numbers = append(numbers, \"six\"\
    )\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:16:15: error: cannot find 'append'\
    \ in scope\n    numbers = append(numbers, \"seven\")\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:17:15:\
    \ error: cannot find 'append' in scope\n    numbers = append(numbers, \"eight\"\
    )\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:18:15: error: cannot find 'append'\
    \ in scope\n    numbers = append(numbers, \"nine\")\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:19:15:\
    \ error: cannot find 'append' in scope\n    numbers = append(numbers, \"ten\"\
    )\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:20:15: error: cannot find 'append'\
    \ in scope\n    numbers = append(numbers, \"eleven\")\n              ^~~~~~\n\
    /tmp/tmprq66ntvw.swift:21:15: error: cannot find 'append' in scope\n    numbers\
    \ = append(numbers, \"twelve\")\n              ^~~~~~\n/tmp/tmprq66ntvw.swift:22:15:\
    \ error: cannot find 'append' in scope\n    numbers = append(numbers, \"thirteen\"\
    )\n              ^~"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsLower)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsUpper)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsLineBreak)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSurrogate)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsPunct)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSymbol)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\t\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1b8p84d_.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp1b8p84d_.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp1b8p84d_.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmp1b8p84d_.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSpace)\n                                                 ^~~~~~~\n\
    /tmp/tmp1b8p84d_.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \        ^~~~~~~\n/tmp/tmp1b8p84d_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \                  ^~~~~~~\n/tmp/tmp1b8p84d_.swift:10:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \                                                 ^~~~~~~\n/tmp/tmp1b8p84d_.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsNumber)\n        ^~~~~~~\n/tmp/tmp1b8p84d_.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmp1b8p84d_.swift:11:43:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                                                 ^~~~~~~\n\
    /tmp/tmp1b8p84d_.swift:11:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \        ^~~~~~~\n/tmp/tmp1b8p84d_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsLower)\n \
    \                 ^~~~~~~\n/tmp/tmp1b8p84d_.swift:12:43"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp88toz6s2.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted(by: <)\n    return numbers.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkqnga5v7.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted(by: <)\n            \
    \                    ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpydun0_iv.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpydun0_iv.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpydun0_iv.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmpydun0_iv.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmpydun0_iv.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"x\")\n           \
    \       ^~~~~~~\n/tmp/tmpydun0_iv.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"x\")\n\
    \        ^~~~~~~\n/tmp/tmpydun0_iv.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"z\")\n              \
    \    ^~~~~~~\n/tmp/tmpydun0_iv.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"z\")\n\
    \        ^~~~~~~\n/tmp/tmpydun0_iv.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpydun0_iv.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpydun0_iv.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpydun0_iv.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpydun0_iv.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpydun0_iv.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmep6s0um.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpmep6s0um.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sortInPlace()\n\
    \    return numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmploozuryv.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmploozuryv.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmploozuryv.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmploozuryv.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmploozuryv.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmploozuryv.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmploozuryv.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmploozuryv.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobqio5no.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpobqio5no.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpkn818vgj.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"es\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"s\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:15:15:\
    \ error: cannot find '"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \",\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"+\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \")\", \"\", -1)\n    numbers = strings.Replace(numbers, \"=\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \">\", \"\", -1)\n    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"@\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"#\", \"\", -1)\n    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"&\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"?\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"!\", \"\", -1)\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\"\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"(\", \"\", -1)\n    numbers = strings.Replace(numbers, \")\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpynihu7r8.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpynihu7r8.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \")\", \"\"\n                             ^\n/tmp/tmpynihu7r8.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpynihu7r8.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpynihu7r8.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpynihu7r8.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpynihu7r8.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmpynihu7r8.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmpynihu7r8.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpynihu7r8.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpynihu7r8.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpynihu7r8.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpynihu7r8.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpynihu7r8.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmpynihu7r8.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"0\", "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0w5l2e_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp0w5l2e_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Join(numbers, \" \")\n\tnumbers := strings.Split(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzw39_67c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpzw39_67c.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \",\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \",\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \",\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \",\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptut0bmi5.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmptut0bmi5.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmptut0bmi5.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmptut0bmi5.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmptut0bmi5.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmptut0bmi5.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n              ^~~~~~~\n/tmp/tmptut0bmi5.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmptut0bmi5.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmptut0bmi5.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    numbers = strings.TrimSuffix(numbers, \"\\\\\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"'\")\n    numbers = strings.TrimSuffix(numbers, \"\\\"\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n    numbers = strings.TrimSuffix(numbers, \"%\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n    numbers = strings.TrimSuffix(numbers, \"*\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n    numbers = strings.TrimSuffix(numbers, \")\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    numbers = strings.TrimSuffix(numbers, \"<\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \">\")\n    numbers = strings.TrimSuffix(numbers, \"=\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"|\")\n    numbers = strings.TrimSuffix(numbers, \"~\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"^\")\n    numbers = strings.TrimSuffix(numbers, \"~\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    numbers = strings.TrimSuffix(numbers, \"%\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n    numbers = strings.TrimSuffix(numbers, \"*\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpi01_hmxb.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpi01_hmxb.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmpi01_hmxb.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmpi01_hmxb.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmpi01_hmxb.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmpi01_hmxb.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmpi01_hmxb.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmpi01_hmxb.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmpi01_hmxb.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpws6ojlip.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpngorc1zl.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpngorc1zl.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpngorc1zl.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpngorc1zl.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpngorc1zl.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"  \")\n    numbers = strings.TrimSuffix(numbers, \"\\t\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\n\")\n    numbers = strings.TrimSuffix(numbers, \"\\r\")\n    numbers =\
    \ strings.TrimSuffix(numbers, \"\\f\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\v\")\n    numbers = strings.TrimSuffix(numbers, \"\\000\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\001\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\002\")\n    numbers = strings.TrimSuffix(numbers, \"\\003\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\004\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\005\")\n    numbers = strings.TrimSuffix(numbers, \"\\006\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\007\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\008\")\n    numbers = strings.TrimSuffix(numbers, \"\\009\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\010\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\011\")\n    numbers = strings.TrimSuffix(numbers, \"\\012\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\013\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\014\")\n    numbers = strings.TrimSuffix(numbers, \"\\015\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\016\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"\\017\")\n    numbers = strings.TrimSuffix(numbers, \"\\018\")\n    numbers\
    \ = strings.TrimSuffix(numbers, \"\\019\")\n    numbers = \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp05bfn3e6.swift:24:45: error: invalid escape sequence in literal\n\
    \    numbers = strings.TrimSuffix(numbers, \"\\f\")\n                        \
    \                    ^\n/tmp/tmp05bfn3e6.swift:25:45: error: invalid escape sequence\
    \ in literal\n    numbers = strings.TrimSuffix(numbers, \"\\v\")\n           \
    \                                 ^\n/tmp/tmp05bfn3e6.swift:47:1: error: expected\
    \ expression in assignment\n}\n^\n/tmp/tmp05bfn3e6.swift:8:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n             \
    \ ^~~~~~~\n/tmp/tmp05bfn3e6.swift:8:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n    ^~~~~~~\n\
    /tmp/tmp05bfn3e6.swift:9:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.TrimSuffix(numbers, \"0\")\n              ^~~~~~~\n/tmp/tmp05bfn3e6.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \"0\")\n    ^~~~~~~\n/tmp/tmp05bfn3e6.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n              ^~~~~~~\n/tmp/tmp05bfn3e6.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    ^~~~~~~\n/tmp/tmp05bfn3e6.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"2\")\n              ^~~~~~~\n\
    /tmp/tmp05bfn3e6.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    ^~~~~~~\n/tmp/tmp05bfn3e6.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n              ^~~~~~~\n/tmp/tmp05bfn3e6.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    ^~~~~~~\n/tmp/tmp05bfn3e6.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"4\")\n              ^~~~~~~\n\
    /tmp/tmp05bfn3e6.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let numbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz44ssnu2.swift:9:43: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let numbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \      ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"o\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"O\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"o\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"O\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp44ppwshg.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp44ppwshg.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp44ppwshg.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmp44ppwshg.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmp44ppwshg.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmp44ppwshg.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp44ppwshg.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp44ppwshg.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp44ppwshg.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp44ppwshg.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp44ppwshg.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp44ppwshg.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp44ppwshg.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmp44ppwshg.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph_pdv_dc.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSuffix(numbers, \" \")\n   \
    \        ^\n           ;\n/tmp/tmph_pdv_dc.swift:9:13: error: expected expression\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n            ^\n/tmp/tmph_pdv_dc.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmph_pdv_dc.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmph_pdv_dc.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"!\")\n\tnumbers := strings.Trim(numbers,\
    \ \"%\")\n\tnumbers := strings.Trim(numbers, \"&\")\n\tnumbers := strings.Trim(numbers,\
    \ \"*\")\n\tnumbers := strings.Trim(numbers, \"(\")\n\tnumbers := strings.Trim(numbers,\
    \ \")\")\n\tnumbers := strings.Trim(numbers, \"/\")\n\tnumbers := strings.Trim(numbers,\
    \ \"=\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \".\")\n\tnumbers := strings.Trim(numbers, \"/\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\\\\")\n\tnumbers := strings.Trim(numbers, \"<\")\n\tnumbers := strings.Trim(numbers,\
    \ \">\")\n\tnumbers := strings.Trim(numbers, \"[\")\n\tnumbers := strings.Trim(numbers,\
    \ \"]\")\n\tnumbers := strings.Trim(numbers, \"{\")\n\tnumbers := strings.Trim(numbers,\
    \ \"}\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"'\")\n\tnumbers := strings.Trim(numbers, \"\\\"\")\n\tnumbers := strings.Trim(numbers,\
    \ \"%\")\n\tnumbers := strings.Trim(numbers, \"_\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \".\")\n\tnumbers := strings.Trim(numbers,\
    \ \"/\")\n\tnumbers := strings.Trim(numbers, \"\\\\\")\n\tnumbers := strings.Trim(numbers,\
    \ \"<\")\n\tnumbers := strings.Trim(numbers, \">\")\n\tnumbers := strings.Trim(numbers,\
    \ \"[\")\n\tnumbers := strings.Trim(numbers, \"]\")\n\tnumbers := strings.Trim(numbers,\
    \ \"{\")\n\tnumbers := strings.Trim(numbers, \"}\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"'\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\\"\")\n\tnumbers := strings.Trim(numbers, \"%\")\n\tnumbers := strings.Trim(numbers,\
    \ \"_\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplgqiggyi.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmplgqiggyi.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map { Int($0) }\n    numbers_array.sort()\n    return\
    \ numbers_array.map { String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5oeql02b.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map { Int($0) }\n    \
    \                                  ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers_array.sort()\n    return\
    \ numbers_array.map{ String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjbqzwyyk.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \",\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"'\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(numbers, \"6\")\n    numbers = strings.Trim(numbers,\
    \ \"7\")\n    numbers = strings.Trim(numbers, \"8\")\n    numbers = strings.Trim(numbers,\
    \ \"9\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"'\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(numbers, \"6\")\n    numbers = strings.Trim(numbers,\
    \ \"7\")\n    numbers = strings.Trim(numbers, \"8\")\n    numbers = strings.Trim(numbers,\
    \ \"9\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp25dp2cqd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp25dp2cqd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp25dp2cqd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmp25dp2cqd.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmp25dp2cqd.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \" \", \"\", -1)\n              ^~~~~~~\n/tmp/tmp25dp2cqd.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmp25dp2cqd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n              ^~~~~~~\n/tmp/tmp25dp2cqd.swift:11:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    ^~~~~~~\n/tmp/tmp25dp2cqd.swift:12:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmp25dp2cqd.swift:12:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \",\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmp25dp2cqd.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmp25dp2cqd.swift:13:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmp25dp2cqd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmp25dp2cqd.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmp25dp2cqd.swift:15:15"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpiwt9lsnl.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSuffix(numbers, \" \")\n   \
    \        ^\n           ;\n/tmp/tmpiwt9lsnl.swift:9:13: error: expected expression\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n            ^\n/tmp/tmpiwt9lsnl.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpiwt9lsnl.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpiwt9lsnl.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Trim\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp544w4f9f.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSpace(numbers)\n           ^\n\
    \           ;\n/tmp/tmp544w4f9f.swift:9:13: error: expected expression\n    numbers\
    \ := strings.TrimSpace(numbers)\n            ^\n/tmp/tmp544w4f9f.swift:8:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n \
    \             ^~~~~~~\n/tmp/tmp544w4f9f.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp544w4f9f.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSpace(numbers)\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"o\")\n\tnumbers = strings.TrimSuffix(numbers, \"O\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"o\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"O\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4fke0tug.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp4fke0tug.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp4fke0tug.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmp4fke0tug.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmp4fke0tug.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmp4fke0tug.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp4fke0tug.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp4fke0tug.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp4fke0tug.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp4fke0tug.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp4fke0tug.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp4fke0tug.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp4fke0tug.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmp4fke0tug.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp4rhxaz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpp4rhxaz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqcw4_xm4.swift:51:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpqcw4_xm4.swift:8:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmpqcw4_xm4.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpqcw4_xm4.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmpqcw4_xm4.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpqcw4_xm4.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbe"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \"_\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphl4rh6dy.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmphl4rh6dy.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \"0\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers := strings.TrimSuffix(numbers, \"2\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers := strings.TrimSuffix(numbers, \"4\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers := strings.TrimSuffix(numbers, \"6\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers := strings.TrimSuffix(numbers, \"8\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"9\")\n\treturn numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvfxylrf.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmppvfxylrf.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmppvfxylrf.swift:8:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpte51zlc3.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpte51zlc3.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpte51zlc3.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmpte51zlc3.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmpte51zlc3.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmpte51zlc3.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n      \
    \            ^~~~~~~\n/tmp/tmpte51zlc3.swift:10:38: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n   \
    \                                         ^~~~~~~\n/tmp/tmpte51zlc3.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpte51zlc3.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmpte51zlc3.swift:11:38:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                                            ^~~~~~~\n/tmp/tmpte51zlc3.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmpte51zlc3.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmpte51zlc3.swift:12:38: error:\
    \ cannot find 'unicode' in scope\n        "
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpte93xcqn.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmpte93xcqn.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmpte93xcqn.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmpte93xcqn.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmpte93xcqn.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmpte93xcqn.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp4rhxaz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpp4rhxaz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzhx8w1zk.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpzhx8w1zk.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetterOrDigit)\n\tnumbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLineSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparatorOrNewline)\n\tnumbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsPunct)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsPunctOrNewline)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetterOrDigit)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetterOrDigit)\n\tnumbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetterOrDigit)\n\tnumbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqobq2h3j.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpqobq2h3j.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpqobq2h3j.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmpqobq2h3j.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSpace)\n                                                 ^~~~~~~\n\
    /tmp/tmpqobq2h3j.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \        ^~~~~~~\n/tmp/tmpqobq2h3j.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \                  ^~~~~~~\n/tmp/tmpqobq2h3j.swift:10:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \                                                 ^~~~~~~\n/tmp/tmpqobq2h3j.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsNumber)\n        ^~~~~~~\n/tmp/tmpqobq2h3j.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmpqobq2h3j.swift:11:43:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                                                 ^~~~~~~\n\
    /tmp/tmpqobq2h3j.swift:11:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \        ^~~~~~~\n/tmp/tmpqobq2h3j.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsLetterOrDigit)\n\
    \                  ^~~~~~~\n/tmp/tmpqobq2h3j.swi"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { (a, b) -> Bool in\n   \
    \     let aInt = Int(a)\n        let bInt = Int(b)\n        return aInt < bInt\n\
    \    })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdydfk6c1.swift:12:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return aInt < bInt\n        \
    \       ^\n/tmp/tmpdydfk6c1.swift:12:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        return aInt < bInt\n\
    \               ^\n                    ?? <#default value#>\n/tmp/tmpdydfk6c1.swift:12:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return aInt < bInt\n               ^\n                   !\n\
    /tmp/tmpdydfk6c1.swift:12:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n        return aInt < bInt\n                     \
    \ ^\n/tmp/tmpdydfk6c1.swift:12:23: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        return aInt < bInt\n       \
    \               ^\n                           ?? <#default value#>\n/tmp/tmpdydfk6c1.swift:12:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return aInt < bInt\n                      ^\n               \
    \           !\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph4u5w1jl.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmph4u5w1jl.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bbidiax.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp4bbidiax.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp4bbidiax.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmp4bbidiax.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmp4bbidiax.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \", -1)\n              ^~~~~~~\n/tmp/tmp4bbidiax.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \", -1)\n    ^~~~~~~\n/tmp/tmp4bbidiax.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n              ^~~~~~~\n/tmp/tmp4bbidiax.swift:11:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    ^~~~~~~\n/tmp/tmp4bbidiax.swift:12:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \"\
    , -1)\n              ^~~~~~~\n/tmp/tmp4bbidiax.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    ^~~~~~~\n/tmp/tmp4bbidiax.swift:13:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \", \"-\"\
    , -1)\n              ^~~~~~~\n/tmp/tmp4bbidiax.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    ^~~~~~~\n/tmp/tmp4bbidiax.swift:14:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \"\
    , -1)\n              ^~~~~~~\n/tmp/tmp4bbidiax.swift:14:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    ^~~~~~~\n/tmp/tmp4bbidiax.s"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_jbrkt9j.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpngorc1zl.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpngorc1zl.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpngorc1zl.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpngorc1zl.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpngorc1zl.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimLeftFunc(numbers, unicode.IsNumber)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsNumber)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsLineTerminator)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpki_zr7sw.swift:43:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpki_zr7sw.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpki_zr7sw.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpki_zr7sw.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpki_zr7sw.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpki_zr7sw.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \                  ^~~~~~~\n/tmp/tmpki_zr7sw.swift:10:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsNumber)\n\
    \                                                 ^~~~~~~\n/tmp/tmpki_zr7sw.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsNumber)\n        ^~~~~~~\n/tmp/tmpki_zr7sw.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsNumber)\n                  ^~~~~~~\n/tmp/tmpki_zr7sw.swift:11:42:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsNumber)\n                                                ^~~~~~~\n\
    /tmp/tmpki_zr7sw.swift:11:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsNumber)\n\
    \        ^~~~~~~\n/tmp/tmpki_zr7sw.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n      \
    \            ^~~~~~~\n/tmp/tmpki_zr7sw.swift:12:38: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n   \
    \                                         ^~~~~~~\n/tmp/tmpk"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph4u5w1jl.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmph4u5w1jl.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpi4240tk2.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpi4240tk2.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpi4240tk2.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpi4240tk2.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpi4240tk2.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8g1cotsv.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp8g1cotsv.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmp8g1cotsv.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp8g1cotsv.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp8g1cotsv.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpws6ojlip.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \",\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"+\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n    numbers = strings.Replace(numbers, \".\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"@\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"&\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"(\", \"\", -1)\n    numbers = strings.Replace(numbers, \")\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"~\", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"_\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n    numbers = strings.Replace(numbers, \"+\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \">\", \"\", -1)\n    numbers = strings.Replace(numbers, \"?\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyk72zsa1.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpyk72zsa1.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"?\", \"\"\n                             ^\n/tmp/tmpyk72zsa1.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpyk72zsa1.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpyk72zsa1.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpyk72zsa1.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpyk72zsa1.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmpyk72zsa1.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmpyk72zsa1.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpyk72zsa1.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpyk72zsa1.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpyk72zsa1.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpyk72zsa1.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpyk72zsa1.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmpyk72zsa1.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"0\", "
  stdout: ''
  timestamp: 1660013595
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { (first, second) -> Bool\
    \ in\n        return first < second\n    })\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpnz86pw2r/tmpnz86pw2r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1faf2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1faefd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1faefd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1faefd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz86pw2r                        0x00005576cfba48b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b1faf4c9460 __libc_start_main +
    245

    6    tmpnz86pw2r                        0x00005576cfba42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps9zeaq4j.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmps9zeaq4j.swift:9:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n/tmp/tmps9zeaq4j.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmps9zeaq4j.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmps9zeaq4j.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.Trim(numbers, \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"y\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"y\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"y\")\n\tnumbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuyw3brtn.swift:50:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpuyw3brtn.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpuyw3brtn.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmpuyw3brtn.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"z\")\n           \
    \       ^~~~~~~\n/tmp/tmpuyw3brtn.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"z\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo2r9ytjd.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo2r9ytjd.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo2r9ytjd.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpo2r9ytjd.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberList = strings.Split(numbers, \" \")\n    numberList = sort_numbers_helper(numberList)\n\
    \    return strings.Join(numberList, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9tosz_8c.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp9tosz_8c.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp9tosz_8c.swift:9:22: error:\
    \ cannot find 'strings' in scope\n    var numberList = strings.Split(numbers,\
    \ \" \")\n                     ^~~~~~~\n/tmp/tmp9tosz_8c.swift:10:18: error: cannot\
    \ find 'sort_numbers_helper' in scope\n    numberList = sort_numbers_helper(numberList)\n\
    \                 ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9tosz_8c.swift:11:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numberList, \" \")\n      \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvu6pab7c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpvu6pab7c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \".\")\n\tnumbers := strings.TrimRight(numbers, \"/\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"_\")\n\tnumbers := strings.TrimRight(numbers, \"0\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"1\")\n\tnumbers := strings.TrimRight(numbers, \"2\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"3\")\n\tnumbers := strings.TrimRight(numbers, \"4\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"5\")\n\tnumbers := strings.TrimRight(numbers, \"6\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"7\")\n\tnumbers := strings.TrimRight(numbers, \"8\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"9\")\n\tnumbers := strings.TrimRight(numbers, \":\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\t\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoa_c1c44.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpoa_c1c44.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpoa_c1c44.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpoa_c1c44.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpoa_c1c44.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0_e4u0oq.swift:9:49: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    let sortedNumbers = numbers.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmmvo_51r.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpmmvo_51r.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpr5cnpz0e.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n           \
    \       ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n\
    /tmp/tmpr5cnpz0e.swift:13:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:14:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpr5cnpz0e.swift:14:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Tri"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoa0hjpu3.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpoa0hjpu3.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzhsg9499.swift:50:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpzhsg9499.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzhsg9499.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzhsg9499.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmpzhsg9499.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmpzhsg9499.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"x\")\n           \
    \       ^~~~~~~\n/tmp/tmpzhsg9499.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"x\")\n\
    \        ^~~~~~~\n/tmp/tmpzhsg9499.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"z\")\n              \
    \    ^~~~~~~\n/tmp/tmpzhsg9499.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"z\")\n\
    \        ^~~~~~~\n/tmp/tmpzhsg9499.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpzhsg9499.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpzhsg9499.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpzhsg9499.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpzhsg9499.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpzhsg9499.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpck53g1rt.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmpck53g1rt.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmpck53g1rt.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmpck53g1rt.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmpck53g1rt.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \".\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_3qk0cwg.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmp_3qk0cwg.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpc50g7ye9.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpc50g7ye9.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpc50g7ye9.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpc50g7ye9.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpc50g7ye9.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpc50g7ye9.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"_\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7_svpa6e.swift:50:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7_svpa6e.swift:49:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimSuffix(number\n                                    ^\n/tmp/tmp7_svpa6e.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7_svpa6e.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp7_svpa6e.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp7_svpa6e.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmep6s0um.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpmep6s0um.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp06nzhyha.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp06nzhyha.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmp06nzhyha.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp06nzhyha.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp06nzhyha.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"y\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"y\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"y\")\n\tnumbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuyw3brtn.swift:50:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpuyw3brtn.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpuyw3brtn.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmpuyw3brtn.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"z\")\n           \
    \       ^~~~~~~\n/tmp/tmpuyw3brtn.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"z\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpuyw3brtn.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpuyw3brtn.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n    numbers = strings.TrimSuffix(numbers, \"ing\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpkn818vgj.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"es\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"es\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"ed\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n              ^~~~~~~\n/tmp/tmpkn818vgj.swift:13:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"s\")\n              ^~~~~~~\n\
    /tmp/tmpkn818vgj.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    ^~~~~~~\n/tmp/tmpkn818vgj.swift:15:15:\
    \ error: cannot find '"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\
    \tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\
    \tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\
    \tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\
    \tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Trim(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv4q2r_x2.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpv4q2r_x2.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsNumber)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsUpper)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsLower)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineSeparator)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9wx7xhd8.swift:42:19: error: expected member name following '.'\n\
    \        numbers = strings.\n                         ^\n/tmp/tmp9wx7xhd8.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n \
    \                 ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:9:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \                                                 ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:9:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:10:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:11:38:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n                                            ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsLetter)\n        ^~~~~~~\n/tmp/tmp9wx7xhd8.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(nu"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    numbers.sort { $0 < $1 }\n    return numbers.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyos2l4ou.swift:9:13: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n    numbers.sort { $0 < $1 }\n    ~~~~~~~\
    \ ^\n/tmp/tmpyos2l4ou.swift:8:5: note: change 'let' to 'var' to make it mutable\n\
    \    let numbers = numbers.split(separator: \" \")\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppbliv_u1.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmppbliv_u1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsUpper)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n    numbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSurrogate)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunct)\n    numbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjtn2bs5d.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n              ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:9:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                             ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n              ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:10:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \                                        ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:11:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \                                        ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:11:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsLetter)\n    ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLower)\n              ^~~~~~~\n/tmp/tmpjtn2bs5d.swift:12:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\
    \                                        ^~~~~~~"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map{Int($0)!}\n    numbers.sort()\n    return numbers.map{String($0)}.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpx4ql694y.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{Int($0)!}\n            \
    \                    ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers, \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprp3hgel6.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmprp3hgel6.swift:9:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n/tmp/tmprp3hgel6.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmprp3hgel6.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmprp3hgel6.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.Trim(numbers, \" \")\n        ^~~~~~~\n\
    /tmp/tmprp3hgel6.swift:12:9: error: cannot find 'strings' in scope\n        return\
    \ strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpame88p2o.swift:51:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpame88p2o.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpame88p2o.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpame88p2o.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpame88p2o.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpame88p2o.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmpame88p2o.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2ej90gzf.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp2ej90gzf.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \",\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \".\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"_\", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"+\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"*\", \"\", -1)\n    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \")\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"[\", \"\", -1)\n    numbers = strings.Replace(numbers, \"]\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"{\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"}\", \"\", -1)\n    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \">\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"/\", \"\", -1)\n    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"_\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"+\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpep4w0xrw.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpep4w0xrw.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"+\", \"\"\n                             ^\n/tmp/tmpep4w0xrw.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpep4w0xrw.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpep4w0xrw.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpep4w0xrw.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpep4w0xrw.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmpep4w0xrw.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmpep4w0xrw.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpep4w0xrw.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpep4w0xrw.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpep4w0xrw.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpep4w0xrw.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpep4w0xrw.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmpep4w0xrw.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"0\", "
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers\
    \ = strings.Replace(numbers, \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"2\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"5\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"8\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"\", -1)\n\t\
    numbers = strings.TrimSpace(numbers)\n\tnumbers = strings.ToLower(numbers)\n\t\
    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"2\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"5\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"8\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"\", -1)\n\t\
    numbers = strings.TrimSpace(numbers)\n\tnumbers = strings.ToLower(numbers)\n\t\
    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"2\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"5\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n\tnumbers = strings.Replace(number\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpplbu2hym.swift:49:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpplbu2hym.swift:48:27: note: to match this opening '('\n        numbers\
    \ = strings.Replace(number\n                                 ^\n/tmp/tmpplbu2hym.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpplbu2hym.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpplbu2hym.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.ToLower(numbers)\n                  ^~~~~~~\n\
    /tmp/tmpplbu2hym.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.ToLower(numbers)\n        ^~~~~~~\n/tmp/tmpplbu2hym.swift:10:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n                  ^~~~~~~\n/tmp/tmpplbu2hym.swift:10:2: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n        ^~~~~~~\n/tmp/tmpplbu2hym.swift:11:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpplbu2hym.swift:11:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpplbu2hym.swift:12:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"0\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpplbu2hym.swift:12:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpplbu2hym.swift:13:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"1\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpplbu2hym.swift:13:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpplbu2hym.s"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmploga3a5b.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmploga3a5b.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp68tkgr_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp68tkgr_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobqio5no.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpobqio5no.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \"/\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n    numbers = strings.TrimSuffix(numbers, \"&\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n    numbers = strings.TrimSuffix(numbers, \")\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"=\")\n    numbers = strings.TrimSuffix(numbers, \"[\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"]\")\n    numbers = strings.TrimSuffix(numbers, \"{\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"}\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \"/\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n    numbers = strings.TrimSuffix(numbers, \"&\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n    numbers = strings.TrimSuffix(numbers, \")\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"=\")\n    numbers = strings.TrimSuffix(numbers, \"[\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"]\")\n    numbers = strings.TrimSuffix(numbers, \"{\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"}\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \"/\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n    numbers = strings.TrimSuffix(numbers, \"&\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n    numbers = strings.TrimSuffix(numbers, \")\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"=\")\n    numbers = strings.TrimSuffix(numbers, \"[\")\n    numbers = strings.TrimSuffix(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbzbcyjhh.swift:49:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpbzbcyjhh.swift:8:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmpbzbcyjhh.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \".\")\n              ^~~~~~~\n\
    /tmp/tmpbzbcyjhh.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \".\")\n    ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n              ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    ^~~~~~~\n/tmp/tmpbzbcyjhh.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"%\")\n              ^~~~~~~\n\
    /tmp/tmpbzbcyjhh.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbe"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw6934act.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpw6934act.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpw6934act.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpw6934act.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpw6934act.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpw6934act.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpw6934act.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpw6934act.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsUpper)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunct)\n    numbers = strings.TrimFunc(numbers, unicode.IsSymbol)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(number\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp_z19al81.swift:43:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp_z19al81.swift:42:31: note: to match this opening '('\n    numbers\
    \ = strings.TrimFunc(number\n                              ^\n/tmp/tmp_z19al81.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp_z19al81.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp_z19al81.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmp_z19al81.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmp_z19al81.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n              ^~~~~~~\n/tmp/tmp_z19al81.swift:10:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsNumber)\n                                             ^~~~~~~\n/tmp/tmp_z19al81.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsNumber)\n    ^~~~~~~\n/tmp/tmp_z19al81.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n              ^~~~~~~\n/tmp/tmp_z19al81.swift:11:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \                                        ^~~~~~~\n/tmp/tmp_z19al81.swift:11:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmp_z19al81.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              ^~~~~~~\n/tmp/tmp_z19al81.swift:12:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \                                        ^~~~~~~\n/"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"!\")\n\tnumbers := strings.Trim(numbers,\
    \ \"'\")\n\tnumbers := strings.Trim(numbers, \"\\\"\")\n\tnumbers := strings.Trim(numbers,\
    \ \"%\")\n\tnumbers := strings.Trim(numbers, \"/\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\\\\")\n\tnumbers := strings.Trim(numbers, \"*\")\n\tnumbers := strings.Trim(numbers,\
    \ \"(\")\n\tnumbers := strings.Trim(numbers, \")\")\n\tnumbers := strings.Trim(numbers,\
    \ \":\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"+\")\n\tnumbers := strings.Trim(numbers,\
    \ \"=\")\n\tnumbers := strings.Trim(numbers, \"<\")\n\tnumbers := strings.Trim(numbers,\
    \ \">\")\n\tnumbers := strings.Trim(numbers, \"[\")\n\tnumbers := strings.Trim(numbers,\
    \ \"]\")\n\tnumbers := strings.Trim(numbers, \"{\")\n\tnumbers := strings.Trim(numbers,\
    \ \"}\")\n\tnumbers := strings.Trim(numbers, \"|\")\n\tnumbers := strings.Trim(numbers,\
    \ \"~\")\n\tnumbers := strings.Trim(numbers, \"^\")\n\tnumbers := strings.Trim(numbers,\
    \ \"_\")\n\tnumbers := strings.Trim(numbers, \"$\")\n\tnumbers := strings.Trim(numbers,\
    \ \"@\")\n\tnumbers := strings.Trim(numbers, \"#\")\n\tnumbers := strings.Trim(numbers,\
    \ \"$\")\n\tnumbers := strings.Trim(numbers, \"%\")\n\tnumbers := strings.Trim(numbers,\
    \ \"&\")\n\tnumbers := strings.Trim(numbers, \"*\")\n\tnumbers := strings.Trim(numbers,\
    \ \"(\")\n\tnumbers := strings.Trim(numbers, \")\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"+\")\n\tnumbers := strings.Trim(numbers, \"=\")\n\tnumbers := strings.Trim(numbers,\
    \ \"<\")\n\tnumbers := strings.Trim(numbers, \">\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzhlqhb47.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpzhlqhb47.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpzhlqhb47.swift:56:35:\
    \ error: unterminated string literal\n        numbers := strings.Trim(numbers,\
    \ \"\n                                         ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6k2ydmr4.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp6k2ydmr4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpame88p2o.swift:51:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpame88p2o.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpame88p2o.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpame88p2o.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpame88p2o.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpame88p2o.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmpame88p2o.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpame88p2o.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpame88p2o.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1voo_ebd.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp1voo_ebd.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp1voo_ebd.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp1voo_ebd.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp1voo_ebd.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp1voo_ebd.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp1voo_ebd.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp1voo_ebd.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp17820tr7.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp17820tr7.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp17820tr7.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp17820tr7.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp17820tr7.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp17820tr7.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4b81ef5g.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmp4b81ef5g.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    -\", \" \", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers\
    \ = strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \" \", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"-\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \" \", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"-\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \" \", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"-\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \" \", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"-\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \" \", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers, \" \", \"-\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \" \", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\tnumbers = strings.Replace\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphqyn2wqy.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmphqyn2wqy.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmphqyn2wqy.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmphqyn2wqy.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmphqyn2wqy.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Replace(numbers, \"-\", \" \", -1)\n      \
    \            ^~~~~~~\n/tmp/tmphqyn2wqy.swift:10:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers, \"\
    -\", \" \", -1)\n        ^~~~~~~\n/tmp/tmphqyn2wqy.swift:11:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \" \", \"\
    -\", -1)\n                  ^~~~~~~\n/tmp/tmphqyn2wqy.swift:11:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n        ^~~~~~~\n/tmp/tmphqyn2wqy.swift:12:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \ \", -1)\n                  ^~~~~~~\n/tmp/tmphqyn2wqy.swift:12:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n        ^~~~~~~\n/tmp/tmphqyn2wqy.swift:13:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \" \", \"\
    -\", -1)\n                  ^~~~~~~\n/tmp/tmphqyn2wqy.swift:13:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n        ^~~~~~~\n/tmp/tmphqyn2wqy.swift:14:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \ \", -1)\n                  ^~~~~~~\n/tmp/tmphqyn2wqy.swift:14:2: error: cannot\
    \ assign to value: 'numbers'"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1voo_ebd.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp1voo_ebd.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp1voo_ebd.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp1voo_ebd.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp1voo_ebd.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp1voo_ebd.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp1voo_ebd.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp1voo_ebd.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers\
    \ := strings.TrimSpace(strings.Join(numbers, \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n\t\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj_vbuuvk.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpj_vbuuvk.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgfiawg8c.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpgfiawg8c.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"es\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"ed\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"es\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"ed\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"es\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"ed\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n\tnumbers = strings.TrimSuffix(numbers, \"ing\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"es\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.TrimSuffix(numbers, \"ed\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpvjsy9sqs.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"es\")\n          \
    \        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:10:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"es\")\n        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:11:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"ing\")\n         \
    \         ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:11:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:12:12: error: cannot find\
    \ 'strings' in scope\n        numbers = strings.TrimSuffix(numbers, \"ed\")\n\
    \                  ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:12:2: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"ed\")\n        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:13:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"ing\")\n         \
    \         ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:13:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"ing\")\n        ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:14:12: error: cannot find\
    \ 'strings' in scope\n        numbers = strings.TrimSuffix(numbers, \"s\")\n \
    \                 ^~~~~~~\n/tmp/tmpvjsy9sqs.swift:14:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n     "
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptycbg1gh.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmptycbg1gh.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLineBreak)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSurrogate)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsPunct)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n\tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n\t\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp73rsgpo3.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp73rsgpo3.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp73rsgpo3.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmp73rsgpo3.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmp73rsgpo3.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmp73rsgpo3.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n \
    \                 ^~~~~~~\n/tmp/tmp73rsgpo3.swift:10:43: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \                                                 ^~~~~~~\n/tmp/tmp73rsgpo3.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmp73rsgpo3.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                  ^~~~~~~\n/tmp/tmp73rsgpo3.swift:11:43:\
    \ error: cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLetter)\n                                                 ^~~~~~~\n\
    /tmp/tmp73rsgpo3.swift:11:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsLetter)\n\
    \        ^~~~~~~\n/tmp/tmp73rsgpo3.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\
    \                  ^~~~~~~\n/tmp/tmp73rsgpo3.swift:12:43:"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \".\")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxj346rrx.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpxj346rrx.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpxj346rrx.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpxj346rrx.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpxj346rrx.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobqio5no.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpobqio5no.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"10\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n\tnumbers = strings.TrimSuffix(numbers, \"12\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n\tnumbers = strings.TrimSuffix(numbers, \"14\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n\tnumbers = strings.TrimSuffix(numbers, \"16\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n\tnumbers = strings.TrimSuffix(numbers, \"18\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n\tnumbers = strings.TrimSuffix(numbers, \"20\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n\tnumbers = strings.TrimSuffix(numbers, \"22\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n\tnumbers = strings.TrimSuffix(numbers, \"24\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n\tnumbers = strings.TrimSuffix(numbers, \"26\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n\tnumbers = strings.TrimSuffix(numbers, \"28\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n\tnumbers = strings.TrimSuffix(numbers, \"30\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n\tnumbers = strings.TrimSuffix(numbers, \"32\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n\tnumbers = strings.TrimSuffix(numbers, \"34\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n\tnumbers = strings.TrimSuffix(numbers, \"36\")\n\t\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf3yr527o.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpf3yr527o.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpf3yr527o.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmpf3yr527o.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmpf3yr527o.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"z\")\n           \
    \       ^~~~~~~\n/tmp/tmpf3yr527o.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"z\")\n\
    \        ^~~~~~~\n/tmp/tmpf3yr527o.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpf3yr527o.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpf3yr527o.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpf3yr527o.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpf3yr527o.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpf3yr527o.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpf3yr527o.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpf3yr527o.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa71skfuj.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpa71skfuj.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpa71skfuj.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpa71skfuj.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpa71skfuj.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpa71skfuj.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpa71skfuj.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0w5l2e_o.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp0w5l2e_o.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers\
    \ = strings.Replace(numbers, \"'\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"1\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"4\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"7\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \" \", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"0\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"3\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"6\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"9\", \"\", -1)\n\t\
    numbers = strings.Split(numbers, \" \")\n\tnumbers = strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"0\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"3\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"6\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpk1pd8_z8.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Replace(numbers, \" \", \"\", -1)\n       \
    \           ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:10:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n        ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:11:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:11:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:12:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"'\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:12:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"'\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:13:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"0\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:13:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:14:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"1\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpk1pd8_z8.swift:14:2: error: cannot\
    \ assign to value: 'numbers' is a 'le"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"10\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n    numbers = strings.TrimSuffix(numbers, \"12\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n    numbers = strings.TrimSuffix(numbers, \"14\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n    numbers = strings.TrimSuffix(numbers, \"16\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n    numbers = strings.TrimSuffix(numbers, \"18\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n    numbers = strings.TrimSuffix(numbers, \"20\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n    numbers = strings.TrimSuffix(numbers, \"22\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n    numbers = strings.TrimSuffix(numbers, \"24\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n    numbers = strings.TrimSuffix(numbers, \"26\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n    numbers = strings.TrimSuffix(numbers, \"28\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n    numbers = strings.TrimSuffix(numbers, \"30\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n    numbers = strings.TrimSuffix(numbers, \"32\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n    numbers = strings.TrimSuffix(numbers, \"34\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n    numbers = strings.TrimSuffix(numbers, \"36\")\n    \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_nqd68ut.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"z\")\n              ^~~~~~~\n\
    /tmp/tmp_nqd68ut.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"z\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp_nqd68ut.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmp_nqd68ut.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmp_nqd68ut.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmp_nqd68ut.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpchey6kya.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpchey6kya.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpchey6kya.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpchey6kya.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpchey6kya.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp06nzhyha.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp06nzhyha.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmp06nzhyha.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp06nzhyha.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp06nzhyha.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \".\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffi\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphlzpcpaz.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmphlzpcpaz.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013595
