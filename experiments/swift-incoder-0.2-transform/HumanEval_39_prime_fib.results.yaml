language: swift
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [0, 1],\n        [1, 1]\n    ]\n    \n    for i in 2..<n {\n        fib[0][1]\
    \ = fib[1][0]\n        fib[1][0] = fib[0][1] + fib[1][1]\n    }\n    \n    return\
    \ fib[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkjcjb5_s.swift:20:15: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[0][1] = fib[1][0]\n        ~~~   ^\n/tmp/tmpkjcjb5_s.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [\n \
    \   ^~~\n    var\n/tmp/tmpkjcjb5_s.swift:21:15: error: cannot assign through subscript:\
    \ 'fib' is a 'let' constant\n        fib[1][0] = fib[0][1] + fib[1][1]\n     \
    \   ~~~   ^\n/tmp/tmpkjcjb5_s.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let fib: [[Int]] = [\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ temp: Int = 0\n    var flag: Bool = false\n    var flag2: Bool = false\n   \
    \ var flag3: Bool = false\n    var flag4: Bool = false\n    var flag5: Bool =\
    \ false\n    var flag6: Bool = false\n    var flag7: Bool = false\n    var flag8:\
    \ Bool = false\n    var flag9: Bool = false\n    var flag10: Bool = false\n  \
    \  var flag11: Bool = false\n    var flag12: Bool = false\n    var flag13: Bool\
    \ = false\n    var flag14: Bool = false\n    var flag15: Bool = false\n    var\
    \ flag16: Bool = false\n    var flag17: Bool = false\n    var flag18: Bool = false\n\
    \    var flag19: Bool = false\n    var flag20: Bool = false\n    var flag21: Bool\
    \ = false\n    var flag22: Bool = false\n    var flag23: Bool = false\n    var\
    \ flag24: Bool = false\n    var flag25: Bool = false\n    var flag26: Bool = false\n\
    \    var flag27: Bool = false\n    var flag28: Bool = false\n    var flag29: Bool\
    \ = false\n    var flag30: Bool = false\n    var flag31: Bool = false\n    var\
    \ flag32: Bool = false\n    var flag33: Bool = false\n    var flag34: Bool = false\n\
    \    var flag35: Bool = false\n    var flag36: Bool = false\n    var flag37: Bool\
    \ = false\n    var flag38: Bool = false\n    var flag39: Bool = false\n    var\
    \ flag40: Bool = false\n    var flag41: Bool = false\n    var flag42: Bool = false\n\
    \    var flag43: Bool = false\n    var flag44: Bool = false\n    var flag45: Bool\
    \ = false\n    var flag46: Bool = false\n    var flag47: Bool = false\n    var\
    \ flag48: Bool = false\n    var flag49: Bool = false\n    var flag50: Bool = false\n\
    \    var flag51: Bool = false\n    var flag52: Bool = false\n    var flag53: Bool\
    \ = false\n    var flag54: Bool = false\n    var flag55: Bool = false\n    var\
    \ flag56: Bool = false\n    var flag57: Bool = false\n    var flag58: Bool = false\n\
    \    var flag59: Bool = false\n    var flag60: Bool = false\n    var flag61: Bool\
    \ = false\n    var flag62: Bool = false\n    var flag63: Bool = false\n    var\
    \ flag64: Bool = false\n    var flag65: Bool = false\n    var flag66: Bool = false\n\
    \    var flag67: Bool = false\n    var flag68: Bool = false\n    var flag69: Bool\
    \ = false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpze5j67kh.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpze5j67kh.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpze5j67kh.swift:16:9: warning: variable 'i' was never\
    \ used; consider replacing with '_' or removing it\n    var i: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpze5j67kh.swift:17:9: warning: variable 'j' was never\
    \ used; consider replacing with '_' or removing it\n    var j: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpze5j67kh.swift:18:9: warning: variable 'k' was never\
    \ used; consider replacing with '_' or removing it\n    var k: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpze5j67kh.swift:19:9: warning: variable 'temp' was never\
    \ used; consider replacing with '_' or removing it\n    var temp: Int = 0\n  \
    \      ^~~~\n        _\n/tmp/tmpze5j67kh.swift:20:9: warning: variable 'flag'\
    \ was never used; consider replacing with '_' or removing it\n    var flag: Bool\
    \ = false\n        ^~~~\n        _\n/tmp/tmpze5j67kh.swift:21:9: warning: variable\
    \ 'flag2' was never used; consider replacing with '_' or removing it\n    var\
    \ flag2: Bool = false\n        ^~~~~\n        _\n/tmp/tmpze5j67kh.swift:22:9:\
    \ warning: variable 'flag3' was never used; consider replacing with '_' or removing\
    \ it\n    var flag3: Bool = false\n        ^~~~~\n        _\n/tmp/tmpze5j67kh.swift:23:9:\
    \ warning: variable 'flag4' was never used; consider replacing with '_' or removing\
    \ it\n    var flag4: Bool = false\n        ^~~~~\n        _\n/tmp/tmpze5j67kh.swift:24:9:\
    \ warning: variable 'flag5' was never used; consider replacing with '_' or removing\
    \ it\n    var flag5: Bool = false\n        ^~~~~\n        _\n/tmp/tmpze5j67kh.swift:25:9:\
    \ warning: variable 'flag6' was never used; consider replacing with '_' or removing\
    \ it\n    var flag6: Bool = false\n        ^~~~~\n        _\n/tmp/tmpze5j67kh.swift:26:9:\
    \ warning: variable 'flag7' was never used; consider replacing with '_' or removing\
    \ it\n    var flag7: Bool "
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [0], [1, 1],\n    ]\n    \n    for _ in 0..<n {\n        let fibIndex = fib.index\
    \ {\n            $0[$0] + $1[$1] == $0[$0] * $1[$1]\n        }\n        \n   \
    \     fib[fibIndex] = fib[fibIndex].map {\n            $0[$0] + $1[$1]\n     \
    \   }\n    }\n    \n    return fib[n][n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpermohb9t.swift:19:24: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        let fibIndex = fib.index {\n                      \
    \ ^~~~~~~~~~~\n/tmp/tmpermohb9t.swift:23:43: error: contextual closure type '([Int])\
    \ throws -> Int' expects 1 argument, but 2 were used in closure body\n       \
    \ fib[fibIndex] = fib[fibIndex].map {\n                                      \
    \    ^\n/tmp/tmpermohb9t.swift:24:16: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n            $0[$0] + $1[$1]\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1660013957
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    var prime: Int = 0\n    var prime2:\
    \ Int = 0\n    var prime3: Int = 0\n    var prime4: Int = 0\n    var prime5: Int\
    \ = 0\n    var prime6: Int = 0\n    var prime7: Int = 0\n    var prime8: Int =\
    \ 0\n    var prime9: Int = 0\n    var prime10: Int = 0\n    var prime11: Int =\
    \ 0\n    var prime12: Int = 0\n    var prime13: Int = 0\n    var prime14: Int\
    \ = 0\n    var prime15: Int = 0\n    var prime16: Int = 0\n    var prime17: Int\
    \ = 0\n    var prime18: Int = 0\n    var prime19: Int = 0\n    var prime20: Int\
    \ = 0\n    var prime21: Int = 0\n    var prime22: Int = 0\n    var prime23: Int\
    \ = 0\n    var prime24: Int = 0\n    var prime25: Int = 0\n    var prime26: Int\
    \ = 0\n    var prime27: Int = 0\n    var prime28: Int = 0\n    var prime29: Int\
    \ = 0\n    var prime30: Int = 0\n    var prime31: Int = 0\n    var prime32: Int\
    \ = 0\n    var prime33: Int = 0\n    var prime34: Int = 0\n    var prime35: Int\
    \ = 0\n    var prime36: Int = 0\n    var prime37: Int = 0\n    var prime38: Int\
    \ = 0\n    var prime39: Int = 0\n    var prime40: Int = 0\n    var prime41: Int\
    \ = 0\n    var prime42: Int = 0\n    var prime43: Int = 0\n    var prime44: Int\
    \ = 0\n    var prime45: Int = 0\n    var prime46: Int = 0\n    var prime47: Int\
    \ = 0\n    var prime48: Int = 0\n    var prime49: Int = 0\n    var prime50: Int\
    \ = 0\n    var prime51: Int = 0\n    var prime52: Int = 0\n    var prime53: Int\
    \ = 0\n    var prime54: Int = 0\n    var prime55: Int = 0\n    var prime56: Int\
    \ = 0\n    var prime57: Int = 0\n    var prime58: Int = 0\n    var prime59: Int\
    \ = 0\n    var prime60: Int = 0\n    var prime61: Int = 0\n    var prime62: Int\
    \ = 0\n    var prime63: Int = 0\n    var prime64: Int = 0\n    var prime65: Int\
    \ = 0\n    var prime66: Int = 0\n    var prime67: Int = 0\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5o1j_6jo.swift:96:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp5o1j_6jo.swift:29:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp5o1j_6jo.swift:30:9: warning: variable 'prime2' was never used;\
    \ consider replacing with '_' or removing it\n    var prime2: Int = 0\n      \
    \  ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:31:9: warning: variable 'prime3'\
    \ was never used; consider replacing with '_' or removing it\n    var prime3:\
    \ Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:32:9: warning: variable\
    \ 'prime4' was never used; consider replacing with '_' or removing it\n    var\
    \ prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:33:9: warning:\
    \ variable 'prime5' was never used; consider replacing with '_' or removing it\n\
    \    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:34:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:35:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:36:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:37:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:38:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:39:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmp5o1j_6jo.swift:40:9:\
    \ warning: variable 'prime12' was never used; consider replacing with '_' or removing\
    \ it\n    var prime12: Int = 0\n        ^~~~~~~\n        _\n/tm"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ i in 2..<n {\n        fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpn7yl5v1q.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpn7yl5v1q.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpn7yl5v1q.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpn7yl5v1q.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib[i] = fib[i - 1] + fib[i - 2]\n        ^~~\n/tmp/tmpn7yl5v1q.swift:16:18:\
    \ error: cannot find 'fib' in scope\n        fib[i] = fib[i - 1] + fib[i - 2]\n\
    \                 ^~~\n/tmp/tmpn7yl5v1q.swift:16:31: error: cannot find 'fib'\
    \ in scope\n        fib[i] = fib[i - 1] + fib[i - 2]\n                       \
    \       ^~~\n/tmp/tmpn7yl5v1q.swift:18:12: error: cannot find 'fib' in scope\n\
    \    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1855696\n    }\n    if n == 33 {\n        return 2329096\n    }\n\
    \    if n == 34 {\n        return 2814019\n    }\n    if n == 35 {\n        return\
    \ 3537545\n    }\n    if n == 36 {\n        return 4107873\n    }\n    if n ==\
    \ 37 {\n        return 4887383\n    }\n    if n == 38 {\n        return 5819971\n\
    \    }\n    if n == 39 {\n        return 6733075\n    }\n    if n == 40 {\n  \
    \      return 7757689\n    }\n    if n == 41 {\n        return 9095024\n    }\n\
    \    if n == 42 {\n        return 10485739\n    }\n    if n == 43 {\n        return\
    \ 11982657\n    }\n    if n == 44 {\n        return 13835739\n    }\n    if n\
    \ == 45 {\n        return 15673311\n    }\n    if n == 46 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp43wu9u7f.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp43wu9u7f.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp43wu9u7f.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6gp9juks.swift:40:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:16:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:41:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:17:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:42:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:18:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:43:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:19:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:44:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:20:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:45:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:21:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:46:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:22:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:47:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:23:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:48:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:24:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:49:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:25:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:50:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmp6gp9juks.swift:26:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n "
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 2\n    var isPrime = true\n    for _ in 0..<n {\n        if isPrime {\n  \
    \          prime = prime + 2\n            if prime > 1000 {\n                prime\
    \ = 1\n            }\n            if prime == 2 {\n                isPrime = false\n\
    \            }\n        } else {\n            prime = prime - 1\n            if\
    \ prime == 1 {\n                isPrime = true\n            }\n        }\n   \
    \     result = prime + result\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpvjut8_eu/tmpvjut8_eu.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12f7870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12f7567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12f7567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12f75667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjut8_eu                        0x0000563463d7a338 <unavailable> + 4920

    5    libc.so.6                          0x00002b12f7a5c460 __libc_start_main +
    245

    6    tmpvjut8_eu                        0x0000563463d79fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..n {\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplihik7v3.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmplihik7v3.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmplihik7v3.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmplihik7v3.swift:15:15: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n    for _ in 0..n {\n    \
    \          ^~\n              ...\n/tmp/tmplihik7v3.swift:18:12: error: cannot\
    \ find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..<n {\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpyflpuesv.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpyflpuesv.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpyflpuesv.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpyflpuesv.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \        ^~~\n/tmp/tmpyflpuesv.swift:16:20: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n               \
    \    ^~~\n/tmp/tmpyflpuesv.swift:16:24: error: cannot find 'fib' in scope\n  \
    \      fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n                 \
    \      ^~~\n/tmp/tmpyflpuesv.swift:16:41: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n               \
    \                         ^~~\n/tmp/tmpyflpuesv.swift:16:45: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \                                            ^~~\n/tmp/tmpyflpuesv.swift:18:12:\
    \ error: cannot find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107515\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7162839\n    }\n    if n ==\
    \ 37 {\n        return 9260019\n    }\n    if n == 38 {\n        return 11786459\n\
    \    }\n    if n == 39 {\n        return 14442809\n    }\n    if n == 40 {\n \
    \       return 17283889\n    }\n    if n == 41 {\n        return 20395661\n  \
    \  }\n    if n == 42 {\n        return 22826121\n    }\n    if n == 43 {\n   \
    \     return 26008271\n    }\n    if n == 44 {\n        return 29858217\n    }\n\
    \    if n == 45 {\n        return 34575421\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0xl9yq8z.swift:149:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1200080\n    }\n    if n == 32 {\n  \
    \      return 1972140\n    }\n    if n == 33 {\n        return 3171469\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1200080\n    }\n    if n ==\
    \ 37 {\n        return 1972140\n    }\n    if n == 38 {\n        return 3171469\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1200080\n    }\n\
    \    if n == 42 {\n        return 1972140\n    }\n    if n == 43 {\n        return\
    \ 3171469\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1200080\n\
    \    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ez7eklp.swift:152:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ temp: Int = 0\n    var prime_fib: Int = 0\n    \n    if n <= 1 {\n        return\
    \ n\n    }\n    \n    for i = 2; i <= n; i++ {\n        fib = fib + (i - 1)\n\
    \    }\n    \n    for i = 2; i <= n; i++ {\n        prime = fib % i\n        \n\
    \        if prime == 0 {\n            prime_fib = prime_fib + i\n        }\n \
    \   }\n    \n    return prime_fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7lh5gknr.swift:26:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmp7lh5gknr.swift:30:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for i = 2; i <=\
    \ n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 1922368\n    }\n    if n == 33 {\n        return 3175648\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 757201\n    }\n    if n == 36 {\n        return 10946\n    }\n    if n == 37\
    \ {\n        return 1655801\n    }\n    if n == 38 {\n        return 2679141\n\
    \    }\n    if n == 39 {\n        return 4334944\n    }\n    if n == 40 {\n  \
    \      return 6765571\n    }\n    if n == 41 {\n        return 9463681\n    }\n\
    \    if n == 42 {\n        return 121393\n    }\n    if n == 43 {\n        return\
    \ 196418\n    }\n    if n == 44 {\n        return 258446\n    }\n    if n == 45\
    \ {\n        return 4181\n    }\n    if n == 46 {\n        return 6765\n    }\n\
    \    if n == 47 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_jthyvvf.swift:177:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp_jthyvvf.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp_jthyvvf.swift:156:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int = 0\n   \
    \ var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4: Int\
    \ = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1st0uj6u.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1st0uj6u.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp1st0uj6u.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp1st0uj6u.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:17:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:18:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:19:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:20:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:21:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:22:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:23:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:24:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:25:9:\
    \ warning: variable 'fib_index9' was never us"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2655123\n    }\n    if n == 35 {\n        return\
    \ 3275792\n    }\n    if n == 36 {\n        return 4259680\n    }\n    if n ==\
    \ 37 {\n        return 5102291\n    }\n    if n == 38 {\n        return 6815744\n\
    \    }\n    if n == 39 {\n        return 8644393\n    }\n    if n == 40 {\n  \
    \      return 10884419\n    }\n    if n == 41 {\n        return 13175584\n   \
    \ }\n    if n == 42 {\n        return 16349267\n    }\n    if n == 43 {\n    \
    \    return 19664726\n    }\n    if n == 44 {\n        return 23001957\n    }\n\
    \    if n == 45 {\n        return 26403658\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu4oim5dd.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpu4oim5dd.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpu4oim5dd.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n  \
    \      return 1913687\n    }\n    if n == 33 {\n        return 2588207\n    }\n\
    \    if n == 34 {\n        return 4052705\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7166965\n    }\n    if n ==\
    \ 37 {\n        return 9263839\n    }\n    if n == 38 {\n        return 11310067\n\
    \    }\n    if n == 39 {\n        return 13844269\n    }\n    if n == 40 {\n \
    \       return 15976447\n    }\n    if n == 41 {\n        return 19543911\n  \
    \  }\n    if n == 42 {\n        return 22817125\n    }\n    if n == 43 {\n   \
    \     return 26584565\n    }\n    if n == 44 {\n        return 30358719\n    }\n\
    \    if n == 45 {\n        return 36543517\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjbl31otd.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpjbl31otd.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpjbl31otd.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpjbl31otd.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ 1.0 / Double(2)))\n    if fib < 2 {\n        return fib\n    }\n    if fib ==\
    \ 2 {\n        return fib\n    }\n    if fib == 3 {\n        return fib\n    }\n\
    \    if fib == 5 {\n        return fib\n    }\n    if fib == 7 {\n        return\
    \ fib\n    }\n    if fib == 11 {\n        return fib\n    }\n    if fib == 13\
    \ {\n        return fib\n    }\n    if fib == 17 {\n        return fib\n    }\n\
    \    if fib == 19 {\n        return fib\n    }\n    if fib == 231 {\n        return\
    \ fib\n    }\n    if fib == 289 {\n        return fib\n    }\n    if fib == 373\
    \ {\n        return fib\n    }\n    if fib == 461 {\n        return fib\n    }\n\
    \    if fib == 549 {\n        return fib\n    }\n    if fib == 591 {\n       \
    \ return fib\n    }\n    if fib == 639 {\n        return fib\n    }\n    if fib\
    \ == 719 {\n        return fib\n    }\n    if fib == 797 {\n        return fib\n\
    \    }\n    if fib == 897 {\n        return fib\n    }\n    if fib == 959 {\n\
    \        return fib\n    }\n    if fib == 1059 {\n        return fib\n    }\n\
    \    if fib == 1151 {\n        return fib\n    }\n    if fib == 1279 {\n     \
    \   return fib\n    }\n    if fib == 1399 {\n        return fib\n    }\n    if\
    \ fib == 1509 {\n        return fib\n    }\n    if fib == 1619 {\n        return\
    \ fib\n    }\n    if fib == 1731 {\n        return fib\n    }\n    if fib == 1889\
    \ {\n        return fib\n    }\n    if fib == 1939 {\n        return fib\n   \
    \ }\n    if fib == 2069 {\n        return fib\n    }\n    if fib == 2199 {\n \
    \       return fib\n    }\n    if fib == 2277 {\n        return fib\n    }\n \
    \   if fib == 2367 {\n        return fib\n    }\n    if fib == 2495 {\n      \
    \  return fib\n    }\n    if fib == 2539 {\n        return fib\n    }\n    if\
    \ fib == 2579 {\n        return fib\n    }\n    if fib == 2637 {\n        return\
    \ fib\n    }\n    if fib == 2689 {\n        return fib\n    }\n    if fib == 2739\
    \ {\n        return fib\n    }\n    if fib == 2779 {\n        return fib\n   \
    \ }\n    if fib == 2837 {\n        return fib\n    }\n    if fib == 2899 {\n \
    \       return fib\n    }\n    if fib == 2959 {\n        return fib\n    }\n \
    \   if fib == 3011 {\n        return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2yn2agur.swift:170:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp2yn2agur.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp2yn2agur.swift:14:24:\
    \ error: cannot find 'pow' in scope\n    let fib: Int = Int(pow(Double(n), 1.0\
    \ / Double(2)))\n                       ^~~\n/tmp/tmp2yn2agur.swift:149:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    for _ in 0..<n {\n        let tmp\
    \ = a\n        a = b\n        b = tmp + b\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpwixtyd_z/tmpwixtyd_z.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d8f07dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d8ed74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d8ed74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d8ed737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwixtyd_z                        0x000055b7a7f81338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d8f269460 __libc_start_main +
    245

    6    tmpwixtyd_z                        0x000055b7a7f80fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111393\n    }\n    if n == 33 {\n        return 2934414\n    }\n\
    \    if n == 34 {\n        return 4751776\n    }\n    if n == 35 {\n        return\
    \ 6348257\n    }\n    if n == 36 {\n        return 9242520\n    }\n    if n ==\
    \ 37 {\n        return 12871889\n    }\n    if n == 38 {\n        return 19326592\n\
    \    }\n    if n == 39 {\n        return 25885821\n    }\n    if n == 40 {\n \
    \       return 34136752\n    }\n    if n == 41 {\n        return 48423791\n  \
    \  }\n    if n == 42 {\n        return 63267301\n    }\n    if n == 43 {\n   \
    \     return 81432791\n    }\n    if n == 44 {\n        return 106700190\n   \
    \ }\n    if n == 45 {\n        return 134576491\n    }\n    if n == \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpux6x7c1t.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found = false\n    var prime_found2 = false\n    var\
    \ prime_found3 = false\n    var prime_found4 = false\n    var prime_found5 = false\n\
    \    var prime_found6 = false\n    var prime_found7 = false\n    var prime_found8\
    \ = false\n    var prime_found9 = false\n    var prime_found10 = false\n    var\
    \ prime_found11 = false\n    var prime_found12 = false\n    var prime_found13\
    \ = false\n    var prime_found14 = false\n    var prime_found15 = false\n    var\
    \ prime_found16 = false\n    var prime_found17 = false\n    var prime_found18\
    \ = false\n    var prime_found19 = false\n    var prime_found20 = false\n    var\
    \ prime_found21 = false\n    var prime_found22 = false\n    var prime_found23\
    \ = false\n    var prime_found24 = false\n    var prime_found25 = false\n    var\
    \ prime_found26 = false\n    var prime_found27 = false\n    var prime_found28\
    \ = false\n    var prime_found29 = false\n    var prime_found30 = false\n    var\
    \ prime_found31 = false\n    var prime_found32 = false\n    var prime_found33\
    \ = false\n    var prime_found34 = false\n    var prime_found35 = false\n    var\
    \ prime_found36 = false\n    var prime_found37 = false\n    var prime_found38\
    \ = false\n    var prime_found39 = false\n    var prime_found40 = false\n    var\
    \ prime_found41 = false\n    var prime_found42 = false\n    var prime_found43\
    \ = false\n    var prime_found44 = false\n    var prime_found45 = false\n    var\
    \ prime_found46 = false\n    var prime_found47 = false\n    var prime_found48\
    \ = false\n    var prime_found49 = false\n    var prime_found50 = false\n    var\
    \ prime_found51 = false\n    var prime_found52 = false\n    var prime_found53\
    \ = false\n    var prime_found54 = false\n    var prime_found55 = false\n    var\
    \ prime_found56 = false\n    var prime_found57 = false\n    var prime_found58\
    \ = false\n    var prime_found59 = false\n    var prime_found60 = false\n    var\
    \ prime_found61 = false\n    var prime_found62 = false\n    var prime_found63\
    \ = false\n    var prime_found64 = false\n    var prime_found65 = false\n    var\
    \ prime_found66 = false\n    var prime_found67 = false\n    var prime_found68\
    \ = false\n    var prime_found69 = false\n    var prime_found70\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq_jzzfjb.swift:85:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = prime_table()\n\
    \    if n < primes.count {\n        return primes[n]\n    }\n    return prime_fib(n:\
    \ n - 1) + prime_fib(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpb9fxztbv.swift:14:18: error: cannot find 'prime_table' in scope\n\
    \    let primes = prime_table()\n                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1855696\n    }\n    if n == 33 {\n        return 2329096\n    }\n\
    \    if n == 34 {\n        return 2814018\n    }\n    if n == 35 {\n        return\
    \ 3537897\n    }\n    if n == 36 {\n        return 4110848\n    }\n    if n ==\
    \ 37 {\n        return 4719872\n    }\n    if n == 38 {\n        return 6236472\n\
    \    }\n    if n == 39 {\n        return 7888662\n    }\n    if n == 40 {\n  \
    \      return 10445663\n    }\n    if n == 41 {\n        return 13088663\n   \
    \ }\n    if n == 42 {\n        return 15676653\n    }\n    if n == 43 {\n    \
    \    return 19314665\n    }\n    if n == 44 {\n        return 22686675\n    }\n\
    \    if n == 45 {\n        return 28146685\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5xu3tnw7.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp5xu3tnw7.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp5xu3tnw7.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 16621779\n    }\n    if n == 33 {\n        return 28682315\n   \
    \ }\n    if n == 34 {\n        return 42586395\n    }\n    if n == 35 {\n    \
    \    return 56428087\n    }\n    if n == 36 {\n        return 79583559\n    }\n\
    \    if n == 37 {\n        return 103315697\n    }\n    if n == 38 {\n       \
    \ return 126712921\n    }\n    if n == 39 {\n        return 152050231\n    }\n\
    \    if n == 40 {\n        return 185781787\n    }\n    if n == 41 {\n       \
    \ return 211279919\n    }\n    if n == 42 {\n        return 246613751\n    }\n\
    \    if n == 43 {\n        return 286204069\n    }\n    if n == 44 {\n       \
    \ return 328655209\n    }\n    if n == 45 {\n        return 365435\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6ywodbfu.swift:172:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp6ywodbfu.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp6ywodbfu.swift:151:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var prime: Int = 0\n    var\
    \ fib: Int = 0\n    var prime_fib: Int = 0\n    \n    if n <= 1 {\n        return\
    \ n\n    }\n    \n    if n == 2 {\n        prime = 1\n        fib = 1\n    }\n\
    \    \n    if n == 3 {\n        prime = 2\n        fib = 1\n    }\n    \n    if\
    \ n == 4 {\n        prime = 3\n        fib = 1\n    }\n    \n    if n == 5 {\n\
    \        prime = 5\n        fib = 1\n    }\n    \n    if n == 6 {\n        prime\
    \ = 7\n        fib = 1\n    }\n    \n    if n == 7 {\n        prime = 7\n    \
    \    fib = 1\n    }\n    \n    if n == 8 {\n        prime = 9\n        fib = 1\n\
    \    }\n    \n    if n == 9 {\n        prime = 9\n        fib = 1\n    }\n   \
    \ \n    if n == 10 {\n        prime = 11\n        fib = 1\n    }\n    \n    if\
    \ n == 11 {\n        prime = 11\n        fib = 1\n    }\n    \n    if n == 12\
    \ {\n        prime = 13\n        fib = 1\n    }\n    \n    if n == 13 {\n    \
    \    prime = 13\n        fib = 1\n    }\n    \n    if n == 14 {\n        prime\
    \ = 17\n        fib = 1\n    }\n    \n    if n == 15 {\n        prime = 17\n \
    \       fib = 1\n    }\n    \n    if n == 16 {\n        prime = 19\n        fib\
    \ = 1\n    }\n    \n    if n == 17 {\n        prime = 19\n        fib = 1\n  \
    \  }\n    \n    if n == 18 {\n        prime = 23\n        fib = 1\n    }\n   \
    \ \n    if n == 19 {\n        prime = 23\n        fib = 1\n    }\n    \n    if\
    \ n == 20 {\n        prime = 29\n        fib = 1\n    }\n    \n    if n == 21\
    \ {\n        prime = 29\n        fib = 1\n    }\n    \n    if n == 22 {\n    \
    \    prime = 31\n        fib = 1\n    }\n    \n    if n == 23 {\n        prime\
    \ = 31\n        fib = 1\n    }\n    \n    if n == 24 {\n        prime = 35\n \
    \       fib = 1\n    }\n    \n    if n == 25 {\n        prime = 35\n        fib\
    \ = 1\n    }\n    \n    if n == 26 {\n        prime = 37\n        fib = 1\n  \
    \  }\n    \n    if n == 27 {\n        prime = 37\n        fib = 1\n    }\n   \
    \ \n    if n == 28 {\n        prime = 39\n        fib = 1\n    }\n    \n    if\
    \ n == 29 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjcsm144l.swift:183:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpjcsm144l.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpjcsm144l.swift:162:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpjcsm144l.swift:174:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 1)\
    \ == 2)\n       ^\n/tmp/tmpjcsm144l.swift:175:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(prime_fib(n: 2) == 3)\n       ^\n/tmp/tmpjcsm144l.swift:176:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 3)\
    \ == 5)\n       ^\n/tmp/tmpjcsm144l.swift:177:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(prime_fib(n: 4) == 13)\n       ^\n/tmp/tmpjcsm144l.swift:178:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 5)\
    \ == 89)\n       ^\n/tmp/tmpjcsm144l.swift:179:8: error: cannot call value of\
    \ non-function type 'Int'\nassert(prime_fib(n: 6) == 233)\n       ^\n/tmp/tmpjcsm144l.swift:180:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 7)\
    \ == 1597)\n       ^\n/tmp/tmpjcsm144l.swift:181:8: error: cannot call value of\
    \ non-function type 'Int'\nassert(prime_fib(n: 8) == 28657)\n       ^\n/tmp/tmpjcsm144l.swift:182:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 9)\
    \ == 514229)\n       ^\n/tmp/tmpjcsm144l.swift:183:8: error: cannot call value\
    \ of non-function type 'Int'\nassert(prime_fib(n: 10) == 433494437)\n       ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = tmp + b\n\
    \    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpt61nhvn2/tmpt61nhvn2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a673ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a6431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a6431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a64307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt61nhvn2                        0x000055e062ad5338 <unavailable> + 4920

    5    libc.so.6                          0x00002b65a6926460 __libc_start_main +
    245

    6    tmpt61nhvn2                        0x000055e062ad4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime: Int = 0\n    var result: Int = 0\n\
    \    for _ in 0..<n {\n        c = a + b\n        d = b\n        a = c\n     \
    \   b = d\n        if c % 2 == 0 {\n            prime = 1\n        } else {\n\
    \            prime = 0\n        }\n        result = prime * c\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpt97qf7fr/tmpt97qf7fr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8fa6c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8fa3b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8fa3b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8fa3b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt97qf7fr                        0x000055d034243338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac8fa8ae460 __libc_start_main +
    245

    6    tmpt97qf7fr                        0x000055d034242fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var prime_found\
    \ = false\n    var prime_found2 = false\n    var prime_found3 = false\n    var\
    \ prime_found4 = false\n    var prime_found5 = false\n    var prime_found6 = false\n\
    \    var prime_found7 = false\n    var prime_found8 = false\n    var prime_found9\
    \ = false\n    var prime_found10 = false\n    var prime_found11 = false\n    var\
    \ prime_found12 = false\n    var prime_found13 = false\n    var prime_found14\
    \ = false\n    var prime_found15 = false\n    var prime_found16 = false\n    var\
    \ prime_found17 = false\n    var prime_found18 = false\n    var prime_found19\
    \ = false\n    var prime_found20 = false\n    var prime_found21 = false\n    var\
    \ prime_found22 = false\n    var prime_found23 = false\n    var prime_found24\
    \ = false\n    var prime_found25 = false\n    var prime_found26 = false\n    var\
    \ prime_found27 = false\n    var prime_found28 = false\n    var prime_found29\
    \ = false\n    var prime_found30 = false\n    var prime_found31 = false\n    var\
    \ prime_found32 = false\n    var prime_found33 = false\n    var prime_found34\
    \ = false\n    var prime_found35 = false\n    var prime_found36 = false\n    var\
    \ prime_found37 = false\n    var prime_found38 = false\n    var prime_found39\
    \ = false\n    var prime_found40 = false\n    var prime_found41 = false\n    var\
    \ prime_found42 = false\n    var prime_found43 = false\n    var prime_found44\
    \ = false\n    var prime_found45 = false\n    var prime_found46 = false\n    var\
    \ prime_found47 = false\n    var prime_found48 = false\n    var prime_found49\
    \ = false\n    var prime_found50 = false\n    var prime_found51 = false\n    var\
    \ prime_found52 = false\n    var prime_found53 = false\n    var prime_found54\
    \ = false\n    var prime_found55 = false\n    var prime_found56 = false\n    var\
    \ prime_found57 = false\n    var prime_found58 = false\n    var prime_found59\
    \ = false\n    var prime_found60 = false\n    var prime_found61 = false\n    var\
    \ prime_found62 = false\n    var prime_found63 = false\n    var prime_found64\
    \ = false\n    var prime_found65 = false\n    var prime_found66 = false\n    var\
    \ prime_found67 = false\n    var prime_found68 = false\n    var prime_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf022rkai.swift:87:9: error: type annotation missing in pattern\n\
    \    var prime_\n        ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2]\n    ]\n    var sum = 0\n    for _ in 0..<n {\n \
    \       sum += fib[fib[0].count - 1][0]\n        fib.append(fib[fib[0].count -\
    \ 1] + fib[fib[1].count - 1])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5zdttnjl.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'fib' is a 'let' constant\n        fib.append(fib[fib[0].count - 1] +\
    \ fib[fib[1].count - 1])\n        ~~~ ^\n/tmp/tmp5zdttnjl.swift:14:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198697\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4337867\n    }\n    if n == 35 {\n        return\
    \ 6925810\n    }\n    if n == 36 {\n        return 10233455\n    }\n    if n ==\
    \ 37 {\n        return 16558014\n    }\n    if n == 38 {\n        return 26795929\n\
    \    }\n    if n == 39 {\n        return 43378697\n    }\n    if n == 40 {\n \
    \       return 69258117\n    }\n    if n == 41 {\n        return 102334557\n \
    \   }\n    if n == 42 {\n        return 165580157\n    }\n    if n == 43 {\n \
    \       return 267959297\n    }\n    if n == 44 {\n        return 433786977\n\
    \    }\n    if n == 45 {\n        return 692581171\n    }\n    if n == 46\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2qbshanh.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107580\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7163351\n    }\n    if n ==\
    \ 37 {\n        return 9261682\n    }\n    if n == 38 {\n        return 11404412\n\
    \    }\n    if n == 39 {\n        return 13866433\n    }\n    if n == 40 {\n \
    \       return 17448303\n    }\n    if n == 41 {\n        return 20996029\n  \
    \  }\n    if n == 42 {\n        return 26210079\n    }\n    if n == 43 {\n   \
    \     return 32150319\n    }\n    if n == 44 {\n        return 38304709\n    }\n\
    \    if n == 45 {\n        return 46026579\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptvzc7jpo.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1622502\n    }\n    if n == 33 {\n        return 2238659\n    }\n\
    \    if n == 34 {\n        return 2852830\n    }\n    if n == 35 {\n        return\
    \ 4150783\n    }\n    if n == 36 {\n        return 5702887\n    }\n    if n ==\
    \ 37 {\n        return 7162819\n    }\n    if n == 38 {\n        return 9228592\n\
    \    }\n    if n == 39 {\n        return 11556621\n    }\n    if n == 40 {\n \
    \       return 13956199\n    }\n    if n == 41 {\n        return 16383659\n  \
    \  }\n    if n == 42 {\n        return 19665777\n    }\n    if n == 43 {\n   \
    \     return 22001957\n    }\n    if n == 44 {\n        return 23828127\n    }\n\
    \    if n == 45 {\n        return 26843537\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6yvk6vpj.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp6yvk6vpj.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp6yvk6vpj.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib: Int = 0\n    let\
    \ mut prime: Int = 0\n    for _ in 0..n {\n        fib += prime\n        prime\
    \ += 2\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl5y9bvng.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib: Int\
    \ = 0\n            ^\n/tmp/tmpl5y9bvng.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib: Int = 0\n        ~~~~^~~\n        mutfib\n/tmp/tmpl5y9bvng.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib: Int =\
    \ 0\n        ~~~~^~~\n        mutFib\n/tmp/tmpl5y9bvng.swift:15:13: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut prime: Int = 0\n            ^\n/tmp/tmpl5y9bvng.swift:15:13:\
    \ note: join the identifiers together\n    let mut prime: Int = 0\n        ~~~~^~~~~\n\
    \        mutprime\n/tmp/tmpl5y9bvng.swift:15:13: note: join the identifiers together\
    \ with camel-case\n    let mut prime: Int = 0\n        ~~~~^~~~~\n        mutPrime\n\
    /tmp/tmpl5y9bvng.swift:15:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ prime: Int = 0\n        ^\n/tmp/tmpl5y9bvng.swift:14:9: note: 'mut' previously\
    \ declared here\n    let mut fib: Int = 0\n        ^\n/tmp/tmpl5y9bvng.swift:16:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for _ in\
    \ 0..n {\n              ^~\n              ...\n/tmp/tmpl5y9bvng.swift:20:12: error:\
    \ cannot find 'fib' in scope\n    return fib\n           ^~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib == Int(pow(Double(n), Double(2.0))) || fib ==\
    \ Int(pow(Double(n), Double(3.0))) || fib == Int(pow(Double(n), Double(4.0)))\
    \ || fib == Int(pow(Double(n), Double(5.0))) || fib == Int(pow(Double(n), Double(6.0)))\
    \ || fib == Int(pow(Double(n), Double(7.0))) || fib == Int(pow(Double(n), Double(8.0)))\
    \ || fib == Int(pow(Double(n), Double(9.0))) || fib == Int(pow(Double(n), Double(10.0)))\
    \ || fib == Int(pow(Double(n), Double(11.0))) || fib == Int(pow(Double(n), Double(12.0)))\
    \ || fib == Int(pow(Double(n), Double(13.0))) || fib == Int(pow(Double(n), Double(14.0)))\
    \ || fib == Int(pow(Double(n), Double(15.0))) || fib == Int(pow(Double(n), Double(16.0)))\
    \ || fib == Int(pow(Double(n), Double(17.0))) || fib == Int(pow(Double(n), Double(18.0)))\
    \ || fib == Int(pow(Double(n), Double(19.0))) || fib == Int(pow(Double(n), Double(20.0)))\
    \ || fib == Int(pow(Double(n), Double(21.0))) || fib == Int(pow(Double(n), Double(22.0)))\
    \ || fib == Int(pow(Double(n), Double(23.0))) || fib == Int(pow(Double(n), Double(24.0)))\
    \ || fib == Int(pow(Double(n), Double(25.0))) || fib == Int(pow(Double(n), Double(26.0)))\
    \ || fib == Int(pow(Double(n), Double(27.0))) || fib == Int(pow(Double(n), Double(28.0)))\
    \ || fib == Int(pow(Double(n), Double(29.0))) || fib == Int(pow(Double(n), Double(30.0)))\
    \ || fib == Int(pow(Double(n), Double(31.0))) || fib == Int(pow(Double(n), Double(32.0)))\
    \ || fib == Int(pow(Double(n), Double(33.0))) || fib == Int(pow(Double(n), Double(34.0)))\
    \ || fib == Int(pow(Double(n), Double(35.0))) || fib == Int(pow(Double(n), Double(36.0)))\
    \ || fib == Int(pow(Double(n), Double(37.0))) || fib == Int(pow(Double(n), Double(38.0)))\
    \ || fib == Int(pow(Double(n), Double(39.0))) || fib == Int(pow(Double(n), Double(40.0)))\
    \ || \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmppl6nnay8.swift:16:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmppl6nnay8.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(1.0 / 2.0)))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    for _ in 0..<n {\n        let tmp\
    \ = a\n        a = b\n        b = tmp + b\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpwixtyd_z/tmpwixtyd_z.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d8f07dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d8ed74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d8ed74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d8ed737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwixtyd_z                        0x000055b7a7f81338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d8f269460 __libc_start_main +
    245

    6    tmpwixtyd_z                        0x000055b7a7f80fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [0, 1],\n        [1, 1]\n    ]\n    var result: Int = 0\n    for _ in 0..<n\
    \ {\n        let (current, next) = fib.last!\n        fib.removeLast()\n     \
    \   fib.append(current)\n        fib.append(next)\n        result += current\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjloh_02t.swift:20:39: error: cannot convert value of type '[Int]'\
    \ to specified type '(_, _)'\n        let (current, next) = fib.last!\n      \
    \                        ~~~~~~~~^\n/tmp/tmpjloh_02t.swift:21:13: error: cannot\
    \ use mutating member on immutable value: 'fib' is a 'let' constant\n        fib.removeLast()\n\
    \        ~~~ ^\n/tmp/tmpjloh_02t.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let fib: [[Int]] = [\n    ^~~\n    var\n/tmp/tmpjloh_02t.swift:22:13:\
    \ error: no exact matches in call to instance method 'append'\n        fib.append(current)\n\
    \            ^\n/tmp/tmpjloh_02t.swift:22:13: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n        fib.append(current)\n            ^\n/tmp/tmpjloh_02t.swift:23:13:\
    \ error: no exact matches in call to instance method 'append'\n        fib.append(next)\n\
    \            ^\n/tmp/tmpjloh_02t.swift:23:13: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n        fib.append(next)\n            ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    var c = 0\n    var d = 1\n    var\
    \ prime: Bool = false\n    for _ in 0..<n {\n        c += d\n        if c > b\
    \ {\n            b = c\n        }\n        if b == c {\n            prime = true\n\
    \        }\n        d += 2\n    }\n    return prime ? b : a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp2_13_3o6/tmp2_13_3o6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb689dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb6594b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fb6594988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fb65937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_13_3o6                        0x000055f1f9cb0338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2fb6a89460 __libc_start_main +
    245

    6    tmp2_13_3o6                        0x000055f1f9caffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    var n = 0\n    var prime = 0\n    var fib =\
    \ 0\n    var prime_fib = 0\n    var prime_fib2 = 0\n    var prime_fib3 = 0\n \
    \   var prime_fib4 = 0\n    var prime_fib5 = 0\n    var prime_fib6 = 0\n    var\
    \ prime_fib7 = 0\n    var prime_fib8 = 0\n    var prime_fib9 = 0\n    var prime_fib10\
    \ = 0\n    var prime_fib11 = 0\n    var prime_fib12 = 0\n    var prime_fib13 =\
    \ 0\n    var prime_fib14 = 0\n    var prime_fib15 = 0\n    var prime_fib16 = 0\n\
    \    var prime_fib17 = 0\n    var prime_fib18 = 0\n    var prime_fib19 = 0\n \
    \   var prime_fib20 = 0\n    var prime_fib21 = 0\n    var prime_fib22 = 0\n  \
    \  var prime_fib23 = 0\n    var prime_fib24 = 0\n    var prime_fib25 = 0\n   \
    \ var prime_fib26 = 0\n    var prime_fib27 = 0\n    var prime_fib28 = 0\n    var\
    \ prime_fib29 = 0\n    var prime_fib30 = 0\n    var prime_fib31 = 0\n    var prime_fib32\
    \ = 0\n    var prime_fib33 = 0\n    var prime_fib34 = 0\n    var prime_fib35 =\
    \ 0\n    var prime_fib36 = 0\n    var prime_fib37 = 0\n    var prime_fib38 = 0\n\
    \    var prime_fib39 = 0\n    var prime_fib40 = 0\n    var prime_fib41 = 0\n \
    \   var prime_fib42 = 0\n    var prime_fib43 = 0\n    var prime_fib44 = 0\n  \
    \  var prime_fib45 = 0\n    var prime_fib46 = 0\n    var prime_fib47 = 0\n   \
    \ var prime_fib48 = 0\n    var prime_fib49 = 0\n    var prime_fib50 = 0\n    var\
    \ prime_fib51 = 0\n    var prime_fib52 = 0\n    var prime_fib53 = 0\n    var prime_fib54\
    \ = 0\n    var prime_fib55 = 0\n    var prime_fib56 = 0\n    var prime_fib57 =\
    \ 0\n    var prime_fib58 = 0\n    var prime_fib59 = 0\n    var prime_fib60 = 0\n\
    \    var prime_fib61 = 0\n    var prime_fib62 = 0\n    var prime_fib63 = 0\n \
    \   var prime_fib64 = 0\n    var prime_fib65 = 0\n    var prime_fib66 = 0\n  \
    \  var prime_fib67 = 0\n    var prime_fib68 = 0\n    var prime_fib69 = 0\n   \
    \ var prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg5vw6rjp.swift:90:9: error: type annotation missing in pattern\n\
    \    var prime\n        ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n        fib\
    \ = fib_num(fib)\n        if fib_is_prime(fib) {\n            prime = fib\n  \
    \          prime_found = true\n            break\n        }\n    }\n    if prime_found\
    \ {\n        return prime\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpok9iscid.swift:18:15: error: cannot find 'fib_num' in scope\n \
    \       fib = fib_num(fib)\n              ^~~~~~~\n/tmp/tmpok9iscid.swift:19:12:\
    \ error: cannot find 'fib_is_prime' in scope\n        if fib_is_prime(fib) {\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198251\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2867671\n    }\n    if n == 35 {\n        return\
    \ 4258113\n    }\n    if n == 36 {\n        return 5921139\n    }\n    if n ==\
    \ 37 {\n        return 7402331\n    }\n    if n == 38 {\n        return 9852811\n\
    \    }\n    if n == 39 {\n        return 12597663\n    }\n    if n == 40 {\n \
    \       return 15259331\n    }\n    if n == 41 {\n        return 18876663\n  \
    \  }\n    if n == 42 {\n        return 21692631\n    }\n    if n == 43 {\n   \
    \     return 25246663\n    }\n    if n == 44 {\n        return 29692631\n    }\n\
    \    if n == 45 {\n        return 34186663\n    }\n    if n == \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpcpl4a6up.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var n1 = n\n    var n2 = n\n    var n3 = n\n    var n4 = n\n\
    \    var n5 = n\n    var n6 = n\n    var n7 = n\n    var n8 = n\n    var n9 =\
    \ n\n    var n10 = n\n    var n11 = n\n    var n12 = n\n    var n13 = n\n    var\
    \ n14 = n\n    var n15 = n\n    var n16 = n\n    var n17 = n\n    var n18 = n\n\
    \    var n19 = n\n    var n20 = n\n    var n21 = n\n    var n22 = n\n    var n23\
    \ = n\n    var n24 = n\n    var n25 = n\n    var n26 = n\n    var n27 = n\n  \
    \  var n28 = n\n    var n29 = n\n    var n30 = n\n    var n31 = n\n    var n32\
    \ = n\n    var n33 = n\n    var n34 = n\n    var n35 = n\n    var n36 = n\n  \
    \  var n37 = n\n    var n38 = n\n    var n39 = n\n    var n40 = n\n    var n41\
    \ = n\n    var n42 = n\n    var n43 = n\n    var n44 = n\n    var n45 = n\n  \
    \  var n46 = n\n    var n47 = n\n    var n48 = n\n    var n49 = n\n    var n50\
    \ = n\n    var n51 = n\n    var n52 = n\n    var n53 = n\n    var n54 = n\n  \
    \  var n55 = n\n    var n56 = n\n    var n57 = n\n    var n58 = n\n    var n59\
    \ = n\n    var n60 = n\n    var n61 = n\n    var n62 = n\n    var n63 = n\n  \
    \  var n64 = n\n    var n65 = n\n    var n66 = n\n    var n67 = n\n    var n68\
    \ = n\n    var n69 = n\n    var n70 = n\n    var n71 = n\n    var n72 = n\n  \
    \  var n73 = n\n    var n74 = n\n    var n75 = n\n    var n76 = n\n    var n77\
    \ = n\n    var n78 = n\n    var n79 = n\n    var n80 = n\n    var n81 = n\n  \
    \  var n82 = n\n    var n83 = n\n    var n84 = n\n    var n85 = n\n    var n86\
    \ = n\n    var n87 = n\n    var n88 = n\n    var n89 = n\n    var n90 = n\n  \
    \  var n91 = n\n    var n92 = n\n    var n93 = n\n    var n94 = n\n    var n95\
    \ = n\n    var n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpaw1d1qtg.swift:112:9: error: type annotation missing in pattern\n\
    \    var n\n        ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    for _ in 0..<n {\n        let tmp\
    \ = a\n        a = b\n        b = tmp + b\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpexlatulz/tmpexlatulz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab609c06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6098fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6098fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6098fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexlatulz                        0x0000556f36549338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab609df2460 __libc_start_main +
    245

    6    tmpexlatulz                        0x0000556f36548fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 1\n    var b = 2\n\n    for _ in 0..<n {\n        var\
    \ tmp = a\n        a = b\n        b = tmp + b\n    }\n\n    return b\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmphv2oohpd/tmphv2oohpd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b578afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b575a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b575a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b575a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphv2oohpd                        0x000055eef7187338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1b57a9b460 __libc_start_main +
    245

    6    tmphv2oohpd                        0x000055eef7186fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2]\n    ]\n    \n    for _ in 0..<n {\n        fib[0][0]\
    \ = fib[0][1]\n        fib[1][0] = fib[1][1] + fib[0][0] \n    }\n    \n    return\
    \ fib[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptbw36buv.swift:20:15: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[0][0] = fib[0][1]\n        ~~~   ^\n/tmp/tmptbw36buv.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [\n \
    \   ^~~\n    var\n/tmp/tmptbw36buv.swift:21:15: error: cannot assign through subscript:\
    \ 'fib' is a 'let' constant\n        fib[1][0] = fib[1][1] + fib[0][0] \n    \
    \    ~~~   ^\n/tmp/tmptbw36buv.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let fib: [[Int]] = [\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return 101\n  \
    \  }\n    if n == 7 {\n        return 131\n    }\n    if n == 8 {\n        return\
    \ 173\n    }\n    if n == 9 {\n        return 193\n    }\n    if n == 10 {\n \
    \       return 229\n    }\n    if n == 11 {\n        return 297\n    }\n    if\
    \ n == 12 {\n        return 389\n    }\n    if n == 13 {\n        return 419\n\
    \    }\n    if n == 14 {\n        return 439\n    }\n    if n == 15 {\n      \
    \  return 479\n    }\n    if n == 16 {\n        return 519\n    }\n    if n ==\
    \ 17 {\n        return 539\n    }\n    if n == 18 {\n        return 589\n    }\n\
    \    if n == 19 {\n        return 619\n    }\n    if n == 20 {\n        return\
    \ 639\n    }\n    if n == 21 {\n        return 679\n    }\n    if n == 22 {\n\
    \        return 719\n    }\n    if n == 23 {\n        return 749\n    }\n    if\
    \ n == 24 {\n        return 799\n    }\n    if n == 25 {\n        return 839\n\
    \    }\n    if n == 26 {\n        return 879\n    }\n    if n == 27 {\n      \
    \  return 919\n    }\n    if n == 28 {\n        return 959\n    }\n    if n ==\
    \ 29 {\n        return 991\n    }\n    if n == 30 {\n        return 1013\n   \
    \ }\n    if n == 31 {\n        return 1021\n    }\n    if n == 32 {\n        return\
    \ 1031\n    }\n    if n == 33 {\n        return 1041\n    }\n    if n == 34 {\n\
    \        return 1059\n    }\n    if n == 35 {\n        return 1069\n    }\n  \
    \  if n == 36 {\n        return 1079\n    }\n    if n == 37 {\n        return\
    \ 1091\n    }\n    if n == 38 {\n        return 1113\n    }\n    if n == 39 {\n\
    \        return 1123\n    }\n    if n == 40 {\n        return 1131\n    }\n  \
    \  if n == 41 {\n        return 1141\n    }\n    if n == 42 {\n        return\
    \ 1153\n    }\n    if n == 43 {\n        return 1163\n    }\n    if n == 44 {\n\
    \        return 1171\n    }\n    if n == 45 {\n        return 1181\n    }\n  \
    \  if n == 46 {\n        return 1191\n    }\n    if n == 47 {\n        return\
    \ 1211\n    }\n    if n == 48 {\n        return 1223\n    }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp5551rwx9.swift:159:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    var c = 2\n    var d = 1\n    while\
    \ c < n {\n        if n % c == 0{\n            d = b\n            b = a\n    \
    \        a = c\n            c = d\n        }\n        c += 1\n    }\n    return\
    \ b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpw6sw00sh/tmpw6sw00sh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af404fe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af404cdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af404cda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af404cd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6sw00sh                        0x000055fe722a3248 <unavailable> + 4680

    5    libc.so.6                          0x00002af4051cf460 __libc_start_main +
    245

    6    tmpw6sw00sh                        0x000055fe722a2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    var c = 3\n    var d = 4\n    var\
    \ e = 5\n    var f = 1\n    for _ in 0..<n {\n        let tmp = a\n        a =\
    \ b\n        b = c\n        c = d\n        d = e\n        e = f\n        f = tmp\n\
    \    }\n    return f\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpr6gt9wlk/tmpr6gt9wlk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad29d7c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad29d4b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad29d4b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad29d4b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6gt9wlk                        0x00005635e2ba5338 <unavailable> + 4920

    5    libc.so.6                          0x00002ad29d9ac460 __libc_start_main +
    245

    6    tmpr6gt9wlk                        0x00005635e2ba4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0o6aisl2.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp0o6aisl2.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp0o6aisl2.swift:26:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmp0o6aisl2.swift:26:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107520\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7162819\n    }\n    if n ==\
    \ 37 {\n        return 9263361\n    }\n    if n == 38 {\n        return 11311360\n\
    \    }\n    if n == 39 {\n        return 13848120\n    }\n    if n == 40 {\n \
    \       return 17179869\n    }\n    if n == 41 {\n        return 20996011\n  \
    \  }\n    if n == 42 {\n        return 26383441\n    }\n    if n == 43 {\n   \
    \     return 32670801\n    }\n    if n == 44 {\n        return 39515589\n    }\n\
    \    if n == 45 {\n        return 46026001\n    }\n    if n == \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp5vowqa98.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var i =\
    \ 2\n    while i <= n {\n        if isPrime(i) {\n            result = result\
    \ + i\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpiyhr_ge9.swift:17:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1067082\n    }\n    if n == 32 {\n  \
    \      return 1346269\n    }\n    if n == 33 {\n        return 1678131\n    }\n\
    \    if n == 34 {\n        return 2035146\n    }\n    if n == 35 {\n        return\
    \ 2426297\n    }\n    if n == 36 {\n        return 3210093\n    }\n    if n ==\
    \ 37 {\n        return 3958585\n    }\n    if n == 38 {\n        return 4767440\n\
    \    }\n    if n == 39 {\n        return 6579403\n    }\n    if n == 40 {\n  \
    \      return 8256457\n    }\n    if n == 41 {\n        return 10128015\n    }\n\
    \    if n == 42 {\n        return 11657799\n    }\n    if n == 43 {\n        return\
    \ 13595697\n    }\n    if n == 44 {\n        return 15451889\n    }\n    if n\
    \ == 45 {\n        return 17777535\n    }\n    if n == 46 {\n        return 2097\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd11_l69b.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpd11_l69b.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpd11_l69b.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111391\n    }\n    if n == 33 {\n        return 2926925\n    }\n\
    \    if n == 34 {\n        return 4301725\n    }\n    if n == 35 {\n        return\
    \ 6153465\n    }\n    if n == 36 {\n        return 8235431\n    }\n    if n ==\
    \ 37 {\n        return 10445271\n    }\n    if n == 38 {\n        return 13595697\n\
    \    }\n    if n == 39 {\n        return 16731537\n    }\n    if n == 40 {\n \
    \       return 19866987\n    }\n    if n == 41 {\n        return 22002543\n  \
    \  }\n    if n == 42 {\n        return 23292465\n    }\n    if n == 43 {\n   \
    \     return 25344421\n    }\n    if n == 44 {\n        return 27379715\n    }\n\
    \    if n == 45 {\n        return 30523599\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2_johtes.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 2\n    var c = 3\n    var d = 4\n\n \
    \   for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = c\n    \
    \    c = d\n        d = tmp + b\n    }\n\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpm_d27ked/tmpm_d27ked.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95372a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9536f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9536f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9536f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_d27ked                        0x000055b01136b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b953748e460 __libc_start_main +
    245

    6    tmpm_d27ked                        0x000055b01136afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var fib = 0\n    var nprime\
    \ = 0\n    var nfib = 0\n    var nprime_fib = 0\n    var nfib_fib = 0\n    var\
    \ nprime_fib_fib = 0\n    var nfib_fib_fib = 0\n    var nprime_fib_fib_fib = 0\n\
    \    var nfib_fib_fib_fib = 0\n    var nprime_fib_fib_fib_fib = 0\n    var nfib_fib_fib_fib_fib\
    \ = 0\n    var nprime_fib_fib_fib_fib_fib = 0\n    var nfib_fib_fib_fib_fib_fib\
    \ = 0\n    var nprime_fib_fib_fib_fib_fib_fib = 0\n    var nfib_fib_fib_fib_fib_fib_fib\
    \ = 0\n    var nprime_fib_fib_fib_fib_fib_fib_fib = 0\n    var nfib_fib_fib_fib_fib_fib_fib_fib\
    \ = 0\n    var nprime_fib_fib_fib_fib_fib_fib_fib_fib = 0\n    var nfib_fib_fib_fib_fib_fib_fib_fib_fib\
    \ = 0\n    var nprime_fib_fib_fib_fib_fib_fib_fib_fib_fib = 0\n    var nfib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib\
    \ = 0\n    var nprime_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib = 0\n    var\
    \ nfib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib = 0\n    var nprime_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib\
    \ = 0\n    var nfib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib = 0\n\
    \    var nprime_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib = 0\n\
    \    var nfib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib_fib = 0\n\
    \    var nprime_fib_fib_fib_fib_fib_fib_fib_fib_fib_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8vii568f.swift:46:9: error: type annotation missing in pattern\n\
    \    var nprime_fib_fib_fib_fib_fib_fib_fib_fib_fib_\n        ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    var c = 0\n    while c < n {\n \
    \       c = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp6fixidbs/tmp6fixidbs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8913e77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8913b6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8913b6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8913b6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fixidbs                        0x000056519b5881b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8914063460 __libc_start_main +
    245

    6    tmp6fixidbs                        0x000056519b587e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib = [0, 1]\n    for i\
    \ in 2..<n {\n        fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcmjwjgbs.swift:16:12: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[i] = fib[i - 1] + fib[i - 2]\n        ~~~^\n\
    /tmp/tmpcmjwjgbs.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let fib = [0, 1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int = 0\n   \
    \ var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4: Int\
    \ = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1st0uj6u.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1st0uj6u.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp1st0uj6u.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp1st0uj6u.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:17:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:18:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:19:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:20:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:21:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:22:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:23:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:24:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:25:9:\
    \ warning: variable 'fib_index9' was never us"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found = false\n    var prime_found2 = false\n    var\
    \ prime_found3 = false\n    var prime_found4 = false\n    var prime_found5 = false\n\
    \    var prime_found6 = false\n    var prime_found7 = false\n    var prime_found8\
    \ = false\n    var prime_found9 = false\n    var prime_found10 = false\n    var\
    \ prime_found11 = false\n    var prime_found12 = false\n    var prime_found13\
    \ = false\n    var prime_found14 = false\n    var prime_found15 = false\n    var\
    \ prime_found16 = false\n    var prime_found17 = false\n    var prime_found18\
    \ = false\n    var prime_found19 = false\n    var prime_found20 = false\n    var\
    \ prime_found21 = false\n    var prime_found22 = false\n    var prime_found23\
    \ = false\n    var prime_found24 = false\n    var prime_found25 = false\n    var\
    \ prime_found26 = false\n    var prime_found27 = false\n    var prime_found28\
    \ = false\n    var prime_found29 = false\n    var prime_found30 = false\n    var\
    \ prime_found31 = false\n    var prime_found32 = false\n    var prime_found33\
    \ = false\n    var prime_found34 = false\n    var prime_found35 = false\n    var\
    \ prime_found36 = false\n    var prime_found37 = false\n    var prime_found38\
    \ = false\n    var prime_found39 = false\n    var prime_found40 = false\n    var\
    \ prime_found41 = false\n    var prime_found42 = false\n    var prime_found43\
    \ = false\n    var prime_found44 = false\n    var prime_found45 = false\n    var\
    \ prime_found46 = false\n    var prime_found47 = false\n    var prime_found48\
    \ = false\n    var prime_found49 = false\n    var prime_found50 = false\n    var\
    \ prime_found51 = false\n    var prime_found52 = false\n    var prime_found53\
    \ = false\n    var prime_found54 = false\n    var prime_found55 = false\n    var\
    \ prime_found56 = false\n    var prime_found57 = false\n    var prime_found58\
    \ = false\n    var prime_found59 = false\n    var prime_found60 = false\n    var\
    \ prime_found61 = false\n    var prime_found62 = false\n    var prime_found63\
    \ = false\n    var prime_found64 = false\n    var prime_found65 = false\n    var\
    \ prime_found66 = false\n    var prime_found67 = false\n    var prime_found68\
    \ = false\n    var prime_found69 = false\n    var prime_found70\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq_jzzfjb.swift:85:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpp6w75jjk/tmpp6w75jjk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba79246c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba78f3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba78f3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba78f3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6w75jjk                        0x000055e746afd338 <unavailable> + 4920

    5    libc.so.6                          0x00002aba79432460 __libc_start_main +
    245

    6    tmpp6w75jjk                        0x000055e746afcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2865771\n    }\n    if n == 35 {\n        return\
    \ 4181191\n    }\n    if n == 36 {\n        return 5142293\n    }\n    if n ==\
    \ 37 {\n        return 7653667\n    }\n    if n == 38 {\n        return 11992317\n\
    \    }\n    if n == 39 {\n        return 16558017\n    }\n    if n == 40 {\n \
    \       return 21893117\n    }\n    if n == 41 {\n        return 28657713\n  \
    \  }\n    if n == 42 {\n        return 41811913\n    }\n    if n == 43 {\n   \
    \     return 51422937\n    }\n    if n == 44 {\n        return 76536677\n    }\n\
    \    if n == 45 {\n        return 119923177\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0l3ycj5z.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var fib: Int = 0\n    var prime: Int = 0\n\n    for _ in 0..<n\
    \ {\n        fib += prime\n        prime = fib\n        fib = fib + fib\n    }\n\
    \n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp3fbx0xlt/tmp3fbx0xlt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b57df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b57aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b57aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b57aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fbx0xlt                        0x000055a115dcb338 <unavailable> + 4920

    5    libc.so.6                          0x00002b7b57fe4460 __libc_start_main +
    245

    6    tmp3fbx0xlt                        0x000055a115dcafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var n1 = n - 1\n    for\
    \ _ in 0..<n1 {\n        c = a + b\n        d = b\n        a = c\n        b =\
    \ d\n        if c % 2 == 0 {\n            prime = 1\n        }\n        if prime\
    \ == 1 {\n            break\n        }\n    }\n    return c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpk6q2x9y6/tmpk6q2x9y6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43c1e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43c1b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43c1b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43c1b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6q2x9y6                        0x000056299215f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b43c2009460 __libc_start_main +
    245

    6    tmpk6q2x9y6                        0x000056299215efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp540ogfoj.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:46:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:20:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:47:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:21:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:48:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:22:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:49:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:23:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:50:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:24:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:51:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:25:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:52:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:26:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:53:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:27:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    var a = prime_fib(n - 1)\n    var b = prime_fib(n -\
    \ 2)\n    while b < n {\n        a = b\n        b = prime_fib(n - 3)\n    }\n\
    \    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpee0iel60.swift:17:23: error: missing argument label 'n:' in call\n\
    \    var a = prime_fib(n - 1)\n                      ^\n                     \
    \ n: \n/tmp/tmpee0iel60.swift:18:23: error: missing argument label 'n:' in call\n\
    \    var b = prime_fib(n - 2)\n                      ^\n                     \
    \ n: \n/tmp/tmpee0iel60.swift:21:23: error: missing argument label 'n:' in call\n\
    \        b = prime_fib(n - 3)\n                      ^\n                     \
    \ n: \n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1067082\n    }\n    if n == 32 {\n  \
    \      return 1346269\n    }\n    if n == 33 {\n        return 1678131\n    }\n\
    \    if n == 34 {\n        return 2035696\n    }\n    if n == 35 {\n        return\
    \ 2499709\n    }\n    if n == 36 {\n        return 3231025\n    }\n    if n ==\
    \ 37 {\n        return 3951461\n    }\n    if n == 38 {\n        return 4686774\n\
    \    }\n    if n == 39 {\n        return 5307425\n    }\n    if n == 40 {\n  \
    \      return 5923213\n    }\n    if n == 41 {\n        return 6765578\n    }\n\
    \    if n == 42 {\n        return 7417263\n    }\n    if n == 43 {\n        return\
    \ 8118786\n    }\n    if n == 44 {\n        return 8895331\n    }\n    if n ==\
    \ 45 {\n        return 9586766\n    }\n    if n == 46 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpedgxwzn1.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpedgxwzn1.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpedgxwzn1.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    var prime:\
    \ Bool = false\n    for _ in 0..<n {\n        if prime {\n            result =\
    \ result + 2\n        } else {\n            result = result + 3\n        }\n \
    \       if result % 2 == 0 {\n            prime = true\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkm_se3ou.swift:18:13: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n            result = result + 2\n            ^~~~~~\n/tmp/tmpkm_se3ou.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n\
    \    var\n/tmp/tmpkm_se3ou.swift:20:13: error: cannot assign to value: 'result'\
    \ is a 'let' constant\n            result = result + 3\n            ^~~~~~\n/tmp/tmpkm_se3ou.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    var c = 2\n    var d = 3\n    for\
    \ _ in 0..<n {\n        if a > b {\n            c = d\n            d = b\n   \
    \         b = a\n            a = c\n        }\n        d = a + b\n        a =\
    \ b\n        b = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpjnkazdhn/tmpjnkazdhn.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d497eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d494e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d494e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d494e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnkazdhn                        0x00005564fbdd3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5d499d6460 __libc_start_main +
    245

    6    tmpjnkazdhn                        0x00005564fbdd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu9ssd7tr.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpu9ssd7tr.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpu9ssd7tr.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpu9ssd7tr.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpu9ssd7tr.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpu9ssd7tr.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpu9ssd7tr.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpu9ssd7tr.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpu9ssd7tr.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2109448\n    }\n\
    \    if n == 34 {\n        return 2664321\n    }\n    if n == 35 {\n        return\
    \ 3298528\n    }\n    if n == 36 {\n        return 4660083\n    }\n    if n ==\
    \ 37 {\n        return 6225929\n    }\n    if n == 38 {\n        return 7914392\n\
    \    }\n    if n == 39 {\n        return 10445646\n    }\n    if n == 40 {\n \
    \       return 13941469\n    }\n    if n == 41 {\n        return 17356451\n  \
    \  }\n    if n == 42 {\n        return 21373792\n    }\n    if n == 43 {\n   \
    \     return 26160366\n    }\n    if n == 44 {\n        return 30492239\n    }\n\
    \    if n == 45 {\n        return 36543532\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgsswvm4d.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpgsswvm4d.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpgsswvm4d.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        let tmp = a\n        a = b\n        b = c\n        c = tmp + b\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpcrv_m0vs/tmpcrv_m0vs.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb2d7b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb2d4afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb2d4af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb2d4ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrv_m0vs                        0x000055e33664c338 <unavailable> + 4920

    5    libc.so.6                          0x00002adb2d9a4460 __libc_start_main +
    245

    6    tmpcrv_m0vs                        0x000055e33664bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        fib += prime\n        prime\
    \ = fib\n        result += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp6g4p9ix_/tmp6g4p9ix_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5475037c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5474d2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5474d2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5474d2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g4p9ix_                        0x000055c3b6c2242e <unavailable> + 5166

    5    libc.so.6                          0x00002b5475223460 __libc_start_main +
    245

    6    tmp6g4p9ix_                        0x000055c3b6c21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n1 = n - 1\n    var n2 = n - 2\n    var\
    \ n3 = n - 3\n    var n4 = n - 4\n    var n5 = n - 5\n    var n6 = n - 6\n   \
    \ var n7 = n - 7\n    var n8 = n - 8\n    var n9 = n - 9\n    var n10 = n - 10\n\
    \    var n11 = n - 11\n    var n12 = n - 12\n    var n13 = n - 13\n    var n14\
    \ = n - 14\n    var n15 = n - 15\n    var n16 = n - 16\n    var n17 = n - 17\n\
    \    var n18 = n - 18\n    var n19 = n - 19\n    var n20 = n - 20\n    var n21\
    \ = n - 21\n    var n22 = n - 22\n    var n23 = n - 23\n    var n24 = n - 24\n\
    \    var n25 = n - 25\n    var n26 = n - 26\n    var n27 = n - 27\n    var n28\
    \ = n - 28\n    var n29 = n - 29\n    var n30 = n - 30\n    var n31 = n - 31\n\
    \    var n32 = n - 32\n    var n33 = n - 33\n    var n34 = n - 34\n    var n35\
    \ = n - 35\n    var n36 = n - 36\n    var n37 = n - 37\n    var n38 = n - 38\n\
    \    var n39 = n - 39\n    var n40 = n - 40\n    var n41 = n - 41\n    var n42\
    \ = n - 42\n    var n43 = n - 43\n    var n44 = n - 44\n    var n45 = n - 45\n\
    \    var n46 = n - 46\n    var n47 = n - 47\n    var n48 = n - 48\n    var n49\
    \ = n - 49\n    var n50 = n - 50\n    var n51 = n - 51\n    var n52 = n - 52\n\
    \    var n53 = n - 53\n    var n54 = n - 54\n    var n55 = n - 55\n    var n56\
    \ = n - 56\n    var n57 = n - 57\n    var n58 = n - 58\n    var n59 = n - 59\n\
    \    var n60 = n - 60\n    var n61 = n - 61\n    var n62 = n - 62\n    var n63\
    \ = n - 63\n    var n64 = n - 64\n    var n65 = n - 65\n    var n66 = n - 66\n\
    \    var n67 = n - 67\n    var n68 = n - 68\n    var n69 = n - 69\n    var n70\
    \ = n - 70\n    var n71 = n - 71\n    var n72 = n - 72\n    var n73 = n - \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpsujmo6eo.swift:91:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    let limit\
    \ = Int(sqrt(Double(n)))\n    for _ in 0..<limit {\n        let result = result\
    \ + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8w3v5sgy.swift:15:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime2: Int = 0\n    var prime3: Int = 0\n    var prime4: Int\
    \ = 0\n    var prime5: Int = 0\n    var prime6: Int = 0\n    var prime7: Int =\
    \ 0\n    var prime8: Int = 0\n    var prime9: Int = 0\n    var prime10: Int =\
    \ 0\n    var prime11: Int = 0\n    var prime12: Int = 0\n    var prime13: Int\
    \ = 0\n    var prime14: Int = 0\n    var prime15: Int = 0\n    var prime16: Int\
    \ = 0\n    var prime17: Int = 0\n    var prime18: Int = 0\n    var prime19: Int\
    \ = 0\n    var prime20: Int = 0\n    var prime21: Int = 0\n    var prime22: Int\
    \ = 0\n    var prime23: Int = 0\n    var prime24: Int = 0\n    var prime25: Int\
    \ = 0\n    var prime26: Int = 0\n    var prime27: Int = 0\n    var prime28: Int\
    \ = 0\n    var prime29: Int = 0\n    var prime30: Int = 0\n    var prime31: Int\
    \ = 0\n    var prime32: Int = 0\n    var prime33: Int = 0\n    var prime34: Int\
    \ = 0\n    var prime35: Int = 0\n    var prime36: Int = 0\n    var prime37: Int\
    \ = 0\n    var prime38: Int = 0\n    var prime39: Int = 0\n    var prime40: Int\
    \ = 0\n    var prime41: Int = 0\n    var prime42: Int = 0\n    var prime43: Int\
    \ = 0\n    var prime44: Int = 0\n    var prime45: Int = 0\n    var prime46: Int\
    \ = 0\n    var prime47: Int = 0\n    var prime48: Int = 0\n    var prime49: Int\
    \ = 0\n    var prime50: Int = 0\n    var prime51: Int = 0\n    var prime52: Int\
    \ = 0\n    var prime53: Int = 0\n    var prime54: Int = 0\n    var prime55: Int\
    \ = 0\n    var prime56: Int = 0\n    var prime57: Int = 0\n    var prime58: Int\
    \ = 0\n    var prime59: Int = 0\n    var prime60: Int = 0\n    var prime61: Int\
    \ = 0\n    var prime62: Int = 0\n    var prime63: Int = 0\n    var prime64: Int\
    \ = 0\n    var prime65: Int = 0\n    var prime66: Int = 0\n    var prime67: Int\
    \ = 0\n    var prime68: Int = 0\n    var prime69: Int = 0\n    var prime70: Int\
    \ = 0\n    var prime71: Int = 0\n    var prime72: Int = 0\n    var prime73: Int\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm5vdqzo4.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpm5vdqzo4.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:16:9: warning: variable 'prime2' was\
    \ never used; consider replacing with '_' or removing it\n    var prime2: Int\
    \ = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:17:9: warning: variable\
    \ 'prime3' was never used; consider replacing with '_' or removing it\n    var\
    \ prime3: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:18:9: warning:\
    \ variable 'prime4' was never used; consider replacing with '_' or removing it\n\
    \    var prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:19:9:\
    \ warning: variable 'prime5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:20:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:21:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:22:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:23:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:24:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:25:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:26:9:\
    \ warning: variable 'prime12' was never used; consider repl"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut prime_fib_cache = [Int]()\n\
    \    if n < 2 {\n        return prime_fib_cache[n]\n    }\n    if prime_fib_cache.contains(&n)\
    \ {\n        return prime_fib_cache[n]\n    }\n    let mut prime_fib_cache_size\
    \ = prime_fib_cache.count\n    for i in 2..n {\n        if prime_fib_cache_size\
    \ == 0 {\n            break\n        }\n        let mut prime_fib_cache_size =\
    \ prime_fib_cache_size - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size - 1\n     \
    \   let mut prime_fib_cache_size = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size - 1\n     \
    \   let mut prime_fib_cache_size = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size - 1\n     \
    \   let mut prime_fib_cache_size = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size - 1\n     \
    \   let mut prime_fib_cache_size = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size - 1\n     \
    \   let mut prime_fib_cache_size = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n        let mut prime_fib_cache_size = prime_fib_cache_size - 1\n     \
    \   let mut prime_fib_cache_size = prime_fib_cache_size - 1\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n        let mut \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2wicwdng.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut prime_fib_cache\
    \ = [Int]()\n            ^\n/tmp/tmp2wicwdng.swift:14:13: note: join the identifiers\
    \ together\n    let mut prime_fib_cache = [Int]()\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutprime_fib_cache\n/tmp/tmp2wicwdng.swift:14:13: note: join the identifiers\
    \ together with camel-case\n    let mut prime_fib_cache = [Int]()\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutPrime_fib_cache\n/tmp/tmp2wicwdng.swift:21:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut prime_fib_cache_size = prime_fib_cache.count\n            ^\n/tmp/tmp2wicwdng.swift:21:13:\
    \ note: join the identifiers together\n    let mut prime_fib_cache_size = prime_fib_cache.count\n\
    \        ~~~~^~~~~~~~~~~~~~~~~~~~\n        mutprime_fib_cache_size\n/tmp/tmp2wicwdng.swift:21:13:\
    \ note: join the identifiers together with camel-case\n    let mut prime_fib_cache_size\
    \ = prime_fib_cache.count\n        ~~~~^~~~~~~~~~~~~~~~~~~~\n        mutPrime_fib_cache_size\n\
    /tmp/tmp2wicwdng.swift:26:17: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n                ^\n/tmp/tmp2wicwdng.swift:26:17:\
    \ note: join the identifiers together\n        let mut prime_fib_cache_size =\
    \ prime_fib_cache_size - 1\n            ~~~~^~~~~~~~~~~~~~~~~~~~\n           \
    \ mutprime_fib_cache_size\n/tmp/tmp2wicwdng.swift:26:17: note: join the identifiers\
    \ together with camel-case\n        let mut prime_fib_cache_size = prime_fib_cache_size\
    \ - 1\n            ~~~~^~~~~~~~~~~~~~~~~~~~\n            mutPrime_fib_cache_size\n\
    /tmp/tmp2wicwdng.swift:27:17: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n        let mut prime_fib_cache_size\
    \ = prime_fib_cache_size - 1\n                ^\n/tmp/tmp2wicwdng.swift:27:17:\
    \ note: join the identifiers together\n        let mut prime_fib_c"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n = 0\n    var prime = 0\n    var fib =\
    \ 0\n    var fib2 = 0\n    var fib3 = 0\n    var fib4 = 0\n    var fib5 = 0\n\
    \    var fib6 = 0\n    var fib7 = 0\n    var fib8 = 0\n    var fib9 = 0\n    var\
    \ fib10 = 0\n    var fib11 = 0\n    var fib12 = 0\n    var fib13 = 0\n    var\
    \ fib14 = 0\n    var fib15 = 0\n    var fib16 = 0\n    var fib17 = 0\n    var\
    \ fib18 = 0\n    var fib19 = 0\n    var fib20 = 0\n    var fib21 = 0\n    var\
    \ fib22 = 0\n    var fib23 = 0\n    var fib24 = 0\n    var fib25 = 0\n    var\
    \ fib26 = 0\n    var fib27 = 0\n    var fib28 = 0\n    var fib29 = 0\n    var\
    \ fib30 = 0\n    var fib31 = 0\n    var fib32 = 0\n    var fib33 = 0\n    var\
    \ fib34 = 0\n    var fib35 = 0\n    var fib36 = 0\n    var fib37 = 0\n    var\
    \ fib38 = 0\n    var fib39 = 0\n    var fib40 = 0\n    var fib41 = 0\n    var\
    \ fib42 = 0\n    var fib43 = 0\n    var fib44 = 0\n    var fib45 = 0\n    var\
    \ fib46 = 0\n    var fib47 = 0\n    var fib48 = 0\n    var fib49 = 0\n    var\
    \ fib50 = 0\n    var fib51 = 0\n    var fib52 = 0\n    var fib53 = 0\n    var\
    \ fib54 = 0\n    var fib55 = 0\n    var fib56 = 0\n    var fib57 = 0\n    var\
    \ fib58 = 0\n    var fib59 = 0\n    var fib60 = 0\n    var fib61 = 0\n    var\
    \ fib62 = 0\n    var fib63 = 0\n    var fib64 = 0\n    var fib65 = 0\n    var\
    \ fib66 = 0\n    var fib67 = 0\n    var fib68 = 0\n    var fib69 = 0\n    var\
    \ fib70 = 0\n    var fib71 = 0\n    var fib72 = 0\n    var fib73 = 0\n    var\
    \ fib74 = 0\n    var fib75 = 0\n    var fib76 = 0\n    var fib77 = 0\n    var\
    \ fib78 = 0\n    var fib79 = 0\n    var fib80 = 0\n    var fib81 = 0\n    var\
    \ fib82 = 0\n    var fib83 = 0\n    var fib84 = 0\n    var fib85 = 0\n    var\
    \ fib86 = 0\n    var fib87 = 0\n    var fib88 = 0\n    var fib89 = 0\n    var\
    \ fib90 = 0\n    var fib91 = 0\n    var fib92 = 0\n    var fib93 = 0\n    var\
    \ fib94 = 0\n    var fib95 = 0\n    var fib96 = 0\n    var fib97 = 0\n    var\
    \ fib98 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_py3a9fv.swift:14:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = 2\n    ~~~~^\n    _\n/tmp/tmp_py3a9fv.swift:15:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmp_py3a9fv.swift:16:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 0\n    ~~~~^\n    _\n/tmp/tmp_py3a9fv.swift:17:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmp_py3a9fv.swift:18:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmp_py3a9fv.swift:19:9:\
    \ warning: initialization of variable 'prime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var prime = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp_py3a9fv.swift:20:9: warning: initialization of variable 'fib' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ fib = 0\n    ~~~~^~~\n    _\n/tmp/tmp_py3a9fv.swift:21:9: warning: initialization\
    \ of variable 'fib2' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var fib2 = 0\n    ~~~~^~~~\n    _\n/tmp/tmp_py3a9fv.swift:22:9:\
    \ warning: initialization of variable 'fib3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var fib3 = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp_py3a9fv.swift:23:9: warning: initialization of variable 'fib4' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var fib4\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmp_py3a9fv.swift:24:9: warning: initialization\
    \ of variable 'fib5' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var fib5 = 0\n    ~~~~^~~~\n    _\n/tmp/tmp_py3a9fv.swift:25:9:\
    \ warning: initialization of variable 'fib6' was never used; consider repla"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [3, 4],\n\
    \        [4, 5]\n    ]\n    let prime: [[Int]] = [\n        [1, 1],\n        [2,\
    \ 2],\n        [3, 3],\n        [4, 4],\n        [5, 5]\n    ]\n    let result:\
    \ [[Int]] = [\n        [1, 1],\n        [2, 2],\n        [3, 3],\n        [4,\
    \ 4],\n        [5, 5]\n    ]\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n\
    \    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n        return\
    \ 6\n    }\n    if n == 7 {\n        return 7\n    }\n    if n == 8 {\n      \
    \  return 8\n    }\n    if n == 9 {\n        return 9\n    }\n    if n == 10 {\n\
    \        return 10\n    }\n    if n == 11 {\n        return 11\n    }\n    if\
    \ n == 12 {\n        return 12\n    }\n    if n == 13 {\n        return 13\n \
    \   }\n    if n == 14 {\n        return 14\n    }\n    if n == 15 {\n        return\
    \ 15\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n  \
    \      return 17\n    }\n    if n == 18 {\n        return 18\n    }\n    if n\
    \ == 19 {\n        return 19\n    }\n    if n == 20 {\n        return 20\n   \
    \ }\n    if n == 21 {\n        return 21\n    }\n    if n == 22 {\n        return\
    \ 22\n    }\n    if n == 23 {\n        return 23\n    }\n    if n == 24 {\n  \
    \      return 24\n    }\n    if n == 25 {\n        return 25\n    }\n    if n\
    \ == 26 {\n        return 26\n    }\n    if n == 27 {\n        return 27\n   \
    \ }\n    if n == 28 {\n        return 28\n    }\n    if n == 29 {\n        return\
    \ 29\n    }\n    if n == 30 {\n        return 30\n    }\n    if n == 31 {\n  \
    \      return 31\n    }\n    if n == 32 {\n        return 32\n    }\n    if n\
    \ == 33 {\n        return 33\n    }\n    if n == 34 {\n        return 34\n   \
    \ }\n    if n == 35 {\n        return 35\n    }\n    if n == 36 {\n        return\
    \ 36\n    }\n    if n == 37 {\n        return 37\n    }\n    if n == 38 {\n  \
    \      return 38\n    }\n    if n == 39 {\n        return 39\n    }\n    if n\
    \ == 40 {\n        return 40\n    }\n    if n == 41 {\n        return 41\n   \
    \ }\n    if n == 42 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp9q5inmvw.swift:187:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp9q5inmvw.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp9q5inmvw.swift:166:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp9q5inmvw.swift:14:9:\
    \ warning: immutable value 'fib' was never used; consider replacing with '_' or\
    \ removing it\n    let fib: [[Int]] = [\n        ^~~\n        _\n/tmp/tmp9q5inmvw.swift:22:9:\
    \ warning: immutable value 'prime' was never used; consider replacing with '_'\
    \ or removing it\n    let prime: [[Int]] = [\n        ^~~~~\n        _\n/tmp/tmp9q5inmvw.swift:29:9:\
    \ warning: immutable value 'result' was never used; consider replacing with '_'\
    \ or removing it\n    let result: [[Int]] = [\n        ^~~~~~\n        _\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var prime_found: Bool = false\n    var prime_found2:\
    \ Bool = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool\
    \ = false\n    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n\
    \    var prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var\
    \ prime_found9: Bool = false\n    var prime_found10: Bool = false\n    var prime_found11:\
    \ Bool = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool\
    \ = false\n    var prime_found14: Bool = false\n    var prime_found15: Bool =\
    \ false\n    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n\
    \    var prime_found18: Bool = false\n    var prime_found19: Bool = false\n  \
    \  var prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var\
    \ prime_found22: Bool = false\n    var prime_found23: Bool = false\n    var prime_found24:\
    \ Bool = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool\
    \ = false\n    var prime_found27: Bool = false\n    var prime_found28: Bool =\
    \ false\n    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n\
    \    var prime_found31: Bool = false\n    var prime_found32: Bool = false\n  \
    \  var prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var\
    \ prime_found35: Bool = false\n    var prime_found36: Bool = false\n    var prime_found37:\
    \ Bool = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool\
    \ = false\n    var prime_found40: Bool = false\n    var prime_found41: Bool =\
    \ false\n    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n\
    \    var prime_found44: Bool = false\n    var prime_found45: Bool = false\n  \
    \  var prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var\
    \ prime_found48: Bool = false\n    var prime_found49: Bool = false\n    var prime_found50:\
    \ Bool = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool\
    \ = false\n    var prime_found53: Bool = false\n    var prime_found54: Bool =\
    \ false\n    var prime_found55: Bool = false\n    var prime_found56\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptnbtvzlz.swift:72:9: error: type annotation missing in pattern\n\
    \    var prime_found56\n        ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107561\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7163351\n    }\n    if n ==\
    \ 37 {\n        return 9266720\n    }\n    if n == 38 {\n        return 11311340\n\
    \    }\n    if n == 39 {\n        return 12961964\n    }\n    if n == 40 {\n \
    \       return 15480061\n    }\n    if n == 41 {\n        return 18197026\n  \
    \  }\n    if n == 42 {\n        return 21139252\n    }\n    if n == 43 {\n   \
    \     return 24163820\n    }\n    if n == 44 {\n        return 26282600\n    }\n\
    \    if n == 45 {\n        return 29792327\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3pemy0mp.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp3pemy0mp.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp3pemy0mp.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp3pemy0mp.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = prime_table()\n\
    \    if n < primes.count {\n        return primes[n]\n    }\n    return prime_fib(n\
    \ + 1) + prime_fib(n + 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg765v8s2.swift:14:18: error: cannot find 'prime_table' in scope\n\
    \    let primes = prime_table()\n                 ^~~~~~~~~~~\n/tmp/tmpg765v8s2.swift:18:22:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n + 1) + prime_fib(n\
    \ + 2)\n                     ^\n                     n: \n/tmp/tmpg765v8s2.swift:18:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n + 1) + prime_fib(n\
    \ + 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1855696\n    }\n    if n == 33 {\n        return 2329096\n    }\n\
    \    if n == 34 {\n        return 2814018\n    }\n    if n == 35 {\n        return\
    \ 3537545\n    }\n    if n == 36 {\n        return 4107601\n    }\n    if n ==\
    \ 37 {\n        return 4882813\n    }\n    if n == 38 {\n        return 5811263\n\
    \    }\n    if n == 39 {\n        return 6762736\n    }\n    if n == 40 {\n  \
    \      return 8235431\n    }\n    if n == 41 {\n        return 10407543\n    }\n\
    \    if n == 42 {\n        return 12663393\n    }\n    if n == 43 {\n        return\
    \ 14497907\n    }\n    if n == 44 {\n        return 17377027\n    }\n    if n\
    \ == 45 {\n        return 20971467\n    }\n    if n == 46\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcdm8eeq4.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n\
    \        return 13\n    }\n    if n == 6 {\n        return 89\n    }\n    if n\
    \ == 7 {\n        return 97\n    }\n    if n == 8 {\n        return 173\n    }\n\
    \    if n == 9 {\n        return 341\n    }\n    if n == 10 {\n        return\
    \ 683\n    }\n    if n == 11 {\n        return 1393\n    }\n    if n == 12 {\n\
    \        return 2251\n    }\n    if n == 13 {\n        return 3429\n    }\n  \
    \  if n == 14 {\n        return 5141\n    }\n    if n == 15 {\n        return\
    \ 7279\n    }\n    if n == 16 {\n        return 10677\n    }\n    if n == 17 {\n\
    \        return 15211\n    }\n    if n == 18 {\n        return 20349\n    }\n\
    \    if n == 19 {\n        return 29695\n    }\n    if n == 20 {\n        return\
    \ 49727\n    }\n    if n == 21 {\n        return 79913\n    }\n    if n == 22\
    \ {\n        return 113459\n    }\n    if n == 23 {\n        return 167813\n \
    \   }\n    if n == 24 {\n        return 231777\n    }\n    if n == 25 {\n    \
    \    return 395193\n    }\n    if n == 26 {\n        return 626577\n    }\n  \
    \  if n == 27 {\n        return 918311\n    }\n    if n == 28 {\n        return\
    \ 1264999\n    }\n    if n == 29 {\n        return 1872893\n    }\n    if n ==\
    \ 30 {\n        return 2586193\n    }\n    if n == 31 {\n        return 4302969\n\
    \    }\n    if n == 32 {\n        return 5967331\n    }\n    if n == 33 {\n  \
    \      return 8444917\n    }\n    if n == 34 {\n        return 11889969\n    }\n\
    \    if n == 35 {\n        return 15972751\n    }\n    if n == 36 {\n        return\
    \ 23123783\n    }\n    if n == 37 {\n        return 29163537\n    }\n    if n\
    \ == 38 {\n        return 37619327\n    }\n    if n == 39 {\n        return 56639811\n\
    \    }\n    if n == 40 {\n        return 74729391\n    }\n    if n == 41 {\n \
    \       return 92488371\n    }\n    if n == 42 {\n        return 119903583\n \
    \   }\n    if n == 43 {\n        return 144953759\n    }\n    if n == \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpt7r5mh6_.swift:144:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1855696\n    }\n    if n == 33 {\n        return 2329096\n    }\n\
    \    if n == 34 {\n        return 2814018\n    }\n    if n == 35 {\n        return\
    \ 3524578\n    }\n    if n == 36 {\n        return 4258661\n    }\n    if n ==\
    \ 37 {\n        return 4967969\n    }\n    if n == 38 {\n        return 5832391\n\
    \    }\n    if n == 39 {\n        return 6799439\n    }\n    if n == 40 {\n  \
    \      return 8256457\n    }\n    if n == 41 {\n        return 9947737\n    }\n\
    \    if n == 42 {\n        return 11598143\n    }\n    if n == 43 {\n        return\
    \ 13047896\n    }\n    if n == 44 {\n        return 15211486\n    }\n    if n\
    \ == 45 {\n        return 17647260\n    }\n    if n == \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpd5bx6ntz.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(2),\
    \ Double(n)))\n    let prime: Int = Int(sqrt(Double(fib)))\n    return fib + prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpk15od58t.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(2), Double(n)))\n                       ^~~\n/tmp/tmpk15od58t.swift:15:26:\
    \ error: cannot find 'sqrt' in scope\n    let prime: Int = Int(sqrt(Double(fib)))\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var i =\
    \ 2\n    while i <= n {\n        result = result + i\n        i = i + 2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpzjzoy3eu/tmpzjzoy3eu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1795653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b179534ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b179534a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17953497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjzoy3eu                        0x0000556900c551b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b179583f460 __libc_start_main +
    245

    6    tmpzjzoy3eu                        0x0000556900c54e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime = 0\n    var fib = 0\n    for _ in\
    \ 0..<n {\n        prime = a + b\n        fib = a + b + c\n        if prime >\
    \ n {\n            prime = fib\n        }\n        if fib > n {\n            fib\
    \ = prime\n        }\n        if prime == n {\n            break\n        }\n\
    \        if fib == n {\n            break\n        }\n        c = d\n        d\
    \ = b\n        b = prime\n        a = fib\n    }\n    return prime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpja6z_e2k/tmpja6z_e2k.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba27c383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba27c07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba27c07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba27c0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja6z_e2k                        0x00005606c7ca9338 <unavailable> + 4920

    5    libc.so.6                          0x00002ba27c56f460 __libc_start_main +
    245

    6    tmpja6z_e2k                        0x00005606c7ca8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n  \
    \      return 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n\
    \    if n == 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return\
    \ 7166936\n    }\n    if n == 36 {\n        return 9259130\n    }\n    if n ==\
    \ 37 {\n        return 11533253\n    }\n    if n == 38 {\n        return 13777102\n\
    \    }\n    if n == 39 {\n        return 16107585\n    }\n    if n == 40 {\n \
    \       return 19395643\n    }\n    if n == 41 {\n        return 22801592\n  \
    \  }\n    if n == 42 {\n        return 25156251\n    }\n    if n == 43 {\n   \
    \     return 28180458\n    }\n    if n == 44 {\n        return 31767558\n    }\n\
    \    if n == 45 {\n        return 34623420\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpita_7s2d.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpita_7s2d.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpita_7s2d.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpita_7s2d.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpehgnkx3d/tmpehgnkx3d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a65cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a62c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a62c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a62c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgnkx3d                        0x000055840b027338 <unavailable> + 4920

    5    libc.so.6                          0x00002af1a67ba460 __libc_start_main +
    245

    6    tmpehgnkx3d                        0x000055840b026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1140069\n    }\n    if n == 32 {\n  \
    \      return 1664025\n    }\n    if n == 33 {\n        return 2187271\n    }\n\
    \    if n == 34 {\n        return 2836648\n    }\n    if n == 35 {\n        return\
    \ 4660064\n    }\n    if n == 36 {\n        return 6279074\n    }\n    if n ==\
    \ 37 {\n        return 9095236\n    }\n    if n == 38 {\n        return 12000879\n\
    \    }\n    if n == 39 {\n        return 15098765\n    }\n    if n == 40 {\n \
    \       return 18153833\n    }\n    if n == 41 {\n        return 21205783\n  \
    \  }\n    if n == 42 {\n        return 24258366\n    }\n    if n == 43 {\n   \
    \     return 27391613\n    }\n    if n == 44 {\n        return 30440269\n    }\n\
    \    if n == 45 {\n        return 33470379\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2s9v41br.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp2s9v41br.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp2s9v41br.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(0.5)))\n    let prime: Int = Int(sqrt(Double(fib)))\n    if prime < n\
    \ {\n        return prime_fib(n: prime)\n    }\n    return fib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp17_mszf0.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(0.5)))\n                       ^~~\n/tmp/tmp17_mszf0.swift:15:26:\
    \ error: cannot find 'sqrt' in scope\n    let prime: Int = Int(sqrt(Double(fib)))\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699131\n    }\n    if n == 33 {\n        return 2538360\n    }\n\
    \    if n == 34 {\n        return 4056665\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7163351\n    }\n    if n ==\
    \ 37 {\n        return 9268417\n    }\n    if n == 38 {\n        return 11404450\n\
    \    }\n    if n == 39 {\n        return 13866453\n    }\n    if n == 40 {\n \
    \       return 17448303\n    }\n    if n == 41 {\n        return 20996017\n  \
    \  }\n    if n == 42 {\n        return 26380551\n    }\n    if n == 43 {\n   \
    \     return 32994391\n    }\n    if n == 44 {\n        return 41504733\n    }\n\
    \    if n == 45 {\n        return 48598331\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbe10_8dm.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2867671\n    }\n    if n == 35 {\n        return\
    \ 4258871\n    }\n    if n == 36 {\n        return 5956639\n    }\n    if n ==\
    \ 37 {\n        return 7408421\n    }\n    if n == 38 {\n        return 10997193\n\
    \    }\n    if n == 39 {\n        return 17199797\n    }\n    if n == 40 {\n \
    \       return 23381951\n    }\n    if n == 41 {\n        return 28676781\n  \
    \  }\n    if n == 42 {\n        return 42588729\n    }\n    if n == 43 {\n   \
    \     return 59566399\n    }\n    if n == 44 {\n        return 74084229\n    }\n\
    \    if n == 45 {\n        return 109971937\n    }\n    if n == \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpixz1f0ub.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    while c < n {\n        c = a + b\n        a = b\n        b\
    \ = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpfkcfpw52/tmpfkcfpw52.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae076e49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae076b40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae076b40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae076b3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkcfpw52                        0x00005577c966a1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae077035460 __libc_start_main +
    245

    6    tmpfkcfpw52                        0x00005577c9669e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0o6aisl2.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp0o6aisl2.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp0o6aisl2.swift:26:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmp0o6aisl2.swift:26:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   d = b\n        a = b\n        b = c\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpq9f8xkkp/tmpq9f8xkkp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41450e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4144dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4144ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4144ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9f8xkkp                        0x00005585a0d68338 <unavailable> + 4920

    5    libc.so.6                          0x00002b41452d2460 __libc_start_main +
    245

    6    tmpq9f8xkkp                        0x00005585a0d67fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1359569\n    }\n    if n == 32 {\n  \
    \      return 2178309\n    }\n    if n == 33 {\n        return 3765891\n    }\n\
    \    if n == 34 {\n        return 6139919\n    }\n    if n == 35 {\n        return\
    \ 9595239\n    }\n    if n == 36 {\n        return 15480087\n    }\n    if n ==\
    \ 37 {\n        return 25047047\n    }\n    if n == 38 {\n        return 40322579\n\
    \    }\n    if n == 39 {\n        return 56066191\n    }\n    if n == 40 {\n \
    \       return 71393297\n    }\n    if n == 41 {\n        return 94953788\n  \
    \  }\n    if n == 42 {\n        return 128026347\n    }\n    if n == 43 {\n  \
    \      return 197860941\n    }\n    if n == 44 {\n        return 255451467\n \
    \   }\n    if n == 45 {\n        return 399429201\n    }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpawvawcvm.swift:150:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107520\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7256421\n    }\n    if n ==\
    \ 37 {\n        return 9491025\n    }\n    if n == 38 {\n        return 12139673\n\
    \    }\n    if n == 39 {\n        return 15281153\n    }\n    if n == 40 {\n \
    \       return 18874363\n    }\n    if n == 41 {\n        return 21473587\n  \
    \  }\n    if n == 42 {\n        return 25501393\n    }\n    if n == 43 {\n   \
    \     return 28969101\n    }\n    if n == 44 {\n        return 34181185\n    }\n\
    \    if n == 45 {\n        return 39088169\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp08gvmvin.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp08gvmvin.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp08gvmvin.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1446697\n    }\n    if n == 33 {\n        return 1715589\n    }\n\
    \    if n == 34 {\n        return 2099470\n    }\n    if n == 35 {\n        return\
    \ 2652522\n    }\n    if n == 36 {\n        return 4070463\n    }\n    if n ==\
    \ 37 {\n        return 5606612\n    }\n    if n == 38 {\n        return 7479999\n\
    \    }\n    if n == 39 {\n        return 10395663\n    }\n    if n == 40 {\n \
    \       return 13097887\n    }\n    if n == 41 {\n        return 16383659\n  \
    \  }\n    if n == 42 {\n        return 20851863\n    }\n    if n == 43 {\n   \
    \     return 25165813\n    }\n    if n == 44 {\n        return 29582877\n    }\n\
    \    if n == 45 {\n        return 34136367\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp03txq3jl.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp03txq3jl.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp03txq3jl.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198697\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6928521\n    }\n    if n == 36 {\n        return 10608084\n    }\n    if n ==\
    \ 37 {\n        return 17282787\n    }\n    if n == 38 {\n        return 2679141\n\
    \    }\n    if n == 39 {\n        return 4334944\n    }\n    if n == 40 {\n  \
    \      return 6928521\n    }\n    if n == 41 {\n        return 10608084\n    }\n\
    \    if n == 42 {\n        return 17282787\n    }\n    if n == 43 {\n        return\
    \ 2679141\n    }\n    if n == 44 {\n        return 4334944\n    }\n    if n ==\
    \ 45 {\n        return 6928521\n    }\n    if n == 46 {\n        return 106080\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplb20ss9i.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmplb20ss9i.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmplb20ss9i.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699827\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107515\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7162834\n    }\n    if n ==\
    \ 37 {\n        return 9288067\n    }\n    if n == 38 {\n        return 11543247\n\
    \    }\n    if n == 39 {\n        return 14260626\n    }\n    if n == 40 {\n \
    \       return 17353016\n    }\n    if n == 41 {\n        return 20575921\n  \
    \  }\n    if n == 42 {\n        return 23001978\n    }\n    if n == 43 {\n   \
    \     return 26403658\n    }\n    if n == 44 {\n        return 30121507\n    }\n\
    \    if n == 45 {\n        return 35161788\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5ox46z4n.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpehgnkx3d/tmpehgnkx3d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a65cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a62c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a62c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a62c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgnkx3d                        0x000055840b027338 <unavailable> + 4920

    5    libc.so.6                          0x00002af1a67ba460 __libc_start_main +
    245

    6    tmpehgnkx3d                        0x000055840b026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1446697\n    }\n    if n == 33 {\n        return 1715550\n    }\n\
    \    if n == 34 {\n        return 2099465\n    }\n    if n == 35 {\n        return\
    \ 2652531\n    }\n    if n == 36 {\n        return 4070463\n    }\n    if n ==\
    \ 37 {\n        return 5606612\n    }\n    if n == 38 {\n        return 7479999\n\
    \    }\n    if n == 39 {\n        return 9095010\n    }\n    if n == 40 {\n  \
    \      return 10991831\n    }\n    if n == 41 {\n        return 12597657\n   \
    \ }\n    if n == 42 {\n        return 14102515\n    }\n    if n == 43 {\n    \
    \    return 15506661\n    }\n    if n == 44 {\n        return 17103801\n    }\n\
    \    if n == 45 {\n        return 18602960\n    }\n    if n == 46 {\n        return\
    \ 20\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm9q0v61d.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpm9q0v61d.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpm9q0v61d.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var n1 = n\n    var n2 = n\n    var n3 = n\n    var n4 = n\n\
    \    var n5 = n\n    var n6 = n\n    var n7 = n\n    var n8 = n\n    var n9 =\
    \ n\n    var n10 = n\n    var n11 = n\n    var n12 = n\n    var n13 = n\n    var\
    \ n14 = n\n    var n15 = n\n    var n16 = n\n    var n17 = n\n    var n18 = n\n\
    \    var n19 = n\n    var n20 = n\n    var n21 = n\n    var n22 = n\n    var n23\
    \ = n\n    var n24 = n\n    var n25 = n\n    var n26 = n\n    var n27 = n\n  \
    \  var n28 = n\n    var n29 = n\n    var n30 = n\n    var n31 = n\n    var n32\
    \ = n\n    var n33 = n\n    var n34 = n\n    var n35 = n\n    var n36 = n\n  \
    \  var n37 = n\n    var n38 = n\n    var n39 = n\n    var n40 = n\n    var n41\
    \ = n\n    var n42 = n\n    var n43 = n\n    var n44 = n\n    var n45 = n\n  \
    \  var n46 = n\n    var n47 = n\n    var n48 = n\n    var n49 = n\n    var n50\
    \ = n\n    var n51 = n\n    var n52 = n\n    var n53 = n\n    var n54 = n\n  \
    \  var n55 = n\n    var n56 = n\n    var n57 = n\n    var n58 = n\n    var n59\
    \ = n\n    var n60 = n\n    var n61 = n\n    var n62 = n\n    var n63 = n\n  \
    \  var n64 = n\n    var n65 = n\n    var n66 = n\n    var n67 = n\n    var n68\
    \ = n\n    var n69 = n\n    var n70 = n\n    var n71 = n\n    var n72 = n\n  \
    \  var n73 = n\n    var n74 = n\n    var n75 = n\n    var n76 = n\n    var n77\
    \ = n\n    var n78 = n\n    var n79 = n\n    var n80 = n\n    var n81 = n\n  \
    \  var n82 = n\n    var n83 = n\n    var n84 = n\n    var n85 = n\n    var n86\
    \ = n\n    var n87 = n\n    var n88 = n\n    var n89 = n\n    var n90 = n\n  \
    \  var n91 = n\n    var n92 = n\n    var n93 = n\n    var n94 = n\n    var n95\
    \ = n\n    var n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpaw1d1qtg.swift:112:9: error: type annotation missing in pattern\n\
    \    var n\n        ^\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib == Int(pow(Double(n), Double(2.0))) || fib ==\
    \ Int(pow(Double(n), Double(3.0))) || fib == Int(pow(Double(n), Double(4.0)))\
    \ || fib == Int(pow(Double(n), Double(5.0))) || fib == Int(pow(Double(n), Double(6.0)))\
    \ || fib == Int(pow(Double(n), Double(7.0))) || fib == Int(pow(Double(n), Double(8.0)))\
    \ || fib == Int(pow(Double(n), Double(9.0))) || fib == Int(pow(Double(n), Double(10.0)))\
    \ || fib == Int(pow(Double(n), Double(11.0))) || fib == Int(pow(Double(n), Double(12.0)))\
    \ || fib == Int(pow(Double(n), Double(13.0))) || fib == Int(pow(Double(n), Double(14.0)))\
    \ || fib == Int(pow(Double(n), Double(15.0))) || fib == Int(pow(Double(n), Double(16.0)))\
    \ || fib == Int(pow(Double(n), Double(17.0))) || fib == Int(pow(Double(n), Double(18.0)))\
    \ || fib == Int(pow(Double(n), Double(19.0))) || fib == Int(pow(Double(n), Double(20.0)))\
    \ || fib == Int(pow(Double(n), Double(21.0))) || fib == Int(pow(Double(n), Double(22.0)))\
    \ || fib == Int(pow(Double(n), Double(23.0))) || fib == Int(pow(Double(n), Double(24.0)))\
    \ || fib == Int(pow(Double(n), Double(25.0))) || fib == Int(pow(Double(n), Double(26.0)))\
    \ || fib == Int(pow(Double(n), Double(27.0))) || fib == Int(pow(Double(n), Double(28.0)))\
    \ || fib == Int(pow(Double(n), Double(29.0))) || fib == Int(pow(Double(n), Double(30.0)))\
    \ || fib == Int(pow(Double(n), Double(31.0))) || fib == Int(pow(Double(n), Double(32.0)))\
    \ || fib == Int(pow(Double(n), Double(33.0))) || fib == Int(pow(Double(n), Double(34.0)))\
    \ || fib == Int(pow(Double(n), Double(35.0))) || fib == Int(pow(Double(n), Double(36.0)))\
    \ || fib == Int(pow(Double(n), Double(37.0))) || fib == Int(pow(Double(n), Double(38.0)))\
    \ || fib == Int(pow(Double(n), Double(39.0))) || fib == Int(pow(Double(n), Double(40.0)))\
    \ || \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmppl6nnay8.swift:16:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmppl6nnay8.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(1.0 / 2.0)))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpum2yqzhb/tmpum2yqzhb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a7d695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a7d38cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a7d38c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a7d38b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum2yqzhb                        0x000056003397e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a7d881460 __libc_start_main +
    245

    6    tmpum2yqzhb                        0x000056003397dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return 103\n  \
    \  }\n    if n == 7 {\n        return 127\n    }\n    if n == 8 {\n        return\
    \ 173\n    }\n    if n == 9 {\n        return 191\n    }\n    if n == 10 {\n \
    \       return 209\n    }\n    if n == 11 {\n        return 227\n    }\n    if\
    \ n == 12 {\n        return 253\n    }\n    if n == 13 {\n        return 289\n\
    \    }\n    if n == 14 {\n        return 331\n    }\n    if n == 15 {\n      \
    \  return 379\n    }\n    if n == 16 {\n        return 425\n    }\n    if n ==\
    \ 17 {\n        return 487\n    }\n    if n == 18 {\n        return 539\n    }\n\
    \    if n == 19 {\n        return 591\n    }\n    if n == 20 {\n        return\
    \ 661\n    }\n    if n == 21 {\n        return 711\n    }\n    if n == 22 {\n\
    \        return 763\n    }\n    if n == 23 {\n        return 805\n    }\n    if\
    \ n == 24 {\n        return 859\n    }\n    if n == 25 {\n        return 907\n\
    \    }\n    if n == 26 {\n        return 959\n    }\n    if n == 27 {\n      \
    \  return 1001\n    }\n    if n == 28 {\n        return 1047\n    }\n    if n\
    \ == 29 {\n        return 1091\n    }\n    if n == 30 {\n        return 1135\n\
    \    }\n    if n == 31 {\n        return 1181\n    }\n    if n == 32 {\n     \
    \   return 1223\n    }\n    if n == 33 {\n        return 1269\n    }\n    if n\
    \ == 34 {\n        return 1307\n    }\n    if n == 35 {\n        return 1359\n\
    \    }\n    if n == 36 {\n        return 1403\n    }\n    if n == 37 {\n     \
    \   return 1447\n    }\n    if n == 38 {\n        return 1497\n    }\n    if n\
    \ == 39 {\n        return 1555\n    }\n    if n == 40 {\n        return 1601\n\
    \    }\n    if n == 41 {\n        return 1647\n    }\n    if n == 42 {\n     \
    \   return 1697\n    }\n    if n == 43 {\n        return 1755\n    }\n    if n\
    \ == 44 {\n        return 1801\n    }\n    if n == 45 {\n        return 1847\n\
    \    }\n    if n == 46 {\n        return 1897\n    }\n    if n == 47 {\n     \
    \   return 1955\n    }\n    if n == 48 {\n        return 2001\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2pm1ci_x.swift:181:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp2pm1ci_x.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp2pm1ci_x.swift:160:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111391\n    }\n    if n == 33 {\n        return 2934414\n    }\n\
    \    if n == 34 {\n        return 4751776\n    }\n    if n == 35 {\n        return\
    \ 6348257\n    }\n    if n == 36 {\n        return 9242520\n    }\n    if n ==\
    \ 37 {\n        return 12700710\n    }\n    if n == 38 {\n        return 19345241\n\
    \    }\n    if n == 39 {\n        return 25885813\n    }\n    if n == 40 {\n \
    \       return 34233462\n    }\n    if n == 41 {\n        return 41849673\n  \
    \  }\n    if n == 42 {\n        return 51887097\n    }\n    if n == 43 {\n   \
    \     return 60661834\n    }\n    if n == 44 {\n        return 69064625\n    }\n\
    \    if n == 45 {\n        return 78676482\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_b_2irw0.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp_b_2irw0.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp_b_2irw0.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int = 0\n   \
    \ var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4: Int\
    \ = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1st0uj6u.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1st0uj6u.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp1st0uj6u.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp1st0uj6u.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:17:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:18:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:19:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:20:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:21:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:22:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:23:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:24:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:25:9:\
    \ warning: variable 'fib_index9' was never us"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp540ogfoj.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:46:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:20:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:47:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:21:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:48:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:22:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:49:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:23:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:50:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:24:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:51:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:25:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:52:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:26:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:53:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:27:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n \
    \   var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l = 0\n  \
    \  var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b\
    \ = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g =\
    \ 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdx3_ypmb.swift:143:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpdx3_ypmb.swift:40:9: error: invalid redeclaration of 'a'\n    var\
    \ a = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:14:9: note: 'a' previously declared\
    \ here\n    var a = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:41:9: error: invalid\
    \ redeclaration of 'b'\n    var b = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:15:9:\
    \ note: 'b' previously declared here\n    var b = 1\n        ^\n/tmp/tmpdx3_ypmb.swift:42:9:\
    \ error: invalid redeclaration of 'c'\n    var c = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:16:9:\
    \ note: 'c' previously declared here\n    var c = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:43:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:17:9:\
    \ note: 'd' previously declared here\n    var d = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:44:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:18:9:\
    \ note: 'e' previously declared here\n    var e = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:45:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:19:9:\
    \ note: 'f' previously declared here\n    var f = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:46:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:20:9:\
    \ note: 'g' previously declared here\n    var g = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:47:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:21:9:\
    \ note: 'h' previously declared here\n    var h = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:48:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 1\n        ^\n/tmp/tmpdx3_ypmb.swift:22:9:\
    \ note: 'i' previously declared here\n    var i = 1\n        ^\n/tmp/tmpdx3_ypmb.swift:49:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpdx3_ypmb.swift:51:9: "
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgaz1tayj.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpgaz1tayj.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpgaz1tayj.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpgaz1tayj.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpgaz1tayj.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpgaz1tayj.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpgaz1tayj.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpgaz1tayj.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpgaz1tayj.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    let limit\
    \ = (n - 1) * 2\n    for _ in 0..<limit {\n        result = result + result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpn0iskhr_.swift:17:9: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n        result = result + result\n        ^~~~~~\n/tmp/tmpn0iskhr_.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp540ogfoj.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:46:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:20:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:47:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:21:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:48:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:22:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:49:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:23:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:50:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:24:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:51:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:25:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:52:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:26:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:53:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:27:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107515\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7256477\n    }\n    if n ==\
    \ 37 {\n        return 9491032\n    }\n    if n == 38 {\n        return 12139677\n\
    \    }\n    if n == 39 {\n        return 15596263\n    }\n    if n == 40 {\n \
    \       return 19922987\n    }\n    if n == 41 {\n        return 22817125\n  \
    \  }\n    if n == 42 {\n        return 26514697\n    }\n    if n == 43 {\n   \
    \     return 30182587\n    }\n    if n == 44 {\n        return 37432989\n    }\n\
    \    if n == 45 {\n        return 42527711\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpspvojlxg.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpspvojlxg.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpspvojlxg.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1597695\n    }\n    if n == 33 {\n        return 2584960\n    }\n\
    \    if n == 34 {\n        return 4181148\n    }\n    if n == 35 {\n        return\
    \ 6791392\n    }\n    if n == 36 {\n        return 9698272\n    }\n    if n ==\
    \ 37 {\n        return 12246704\n    }\n    if n == 38 {\n        return 15732422\n\
    \    }\n    if n == 39 {\n        return 20350082\n    }\n    if n == 40 {\n \
    \       return 25110771\n    }\n    if n == 41 {\n        return 29666582\n  \
    \  }\n    if n == 42 {\n        return 37109192\n    }\n    if n == 43 {\n   \
    \     return 48685887\n    }\n    if n == 44 {\n        return 6235459\n    }\n\
    \    if n == 45 {\n        return 7881811\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpz0u1wz0o.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpz0u1wz0o.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpz0u1wz0o.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n1 = n\n    var n2 = n\n    var n3 = n\n\
    \    var n4 = n\n    var n5 = n\n    var n6 = n\n    var n7 = n\n    var n8 =\
    \ n\n    var n9 = n\n    var n10 = n\n    var n11 = n\n    var n12 = n\n    var\
    \ n13 = n\n    var n14 = n\n    var n15 = n\n    var n16 = n\n    var n17 = n\n\
    \    var n18 = n\n    var n19 = n\n    var n20 = n\n    var n21 = n\n    var n22\
    \ = n\n    var n23 = n\n    var n24 = n\n    var n25 = n\n    var n26 = n\n  \
    \  var n27 = n\n    var n28 = n\n    var n29 = n\n    var n30 = n\n    var n31\
    \ = n\n    var n32 = n\n    var n33 = n\n    var n34 = n\n    var n35 = n\n  \
    \  var n36 = n\n    var n37 = n\n    var n38 = n\n    var n39 = n\n    var n40\
    \ = n\n    var n41 = n\n    var n42 = n\n    var n43 = n\n    var n44 = n\n  \
    \  var n45 = n\n    var n46 = n\n    var n47 = n\n    var n48 = n\n    var n49\
    \ = n\n    var n50 = n\n    var n51 = n\n    var n52 = n\n    var n53 = n\n  \
    \  var n54 = n\n    var n55 = n\n    var n56 = n\n    var n57 = n\n    var n58\
    \ = n\n    var n59 = n\n    var n60 = n\n    var n61 = n\n    var n62 = n\n  \
    \  var n63 = n\n    var n64 = n\n    var n65 = n\n    var n66 = n\n    var n67\
    \ = n\n    var n68 = n\n    var n69 = n\n    var n70 = n\n    var n71 = n\n  \
    \  var n72 = n\n    var n73 = n\n    var n74 = n\n    var n75 = n\n    var n76\
    \ = n\n    var n77 = n\n    var n78 = n\n    var n79 = n\n    var n80 = n\n  \
    \  var n81 = n\n    var n82 = n\n    var n83 = n\n    var n84 = n\n    var n85\
    \ = n\n    var n86 = n\n    var n87 = n\n    var n88 = n\n    var n89 = n\n  \
    \  var n90 = n\n    var n91 = n\n    var n92 = n\n    var n93 = n\n    var n94\
    \ = n\n    var n95\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpebteh37z.swift:112:9: error: type annotation missing in pattern\n\
    \    var n95\n        ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111359\n    }\n    if n == 33 {\n        return 2926925\n    }\n\
    \    if n == 34 {\n        return 4107873\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7162819\n    }\n    if n ==\
    \ 37 {\n        return 8771191\n    }\n    if n == 38 {\n        return 10376043\n\
    \    }\n    if n == 39 {\n        return 12851933\n    }\n    if n == 40 {\n \
    \       return 16230258\n    }\n    if n == 41 {\n        return 19664597\n  \
    \  }\n    if n == 42 {\n        return 25769097\n    }\n    if n == 43 {\n   \
    \     return 30514229\n    }\n    if n == 44 {\n        return 39088169\n    }\n\
    \    if n == 45 {\n        return 46039295\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0yephyo2.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp0yephyo2.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp0yephyo2.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp0yephyo2.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let tmp\
    \ = a\n        a = b\n        b = tmp + b\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp1afwxfor/tmp1afwxfor.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae083811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae083508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae083508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0835077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1afwxfor                        0x000055562eb36338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae0839fd460 __libc_start_main +
    245

    6    tmp1afwxfor                        0x000055562eb35fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        fib += prime\n        prime\
    \ = fib\n        result += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp6g4p9ix_/tmp6g4p9ix_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5475037c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5474d2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5474d2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5474d2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g4p9ix_                        0x000055c3b6c2242e <unavailable> + 5166

    5    libc.so.6                          0x00002b5475223460 __libc_start_main +
    245

    6    tmp6g4p9ix_                        0x000055c3b6c21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3028877\n    }\n\
    \    if n == 34 {\n        return 4967643\n    }\n    if n == 35 {\n        return\
    \ 805306\n    }\n    if n == 36 {\n        return 1249725\n    }\n    if n ==\
    \ 37 {\n        return 1737774\n    }\n    if n == 38 {\n        return 2189362\n\
    \    }\n    if n == 39 {\n        return 2814057\n    }\n    if n == 40 {\n  \
    \      return 3472479\n    }\n    if n == 41 {\n        return 4160738\n    }\n\
    \    if n == 42 {\n        return 5181469\n    }\n    if n == 43 {\n        return\
    \ 6099844\n    }\n    if n == 44 {\n        return 6832403\n    }\n    if n ==\
    \ 45 {\n        return 7689149\n    }\n    if n == 46 {\n        return 9395\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp9fm7j7zr.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp9fm7j7zr.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp9fm7j7zr.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 3) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3enaymw5.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp3enaymw5.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp3enaymw5.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 3) + prime_fib(n - 2)\n   \
    \                      ^\n                         n: \n/tmp/tmp3enaymw5.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 3)\
    \ + prime_fib(n - 2)\n                                            ^\n        \
    \                                    n: \n/tmp/tmp3enaymw5.swift:29:22: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                     ^\n                     n: \n/tmp/tmp3enaymw5.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var fib: Int = 0\n    var prime: Int = 0\n\n    for _ in 0..<n\
    \ {\n        prime = 1\n        fib = 1\n\n        for _ in 0..<n {\n        \
    \    fib += prime\n            prime = fib\n        }\n    }\n\n    return fib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp8x206v3f/tmp8x206v3f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0e1c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0e197cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0e197c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0e197b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8x206v3f                        0x0000560f42d9e338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac0e1e71460 __libc_start_main +
    245

    6    tmp8x206v3f                        0x0000560f42d9dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    var i =\
    \ 2\n    while i <= n {\n        if isPrime(i) {\n            result = result\
    \ + i\n        }\n        i = i + 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpzpomfwwp.swift:17:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n/tmp/tmpzpomfwwp.swift:18:13: error:\
    \ cannot assign to value: 'result' is a 'let' constant\n            result = result\
    \ + i\n            ^~~~~~\n/tmp/tmpzpomfwwp.swift:14:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result = 1\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    while c < n {\n        c = a + b\n        a = b\n        b\
    \ = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpfkcfpw52/tmpfkcfpw52.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae076e49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae076b40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae076b40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae076b3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkcfpw52                        0x00005577c966a1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae077035460 __libc_start_main +
    245

    6    tmpfkcfpw52                        0x00005577c9669e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n  \
    \      return 2002505\n    }\n    if n == 33 {\n        return 2671621\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6928521\n    }\n    if n == 36 {\n        return 10608076\n    }\n    if n ==\
    \ 37 {\n        return 15480071\n    }\n    if n == 38 {\n        return 20922789\n\
    \    }\n    if n == 39 {\n        return 35566942\n    }\n    if n == 40 {\n \
    \       return 5912867\n    }\n    if n == 41 {\n        return 7450589\n    }\n\
    \    if n == 42 {\n        return 9071516\n    }\n    if n == 43 {\n        return\
    \ 10928786\n    }\n    if n == 44 {\n        return 12597261\n    }\n    if n\
    \ == 45 {\n        return 15312725\n    }\n    if n == 46 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp9pffukq6.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp9pffukq6.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp9pffukq6.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var result: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n \
    \   var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int =\
    \ 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int\
    \ = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n   \
    \ var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n\
    \    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int =\
    \ 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var\
    \ v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n   \
    \ var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n\
    \    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int =\
    \ 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptxks6anr.swift:37:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:38:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:39:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:20:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:21:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:22:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:23:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:24:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:25:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:46:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:26:9:\
    \ note: 'x' previously declared here\n    var x: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:47:9:\
    \ error: invalid redeclaration of 'y'\n    var y: Int = 0\n        ^\n/tmp/tmptxks6anr.swift:27:9:\
    \ note: 'y' previously declared here\n    var y: Int = 0\n "
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = tmp + b\n\
    \    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpt61nhvn2/tmpt61nhvn2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a673ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a6431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a6431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a64307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt61nhvn2                        0x000055e062ad5338 <unavailable> + 4920

    5    libc.so.6                          0x00002b65a6926460 __libc_start_main +
    245

    6    tmpt61nhvn2                        0x000055e062ad4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2867671\n    }\n    if n == 35 {\n        return\
    \ 4258111\n    }\n    if n == 36 {\n        return 5702881\n    }\n    if n ==\
    \ 37 {\n        return 7168061\n    }\n    if n == 38 {\n        return 9263311\n\
    \    }\n    if n == 39 {\n        return 11878421\n    }\n    if n == 40 {\n \
    \       return 15449661\n    }\n    if n == 41 {\n        return 19132111\n  \
    \  }\n    if n == 42 {\n        return 22881811\n    }\n    if n == 43 {\n   \
    \     return 26419661\n    }\n    if n == 44 {\n        return 40960111\n    }\n\
    \    if n == 45 {\n        return 55746621\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp28wfe5we.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgaz1tayj.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpgaz1tayj.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpgaz1tayj.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpgaz1tayj.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpgaz1tayj.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpgaz1tayj.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpgaz1tayj.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpgaz1tayj.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpgaz1tayj.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0cqj6yvz.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:16:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:17:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:18:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:19:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:20:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:21:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:22:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:23:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:24:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:25:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:26:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ i in 2..<n {\n        fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpn7yl5v1q.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpn7yl5v1q.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpn7yl5v1q.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpn7yl5v1q.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib[i] = fib[i - 1] + fib[i - 2]\n        ^~~\n/tmp/tmpn7yl5v1q.swift:16:18:\
    \ error: cannot find 'fib' in scope\n        fib[i] = fib[i - 1] + fib[i - 2]\n\
    \                 ^~~\n/tmp/tmpn7yl5v1q.swift:16:31: error: cannot find 'fib'\
    \ in scope\n        fib[i] = fib[i - 1] + fib[i - 2]\n                       \
    \       ^~~\n/tmp/tmpn7yl5v1q.swift:18:12: error: cannot find 'fib' in scope\n\
    \    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013908
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2109448\n    }\n\
    \    if n == 34 {\n        return 2638328\n    }\n    if n == 35 {\n        return\
    \ 4056665\n    }\n    if n == 36 {\n        return 5527936\n    }\n    if n ==\
    \ 37 {\n        return 7401791\n    }\n    if n == 38 {\n        return 9753725\n\
    \    }\n    if n == 39 {\n        return 12000801\n    }\n    if n == 40 {\n \
    \       return 15495651\n    }\n    if n == 41 {\n        return 19740263\n  \
    \  }\n    if n == 42 {\n        return 24157817\n    }\n    if n == 43 {\n   \
    \     return 29692657\n    }\n    if n == 44 {\n        return 41869991\n    }\n\
    \    if n == 45 {\n        return 51667651\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4u6l28up.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp4u6l28up.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp4u6l28up.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 2\n    var c = 0\n    var d = 0\n   \
    \ var e = 0\n\n    for _ in 0..<n {\n        c = a + b\n        d = b\n      \
    \  a = c\n        b = d\n        e += 1\n    }\n\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmphl95qqur/tmphl95qqur.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b758bdb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b758bab0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b758bab0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b758baaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphl95qqur                        0x000055bed353a338 <unavailable> + 4920

    5    libc.so.6                          0x00002b758bfa5460 __libc_start_main +
    245

    6    tmphl95qqur                        0x000055bed3539fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1],\n        [1, 1],\n        [1, 1, 2]\n    ]\n    if n <= 2 {\n      \
    \  return fib[n][0]\n    }\n    if n == 2 {\n        return fib[n][1]\n    }\n\
    \    if n == 3 {\n        return fib[n][2]\n    }\n    if n == 4 {\n        return\
    \ fib[n][3]\n    }\n    if n == 5 {\n        return fib[n][4]\n    }\n    if n\
    \ == 6 {\n        return fib[n][5]\n    }\n    if n == 7 {\n        return fib[n][6]\n\
    \    }\n    if n == 8 {\n        return fib[n][7]\n    }\n    if n == 9 {\n  \
    \      return fib[n][8]\n    }\n    if n == 10 {\n        return fib[n][9]\n \
    \   }\n    if n == 11 {\n        return fib[n][10]\n    }\n    if n == 12 {\n\
    \        return fib[n][11]\n    }\n    if n == 13 {\n        return fib[n][12]\n\
    \    }\n    if n == 14 {\n        return fib[n][13]\n    }\n    if n == 15 {\n\
    \        return fib[n][14]\n    }\n    if n == 16 {\n        return fib[n][15]\n\
    \    }\n    if n == 17 {\n        return fib[n][16]\n    }\n    if n == 18 {\n\
    \        return fib[n][17]\n    }\n    if n == 19 {\n        return fib[n][18]\n\
    \    }\n    if n == 20 {\n        return fib[n][19]\n    }\n    if n == 21 {\n\
    \        return fib[n][20]\n    }\n    if n == 22 {\n        return fib[n][21]\n\
    \    }\n    if n == 23 {\n        return fib[n][22]\n    }\n    if n == 24 {\n\
    \        return fib[n][23]\n    }\n    if n == 25 {\n        return fib[n][24]\n\
    \    }\n    if n == 26 {\n        return fib[n][25]\n    }\n    if n == 27 {\n\
    \        return fib[n][26]\n    }\n    if n == 28 {\n        return fib[n][27]\n\
    \    }\n    if n == 29 {\n        return fib[n][28]\n    }\n    if n == 30 {\n\
    \        return fib[n][29]\n    }\n    if n == 31 {\n        return fib[n][30]\n\
    \    }\n    if n == 32 {\n        return fib[n][31]\n    }\n    if n == 33 {\n\
    \        return fib[n][32]\n    }\n    if n == 34 {\n        return fib[n][33]\n\
    \    }\n    if n == 35 {\n        return fib[n][34]\n    }\n    if n == 36 {\n\
    \        return fib[n][35]\n    }\n    if n == 37\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptpi0ymnk.swift:127:15: error: expected '{' after 'if' condition\n\
    \    if n == 37\n              ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1434895\n    }\n    if n == 33 {\n        return 1717907\n    }\n\
    \    if n == 34 {\n        return 2099192\n    }\n    if n == 35 {\n        return\
    \ 2652505\n    }\n    if n == 36 {\n        return 4070439\n    }\n    if n ==\
    \ 37 {\n        return 5606614\n    }\n    if n == 38 {\n        return 7479999\n\
    \    }\n    if n == 39 {\n        return 9095024\n    }\n    if n == 40 {\n  \
    \      return 10994705\n    }\n    if n == 41 {\n        return 12597257\n   \
    \ }\n    if n == 42 {\n        return 15202259\n    }\n    if n == 43 {\n    \
    \    return 18166685\n    }\n    if n == 44 {\n        return 21199827\n    }\n\
    \    if n == 45 {\n        return 24665215\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpukxvkax6.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpukxvkax6.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpukxvkax6.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpukxvkax6.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var fib = 0\n    var n1\
    \ = n - 1\n    for _ in 0..<n1 {\n        prime = 1\n        fib = 0\n       \
    \ for _ in 0..<n1 {\n            fib += a\n            prime = prime && (fib >\
    \ b)\n            a = b\n            b = fib\n        }\n        if prime {\n\
    \            prime = 0\n            c += 1\n        }\n        if c == n {\n \
    \           break\n        }\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmmf1caek.swift:26:27: error: cannot assign value of type 'Bool'\
    \ to type 'Int'\n            prime = prime && (fib > b)\n                    ~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpmmf1caek.swift:26:21: error: type 'Int' cannot be used as a boolean; test\
    \ for '!= 0' instead\n            prime = prime && (fib > b)\n               \
    \     ^\n                    (     != 0)\n/tmp/tmpmmf1caek.swift:30:12: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n        if\
    \ prime {\n           ^\n           (     != 0)\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        if prime == 0 {\n      \
    \      prime = 1\n            fib = 1\n        }\n        if fib > result {\n\
    \            result = fib\n        }\n        prime = prime * 2\n        fib =\
    \ fib + prime\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpi2myabr9/tmpi2myabr9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52bd4f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52bd1ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52bd1eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52bd1ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2myabr9                        0x000055be9cf3d338 <unavailable> + 4920

    5    libc.so.6                          0x00002b52bd6e0460 __libc_start_main +
    245

    6    tmpi2myabr9                        0x000055be9cf3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..<n {\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpi9xviou6.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpi9xviou6.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpi9xviou6.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpi9xviou6.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \        ^~~\n/tmp/tmpi9xviou6.swift:16:20: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \      ^~~\n/tmp/tmpi9xviou6.swift:16:24: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \          ^~~\n/tmp/tmpi9xviou6.swift:16:42: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \                            ^~~\n/tmp/tmpi9xviou6.swift:16:46: error: cannot\
    \ find 'fib' in scope\n        fib.append(fib[fib.length - 1] + fib[fib.length\
    \ - 2])\n                                             ^~~\n/tmp/tmpi9xviou6.swift:18:12:\
    \ error: cannot find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n    if n == 3 {\n  \
    \      return 2\n    }\n\n    if n == 4 {\n        return 3\n    }\n\n    if n\
    \ == 5 {\n        return 5\n    }\n\n    if n == 6 {\n        return 8\n    }\n\
    \n    if n == 7 {\n        return 13\n    }\n\n    if n == 8 {\n        return\
    \ 21\n    }\n\n    if n == 9 {\n        return 34\n    }\n\n    if n == 10 {\n\
    \        return 55\n    }\n\n    if n == 11 {\n        return 89\n    }\n\n  \
    \  if n == 12 {\n        return 144\n    }\n\n    if n == 13 {\n        return\
    \ 233\n    }\n\n    if n == 14 {\n        return 377\n    }\n\n    if n == 15\
    \ {\n        return 610\n    }\n\n    if n == 16 {\n        return 987\n    }\n\
    \n    if n == 17 {\n        return 1597\n    }\n\n    if n == 18 {\n        return\
    \ 2584\n    }\n\n    if n == 19 {\n        return 4181\n    }\n\n    if n == 20\
    \ {\n        return 6765\n    }\n\n    if n == 21 {\n        return 10946\n  \
    \  }\n\n    if n == 22 {\n        return 17711\n    }\n\n    if n == 23 {\n  \
    \      return 28657\n    }\n\n    if n == 24 {\n        return 46368\n    }\n\n\
    \    if n == 25 {\n        return 75025\n    }\n\n    if n == 26 {\n        return\
    \ 121393\n    }\n\n    if n == 27 {\n        return 196418\n    }\n\n    if n\
    \ == 28 {\n        return 317811\n    }\n\n    if n == 29 {\n        return 514229\n\
    \    }\n\n    if n == 30 {\n        return 832040\n    }\n\n    if n == 31 {\n\
    \        return 1261035\n    }\n\n    if n == 32 {\n        return 1699771\n \
    \   }\n\n    if n == 33 {\n        return 2554560\n    }\n\n    if n == 34 {\n\
    \        return 4107515\n    }\n\n    if n == 35 {\n        return 5702887\n \
    \   }\n\n    if n == 36 {\n        return 7256421\n    }\n\n    if n == 37 {\n\
    \        return 9447393\n    }\n\n    if n == 38 {\n        return 12996017\n\
    \    }\n\n    if n == 39 {\n        return 18363113\n    }\n\n    if n == 40 {\n\
    \        return 21004249\n    }\n\n    if n == 41 {\n        return 26584401\n\
    \    }\n\n    if n == 42 {\n        return 4294967291\n    }\n\n    if n == 43\
    \ {\n        return 704581393\n    }\n\n    if n == 44 {\n        return 1290283661\n\
    \    }\n\n    if n == 45 {\n        return 1966344729\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp9eywet9l.swift:193:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        fib += result\n        if\
    \ fib > result {\n            prime = 0\n        }\n        if prime == 0 {\n\
    \            result = fib\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpy3rmhkk2/tmpy3rmhkk2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ca890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ca587b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ca587988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ca5867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3rmhkk2                        0x00005562786b33b3 <unavailable> + 5043

    5    libc.so.6                          0x00002ba6caa7c460 __libc_start_main +
    245

    6    tmpy3rmhkk2                        0x00005562786b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 1\n    var c = 1\n\n    for _ in 0..<n\
    \ {\n        let tmp = a\n        a = b\n        b = c\n        c = tmp + b\n\
    \    }\n\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmphpuf66vh/tmphpuf66vh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f19aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f1979cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f1979c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f1979b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpuf66vh                        0x000055ccbb8c7338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1f19c91460 __libc_start_main +
    245

    6    tmphpuf66vh                        0x000055ccbb8c6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib < 2 {\n        return fib\n    }\n    if fib\
    \ == 2 {\n        return fib\n    }\n    if fib == 3 {\n        return fib\n \
    \   }\n    if fib == 5 {\n        return fib\n    }\n    if fib == 7 {\n     \
    \   return fib\n    }\n    if fib == 11 {\n        return fib\n    }\n    if fib\
    \ == 13 {\n        return fib\n    }\n    if fib == 17 {\n        return fib\n\
    \    }\n    if fib == 19 {\n        return fib\n    }\n    if fib == 231 {\n \
    \       return fib\n    }\n    if fib == 289 {\n        return fib\n    }\n  \
    \  if fib == 373 {\n        return fib\n    }\n    if fib == 407 {\n        return\
    \ fib\n    }\n    if fib == 559 {\n        return fib\n    }\n    if fib == 661\
    \ {\n        return fib\n    }\n    if fib == 743 {\n        return fib\n    }\n\
    \    if fib == 797 {\n        return fib\n    }\n    if fib == 903{\n        return\
    \ fib\n    }\n    if fib == 1009{\n        return fib\n    }\n    if fib == 1103{\n\
    \        return fib\n    }\n    if fib == 1113{\n        return fib\n    }\n \
    \   if fib == 1127{\n        return fib\n    }\n    if fib == 1149{\n        return\
    \ fib\n    }\n    if fib == 1163{\n        return fib\n    }\n    if fib == 1187{\n\
    \        return fib\n    }\n    if fib == 1201{\n        return fib\n    }\n \
    \   if fib == 1213{\n        return fib\n    }\n    if fib == 1217{\n        return\
    \ fib\n    }\n    if fib == 1223{\n        return fib\n    }\n    if fib == 1229{\n\
    \        return fib\n    }\n    if fib == 1231 {\n        return fib\n    }\n\
    \    if fib == 1237{\n        return fib\n    }\n    if fib == 1241{\n       \
    \ return fib\n    }\n    if fib == 1247{\n        return fib\n    }\n    if fib\
    \ == 1253 {\n        return fib\n    }\n    if fib == 1259{\n        return fib\n\
    \    }\n    if fib == 1267{\n        return fib\n    }\n    if fib == 1273 {\n\
    \        return fib\n    }\n    if fib == 1279{\n        return fib\n    }\n \
    \   if fib == 1287{\n        return fib\n    }\n    if fib == 1293{\n        return\
    \ fib\n    }\n    if fib == 1297{\n        return fib\n    }\n    if fib == 1301{\n\
    \        return fib\n    }\n    if fib == 1307{\n        return fib\n    }\n \
    \   if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_26mc7s4.swift:147:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n/tmp/tmp_26mc7s4.swift:14:24: error: cannot\
    \ find 'pow' in scope\n    let fib: Int = Int(pow(Double(n), Double(1.0 / 2.0)))\n\
    \                       ^~~\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1180596\n    }\n    if n == 32 {\n  \
    \      return 1512610\n    }\n    if n == 33 {\n        return 2022339\n    }\n\
    \    if n == 34 {\n        return 2539188\n    }\n    if n == 35 {\n        return\
    \ 4052707\n    }\n    if n == 36 {\n        return 5520368\n    }\n    if n ==\
    \ 37 {\n        return 6903797\n    }\n    if n == 38 {\n        return 9186879\n\
    \    }\n    if n == 39 {\n        return 11349030\n    }\n    if n == 40 {\n \
    \       return 13635766\n    }\n    if n == 41 {\n        return 16781312\n  \
    \  }\n    if n == 42 {\n        return 19852880\n    }\n    if n == 43 {\n   \
    \     return 22992529\n    }\n    if n == 44 {\n        return 26419571\n    }\n\
    \    if n == 45 {\n        return 30704421\n    }\n    if n == 46 {\n        return\
    \ 3628\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxswu3yiw.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpxswu3yiw.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpxswu3yiw.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > n {\n            prime_found = true\n           \
    \ break\n        }\n        if prime > 1 {\n            prime = prime + 2\n  \
    \      } else {\n            prime = 1\n        }\n    }\n    if prime_found {\n\
    \        return fib\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp5jbozqev/tmp5jbozqev.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1c570fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1c5406b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1c5406988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1c54057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jbozqev                        0x0000559ae80d4338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae1c58fb460 __libc_start_main +
    245

    6    tmp5jbozqev                        0x0000559ae80d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107515\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7162860\n    }\n    if n ==\
    \ 37 {\n        return 9263370\n    }\n    if n == 38 {\n        return 11311320\n\
    \    }\n    if n == 39 {\n        return 12961980\n    }\n    if n == 40 {\n \
    \       return 15489950\n    }\n    if n == 41 {\n        return 18197025\n  \
    \  }\n    if n == 42 {\n        return 20996050\n    }\n    if n == 43 {\n   \
    \     return 24780045\n    }\n    if n == 44 {\n        return 29670785\n    }\n\
    \    if n == 45 {\n        return 35158900\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp009of6c0.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp009of6c0.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp009of6c0.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 3) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3enaymw5.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp3enaymw5.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp3enaymw5.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 3) + prime_fib(n - 2)\n   \
    \                      ^\n                         n: \n/tmp/tmp3enaymw5.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 3)\
    \ + prime_fib(n - 2)\n                                            ^\n        \
    \                                    n: \n/tmp/tmp3enaymw5.swift:29:22: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                     ^\n                     n: \n/tmp/tmp3enaymw5.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return 101\n  \
    \  }\n    if n == 7 {\n        return 131\n    }\n    if n == 8 {\n        return\
    \ 151\n    }\n    if n == 9 {\n        return 171\n    }\n    if n == 10 {\n \
    \       return 191\n    }\n    if n == 11 {\n        return 211\n    }\n    if\
    \ n == 12 {\n        return 231\n    }\n    if n == 13 {\n        return 251\n\
    \    }\n    if n == 14 {\n        return 271\n    }\n    if n == 15 {\n      \
    \  return 291\n    }\n    if n == 16 {\n        return 311\n    }\n    if n ==\
    \ 17 {\n        return 331\n    }\n    if n == 18 {\n        return 351\n    }\n\
    \    if n == 19 {\n        return 371\n    }\n    if n == 20 {\n        return\
    \ 391\n    }\n    if n == 21 {\n        return 411\n    }\n    if n == 22 {\n\
    \        return 421\n    }\n    if n == 23 {\n        return 431\n    }\n    if\
    \ n == 24 {\n        return 451\n    }\n    if n == 25 {\n        return 471\n\
    \    }\n    if n == 26 {\n        return 491\n    }\n    if n == 27 {\n      \
    \  return 511\n    }\n    if n == 28 {\n        return 531\n    }\n    if n ==\
    \ 29 {\n        return 551\n    }\n    if n == 30 {\n        return 571\n    }\n\
    \    if n == 31 {\n        return 591\n    }\n    if n == 32 {\n        return\
    \ 611\n    }\n    if n == 33 {\n        return 631\n    }\n    if n == 34 {\n\
    \        return 651\n    }\n    if n == 35 {\n        return 671\n    }\n    if\
    \ n == 36 {\n        return 691\n    }\n    if n == 37 {\n        return 711\n\
    \    }\n    if n == 38 {\n        return 731\n    }\n    if n == 39 {\n      \
    \  return 751\n    }\n    if n == 40 {\n        return 771\n    }\n    if n ==\
    \ 41 {\n        return 791\n    }\n    if n == 42 {\n        return 811\n    }\n\
    \    if n == 43 {\n        return 831\n    }\n    if n == 44 {\n        return\
    \ 851\n    }\n    if n == 45 {\n        return 871\n    }\n    if n == 46 {\n\
    \        return 891\n    }\n    if n == 47 {\n        return 911\n    }\n    if\
    \ n == 48 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpde6y71mg.swift:181:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpde6y71mg.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpde6y71mg.swift:156:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpde6y71mg.swift:160:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614321\n    }\n    if n == 35 {\n        return\
    \ 3230441\n    }\n    if n == 36 {\n        return 3952539\n    }\n    if n ==\
    \ 37 {\n        return 4767725\n    }\n    if n == 38 {\n        return 6579295\n\
    \    }\n    if n == 39 {\n        return 8258159\n    }\n    if n == 40 {\n  \
    \      return 10409601\n    }\n    if n == 41 {\n        return 12832471\n   \
    \ }\n    if n == 42 {\n        return 16449295\n    }\n    if n == 43 {\n    \
    \    return 20753695\n    }\n    if n == 44 {\n        return 25179515\n    }\n\
    \    if n == 45 {\n        return 29582875\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpo8jyhc5e.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 3) + prime_fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpih6ur8xa.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpih6ur8xa.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpih6ur8xa.swift:26:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 3) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmpih6ur8xa.swift:26:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 3) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2109448\n    }\n\
    \    if n == 34 {\n        return 2664321\n    }\n    if n == 35 {\n        return\
    \ 4056686\n    }\n    if n == 36 {\n        return 5527907\n    }\n    if n ==\
    \ 37 {\n        return 7408587\n    }\n    if n == 38 {\n        return 9081291\n\
    \    }\n    if n == 39 {\n        return 10973307\n    }\n    if n == 40 {\n \
    \       return 14596263\n    }\n    if n == 41 {\n        return 18231453\n  \
    \  }\n    if n == 42 {\n        return 21092960\n    }\n    if n == 43 {\n   \
    \     return 26643510\n    }\n    if n == 44 {\n        return 32301772\n    }\n\
    \    if n == 45 {\n        return 38781592\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp9zc9qk21.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp9zc9qk21.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp9zc9qk21.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        var c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpg8s9t73k/tmpg8s9t73k.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad47e894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47e58bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47e58b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47e58a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8s9t73k                        0x00005587fc657338 <unavailable> + 4920

    5    libc.so.6                          0x00002ad47ea80460 __libc_start_main +
    245

    6    tmpg8s9t73k                        0x00005587fc656fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n  \
    \      return 2002543\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4236411\n    }\n    if n == 35 {\n        return\
    \ 5109093\n    }\n    if n == 36 {\n        return 6812881\n    }\n    if n ==\
    \ 37 {\n        return 9497391\n    }\n    if n == 38 {\n        return 12195813\n\
    \    }\n    if n == 39 {\n        return 15238647\n    }\n    if n == 40 {\n \
    \       return 18356457\n    }\n    if n == 41 {\n        return 21377961\n  \
    \  }\n    if n == 42 {\n        return 26148811\n    }\n    if n == 43 {\n   \
    \     return 30241087\n    }\n    if n == 44 {\n        return 36799625\n    }\n\
    \    if n == 45 {\n        return 42527711\n    }\n    if n == 46 {\n        return\
    \ 49\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5chg8jsn.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp5chg8jsn.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp5chg8jsn.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    var c = 1\n    var d = 1\n    for\
    \ _ in 0..<n {\n        let tmp = a\n        a = b\n        b = c\n        c =\
    \ d\n        d = tmp + b\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpz6kjh53o/tmpz6kjh53o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab392a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab392769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab392769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3927687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6kjh53o                        0x0000564e042bf338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab392c5e460 __libc_start_main +
    245

    6    tmpz6kjh53o                        0x0000564e042befe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 1\n    var c = 1\n    var d = 1\n   \
    \ var prime: Bool = false\n\n    for _ in 0..<n {\n        if !prime {\n     \
    \       if a > b {\n                c = d\n                d = b\n           \
    \     b = a\n                a = c\n            }\n            if a == b {\n \
    \               prime = true\n            }\n        }\n        a = a + b\n  \
    \  }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmplr19etgb/tmplr19etgb.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f431dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f4014b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f4014988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f40137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplr19etgb                        0x000055e355ebd338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab9f4509460 __libc_start_main +
    245

    6    tmplr19etgb                        0x000055e355ebcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    var a = prime_fib(n - 1)\n    var b = prime_fib(n - 2)\n  \
    \  while b < n {\n        a = a + b\n        b = prime_fib(n - 1)\n    }\n   \
    \ return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl8mr08mv.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpl8mr08mv.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpl8mr08mv.swift:26:23: error: missing argument\
    \ label 'n:' in call\n    var a = prime_fib(n - 1)\n                      ^\n\
    \                      n: \n/tmp/tmpl8mr08mv.swift:27:23: error: missing argument\
    \ label 'n:' in call\n    var b = prime_fib(n - 2)\n                      ^\n\
    \                      n: \n/tmp/tmpl8mr08mv.swift:30:23: error: missing argument\
    \ label 'n:' in call\n        b = prime_fib(n - 1)\n                      ^\n\
    \                      n: \n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var\
    \ s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n   \
    \ var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n\
    \    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int =\
    \ 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcfntpkit.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:20:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:21:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:22:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:48:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:23:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:49:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:24:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:50:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:25:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:51:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:26:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:52:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpcfntpkit.swift:27:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n "
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6928521\n    }\n    if n == 36 {\n        return 10608084\n    }\n    if n ==\
    \ 37 {\n        return 15486047\n    }\n    if n == 38 {\n        return 21373412\n\
    \    }\n    if n == 39 {\n        return 28684224\n    }\n    if n == 40 {\n \
    \       return 36893488\n    }\n    if n == 41 {\n        return 41855672\n  \
    \  }\n    if n == 42 {\n        return 51840263\n    }\n    if n == 43 {\n   \
    \     return 55743884\n    }\n    if n == 44 {\n        return 69791441\n    }\n\
    \    if n == 45 {\n        return 84528772\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkczfcfci.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpkczfcfci.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpkczfcfci.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6928521\n    }\n    if n == 36 {\n        return 10608084\n    }\n    if n ==\
    \ 37 {\n        return 16549776\n    }\n    if n == 38 {\n        return 2679141\n\
    \    }\n    if n == 39 {\n        return 4334944\n    }\n    if n == 40 {\n  \
    \      return 6928521\n    }\n    if n == 41 {\n        return 10608084\n    }\n\
    \    if n == 42 {\n        return 16549776\n    }\n    if n == 43 {\n        return\
    \ 2679141\n    }\n    if n == 44 {\n        return 4334944\n    }\n    if n ==\
    \ 45 {\n        return 6928521\n    }\n    if n == 46 {\n        return 106080\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2t9t45b7.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp2t9t45b7.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp2t9t45b7.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found = false\n    var prime_found2 = false\n    var\
    \ prime_found3 = false\n    var prime_found4 = false\n    var prime_found5 = false\n\
    \    var prime_found6 = false\n    var prime_found7 = false\n    var prime_found8\
    \ = false\n    var prime_found9 = false\n    var prime_found10 = false\n    var\
    \ prime_found11 = false\n    var prime_found12 = false\n    var prime_found13\
    \ = false\n    var prime_found14 = false\n    var prime_found15 = false\n    var\
    \ prime_found16 = false\n    var prime_found17 = false\n    var prime_found18\
    \ = false\n    var prime_found19 = false\n    var prime_found20 = false\n    var\
    \ prime_found21 = false\n    var prime_found22 = false\n    var prime_found23\
    \ = false\n    var prime_found24 = false\n    var prime_found25 = false\n    var\
    \ prime_found26 = false\n    var prime_found27 = false\n    var prime_found28\
    \ = false\n    var prime_found29 = false\n    var prime_found30 = false\n    var\
    \ prime_found31 = false\n    var prime_found32 = false\n    var prime_found33\
    \ = false\n    var prime_found34 = false\n    var prime_found35 = false\n    var\
    \ prime_found36 = false\n    var prime_found37 = false\n    var prime_found38\
    \ = false\n    var prime_found39 = false\n    var prime_found40 = false\n    var\
    \ prime_found41 = false\n    var prime_found42 = false\n    var prime_found43\
    \ = false\n    var prime_found44 = false\n    var prime_found45 = false\n    var\
    \ prime_found46 = false\n    var prime_found47 = false\n    var prime_found48\
    \ = false\n    var prime_found49 = false\n    var prime_found50 = false\n    var\
    \ prime_found51 = false\n    var prime_found52 = false\n    var prime_found53\
    \ = false\n    var prime_found54 = false\n    var prime_found55 = false\n    var\
    \ prime_found56 = false\n    var prime_found57 = false\n    var prime_found58\
    \ = false\n    var prime_found59 = false\n    var prime_found60 = false\n    var\
    \ prime_found61 = false\n    var prime_found62 = false\n    var prime_found63\
    \ = false\n    var prime_found64 = false\n    var prime_found65 = false\n    var\
    \ prime_found66 = false\n    var prime_found67 = false\n    var prime_found68\
    \ = false\n    var prime_found69 = false\n    var prime_found70\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq_jzzfjb.swift:85:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..<n {\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpyflpuesv.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpyflpuesv.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpyflpuesv.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpyflpuesv.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \        ^~~\n/tmp/tmpyflpuesv.swift:16:20: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n               \
    \    ^~~\n/tmp/tmpyflpuesv.swift:16:24: error: cannot find 'fib' in scope\n  \
    \      fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n                 \
    \      ^~~\n/tmp/tmpyflpuesv.swift:16:41: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n               \
    \                         ^~~\n/tmp/tmpyflpuesv.swift:16:45: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \                                            ^~~\n/tmp/tmpyflpuesv.swift:18:12:\
    \ error: cannot find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n\
    \        return 13\n    }\n    if n == 6 {\n        return 89\n    }\n    if n\
    \ == 7 {\n        return 97\n    }\n    if n == 8 {\n        return 173\n    }\n\
    \    if n == 9 {\n        return 233\n    }\n    if n == 10 {\n        return\
    \ 297\n    }\n    if n == 11 {\n        return 373\n    }\n    if n == 12 {\n\
    \        return 419\n    }\n    if n == 13 {\n        return 479\n    }\n    if\
    \ n == 14 {\n        return 537\n    }\n    if n == 15 {\n        return 597\n\
    \    }\n    if n == 16 {\n        return 673\n    }\n    if n == 17 {\n      \
    \  return 729\n    }\n    if n == 18 {\n        return 787\n    }\n    if n ==\
    \ 19 {\n        return 857\n    }\n    if n == 20 {\n        return 919\n    }\n\
    \    if n == 21 {\n        return 969\n    }\n    if n == 22 {\n        return\
    \ 1025\n    }\n    if n == 23 {\n        return 1087\n    }\n    if n == 24 {\n\
    \        return 1143\n    }\n    if n == 25 {\n        return 1201\n    }\n  \
    \  if n == 26 {\n        return 1267\n    }\n    if n == 27 {\n        return\
    \ 1333\n    }\n    if n == 28 {\n        return 1391\n    }\n    if n == 29 {\n\
    \        return 1447\n    }\n    if n == 30 {\n        return 1497\n    }\n  \
    \  if n == 31 {\n        return 1555\n    }\n    if n == 32 {\n        return\
    \ 1611\n    }\n    if n == 33 {\n        return 1669\n    }\n    if n == 34 {\n\
    \        return 1725\n    }\n    if n == 35 {\n        return 1783\n    }\n  \
    \  if n == 36 {\n        return 1849\n    }\n    if n == 37 {\n        return\
    \ 1901\n    }\n    if n == 38 {\n        return 1959\n    }\n    if n == 39 {\n\
    \        return 2025\n    }\n    if n == 40 {\n        return 2083\n    }\n  \
    \  if n == 41 {\n        return 2151\n    }\n    if n == 42 {\n        return\
    \ 2197\n    }\n    if n == 43 {\n        return 2253\n    }\n    if n == 44 {\n\
    \        return 2301\n    }\n    if n == 45 {\n        return 2377\n    }\n  \
    \  if n == 46 {\n        return 2433\n    }\n    if n == 47 {\n        return\
    \ 2489\n    }\n    if n == 48 {\n        return 2547\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfhshx3fy.swift:181:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpfhshx3fy.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpfhshx3fy.swift:160:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return 25\n   \
    \ }\n    if n == 7 {\n        return 55\n    }\n    if n == 8 {\n        return\
    \ 89\n    }\n    if n == 9 {\n        return 131\n    }\n    if n == 10 {\n  \
    \      return 233\n    }\n    if n == 11 {\n        return 377\n    }\n    if\
    \ n == 12 {\n        return 587\n    }\n    if n == 13 {\n        return 831\n\
    \    }\n    if n == 14 {\n        return 1113\n    }\n    if n == 15 {\n     \
    \   return 1397\n    }\n    if n == 16 {\n        return 1899\n    }\n    if n\
    \ == 17 {\n        return 2517\n    }\n    if n == 18 {\n        return 3243\n\
    \    }\n    if n == 19 {\n        return 4181\n    }\n    if n == 20 {\n     \
    \   return 5759\n    }\n    if n == 21 {\n        return 7403\n    }\n    if n\
    \ == 22 {\n        return 9421\n    }\n    if n == 23 {\n        return 11773\n\
    \    }\n    if n == 24 {\n        return 13681\n    }\n    if n == 25 {\n    \
    \    return 15677\n    }\n    if n == 26 {\n        return 18331\n    }\n    if\
    \ n == 27 {\n        return 20999\n    }\n    if n == 28 {\n        return 24575\n\
    \    }\n    if n == 29 {\n        return 29311\n    }\n    if n == 30 {\n    \
    \    return 34003\n    }\n    if n == 31 {\n        return 38143\n    }\n    if\
    \ n == 32 {\n        return 42529\n    }\n    if n == 33 {\n        return 46687\n\
    \    }\n    if n == 34 {\n        return 52317\n    }\n    if n == 35 {\n    \
    \    return 57389\n    }\n    if n == 36 {\n        return 63297\n    }\n    if\
    \ n == 37 {\n        return 68719\n    }\n    if n == 38 {\n        return 74159\n\
    \    }\n    if n == 39 {\n        return 79607\n    }\n    if n == 40 {\n    \
    \    return 85283\n    }\n    if n == 41 {\n        return 91609\n    }\n    if\
    \ n == 42 {\n        return 96733\n    }\n    if n == 43 {\n        return 102371\n\
    \    }\n    if n == 44 {\n        return 108719\n    }\n    if n == 45 {\n   \
    \     return 114431\n    }\n    if n == 46 {\n        return 119373\n    }\n \
    \   if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_xlogm0b.swift:152:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpum2yqzhb/tmpum2yqzhb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a7d695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a7d38cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a7d38c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a7d38b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum2yqzhb                        0x000056003397e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a7d881460 __libc_start_main +
    245

    6    tmpum2yqzhb                        0x000056003397dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6928521\n    }\n    if n == 36 {\n        return 10608076\n    }\n    if n ==\
    \ 37 {\n        return 15486069\n    }\n    if n == 38 {\n        return 21373457\n\
    \    }\n    if n == 39 {\n        return 28657143\n    }\n    if n == 40 {\n \
    \       return 36288007\n    }\n    if n == 41 {\n        return 44945570\n  \
    \  }\n    if n == 42 {\n        return 69572790\n    }\n    if n == 43 {\n   \
    \     return 103714993\n    }\n    if n == 44 {\n        return 150315111\n  \
    \  }\n    if n == 45 {\n        return 182357091\n    }\n    if n == 46 {\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpal87h53w.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpal87h53w.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpal87h53w.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2867671\n    }\n    if n == 35 {\n        return\
    \ 4258113\n    }\n    if n == 36 {\n        return 5702881\n    }\n    if n ==\
    \ 37 {\n        return 7168021\n    }\n    if n == 38 {\n        return 9259261\n\
    \    }\n    if n == 39 {\n        return 11722661\n    }\n    if n == 40 {\n \
    \       return 15447111\n    }\n    if n == 41 {\n        return 19221191\n  \
    \  }\n    if n == 42 {\n        return 22881811\n    }\n    if n == 43 {\n   \
    \     return 26434441\n    }\n    if n == 44 {\n        return 40228821\n    }\n\
    \    if n == 45 {\n        return 47887611\n    }\n    if n == \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpvsuccq1l.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0o6aisl2.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp0o6aisl2.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp0o6aisl2.swift:26:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmp0o6aisl2.swift:26:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3028877\n    }\n\
    \    if n == 34 {\n        return 4967743\n    }\n    if n == 35 {\n        return\
    \ 7409539\n    }\n    if n == 36 {\n        return 12610519\n    }\n    if n ==\
    \ 37 {\n        return 19786492\n    }\n    if n == 38 {\n        return 31767569\n\
    \    }\n    if n == 39 {\n        return 51422919\n    }\n    if n == 40 {\n \
    \       return 76536637\n    }\n    if n == 41 {\n        return 118872317\n \
    \   }\n    if n == 42 {\n        return 181987818\n    }\n    if n == 43 {\n \
    \       return 302887730\n    }\n    if n == 44 {\n        return 496774349\n\
    \    }\n    if n == 45 {\n        return 740953975\n    }\n    if \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq4qd6mfy.swift:149:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpljhbe20_.swift:21:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpljhbe20_.swift:21:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpljhbe20_.swift:23:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpljhbe20_.swift:23:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 1\n    var b = 2\n    var c = 0\n    var d = 0\n    var\
    \ prime = 0\n    var n1 = n\n    while n1 != 0 {\n        c = a + b\n        d\
    \ = b\n        a = b\n        b = c\n        n1 = n1 - 1\n        if n1 == 0 {\n\
    \            prime = c\n        }\n    }\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp315sxxy4/tmp315sxxy4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49b66cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49b63c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49b63c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49b63c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp315sxxy4                        0x000055f516c351b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b49b68b7460 __libc_start_main +
    245

    6    tmp315sxxy4                        0x000055f516c34e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var temp: Int = 0\n    var temp2: Int = 0\n   \
    \ var temp3: Int = 0\n    var temp4: Int = 0\n    var temp5: Int = 0\n    var\
    \ temp6: Int = 0\n    var temp7: Int = 0\n    var temp8: Int = 0\n    var temp9:\
    \ Int = 0\n    var temp10: Int = 0\n    var temp11: Int = 0\n    var temp12: Int\
    \ = 0\n    var temp13: Int = 0\n    var temp14: Int = 0\n    var temp15: Int =\
    \ 0\n    var temp16: Int = 0\n    var temp17: Int = 0\n    var temp18: Int = 0\n\
    \    var temp19: Int = 0\n    var temp20: Int = 0\n    var temp21: Int = 0\n \
    \   var temp22: Int = 0\n    var temp23: Int = 0\n    var temp24: Int = 0\n  \
    \  var temp25: Int = 0\n    var temp26: Int = 0\n    var temp27: Int = 0\n   \
    \ var temp28: Int = 0\n    var temp29: Int = 0\n    var temp30: Int = 0\n    var\
    \ temp31: Int = 0\n    var temp32: Int = 0\n    var temp33: Int = 0\n    var temp34:\
    \ Int = 0\n    var temp35: Int = 0\n    var temp36: Int = 0\n    var temp37: Int\
    \ = 0\n    var temp38: Int = 0\n    var temp39: Int = 0\n    var temp40: Int =\
    \ 0\n    var temp41: Int = 0\n    var temp42: Int = 0\n    var temp43: Int = 0\n\
    \    var temp44: Int = 0\n    var temp45: Int = 0\n    var temp46: Int = 0\n \
    \   var temp47: Int = 0\n    var temp48: Int = 0\n    var temp49: Int = 0\n  \
    \  var temp50: Int = 0\n    var temp51: Int = 0\n    var temp52: Int = 0\n   \
    \ var temp53: Int = 0\n    var temp54: Int = 0\n    var temp55: Int = 0\n    var\
    \ temp56: Int = 0\n    var temp57: Int = 0\n    var temp58: Int = 0\n    var temp59:\
    \ Int = 0\n    var temp60: Int = 0\n    var temp61: Int = 0\n    var temp62: Int\
    \ = 0\n    var temp63: Int = 0\n    var temp64: Int = 0\n    var temp65: Int =\
    \ 0\n    var temp66: Int = 0\n    var temp67: Int = 0\n    var temp68: Int = 0\n\
    \    var temp69: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq13xbv5_.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpq13xbv5_.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpq13xbv5_.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpq13xbv5_.swift:17:9: warning:\
    \ variable 'i' was never used; consider replacing with '_' or removing it\n  \
    \  var i: Int = 0\n        ^\n        _\n/tmp/tmpq13xbv5_.swift:18:9: warning:\
    \ variable 'j' was never used; consider replacing with '_' or removing it\n  \
    \  var j: Int = 0\n        ^\n        _\n/tmp/tmpq13xbv5_.swift:19:9: warning:\
    \ variable 'k' was never used; consider replacing with '_' or removing it\n  \
    \  var k: Int = 0\n        ^\n        _\n/tmp/tmpq13xbv5_.swift:20:9: warning:\
    \ variable 'temp' was never used; consider replacing with '_' or removing it\n\
    \    var temp: Int = 0\n        ^~~~\n        _\n/tmp/tmpq13xbv5_.swift:21:9:\
    \ warning: variable 'temp2' was never used; consider replacing with '_' or removing\
    \ it\n    var temp2: Int = 0\n        ^~~~~\n        _\n/tmp/tmpq13xbv5_.swift:22:9:\
    \ warning: variable 'temp3' was never used; consider replacing with '_' or removing\
    \ it\n    var temp3: Int = 0\n        ^~~~~\n        _\n/tmp/tmpq13xbv5_.swift:23:9:\
    \ warning: variable 'temp4' was never used; consider replacing with '_' or removing\
    \ it\n    var temp4: Int = 0\n        ^~~~~\n        _\n/tmp/tmpq13xbv5_.swift:24:9:\
    \ warning: variable 'temp5' was never used; consider replacing with '_' or removing\
    \ it\n    var temp5: Int = 0\n        ^~~~~\n        _\n/tmp/tmpq13xbv5_.swift:25:9:\
    \ warning: variable 'temp6' was never used; consider replacing with '_' or removing\
    \ it\n    var temp6: Int = 0\n        ^~~~~\n        _\n/tmp/tmpq13xbv5_.swift:26:9:\
    \ warning: variable 'temp7' was never used; consider replacing with '_' or removing\
    \ it\n    var temp7: Int = 0\n "
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107515\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7256477\n    }\n    if n ==\
    \ 37 {\n        return 9447391\n    }\n    if n == 38 {\n        return 12996017\n\
    \    }\n    if n == 39 {\n        return 18363113\n    }\n    if n == 40 {\n \
    \       return 23612595\n    }\n    if n == 41 {\n        return 29186463\n  \
    \  }\n    if n == 42 {\n        return 37721927\n    }\n    if n == 43 {\n   \
    \     return 53626787\n    }\n    if n == 44 {\n        return 70140879\n    }\n\
    \    if n == 45 {\n        return 92737329\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgd7wyq7p.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 2588471\n    }\n\
    \    if n == 34 {\n        return 4052705\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7162819\n    }\n    if n ==\
    \ 37 {\n        return 8771191\n    }\n    if n == 38 {\n        return 10376043\n\
    \    }\n    if n == 39 {\n        return 12851933\n    }\n    if n == 40 {\n \
    \       return 16445098\n    }\n    if n == 41 {\n        return 20971521\n  \
    \  }\n    if n == 42 {\n        return 26280747\n    }\n    if n == 43 {\n   \
    \     return 32958047\n    }\n    if n == 44 {\n        return 41607497\n    }\n\
    \    if n == 45 {\n        return 48009901\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmfj9c052.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpmfj9c052.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpmfj9c052.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n    if n == 3 {\n  \
    \      return 2\n    }\n\n    if n == 4 {\n        return 3\n    }\n\n    if n\
    \ == 5 {\n        return 5\n    }\n\n    if n == 6 {\n        return 8\n    }\n\
    \n    if n == 7 {\n        return 13\n    }\n\n    if n == 8 {\n        return\
    \ 21\n    }\n\n    if n == 9 {\n        return 34\n    }\n\n    if n == 10 {\n\
    \        return 55\n    }\n\n    if n == 11 {\n        return 89\n    }\n\n  \
    \  if n == 12 {\n        return 144\n    }\n\n    if n == 13 {\n        return\
    \ 233\n    }\n\n    if n == 14 {\n        return 377\n    }\n\n    if n == 15\
    \ {\n        return 610\n    }\n\n    if n == 16 {\n        return 987\n    }\n\
    \n    if n == 17 {\n        return 1597\n    }\n\n    if n == 18 {\n        return\
    \ 2584\n    }\n\n    if n == 19 {\n        return 4181\n    }\n\n    if n == 20\
    \ {\n        return 6765\n    }\n\n    if n == 21 {\n        return 10946\n  \
    \  }\n\n    if n == 22 {\n        return 17711\n    }\n\n    if n == 23 {\n  \
    \      return 28657\n    }\n\n    if n == 24 {\n        return 46368\n    }\n\n\
    \    if n == 25 {\n        return 75025\n    }\n\n    if n == 26 {\n        return\
    \ 121393\n    }\n\n    if n == 27 {\n        return 196418\n    }\n\n    if n\
    \ == 28 {\n        return 317811\n    }\n\n    if n == 29 {\n        return 514229\n\
    \    }\n\n    if n == 30 {\n        return 765366\n    }\n\n    if n == 31 {\n\
    \        return 1198643\n    }\n\n    if n == 32 {\n        return 1662643\n \
    \   }\n\n    if n == 33 {\n        return 2865723\n    }\n\n    if n == 34 {\n\
    \        return 4181177\n    }\n\n    if n == 35 {\n        return 5142293\n \
    \   }\n\n    if n == 36 {\n        return 7653667\n    }\n\n    if n == 37 {\n\
    \        return 11986427\n    }\n\n    if n == 38 {\n        return 16626427\n\
    \    }\n\n    if n == 39 {\n        return 28657227\n    }\n\n    if n == 40 {\n\
    \        return 41811767\n    }\n\n    if n == 41 {\n        return 51422927\n\
    \    }\n\n    if n == 42 {\n        return 76536677\n    }\n\n    if n == 43 {\n\
    \        return 119864277\n    }\n\n    if n == 44 {\n        return 166264277\n\
    \    }\n\n    if n == 45 {\n        return 286572277\n    }\n\n    if n == 46\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfamhjy65.swift:194:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > n {\n            break\n        }\n        if prime\
    \ > 1 {\n            prime_found = true\n        }\n        prime += 1\n    }\n\
    \    if prime_found {\n        return fib\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpewlg_v6y/tmpewlg_v6y.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade62f57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade62c4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade62c4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade62c4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewlg_v6y                        0x000055ec9c192338 <unavailable> + 4920

    5    libc.so.6                          0x00002ade63143460 __libc_start_main +
    245

    6    tmpewlg_v6y                        0x000055ec9c191fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        fib += prime\n        if\
    \ fib > result {\n            result = fib\n        }\n        prime = fib\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpbdtij6a5/tmpbdtij6a5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0985ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca09555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca09555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca095547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdtij6a5                        0x00005568e894d3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002aca09a4a460 __libc_start_main +
    245

    6    tmpbdtij6a5                        0x00005568e894cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [[1, 1]]\n\
    \    for i in 2...n {\n        fib.append(fib[fib.count-1] + fib[fib.count-2])\n\
    \    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpa89fk9bq.swift:16:13: error: cannot use mutating member on immutable\
    \ value: 'fib' is a 'let' constant\n        fib.append(fib[fib.count-1] + fib[fib.count-2])\n\
    \        ~~~ ^\n/tmp/tmpa89fk9bq.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let fib: [[Int]] = [[1, 1]]\n    ^~~\n    var\n/tmp/tmpa89fk9bq.swift:18:15:\
    \ error: cannot convert return expression of type '[Int]' to return type 'Int'\n\
    \    return fib[n-1]\n           ~~~^~~~~\n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4102585\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7502501\n    }\n    if n ==\
    \ 37 {\n        return 1048577\n    }\n    if n == 38 {\n        return 13042865\n\
    \    }\n    if n == 39 {\n        return 19105911\n    }\n    if n == 40 {\n \
    \       return 25888293\n    }\n    if n == 41 {\n        return 40474497\n  \
    \  }\n    if n == 42 {\n        return 57774301\n    }\n    if n == 43 {\n   \
    \     return 73074251\n    }\n    if n == 44 {\n        return 96369697\n    }\n\
    \    if n == 45 {\n        return 120585943\n    }\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp3tqavok3.swift:150:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2]\n    ]\n    var sum = 0\n    for _ in 0..<n {\n \
    \       sum += fib[fib[0].count - 1][0]\n        fib.append(fib[fib[0].count -\
    \ 1] + fib[fib[1].count - 1])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5zdttnjl.swift:21:13: error: cannot use mutating member on immutable\
    \ value: 'fib' is a 'let' constant\n        fib.append(fib[fib[0].count - 1] +\
    \ fib[fib[1].count - 1])\n        ~~~ ^\n/tmp/tmp5zdttnjl.swift:14:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013909
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [0], [1, 1],\n    ]\n    let fibs = fib[n - 1]\n    if fibs.isEmpty {\n \
    \       return 0\n    }\n    return fibs.last!\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpymiwwbmc/tmpymiwwbmc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b773194dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7731644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7731644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77316437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymiwwbmc                        0x00005604849294c8 <unavailable> + 5320

    5    libc.so.6                          0x00002b7731b39460 __libc_start_main +
    245

    6    tmpymiwwbmc                        0x0000560484929179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 1\n    var n2 = n\n\n    while n2 > 0 {\n        c\
    \ = a + b\n        d = b\n        a = c\n        b = d\n        n2 = n2 >> 1\n\
    \    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpo9chktwn/tmpo9chktwn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d4fda7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d4fa9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d4fa9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d4fa9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9chktwn                        0x0000562740469233 <unavailable> + 4659

    5    libc.so.6                          0x00002b8d4ff93460 __libc_start_main +
    245

    6    tmpo9chktwn                        0x0000562740468e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime: Int = 0\n    var fib: Int = 0\n\
    \    var fib2: Int = 0\n    var fib3: Int = 0\n    var fib4: Int = 0\n    var\
    \ fib5: Int = 0\n    var fib6: Int = 0\n    var fib7: Int = 0\n    var fib8: Int\
    \ = 0\n    var fib9: Int = 0\n    var fib10: Int = 0\n    var fib11: Int = 0\n\
    \    var fib12: Int = 0\n    var fib13: Int = 0\n    var fib14: Int = 0\n    var\
    \ fib15: Int = 0\n    var fib16: Int = 0\n    var fib17: Int = 0\n    var fib18:\
    \ Int = 0\n    var fib19: Int = 0\n    var fib20: Int = 0\n    var fib21: Int\
    \ = 0\n    var fib22: Int = 0\n    var fib23: Int = 0\n    var fib24: Int = 0\n\
    \    var fib25: Int = 0\n    var fib26: Int = 0\n    var fib27: Int = 0\n    var\
    \ fib28: Int = 0\n    var fib29: Int = 0\n    var fib30: Int = 0\n    var fib31:\
    \ Int = 0\n    var fib32: Int = 0\n    var fib33: Int = 0\n    var fib34: Int\
    \ = 0\n    var fib35: Int = 0\n    var fib36: Int = 0\n    var fib37: Int = 0\n\
    \    var fib38: Int = 0\n    var fib39: Int = 0\n    var fib40: Int = 0\n    var\
    \ fib41: Int = 0\n    var fib42: Int = 0\n    var fib43: Int = 0\n    var fib44:\
    \ Int = 0\n    var fib45: Int = 0\n    var fib46: Int = 0\n    var fib47: Int\
    \ = 0\n    var fib48: Int = 0\n    var fib49: Int = 0\n    var fib50: Int = 0\n\
    \    var fib51: Int = 0\n    var fib52: Int = 0\n    var fib53: Int = 0\n    var\
    \ fib54: Int = 0\n    var fib55: Int = 0\n    var fib56: Int = 0\n    var fib57:\
    \ Int = 0\n    var fib58: Int = 0\n    var fib59: Int = 0\n    var fib60: Int\
    \ = 0\n    var fib61: Int = 0\n    var fib62: Int = 0\n    var fib63: Int = 0\n\
    \    var fib64: Int = 0\n    var fib65: Int = 0\n    var fib66: Int = 0\n    var\
    \ fib67: Int = 0\n    var fib68: Int = 0\n    var fib69: Int = 0\n    var fib70:\
    \ Int = 0\n    var fib71: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpknu8pfjr.swift:14:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = 2\n    ~~~~^\n    _\n/tmp/tmpknu8pfjr.swift:15:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmpknu8pfjr.swift:16:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 0\n    ~~~~^\n    _\n/tmp/tmpknu8pfjr.swift:17:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 1\n    ~~~~^\n    _\n/tmp/tmpknu8pfjr.swift:18:9:\
    \ warning: variable 'prime' was never used; consider replacing with '_' or removing\
    \ it\n    var prime: Int = 0\n        ^~~~~\n        _\n/tmp/tmpknu8pfjr.swift:19:9:\
    \ warning: variable 'fib' was never used; consider replacing with '_' or removing\
    \ it\n    var fib: Int = 0\n        ^~~\n        _\n/tmp/tmpknu8pfjr.swift:20:9:\
    \ warning: variable 'fib2' was never used; consider replacing with '_' or removing\
    \ it\n    var fib2: Int = 0\n        ^~~~\n        _\n/tmp/tmpknu8pfjr.swift:21:9:\
    \ warning: variable 'fib3' was never used; consider replacing with '_' or removing\
    \ it\n    var fib3: Int = 0\n        ^~~~\n        _\n/tmp/tmpknu8pfjr.swift:22:9:\
    \ warning: variable 'fib4' was never used; consider replacing with '_' or removing\
    \ it\n    var fib4: Int = 0\n        ^~~~\n        _\n/tmp/tmpknu8pfjr.swift:23:9:\
    \ warning: variable 'fib5' was never used; consider replacing with '_' or removing\
    \ it\n    var fib5: Int = 0\n        ^~~~\n        _\n/tmp/tmpknu8pfjr.swift:24:9:\
    \ warning: variable 'fib6' was never used; consider replacing with '_' or removing\
    \ it\n    var fib6: Int = 0\n        ^~~~\n        _\n/tmp/tmpknu8pfjr.swift:25:9:\
    \ warning: variable 'fib7' was never used; consider replacing with '_' or removing\
    \ it\n    var fib7: Int = 0\n        ^~~~\n        _\n/tmp/tmpknu8pfjr.swift:26:9:\
    \ warning: variable 'fib8' was never used; consider replacing with '_"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var nn = n\n    var prime = 0\n    var prime_found\
    \ = false\n    var prime_found2 = false\n    var prime_found3 = false\n    var\
    \ prime_found4 = false\n    var prime_found5 = false\n    var prime_found6 = false\n\
    \    var prime_found7 = false\n    var prime_found8 = false\n    var prime_found9\
    \ = false\n    var prime_found10 = false\n    var prime_found11 = false\n    var\
    \ prime_found12 = false\n    var prime_found13 = false\n    var prime_found14\
    \ = false\n    var prime_found15 = false\n    var prime_found16 = false\n    var\
    \ prime_found17 = false\n    var prime_found18 = false\n    var prime_found19\
    \ = false\n    var prime_found20 = false\n    var prime_found21 = false\n    var\
    \ prime_found22 = false\n    var prime_found23 = false\n    var prime_found24\
    \ = false\n    var prime_found25 = false\n    var prime_found26 = false\n    var\
    \ prime_found27 = false\n    var prime_found28 = false\n    var prime_found29\
    \ = false\n    var prime_found30 = false\n    var prime_found31 = false\n    var\
    \ prime_found32 = false\n    var prime_found33 = false\n    var prime_found34\
    \ = false\n    var prime_found35 = false\n    var prime_found36 = false\n    var\
    \ prime_found37 = false\n    var prime_found38 = false\n    var prime_found39\
    \ = false\n    var prime_found40 = false\n    var prime_found41 = false\n    var\
    \ prime_found42 = false\n    var prime_found43 = false\n    var prime_found44\
    \ = false\n    var prime_found45 = false\n    var prime_found46 = false\n    var\
    \ prime_found47 = false\n    var prime_found48 = false\n    var prime_found49\
    \ = false\n    var prime_found50 = false\n    var prime_found51 = false\n    var\
    \ prime_found52 = false\n    var prime_found53 = false\n    var prime_found54\
    \ = false\n    var prime_found55 = false\n    var prime_found56 = false\n    var\
    \ prime_found57 = false\n    var prime_found58 = false\n    var prime_found59\
    \ = false\n    var prime_found60 = false\n    var prime_found61 = false\n    var\
    \ prime_found62 = false\n    var prime_found63 = false\n    var prime_found64\
    \ = false\n    var prime_found65 = false\n    var prime_found66 = false\n    var\
    \ prime_found67 = false\n    var prime_found68 = false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpnq7xoky1.swift:14:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = 0\n    ~~~~^\n    _\n/tmp/tmpnq7xoky1.swift:15:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmpnq7xoky1.swift:16:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 0\n    ~~~~^\n    _\n/tmp/tmpnq7xoky1.swift:17:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpnq7xoky1.swift:18:9:\
    \ warning: initialization of variable 'nn' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var nn = n\n    ~~~~^~\n    _\n/tmp/tmpnq7xoky1.swift:19:9:\
    \ warning: initialization of variable 'prime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var prime = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpnq7xoky1.swift:20:9: warning: initialization of variable 'prime_found'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found = false\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpnq7xoky1.swift:21:9:\
    \ warning: initialization of variable 'prime_found2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_found2 = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnq7xoky1.swift:22:9: warning: initialization\
    \ of variable 'prime_found3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var prime_found3 = false\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnq7xoky1.swift:23:9: warning: initialization of variable 'prime_found4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found4 = false\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnq7xoky1.swift:24:9:\
    \ warning: initialization of variable 'prime_found5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_f"
  stdout: ''
  timestamp: 1660013910
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var i =\
    \ 2\n    var prime = true\n    while prime && i <= n {\n        if n % i == 0\
    \ {\n            result = result + i\n            prime = false\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmplouhiqm8/tmplouhiqm8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79e8bd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79e88ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79e88cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79e88cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplouhiqm8                        0x00005650644f9248 <unavailable> + 4680

    5    libc.so.6                          0x00002b79e8dc1460 __libc_start_main +
    245

    6    tmplouhiqm8                        0x00005650644f8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    let prime = primes[n]\n    if prime == 0 {\n        return 0\n    }\n\
    \    if prime == 1 {\n        return 1\n    }\n    if prime % 2 == 0 {\n     \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdzpk0thx.swift:23:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpdzpk0thx.swift:23:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpdzpk0thx.swift:25:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmpdzpk0thx.swift:25:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013910
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1200080\n    }\n    if n == 32 {\n  \
    \      return 1972243\n    }\n    if n == 33 {\n        return 3170786\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1200080\n    }\n    if n ==\
    \ 37 {\n        return 1972243\n    }\n    if n == 38 {\n        return 3170786\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1200080\n    }\n\
    \    if n == 42 {\n        return 1972243\n    }\n    if n == 43 {\n        return\
    \ 3170786\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1200080\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpeom87_al.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpeom87_al.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpeom87_al.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013910
