name: HumanEval_131_digits
language: swift
prompt: "\n/// Given a positive integer n, return the product of the odd digits.\n\
  /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(n: 1)\n///\
  \ 1\n/// >>> digits(n: 4)\n/// 0\n/// >>> digits(n: 235)\n/// 15\nfunc digits(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54)\
  \ == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n:\
  \ 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) ==\
  \ 0)"
completions: ["    if n < 10 {\n        return n\n    }\n    var product = 1\n   \
    \ var remainder = n\n    while remainder > 0 {\n        remainder /= 10\n    \
    \    product *= Int(remainder)\n    }\n    return product", "    if n == 0 {\n\
    \        return 0\n    }\n    var result = 1\n    for digit in n.toString() {\n\
    \        if digit == \"0\" {\n            continue\n        }\n        result\
    \ *= Int(digit)\n    }\n    return result", '    return n % 10', "    if n < 10\
    \ { return n }\n    var result = 0\n    var remainder = n\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 10, remainder % 10\n     \
    \   result = result * 10 + remainder\n    }\n    return result", "    var result\
    \ = 1\n    for _ in 0..<n {\n        result *= n % 10\n        n /= 10\n    }\n\
    \    return result", '    return n % 10', "    if n < 0 {\n        return 0\n\
    \    }\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)\n\
    \    }\n    return product", '    return n % 10', "    if n < 10 {\n        return\
    \ n\n    }\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product", "    if n == 0 {\n        return\
    \ 0\n    }\n    var product = 1\n    var remainder = n\n    while remainder >\
    \ 0 {\n        remainder, remainder = remainder / 10, remainder % 10\n       \
    \ product *= remainder\n    }\n    return product", "    if n < 10 {\n       \
    \ return n\n    }\n    var product = 1\n    var digits = String(n)\n    for index\
    \ in 0..<digits.count {\n        if digits[index] % 2 == 0 {\n            product\
    \ *= Int(digits[index])\n        }\n    }\n    return product", "    var product\
    \ = 1\n    var remainder = n\n    while remainder > 0 {\n        product *= (remainder\
    \ % 10)\n        remainder = (remainder / 10).truncatingRemainder(dividingBy:\
    \ 10)\n    }\n    return product", "    var product = 1\n    for digit in n.toString(radix:\
    \ 2) {\n        product *= Int(digit)!\n    }\n    return product", '    return
    n % 10', "    if n < 0 {\n        return 0\n    }\n    var result = 0\n    var\
    \ remainder = n\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / 10, remainder % 10\n        result = result * 10 + remainder\n    }\n    return\
    \ result", '    return n % 10', '    return n % 10', "    var product = 1\n  \
    \  for d in n.digits {\n        product *= d\n    }\n    return product", "  \
    \  var product = 1\n    for digit in n.digits {\n        product *= digit\n  \
    \  }\n    return product", "    var product = 1\n    for d in n.toDouble().reversed()\
    \ {\n        product *= Double(d)\n    }\n    return Int(product)"]
stop_tokens:
- "\n}"
