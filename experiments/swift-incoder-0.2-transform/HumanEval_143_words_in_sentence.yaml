name: HumanEval_143_words_in_sentence
language: swift
prompt: "\n/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n\
  /// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\"\
  )\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a\
  \ test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\"\
  ) == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
  \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am\
  \ Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for\
  \ it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\"\
  )\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
completions: ['    return words_in_sentence(sentence: sentence.lowercased())', '    return
    words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence:
    sentence.lowercased())', '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence: sentence, words: [], result: "")', "   \
    \ var result = \"\"\n    for word in sentence.split(separator: \" \") {\n    \
    \    if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length())\
    \ {\n            result += word\n        }\n    }\n    return result", '    return
    words_in_sentence_helper(sentence: sentence).joined(separator: " ")', '    return
    words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence:
    sentence.lowercased())', "    let words = sentence.components(separatedBy: \"\
    \ \")\n    var result = \"\"\n    for word in words {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence.characters.split(" "))', '    return words_in_sentence(sentence:
    sentence, words: nil)', "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence.lowercased())', '    return words_in_sentence(sentence: sentence.lowercased())',
  "    let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        if isPrime(word: word) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence: sentence.characters.split(separator: " "))',
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.lowercased())',
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for char\
    \ in sentence {\n        if primeIndex == primes.count {\n            primes.append(1)\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 0 {\n\
    \            primes[primeIndex] = 1\n            if char == \" \" {\n        \
    \        result += char\n            } else {\n                result += String(char)\n\
    \            }\n        } else {\n            primes[primeIndex] += 1\n      \
    \  }\n    }\n    return result", '    return words_in_sentence(sentence.characters.split(separator:
    " "))', '    return words_in_sentence(sentence: sentence.lowercased())', '    return
    words_in_sentence(sentence: sentence, words: [], maxLength: 0)', "    var result\
    \ = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for letter in sentence.characters\
    \ {\n        if primeIndex == primes.count {\n            primes.append(1)\n \
    \           primeIndex = 0\n        }\n        if primes[primeIndex] == 0 {\n\
    \            primes[primeIndex] = 1\n            if letter == \" \" {\n      \
    \          result += letter\n            } else {\n                result += String(letter)\n\
    \            }\n            primeIndex += 1\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence: sentence,
    words: [])', '    return words_in_sentence(sentence: sentence, words: nil)', '    return
    words_in_sentence(sentence.characters.map { String($0) })', "    var result =\
    \ \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    let words = sentence.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let length =\
    \ word.characters.count\n        if length == 2 {\n            let prime = Int(sqrt(Double(length)))\n\
    \            if prime > 1 {\n                result += word\n            }\n \
    \       }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence.characters.map(String.init))', '    return words_in_sentence(sentence:
    sentence.lowercased())', '    return words_in_sentence_(sentence: sentence, words:
    [], index: 0)', "    let words = sentence.components(separatedBy: \" \")\n   \
    \ var result = \"\"\n    for word in words {\n        if isPrime(word: word) {\n\
    \            result += \" \" + word\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for word in sentence.split(separator: \" \") {\n  \
    \      if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence_aux(sentence: sentence,
    words: [], result: "")', '    return words_in_sentence(sentence: sentence.characters.map(String.init))',
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.characters.split("
    "))', "    var result = \"\"\n    for word in sentence.split(separator: \" \"\
    ) {\n        if isPrime(word: word) {\n            result += \" \" + word\n  \
    \      }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrimeNumber(word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence, words: [])', '    return words_in_sentence(sentence: sentence.lowercased())',
  '    return words_in_sentence(sentence: sentence.lowercased())', "    var result\
    \ = \"\"\n    for word in sentence.split(separator: \" \") {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence.lowercased())', "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence_(sentence:
    sentence, words: [])', '    return words_in_sentence(sentence.characters.split("
    "))', '    return words_in_sentence(sentence: sentence.lowercased())', "    var\
    \ result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length)\
    \ == true {\n            result += word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence.lowercased())', '    return words_in_sentence_(sentence:
    sentence, words: [], result: "")', "    let words = sentence.components(separatedBy:\
    \ \" \")\n    let primes = words.map { Int($0) }\n    return primes.joined(separator:\
    \ \" \")", '    return words_in_sentence(sentence.characters.split(" "))', " \
    \   var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > 1 {\n            for letter in sentence.characters {\n\
    \                if prime == letter.length {\n                    result += String(letter)\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence, words: [])', '    return words_in_sentence(sentence:
    sentence.lowercased())', "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(word) {\n            result += \" \" + word\n    \
    \    }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(word.length()) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence.characters.split(separator: " "))', '    return words_in_sentence_(sentence:
    sentence, words: [])', "    var result = \"\"\n    var primes = [1]\n    for char\
    \ in sentence.characters {\n        if primes.contains(char.count) {\n       \
    \     result += char\n        }\n        primes.append(char.count + 1)\n    }\n\
    \    return result", '    return words_in_sentence(sentence.characters.split("
    "))', '    return words_in_sentence_aux(sentence, "")', '    return words_in_sentence(sentence:
    sentence.lowercased())', '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence.characters.split(" "))', '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence: sentence, words: [])', '    return words_in_sentence(sentence.characters.split(separator:
    " "))', '    return words_in_sentence(sentence: sentence.lowercased())', "   \
    \ var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        for letter in sentence.characters\
    \ {\n            if prime == letter {\n                result += String(letter)\n\
    \            }\n        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence, words: [])', "    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for letter in sentence.characters {\n        if primeIndex == primes.count\
    \ {\n            primes.append(primes.last! + 1)\n        }\n        if primes[primeIndex]\
    \ == letters.count {\n            primeIndex += 1\n        }\n    }\n    for prime\
    \ in primes {\n        if prime > letters.count {\n            break\n       \
    \ }\n        for letter in letters {\n            if prime == letters.count {\n\
    \                result += letter\n            }\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for word in sentence.split(separator: \"\
    \ \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence, words: [], lengths: [])', '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence.characters.split(" "))', '    return words_in_sentence_helper(sentence:
    sentence, result: "")', "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(separator: \" \") {\n        if isPrime(word: word) {\n     \
    \       result += \" \" + word\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence.lowercased())', "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word) {\n\
    \            result += \" \" + word\n        }\n    }\n    return result", " \
    \   let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\
    \n    for word in words {\n        let length = word.characters.count\n      \
    \  if isPrime(length) == true {\n            result += word\n        }\n    }\n\
    \    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence.characters.split(separator: " "))', '    return
    words_in_sentence(sentence.characters.map(String.init))', '    return words_in_sentence_(sentence:
    sentence, words: [], index: 0)', '    return words_in_sentence_(sentence: sentence,
    words: nil)', '    return words_in_sentence(sentence.characters.split(separator:
    " "))', "    var result = \"\"\n    for word in sentence.split(separator: \" \"\
    ) {\n        if isPrime(word: word) {\n            result += \" \" + word\n  \
    \      }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrimeNumber(word: word) {\n            result += \" \"\
    \ + word\n        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence.lowercased())', "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(separator: \" \") {\n        if isPrimeNumber(word: word) {\n\
    \            result += \" \" + word\n        }\n    }\n    return result", '    return
    words_in_sentence_helper(sentence: sentence).joined()', '    return words_in_sentence(sentence.characters.split(separator:
    " "))', '    return words_in_sentence(sentence.lowercased())', "    var result\
    \ = \"\"\n    for word in sentence.split(separator: \" \") {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence_(sentence: sentence, words: [], index: 0)', "    var\
    \ result = \"\"\n    for word in sentence.split(separator: \" \") {\n        if\
    \ isPrimeNumber(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence: sentence,
    words: nil)', '    return words_in_sentence_(sentence: sentence, words: [], result:
    "")', "    // write your code here\n    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(word) {\n            result += \" \" + word\n    \
    \    }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence_(sentence:
    sentence, words: [], result: "")', '    return words_in_sentence(sentence: sentence.lowercased())',
  '    return words_in_sentence(sentence.lowercased())', "    var result = \"\"\n\
    \    for word in sentence.split(separator: \" \") {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence_(sentence: sentence)', "    var result = \"\"\n  \
    \  for word in sentence.split(separator: \" \") {\n        if isPrime(word: word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence.characters.map(String.init))', '    return
    words_in_sentence(sentence.characters.split(separator: " "))', "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word) {\n\
    \            result += \" \" + word\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for word in sentence.split(separator: \" \") {\n  \
    \      if isPrimeNumber(word: word) {\n            result += \" \" + word\n  \
    \      }\n    }\n    return result", '    return words_in_sentence(sentence: sentence.characters.split(separator:
    " "))', '    return words_in_sentence(sentence: sentence.lowercased())', '    return
    words_in_sentence(sentence.characters.split(separator: " "))', '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence: sentence.characters.split(separator: " "))',
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letter.length\
    \ {\n                    result += letter\n                }\n            }\n\
    \        }\n    }\n    return result", "    // write your code here\n    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence.characters.map { String($0) })', "    var\
    \ result = \"\"\n    for word in sentence.split(separator: \" \") {\n        if\
    \ isPrimeNumber(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.characters.split(separator:
    " "))', "    let words = sentence.components(separatedBy: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        let length = word.characters.count\n\
    \        if isPrime(length) == true {\n            result += word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence.lowercased())', "    let words = sentence.components(separatedBy: \"\
    \ \")\n    var result = \"\"\n    for word in words {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence.lowercased())', "    var result\
    \ = \"\"\n    for word in sentence.split(separator: \" \") {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for char\
    \ in sentence {\n        if char.isLetter() {\n            if primes[primeIndex]\
    \ == 0 {\n                primes[primeIndex] = 1\n                primeIndex +=\
    \ 1\n            }\n            primes[primeIndex] += 1\n        }\n    }\n  \
    \  for prime in primes {\n        if prime > 1 {\n            for index in stride(from:\
    \ primeIndex, to: primes.count, by: -1) {\n                if primes[index] >\
    \ 1 {\n                    result += String(sentence[index])\n               \
    \ }\n            }\n        }\n    }\n    return result", '    return words_in_sentence_aux(sentence:
    sentence, words: [], index: 0)', '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence.characters.map(String.init))', '    return
    words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence_(sentence:
    sentence, words: [], index: 0)', '    return words_in_sentence(sentence: sentence,
    words: nil)', '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence.characters.split(separator: " "))', '    return
    words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence_aux(sentence:
    sentence, words: [], index: 0)', "    // write your code here\n    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word) {\n\
    \            result += \" \" + word\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for word in sentence.split(separator: \" \") {\n  \
    \      if isPrimeNumber(word: word) {\n            result += \" \" + word\n  \
    \      }\n    }\n    return result", '    return words_in_sentence_aux(sentence:
    sentence, result: "", index: 0)', '    return words_in_sentence_(sentence: sentence)',
  '    return words_in_sentence(sentence: sentence, words: [], primes: [], index:
    0)', '    return words_in_sentence(sentence: sentence.lowercased())', '    return
    words_in_sentence_(sentence: sentence)', '    return words_in_sentence(sentence:
    sentence.lowercased())', "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(word.length) == true {\n            result += \" \"\
    \ + word\n        }\n    }\n    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence.characters.split(" "))', '    return words_in_sentence(sentence.characters.split(separator:
    " "))', "    var result = \"\"\n    for word in sentence.split(\" \") {\n    \
    \    if isPrimeNumber(word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrimeNumber(word: word) {\n            result += \" \"\
    \ + word\n        }\n    }\n    return result", '    return words_in_sentence_(sentence:
    sentence)', '    return words_in_sentence(sentence: sentence.lowercased())', '    return
    words_in_sentence(sentence.lowercased())', '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence: sentence.lowercased())',
  '    return words_in_sentence(sentence.characters.map(String.init))', "    var result\
    \ = \"\"\n    for word in sentence.split(separator: \" \") {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(separator: \" \") {\n   \
    \     if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence: sentence.lowercased())',
  '    return words_in_sentence(sentence.lowercased())', '    return words_in_sentence(sentence.characters.split(separator:
    " "))', "    var result = \"\"\n    for word in sentence.split(separator: \" \"\
    ) {\n        if isPrime(word: word) {\n            result += \" \" + word\n  \
    \      }\n    }\n    return result", '    return words_in_sentence_(sentence:
    sentence, words: nil)', "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(separator: \" \") {\n        if isPrime(word: word) {\n     \
    \       result += \" \" + word\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
