name: HumanEval_143_words_in_sentence
language: swift
prompt: "\n/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n\
  /// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\"\
  )\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a\
  \ test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\"\
  ) == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
  \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am\
  \ Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for\
  \ it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\"\
  )\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
completions: ['    return words_in_sentence(sentence: sentence.lowercased())', '    return
    words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence:
    sentence.lowercased())', '    return words_in_sentence(sentence.characters.map(String.init))',
  '    return words_in_sentence(sentence: sentence, words: [], result: "")', "   \
    \ var result = \"\"\n    for word in sentence.split(separator: \" \") {\n    \
    \    if isPrime(word: word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(word.length())\
    \ {\n            result += word\n        }\n    }\n    return result", '    return
    words_in_sentence_helper(sentence: sentence).joined(separator: " ")', '    return
    words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence:
    sentence.lowercased())', "    let words = sentence.components(separatedBy: \"\
    \ \")\n    var result = \"\"\n    for word in words {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return words_in_sentence(sentence: sentence.lowercased())', '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence.characters.split(" "))', '    return words_in_sentence(sentence:
    sentence, words: nil)', "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if isPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return words_in_sentence(sentence:
    sentence.lowercased())', '    return words_in_sentence(sentence: sentence.lowercased())',
  "    let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        if isPrime(word: word) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
