language: swift
name: HumanEval_90_next_smallest
results:
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkltpgxft/tmpkltpgxft.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18591eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1858ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1858ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1858ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkltpgxft                        0x0000559c861605a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b18593d6460 __libc_start_main +
    245

    6    tmpkltpgxft                        0x0000559c86160129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpa6bleq4i/tmpa6bleq4i.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842546bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8425162b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8425162988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84251617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6bleq4i                        0x000055b97c34d621 <unavailable> + 5665

    5    libc.so.6                          0x00002b8425657460 __libc_start_main +
    245

    6    tmpa6bleq4i                        0x000055b97c34d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 1..lst.count {\n   \
    \     if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n  \
    \          smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpysz39lo0.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp228dl9b_/tmp228dl9b_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b741ac8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b741a986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b741a986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b741a9857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp228dl9b_                        0x0000557d4a5ac601 <unavailable> + 5633

    5    libc.so.6                          0x00002b741ae7b460 __libc_start_main +
    245

    6    tmp228dl9b_                        0x0000557d4a5ac189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptfovov6j/tmptfovov6j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfaafc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaacbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaacbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaacba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfovov6j                        0x0000559ea6b90635 <unavailable> + 5685

    5    libc.so.6                          0x00002abfab1b0460 __libc_start_main +
    245

    6    tmptfovov6j                        0x0000559ea6b90019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpa6bleq4i/tmpa6bleq4i.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842546bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8425162b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8425162988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84251617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6bleq4i                        0x000055b97c34d621 <unavailable> + 5665

    5    libc.so.6                          0x00002b8425657460 __libc_start_main +
    245

    6    tmpa6bleq4i                        0x000055b97c34d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    if lst.count <= 1 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8emm49gg/tmp8emm49gg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8501b44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b850183bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b850183b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b850183a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8emm49gg                        0x0000561da7ed2621 <unavailable> + 5665

    5    libc.so.6                          0x00002b8501d30460 __libc_start_main +
    245

    6    tmp8emm49gg                        0x0000561da7ed21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for i\
    \ in 1..lst.count {\n        if lst[i] < smallest {\n            smallest = lst[i]\n\
    \            smallestIndex = i\n        }\n    }\n\n    return smallestIndex <\
    \ lst.endIndex ? lst[smallestIndex] : nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpxxm9cmxo.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let index = lst.index(of: smallest)\n    if index == 0 {\n   \
    \     return nil\n    }\n    let next = lst[index + 1]\n    return next\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpkgantdc4.swift:21:21: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let index = lst.index(of: smallest)\n            \
    \        ^\n/tmp/tmpkgantdc4.swift:21:21: note: use 'firstIndex(of:)' instead\n\
    \    let index = lst.index(of: smallest)\n                    ^~~~~\n        \
    \            firstIndex\n/tmp/tmpkgantdc4.swift:25:20: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n    let next = lst[index + 1]\n    \
    \               ^\n/tmp/tmpkgantdc4.swift:25:20: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n    let next = lst[index\
    \ + 1]\n                   ^\n                   (     ?? <#default value#>)\n\
    /tmp/tmpkgantdc4.swift:25:20: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let next = lst[index + 1]\n      \
    \             ^\n                        !\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..<lst.count {\n        if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallestIndex == lst.count ? nil : smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uy2873a/tmp9uy2873a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af340e0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af340b01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af340b01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af340b007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uy2873a                        0x0000564e1b05d621 <unavailable> + 5665

    5    libc.so.6                          0x00002af340ff6460 __libc_start_main +
    245

    6    tmp9uy2873a                        0x0000564e1b05d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgfm4leb_/tmpgfm4leb_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8df9887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8df957eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8df957e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8df957d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfm4leb_                        0x00005636869ff635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8df9a73460 __libc_start_main +
    245

    6    tmpgfm4leb_                        0x00005636869ff019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_v109b76/tmp_v109b76.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afead842c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afead539b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afead539988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afead5387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_v109b76                        0x000055d7565d3635 <unavailable> + 5685

    5    libc.so.6                          0x00002afeada2e460 __libc_start_main +
    245

    6    tmp_v109b76                        0x000055d7565d3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n\
    \        if element < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = element\n        } else if element < secondSmallest {\n  \
    \          secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpw95hmlv3/tmpw95hmlv3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08edac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08ed7b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08ed7b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08ed7b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw95hmlv3                        0x0000565341453601 <unavailable> + 5633

    5    libc.so.6                          0x00002b08edcad460 __libc_start_main +
    245

    6    tmpw95hmlv3                        0x0000565341453189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeniwcrjw/tmpeniwcrjw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b501abf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b501a8edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b501a8ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b501a8ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeniwcrjw                        0x0000562510f0e5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b501ade2460 __libc_start_main +
    245

    6    tmpeniwcrjw                        0x0000562510f0e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyh13nn47/tmpyh13nn47.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a5c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a591ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55a591a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55a59197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh13nn47                        0x00005578422f4611 <unavailable> + 5649

    5    libc.so.6                          0x00002b55a5e0f460 __libc_start_main +
    245

    6    tmpyh13nn47                        0x00005578422f4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpp4ecu5fa/tmpp4ecu5fa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca5d74dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca5d444b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca5d444988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca5d4437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4ecu5fa                        0x0000557beb7f9621 <unavailable> + 5665

    5    libc.so.6                          0x00002aca5d939460 __libc_start_main +
    245

    6    tmpp4ecu5fa                        0x0000557beb7f91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5uqrdoh6/tmp5uqrdoh6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb788b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb785a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb785a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb785a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uqrdoh6                        0x00005596a73e2601 <unavailable> + 5633

    5    libc.so.6                          0x00002acb78a9e460 __libc_start_main +
    245

    6    tmp5uqrdoh6                        0x00005596a73e2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count\
    \ {\n        if smallest.isLess(lst[index]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpnquvhq0v.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 2..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4uw3lr1h/tmp4uw3lr1h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd2696b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd2696988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd26957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uw3lr1h                        0x000056163dae2621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2cd2b8b460 __libc_start_main +
    245

    6    tmp4uw3lr1h                        0x000056163dae21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkltpgxft/tmpkltpgxft.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18591eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1858ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1858ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1858ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkltpgxft                        0x0000559c861605a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b18593d6460 __libc_start_main +
    245

    6    tmpkltpgxft                        0x0000559c86160129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count > 1 {\n        return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpaprvz7sm/tmpaprvz7sm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac099731c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac099428b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac099428988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0994277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaprvz7sm                        0x0000560bdd080635 <unavailable> + 5685

    5    libc.so.6                          0x00002ac09991d460 __libc_start_main +
    245

    6    tmpaprvz7sm                        0x0000560bdd080019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4uw3lr1h/tmp4uw3lr1h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd2696b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd2696988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd26957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uw3lr1h                        0x000056163dae2621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2cd2b8b460 __libc_start_main +
    245

    6    tmp4uw3lr1h                        0x000056163dae21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmz9z_km5/tmpmz9z_km5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6e753cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6e7233b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6e7233988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6e72327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz9z_km5                        0x00005593d3c22601 <unavailable> + 5633

    5    libc.so.6                          0x00002ac6e7728460 __libc_start_main +
    245

    6    tmpmz9z_km5                        0x00005593d3c22189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest =\
    \ smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpldc69yc7.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4uw3lr1h/tmp4uw3lr1h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd2696b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd2696988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd26957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uw3lr1h                        0x000056163dae2621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2cd2b8b460 __libc_start_main +
    245

    6    tmp4uw3lr1h                        0x000056163dae21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[1] < lst[0] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu31x8dcp/tmpu31x8dcp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc9762cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc97323b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc97323988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc973227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu31x8dcp                        0x0000558907962491 <unavailable> + 5265

    5    libc.so.6                          0x00002abc97818460 __libc_start_main +
    245

    6    tmpu31x8dcp                        0x0000558907962019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n\n   \
    \ var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for i in\
    \ lst.startIndex..<lst.endIndex {\n        if lst[i] < smallest {\n          \
    \  smallest = lst[i]\n            smallestIndex = i\n        }\n    }\n\n    return\
    \ smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp41x5nak8/tmp41x5nak8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56d473c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56d16ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56d16a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56d1697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41x5nak8                        0x000055bc9c42c6d1 <unavailable> + 5841

    5    libc.so.6                          0x00002ab56d65f460 __libc_start_main +
    245

    6    tmp41x5nak8                        0x000055bc9c42c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp81nk0_h8.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst.count == 2 {\n   \
    \     return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmppxc9lidt/tmppxc9lidt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab065af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0657f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0657f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0657ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc9lidt                        0x000055ba456b1635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab065ce5460 __libc_start_main +
    245

    6    tmppxc9lidt                        0x000055ba456b1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count > 1 {\n        return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpaprvz7sm/tmpaprvz7sm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac099731c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac099428b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac099428988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0994277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaprvz7sm                        0x0000560bdd080635 <unavailable> + 5685

    5    libc.so.6                          0x00002ac09991d460 __libc_start_main +
    245

    6    tmpaprvz7sm                        0x0000560bdd080019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for x in lst {\n       \
    \ if smallest == nil || x < smallest {\n            smallest = x\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpubezfvkv.swift:16:35: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || x < smallest\
    \ {\n                                  ^\n/tmp/tmpubezfvkv.swift:16:35: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        if smallest == nil || x < smallest {\n                              \
    \    ^\n                                           ?? <#default value#>\n/tmp/tmpubezfvkv.swift:16:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if smallest == nil || x < smallest {\n                      \
    \            ^\n                                          !\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpio_zvqwk.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp228dl9b_/tmp228dl9b_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b741ac8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b741a986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b741a986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b741a9857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp228dl9b_                        0x0000557d4a5ac601 <unavailable> + 5633

    5    libc.so.6                          0x00002b741ae7b460 __libc_start_main +
    245

    6    tmp228dl9b_                        0x0000557d4a5ac189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..<lst.count {\n        if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallestIndex == lst.count ? nil : lst[smallestIndex + 1]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpx3a1_qjw/tmpx3a1_qjw.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe6a85cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe6a553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe6a553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe6a5527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx3a1_qjw                        0x0000563e838ac621 <unavailable> + 5665

    5    libc.so.6                          0x00002abe6aa48460 __libc_start_main +
    245

    6    tmpx3a1_qjw                        0x0000563e838ac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count >= 2 else {\n        return nil\n    }\n    guard lst.first\
    \ > lst.last else {\n        return nil\n    }\n    var smallest = lst.first\n\
    \    var secondSmallest = lst.first\n    for element in lst.dropFirst() {\n  \
    \      if element < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = element\n        } else {\n            if element < secondSmallest\
    \ {\n                secondSmallest = element\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpxnrtg3hs.swift:20:21: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    guard lst.first > lst.last else {\n          ~~~~~~~~~\
    \ ^ ~~~~~~~~\n/tmp/tmpxnrtg3hs.swift:20:21: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    guard lst.first >\
    \ lst.last else {\n                    ^\n/tmp/tmpxnrtg3hs.swift:26:22: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \       if element < smallest {\n                     ^\n/tmp/tmpxnrtg3hs.swift:26:22:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if element < smallest {\n                     ^\n           \
    \                   ?? <#default value#>\n/tmp/tmpxnrtg3hs.swift:26:22: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if element < smallest {\n                     ^\n                   \
    \          !\n/tmp/tmpxnrtg3hs.swift:30:26: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n            if element < secondSmallest\
    \ {\n                         ^\n/tmp/tmpxnrtg3hs.swift:30:26: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         if element < secondSmallest {\n                         ^\n        \
    \                                ?? <#default value#>\n/tmp/tmpxnrtg3hs.swift:30:26:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if element < secondSmallest {\n                         ^\n\
    \                                       !\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptfovov6j/tmptfovov6j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfaafc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaacbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaacbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaacba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfovov6j                        0x0000559ea6b90635 <unavailable> + 5685

    5    libc.so.6                          0x00002abfab1b0460 __libc_start_main +
    245

    6    tmptfovov6j                        0x0000559ea6b90019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptfovov6j/tmptfovov6j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfaafc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaacbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaacbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaacba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfovov6j                        0x0000559ea6b90635 <unavailable> + 5685

    5    libc.so.6                          0x00002abfab1b0460 __libc_start_main +
    245

    6    tmptfovov6j                        0x0000559ea6b90019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let rest = lst[1..<lst.count]\n    return rest.sorted(by: { $0\
    \ < $1 }).first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprmuf6hq7/tmprmuf6hq7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71af3ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71af0c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71af0c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71af0c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmuf6hq7                        0x00005555a516b8c5 <unavailable> + 6341

    5    libc.so.6                          0x00002b71af5b8460 __libc_start_main +
    245

    6    tmprmuf6hq7                        0x00005555a516b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9u2c9i0v/tmp9u2c9i0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d1547dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d15174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d15174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d151737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9u2c9i0v                        0x0000559269587635 <unavailable> + 5685

    5    libc.so.6                          0x00002b4d15669460 __libc_start_main +
    245

    6    tmp9u2c9i0v                        0x0000559269587019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = 0\n    for index in 1..lst.count\
    \ {\n        if lst[index] < smallest {\n            smallest = lst[index]\n \
    \           smallestIndex = index\n        }\n    }\n    return smallestIndex\
    \ == lst.count ? nil : lst[smallestIndex + 1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpa7zcmo7q.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 1..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkltpgxft/tmpkltpgxft.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18591eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1858ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1858ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1858ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkltpgxft                        0x0000559c861605a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b18593d6460 __libc_start_main +
    245

    6    tmpkltpgxft                        0x0000559c86160129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let min = lst[0]\n\
    \    let minIndex = lst.index(of: min)\n    if minIndex == 0 {\n        return\
    \ nil\n    }\n    let minIndex = minIndex! + 1\n    return lst[minIndex]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp2nvuq_s2.swift:21:24: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let minIndex = lst.index(of: min)\n              \
    \         ^\n/tmp/tmp2nvuq_s2.swift:21:24: note: use 'firstIndex(of:)' instead\n\
    \    let minIndex = lst.index(of: min)\n                       ^~~~~\n       \
    \                firstIndex\n/tmp/tmp2nvuq_s2.swift:25:9: error: invalid redeclaration\
    \ of 'minIndex'\n    let minIndex = minIndex! + 1\n        ^\n/tmp/tmp2nvuq_s2.swift:21:9:\
    \ note: 'minIndex' previously declared here\n    let minIndex = lst.index(of:\
    \ min)\n        ^\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for el in lst {\n        if\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkltpgxft/tmpkltpgxft.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18591eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1858ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1858ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1858ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkltpgxft                        0x0000559c861605a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b18593d6460 __libc_start_main +
    245

    6    tmpkltpgxft                        0x0000559c86160129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyal9wt13/tmpyal9wt13.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b223007cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b222fd73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b222fd73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b222fd727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyal9wt13                        0x000055ca917ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b2230268460 __libc_start_main +
    245

    6    tmpyal9wt13                        0x000055ca917ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf2yk_s7p/tmpf2yk_s7p.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8462b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8462805b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8462805988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84628047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2yk_s7p                        0x000055d620a86601 <unavailable> + 5633

    5    libc.so.6                          0x00002b8462cfa460 __libc_start_main +
    245

    6    tmpf2yk_s7p                        0x000055d620a86189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    guard lst.count\
    \ > 2 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp240rrxjs/tmp240rrxjs.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91a5e25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91a5b1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91a5b1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91a5b1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp240rrxjs                        0x000056354c18c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b91a6011460 __libc_start_main +
    245

    6    tmp240rrxjs                        0x000056354c18c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n         \
    \   smallest = x\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpuw4qneuo/tmpuw4qneuo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721d072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721cd69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721cd69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721cd687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw4qneuo                        0x000055c10dcf1601 <unavailable> + 5633

    5    libc.so.6                          0x00002b721d25e460 __libc_start_main +
    245

    6    tmpuw4qneuo                        0x000055c10dcf1189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for index\
    \ in lst.startIndex..<lst.endIndex {\n        if smallestIndex == lst.endIndex\
    \ {\n            return nil\n        }\n        if lst[index] < smallest {\n \
    \           smallest = lst[index]\n            smallestIndex = index\n       \
    \ }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpk21xncwk/tmpk21xncwk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31274c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31271b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31271b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31271b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk21xncwk                        0x0000559857e0e6d1 <unavailable> + 5841

    5    libc.so.6                          0x00002b31276ae460 __libc_start_main +
    245

    6    tmpk21xncwk                        0x0000559857e0e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let rest = lst[1..<lst.count]\n    if let smallestIndex = rest.index(of:\
    \ smallest) {\n        return rest[smallestIndex + 1]\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpznke9pk2/tmpznke9pk2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b862cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b85fc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b85fc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b85fc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznke9pk2                        0x0000560af702b6e1 <unavailable> + 5857

    5    libc.so.6                          0x00002b6b864ba460 __libc_start_main +
    245

    6    tmpznke9pk2                        0x0000560af702b269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let secondSmallest = lst[1]\n    if smallest < secondSmallest\
    \ {\n        return secondSmallest\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpw008ekaj/tmpw008ekaj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad872a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad872763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad872763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8727627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw008ekaj                        0x00005625d3475635 <unavailable> + 5685

    5    libc.so.6                          0x00002ad872c58460 __libc_start_main +
    245

    6    tmpw008ekaj                        0x00005625d3475019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int?\n    for element in lst {\n       \
    \ if smallest == nil || element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp_sayijmm.swift:16:41: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || element\
    \ < smallest {\n                                        ^\n/tmp/tmp_sayijmm.swift:16:41:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if smallest == nil || element < smallest {\n                \
    \                        ^\n                                                 ??\
    \ <#default value#>\n/tmp/tmp_sayijmm.swift:16:41: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        if smallest\
    \ == nil || element < smallest {\n                                        ^\n\
    \                                                !\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        return secondSmallest\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7aaecd_m/tmp7aaecd_m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a58c7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a58975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a58975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a589747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7aaecd_m                        0x000056400b28e491 <unavailable> + 5265

    5    libc.so.6                          0x00002b6a58e6a460 __libc_start_main +
    245

    6    tmp7aaecd_m                        0x000056400b28e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_sr9x5no/tmp_sr9x5no.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e0efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e0bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e0bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e0bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sr9x5no                        0x00005649835b2635 <unavailable> + 5685

    5    libc.so.6                          0x00002b83e10e8460 __libc_start_main +
    245

    6    tmp_sr9x5no                        0x00005649835b2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    if lst[0] < lst[1] {\n        return lst[0]\n \
    \   }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7bibo93b/tmp7bibo93b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a9e590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a9e287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a9e287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a9e2867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bibo93b                        0x0000565249d2c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0a9e77c460 __libc_start_main +
    245

    6    tmp7bibo93b                        0x0000565249d2c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyh13nn47/tmpyh13nn47.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a5c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a591ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55a591a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55a59197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh13nn47                        0x00005578422f4611 <unavailable> + 5649

    5    libc.so.6                          0x00002b55a5e0f460 __libc_start_main +
    245

    6    tmpyh13nn47                        0x00005578422f4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    let smallest\
    \ = lst[0]\n    let secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        return secondSmallest\n    }\n    return smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprzhvebgy/tmprzhvebgy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49bc0e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49bbdd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49bbdd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49bbdd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprzhvebgy                        0x000055eaa57b7491 <unavailable> + 5265

    5    libc.so.6                          0x00002b49bc2ce460 __libc_start_main +
    245

    6    tmprzhvebgy                        0x000055eaa57b7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst.count > 2 {\n   \
    \     return nil\n    }\n    if let mid = lst.index(of: lst[0]) {\n        if\
    \ let right = lst.index(of: lst[mid+1], offsetBy: 1) {\n            return lst[mid+1]\n\
    \        } else {\n            return nil\n        }\n    } else {\n        return\
    \ nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpqn00tto0.swift:23:22: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    if let mid = lst.index(of: lst[0]) {\n           \
    \          ^\n/tmp/tmpqn00tto0.swift:23:22: note: use 'firstIndex(of:)' instead\n\
    \    if let mid = lst.index(of: lst[0]) {\n                     ^~~~~\n      \
    \               firstIndex\n/tmp/tmpqn00tto0.swift:24:33: error: extraneous argument\
    \ label 'of:' in call\n        if let right = lst.index(of: lst[mid+1], offsetBy:\
    \ 1) {\n                                ^~~~~\n                              \
    \   \n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpk31bt90d.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest.isLesserThan(lst[index]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpbt42622d.swift:20:21: error: value of type 'Int' has no member\
    \ 'isLesserThan'\n        if smallest.isLesserThan(lst[index]) {\n           ~~~~~~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n\
    \        if element < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = element\n        } else if element < secondSmallest {\n  \
    \          secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpw95hmlv3/tmpw95hmlv3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08edac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08ed7b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08ed7b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08ed7b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw95hmlv3                        0x0000565341453601 <unavailable> + 5633

    5    libc.so.6                          0x00002b08edcad460 __libc_start_main +
    245

    6    tmpw95hmlv3                        0x0000565341453189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if index < 2 {\n            continue\n        }\n        if smallest.isLesserThan(lst[index])\
    \ {\n            secondSmallest = lst[index]\n        }\n        smallest = lst[index]\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp11yaubhb.swift:23:21: error: value of type 'Int' has no member\
    \ 'isLesserThan'\n        if smallest.isLesserThan(lst[index]) {\n           ~~~~~~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp9xey_5rd.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst.count == 2\
    \ {\n        return lst[1]\n    }\n    if lst.count > 2 {\n        let mid = lst.count\
    \ / 2\n        let left = lst[0 ..< mid]\n        let right = lst[mid..<lst.count]\n\
    \        return min(left, right).next_smallest()\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp16kkk5k2.swift:27:16: error: global function 'min' requires that\
    \ 'ArraySlice<Int>' conform to 'Comparable'\n        return min(left, right).next_smallest()\n\
    \               ^\nSwift.min:1:24: note: where 'T' = 'ArraySlice<Int>'\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmp16kkk5k2.swift:27:33: error: value of type 'ArraySlice<Int>'\
    \ has no member 'next_smallest'\n        return min(left, right).next_smallest()\n\
    \               ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if smallest > lst[i] {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else {\n            if secondSmallest > lst[i]\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp81nk0_h8.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjvw_sjj0/tmpjvw_sjj0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0711d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07119fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07119fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07119f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvw_sjj0                        0x0000562ce7722635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0711eef460 __libc_start_main +
    245

    6    tmpjvw_sjj0                        0x0000562ce7722019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5uqrdoh6/tmp5uqrdoh6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb788b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb785a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb785a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb785a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uqrdoh6                        0x00005596a73e2601 <unavailable> + 5633

    5    libc.so.6                          0x00002acb78a9e460 __libc_start_main +
    245

    6    tmp5uqrdoh6                        0x00005596a73e2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4uw3lr1h/tmp4uw3lr1h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd2696b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd2696988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd26957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uw3lr1h                        0x000056163dae2621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2cd2b8b460 __libc_start_main +
    245

    6    tmp4uw3lr1h                        0x000056163dae21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpnqnauyut/tmpnqnauyut.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d013f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d010edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d010ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d010ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqnauyut                        0x000055c324ab9621 <unavailable> + 5665

    5    libc.so.6                          0x00002b8d015e2460 __libc_start_main +
    245

    6    tmpnqnauyut                        0x000055c324ab91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices {\n\
    \        if smallest.isLess(&lst[index]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmprc4wmy20.swift:23:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(&lst[index]) {\n           ~~~~~~~~ ^~~~~~\n\
    /tmp/tmprc4wmy20.swift:23:28: error: cannot pass immutable value as inout argument:\
    \ 'lst' is a 'let' constant\n        if smallest.isLess(&lst[index]) {\n     \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5uqrdoh6/tmp5uqrdoh6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb788b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb785a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb785a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb785a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uqrdoh6                        0x00005596a73e2601 <unavailable> + 5633

    5    libc.so.6                          0x00002acb78a9e460 __libc_start_main +
    245

    6    tmp5uqrdoh6                        0x00005596a73e2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int?\n    var smallestIndex: Int?\n    for\
    \ index in 0..<lst.count {\n        if smallest == nil || lst[index] < smallest\
    \ {\n            smallest = lst[index]\n            smallestIndex = index\n  \
    \      }\n    }\n    return smallestIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp80hus8wk.swift:17:44: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || lst[index]\
    \ < smallest {\n                                           ^\n/tmp/tmp80hus8wk.swift:17:44:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if smallest == nil || lst[index] < smallest {\n             \
    \                              ^\n                                           \
    \         ?? <#default value#>\n/tmp/tmp80hus8wk.swift:17:44: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        if\
    \ smallest == nil || lst[index] < smallest {\n                               \
    \            ^\n                                                   !\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n \
    \   }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpufmj3xfl/tmpufmj3xfl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e05d3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e05a33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e05a33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e05a327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpufmj3xfl                        0x00005652ae8e3635 <unavailable> + 5685

    5    libc.so.6                          0x00002b5e05f28460 __libc_start_main +
    245

    6    tmpufmj3xfl                        0x00005652ae8e3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n\n   \
    \ if lst.count == 1 {\n        return lst[0]\n    }\n\n    if lst[0] < lst[1]\
    \ {\n        return lst[1]\n    }\n\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmgcwkpp7/tmpmgcwkpp7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8663234c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8662f2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8662f2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8662f2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgcwkpp7                        0x000056119f8bc635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8663420460 __libc_start_main +
    245

    6    tmpmgcwkpp7                        0x000056119f8bc019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyh13nn47/tmpyh13nn47.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a5c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a591ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55a591a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55a59197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh13nn47                        0x00005578422f4611 <unavailable> + 5649

    5    libc.so.6                          0x00002b55a5e0f460 __libc_start_main +
    245

    6    tmpyh13nn47                        0x00005578422f4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        } else {\n            secondSmallest =\
    \ lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpg8zn4o85.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for index\
    \ in lst.startIndex..<lst.endIndex {\n        if smallestIndex == lst.endIndex\
    \ {\n            return nil\n        }\n        if lst[index] < smallest {\n \
    \           smallest = lst[index]\n            smallestIndex = index\n       \
    \ }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpk21xncwk/tmpk21xncwk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31274c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31271b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31271b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31271b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk21xncwk                        0x0000559857e0e6d1 <unavailable> + 5841

    5    libc.so.6                          0x00002b31276ae460 __libc_start_main +
    245

    6    tmpk21xncwk                        0x0000559857e0e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for i\
    \ in lst.indices {\n        if smallestIndex == i {\n            continue\n  \
    \      }\n        if lst[i] < smallest {\n            smallest = lst[i]\n    \
    \        smallestIndex = i\n        }\n    }\n    return smallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf2ntbmhu/tmpf2ntbmhu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adffd844c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adffd53bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adffd53b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adffd53a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2ntbmhu                        0x000055bf3e188671 <unavailable> + 5745

    5    libc.so.6                          0x00002adffda30460 __libc_start_main +
    245

    6    tmpf2ntbmhu                        0x000055bf3e1881f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprhy5p93q/tmprhy5p93q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74809dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74806d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74806d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74806d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhy5p93q                        0x00005614aa6085a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b7480bc8460 __libc_start_main +
    245

    6    tmprhy5p93q                        0x00005614aa608129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeniwcrjw/tmpeniwcrjw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b501abf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b501a8edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b501a8ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b501a8ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeniwcrjw                        0x0000562510f0e5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b501ade2460 __libc_start_main +
    245

    6    tmpeniwcrjw                        0x0000562510f0e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for value in lst {\n        if\
    \ value < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = value\n        } else if value < secondSmallest {\n            secondSmallest\
    \ = value\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsqao4dti/tmpsqao4dti.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab295497c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab29518eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab29518e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab29518d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqao4dti                        0x0000558102848601 <unavailable> + 5633

    5    libc.so.6                          0x00002ab295683460 __libc_start_main +
    245

    6    tmpsqao4dti                        0x0000558102848189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpnqnauyut/tmpnqnauyut.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d013f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d010edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d010ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d010ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqnauyut                        0x000055c324ab9621 <unavailable> + 5665

    5    libc.so.6                          0x00002b8d015e2460 __libc_start_main +
    245

    6    tmpnqnauyut                        0x000055c324ab91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4uw3lr1h/tmp4uw3lr1h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd2696b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd2696988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd26957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uw3lr1h                        0x000056163dae2621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2cd2b8b460 __libc_start_main +
    245

    6    tmp4uw3lr1h                        0x000056163dae21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    if let mid\
    \ = lst.index(of: lst[0]) {\n        return lst[mid]\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2te2jz4s/tmp2te2jz4s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a67dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a64d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a64d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a64d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2te2jz4s                        0x0000564324369541 <unavailable> + 5441

    5    libc.so.6                          0x00002af0a69c6460 __libc_start_main +
    245

    6    tmp2te2jz4s                        0x00005643243690c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf2yk_s7p/tmpf2yk_s7p.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8462b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8462805b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8462805988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84628047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2yk_s7p                        0x000055d620a86601 <unavailable> + 5633

    5    libc.so.6                          0x00002b8462cfa460 __libc_start_main +
    245

    6    tmpf2yk_s7p                        0x000055d620a86189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for i\
    \ in lst.indices {\n        if smallestIndex == i {\n            continue\n  \
    \      }\n        if lst[i] < smallest {\n            smallest = lst[i]\n    \
    \        smallestIndex = i\n        }\n    }\n\n    return smallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4c25j6rt/tmp4c25j6rt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1420953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b142064ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b142064a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14206497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c25j6rt                        0x0000562b63f95671 <unavailable> + 5745

    5    libc.so.6                          0x00002b1420b3f460 __libc_start_main +
    245

    6    tmp4c25j6rt                        0x0000562b63f951f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallest_index = -1\n \
    \   for index in 1..<lst.count {\n        if lst[index] < smallest {\n       \
    \     smallest = lst[index]\n            smallest_index = index\n        }\n \
    \   }\n    if smallest_index == -1 {\n        return nil\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpli0ojinr/tmpli0ojinr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7361014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7360d0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7360d0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7360d0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpli0ojinr                        0x000056170bf7e621 <unavailable> + 5665

    5    libc.so.6                          0x00002b7361200460 __libc_start_main +
    245

    6    tmpli0ojinr                        0x000056170bf7e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..<lst.count {\n        if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallestIndex < lst.count ? lst[smallestIndex + 1] : nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp27yam9ny/tmp27yam9ny.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca1e798c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca1e48fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca1e48f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca1e48e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27yam9ny                        0x000055f29d22a621 <unavailable> + 5665

    5    libc.so.6                          0x00002aca1e984460 __libc_start_main +
    245

    6    tmp27yam9ny                        0x000055f29d22a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprhy5p93q/tmprhy5p93q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74809dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74806d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74806d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74806d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhy5p93q                        0x00005614aa6085a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b7480bc8460 __libc_start_main +
    245

    6    tmprhy5p93q                        0x00005614aa608129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest =\
    \ smallest\n            smallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpqn9tc_nw.swift:22:21: error: value of type 'Int' has no member\
    \ 'isLesserThan'\n        if smallest.isLesserThan(lst[i]) {\n           ~~~~~~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n  \
    \      if el < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzy0o4lx5/tmpzy0o4lx5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018e97dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b018e674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b018e674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b018e6737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzy0o4lx5                        0x0000555fa735e601 <unavailable> + 5633

    5    libc.so.6                          0x00002b018eb69460 __libc_start_main +
    245

    6    tmpzy0o4lx5                        0x0000555fa735e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpii2bm7ig/tmpii2bm7ig.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2869c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2869901b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2869901988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28699007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii2bm7ig                        0x000055e892929621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2869df6460 __libc_start_main +
    245

    6    tmpii2bm7ig                        0x000055e8929291a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp1hz4lubj.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgjya7t4j.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var smallestIndex = -1\n  \
    \  for index in 1..<lst.count {\n        if lst[index] < smallest {\n        \
    \    smallest = lst[index]\n            smallestIndex = index\n        }\n   \
    \ }\n    return smallestIndex == lst.count ? nil : smallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uy2873a/tmp9uy2873a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af340e0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af340b01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af340b01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af340b007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uy2873a                        0x0000564e1b05d621 <unavailable> + 5665

    5    libc.so.6                          0x00002af340ff6460 __libc_start_main +
    245

    6    tmp9uy2873a                        0x0000564e1b05d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n\
    \        if element < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = element\n        } else if element < secondSmallest {\n  \
    \          secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpw95hmlv3/tmpw95hmlv3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08edac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08ed7b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08ed7b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08ed7b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw95hmlv3                        0x0000565341453601 <unavailable> + 5633

    5    libc.so.6                          0x00002b08edcad460 __libc_start_main +
    245

    6    tmpw95hmlv3                        0x0000565341453189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    let smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for index\
    \ in lst.indices {\n        if index < smallestIndex {\n            smallestIndex\
    \ = index\n        }\n    }\n\n    if smallestIndex < lst.endIndex {\n       \
    \ return lst[smallestIndex + 1]\n    }\n\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpab4m6oaw/tmpab4m6oaw.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87b94dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87b91d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87b91d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87b91d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab4m6oaw                        0x0000557384507875 <unavailable> + 6261

    5    libc.so.6                          0x00002b87b96ca460 __libc_start_main +
    245

    6    tmpab4m6oaw                        0x0000557384507259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst.count == 2 {\n   \
    \     return lst[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgqx2850n/tmpgqx2850n.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11c892c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11c589b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11c589988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11c5887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgqx2850n                        0x000055bf99b94635 <unavailable> + 5685

    5    libc.so.6                          0x00002ab11ca7e460 __libc_start_main +
    245

    6    tmpgqx2850n                        0x000055bf99b94019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    let smallest = lst[0]\n    let index = lst.index(of: smallest)\n\n    if\
    \ index == 0 {\n        return nil\n    }\n\n    let next = lst[index + 1]\n \
    \   if next == smallest {\n        return nil\n    }\n\n    return next\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpioqtipo8.swift:19:21: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let index = lst.index(of: smallest)\n            \
    \        ^\n/tmp/tmpioqtipo8.swift:19:21: note: use 'firstIndex(of:)' instead\n\
    \    let index = lst.index(of: smallest)\n                    ^~~~~\n        \
    \            firstIndex\n/tmp/tmpioqtipo8.swift:25:20: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n    let next = lst[index + 1]\n    \
    \               ^\n/tmp/tmpioqtipo8.swift:25:20: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n    let next = lst[index\
    \ + 1]\n                   ^\n                   (     ?? <#default value#>)\n\
    /tmp/tmpioqtipo8.swift:25:20: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let next = lst[index + 1]\n      \
    \             ^\n                        !\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgfm4leb_/tmpgfm4leb_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8df9887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8df957eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8df957e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8df957d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfm4leb_                        0x00005636869ff635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8df9a73460 __libc_start_main +
    245

    6    tmpgfm4leb_                        0x00005636869ff019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp1hz4lubj.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        } else {\n            secondSmallest =\
    \ lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpg8zn4o85.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n \
    \   }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpufmj3xfl/tmpufmj3xfl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e05d3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e05a33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e05a33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e05a327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpufmj3xfl                        0x00005652ae8e3635 <unavailable> + 5685

    5    libc.so.6                          0x00002b5e05f28460 __libc_start_main +
    245

    6    tmpufmj3xfl                        0x00005652ae8e3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    guard let first\
    \ = lst[0] else {\n        return nil\n    }\n    guard let second = lst[1] else\
    \ {\n        return nil\n    }\n    if first > second {\n        return nil\n\
    \    }\n    return second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpd2__9veu.swift:20:11: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    guard let first = lst[0] else {\n  \
    \        ^           ~~~~~~\n/tmp/tmpd2__9veu.swift:23:11: error: initializer\
    \ for conditional binding must have Optional type, not 'Int'\n    guard let second\
    \ = lst[1] else {\n          ^            ~~~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeniwcrjw/tmpeniwcrjw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b501abf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b501a8edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b501a8ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b501a8ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeniwcrjw                        0x0000562510f0e5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b501ade2460 __libc_start_main +
    245

    6    tmpeniwcrjw                        0x0000562510f0e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkcizu87g/tmpkcizu87g.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9305b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930581eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930581e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930581d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcizu87g                        0x000055c7dc0b3621 <unavailable> + 5665

    5    libc.so.6                          0x00002b9305d13460 __libc_start_main +
    245

    6    tmpkcizu87g                        0x000055c7dc0b31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count\
    \ {\n        if lst[index] < smallest {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        } else if lst[index] < secondSmallest\
    \ {\n            secondSmallest = lst[index]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp4qeu128n.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 2..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for x in lst {\n       \
    \ if smallest == nil || x < smallest {\n            smallest = x\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpubezfvkv.swift:16:35: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || x < smallest\
    \ {\n                                  ^\n/tmp/tmpubezfvkv.swift:16:35: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        if smallest == nil || x < smallest {\n                              \
    \    ^\n                                           ?? <#default value#>\n/tmp/tmpubezfvkv.swift:16:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if smallest == nil || x < smallest {\n                      \
    \            ^\n                                          !\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for el in lst {\n      \
    \  if smallest == nil || el < smallest {\n            smallest = el\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpk__szfif.swift:16:36: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || el < smallest\
    \ {\n                                   ^\n/tmp/tmpk__szfif.swift:16:36: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        if smallest == nil || el < smallest {\n                             \
    \      ^\n                                            ?? <#default value#>\n/tmp/tmpk__szfif.swift:16:36:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if smallest == nil || el < smallest {\n                     \
    \              ^\n                                           !\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for element in lst {\n        if element < smallest {\n\
    \            smallest = element\n        }\n    }\n    return smallest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvwbbsjmv/tmpvwbbsjmv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047b7c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047b4bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047b4bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047b4bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwbbsjmv                        0x00005619ccdbb601 <unavailable> + 5633

    5    libc.so.6                          0x00002b047b9b2460 __libc_start_main +
    245

    6    tmpvwbbsjmv                        0x00005619ccdbb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5uqrdoh6/tmp5uqrdoh6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb788b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb785a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb785a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb785a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uqrdoh6                        0x00005596a73e2601 <unavailable> + 5633

    5    libc.so.6                          0x00002acb78a9e460 __libc_start_main +
    245

    6    tmp5uqrdoh6                        0x00005596a73e2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count >= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpm1n9itod.swift:23:21: error: value of type 'Int' has no member\
    \ 'isLess'\n        if smallest.isLess(lst[i]) {\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int? = nil\n    for x in lst {\n       \
    \ if smallest == nil || x < smallest {\n            smallest = x\n        }\n\
    \    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpubezfvkv.swift:16:35: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if smallest == nil || x < smallest\
    \ {\n                                  ^\n/tmp/tmpubezfvkv.swift:16:35: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        if smallest == nil || x < smallest {\n                              \
    \    ^\n                                           ?? <#default value#>\n/tmp/tmpubezfvkv.swift:16:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if smallest == nil || x < smallest {\n                      \
    \            ^\n                                          !\n"
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count > 2 {\n   \
    \     let pivot = lst.sort()[0]\n        var left = lst.filter{$0 > pivot}\n \
    \       var right = lst.filter{$0 < pivot}\n        if left.count > 0 {\n    \
    \        return left[1]\n        }\n        if right.count > 0 {\n           \
    \ return right[1]\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpk0sur3kj.swift:21:25: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n        let pivot = lst.sort()[0]\n      \
    \              ~~~ ^\n/tmp/tmpk0sur3kj.swift:21:31: error: value of type '()'\
    \ has no subscripts\n        let pivot = lst.sort()[0]\n                    ~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let min = lst[0]\n\
    \    let minIndex = lst.index(of: min)\n    let minValue = lst[minIndex]\n   \
    \ lst.indices.forEach {\n        if let value = lst[$0] {\n            if value\
    \ < minValue {\n                min = value\n                minIndex = $0\n \
    \           }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgvkc05hi.swift:21:24: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let minIndex = lst.index(of: min)\n              \
    \         ^\n/tmp/tmpgvkc05hi.swift:21:24: note: use 'firstIndex(of:)' instead\n\
    \    let minIndex = lst.index(of: min)\n                       ^~~~~\n       \
    \                firstIndex\n/tmp/tmpgvkc05hi.swift:22:24: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n    let minValue = lst[minIndex]\n \
    \                      ^\n/tmp/tmpgvkc05hi.swift:22:24: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    let minValue\
    \ = lst[minIndex]\n                       ^\n                                ??\
    \ <#default value#>\n/tmp/tmpgvkc05hi.swift:22:24: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n    let minValue =\
    \ lst[minIndex]\n                       ^\n                               !\n\
    /tmp/tmpgvkc05hi.swift:26:17: error: cannot assign to value: 'min' is a 'let'\
    \ constant\n                min = value\n                ^~~\n/tmp/tmpgvkc05hi.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = lst[0]\n    ^~~\n\
    \    var\n/tmp/tmpgvkc05hi.swift:27:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = $0\n                ^~~~~~~~\n\
    /tmp/tmpgvkc05hi.swift:21:5: note: change 'let' to 'var' to make it mutable\n\
    \    let minIndex = lst.index(of: min)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    var smallest = lst[0]\n \
    \   for element in lst {\n        if element < smallest {\n            smallest\
    \ = element\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjib47n26/tmpjib47n26.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8194264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8193f5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8193f5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8193f5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjib47n26                        0x000055669b24d7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b8194450460 __libc_start_main +
    245

    6    tmpjib47n26                        0x000055669b24d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwzbyhrfh/tmpwzbyhrfh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af23a7b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af23a4abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af23a4ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23a4aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzbyhrfh                        0x00005557761b6621 <unavailable> + 5665

    5    libc.so.6                          0x00002af23a9a0460 __libc_start_main +
    245

    6    tmpwzbyhrfh                        0x00005557761b61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for x in lst {\n        if x < smallest {\n            secondSmallest = smallest\n\
    \            smallest = x\n        } else if x < secondSmallest {\n          \
    \  secondSmallest = x\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0v6o_nco/tmp0v6o_nco.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49b044dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49b0144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49b0144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49b01437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0v6o_nco                        0x000056445629d5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b49b0639460 __libc_start_main +
    245

    6    tmp0v6o_nco                        0x000056445629d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for index\
    \ in lst.startIndex..<lst.endIndex {\n        if smallestIndex == lst.endIndex\
    \ {\n            return nil\n        }\n        if lst[index] < smallest {\n \
    \           smallest = lst[index]\n            smallestIndex = index\n       \
    \ }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpk21xncwk/tmpk21xncwk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31274c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31271b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31271b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31271b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk21xncwk                        0x0000559857e0e6d1 <unavailable> + 5841

    5    libc.so.6                          0x00002b31276ae460 __libc_start_main +
    245

    6    tmpk21xncwk                        0x0000559857e0e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    if lst.count <= 1 {\n        return nil\n    }\n\n    let min = lst[0]\n\
    \    let minIndex = lst.index(of: min)\n    let minValue = lst[minIndex]\n\n \
    \   lst.indices.forEach { index in\n        if index != minIndex {\n         \
    \   if lst[index] < minValue {\n                min = lst[index]\n           \
    \     minIndex = index\n                minValue = lst[index]\n            }\n\
    \        }\n    }\n\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpkn8eenux.swift:23:24: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let minIndex = lst.index(of: min)\n              \
    \         ^\n/tmp/tmpkn8eenux.swift:23:24: note: use 'firstIndex(of:)' instead\n\
    \    let minIndex = lst.index(of: min)\n                       ^~~~~\n       \
    \                firstIndex\n/tmp/tmpkn8eenux.swift:24:24: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n    let minValue = lst[minIndex]\n \
    \                      ^\n/tmp/tmpkn8eenux.swift:24:24: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    let minValue\
    \ = lst[minIndex]\n                       ^\n                                ??\
    \ <#default value#>\n/tmp/tmpkn8eenux.swift:24:24: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n    let minValue =\
    \ lst[minIndex]\n                       ^\n                               !\n\
    /tmp/tmpkn8eenux.swift:29:17: error: cannot assign to value: 'min' is a 'let'\
    \ constant\n                min = lst[index]\n                ^~~\n/tmp/tmpkn8eenux.swift:22:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = lst[0]\n    ^~~\n\
    \    var\n/tmp/tmpkn8eenux.swift:30:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index\n                ^~~~~~~~\n\
    /tmp/tmpkn8eenux.swift:23:5: note: change 'let' to 'var' to make it mutable\n\
    \    let minIndex = lst.index(of: min)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    if lst.count\
    \ == 2 {\n        return lst[1]\n    }\n    if lst.count > 2 {\n        return\
    \ lst[lst.count - 2]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpp0whi8pn/tmpp0whi8pn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3454dbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3454ab6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3454ab6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3454ab57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0whi8pn                        0x000056534f5f2491 <unavailable> + 5265

    5    libc.so.6                          0x00002b3454fab460 __libc_start_main +
    245

    6    tmpp0whi8pn                        0x000056534f5f2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLesserThan(lst[i]) {\n            secondSmallest =\
    \ smallest\n            smallest = lst[i]\n        } else {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp46izinxo.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count\
    \ {\n        if smallest > lst[index] {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp9rnbfouc.swift:19:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 2..lst.count {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp1hz4lubj.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let rest = lst[1..<lst.count]\n    if let smallestIndex = rest.index(of:\
    \ smallest) {\n        return rest[smallestIndex + 1]\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpznke9pk2/tmpznke9pk2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b862cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b85fc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b85fc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b85fc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznke9pk2                        0x0000560af702b6e1 <unavailable> + 5857

    5    libc.so.6                          0x00002b6b864ba460 __libc_start_main +
    245

    6    tmpznke9pk2                        0x0000560af702b269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmz9z_km5/tmpmz9z_km5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6e753cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6e7233b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6e7233988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6e72327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz9z_km5                        0x00005593d3c22601 <unavailable> + 5633

    5    libc.so.6                          0x00002ac6e7728460 __libc_start_main +
    245

    6    tmpmz9z_km5                        0x00005593d3c22189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for i\
    \ in 1..lst.count {\n        if lst[i] < smallest {\n            smallest = lst[i]\n\
    \            smallestIndex = i\n        }\n    }\n    return smallest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp4b8yuw0a.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprhy5p93q/tmprhy5p93q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74809dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74806d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74806d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74806d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhy5p93q                        0x00005614aa6085a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b7480bc8460 __libc_start_main +
    245

    6    tmprhy5p93q                        0x00005614aa608129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf2yk_s7p/tmpf2yk_s7p.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8462b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8462805b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8462805988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84628047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2yk_s7p                        0x000055d620a86601 <unavailable> + 5633

    5    libc.so.6                          0x00002b8462cfa460 __libc_start_main +
    245

    6    tmpf2yk_s7p                        0x000055d620a86189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    let smallest\
    \ = lst[0]\n    let secondSmallest = lst[1]\n    if smallest < secondSmallest\
    \ {\n        return smallest\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp66abljjs/tmp66abljjs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44fc400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44fc0f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44fc0f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44fc0f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp66abljjs                        0x000055b2352bd491 <unavailable> + 5265

    5    libc.so.6                          0x00002b44fc5ec460 __libc_start_main +
    245

    6    tmp66abljjs                        0x000055b2352bd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_v109b76/tmp_v109b76.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afead842c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afead539b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afead539988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afead5387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_v109b76                        0x000055d7565d3635 <unavailable> + 5685

    5    libc.so.6                          0x00002afeada2e460 __libc_start_main +
    245

    6    tmp_v109b76                        0x000055d7565d3019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    if lst[0] < lst[1] {\n        return lst[0]\n \
    \   }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7bibo93b/tmp7bibo93b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a9e590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a9e287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a9e287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a9e2867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bibo93b                        0x0000565249d2c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0a9e77c460 __libc_start_main +
    245

    6    tmp7bibo93b                        0x0000565249d2c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpeu7er_ge.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprhy5p93q/tmprhy5p93q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74809dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74806d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74806d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74806d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhy5p93q                        0x00005614aa6085a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b7480bc8460 __libc_start_main +
    245

    6    tmprhy5p93q                        0x00005614aa608129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    if lst[0] < lst[1] {\n        return lst[0]\n \
    \   }\n    return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7bibo93b/tmp7bibo93b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a9e590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a9e287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a9e287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a9e2867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bibo93b                        0x0000565249d2c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0a9e77c460 __libc_start_main +
    245

    6    tmp7bibo93b                        0x0000565249d2c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    for value in lst {\n        if value < smallest {\n \
    \           smallest = value\n        }\n    }\n    return smallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyhujs413/tmpyhujs413.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc33038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc32d2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc32d2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc32d2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyhujs413                        0x00005577af256601 <unavailable> + 5633

    5    libc.so.6                          0x00002adc33224460 __libc_start_main +
    245

    6    tmpyhujs413                        0x00005577af256189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(&lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpubxhrtu6.swift:21:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices {\n\
    \        if index < lst.count - 1 {\n            if smallest > lst[index + 1]\
    \ {\n                secondSmallest = smallest\n                smallest = lst[index\
    \ + 1]\n            }\n        } else {\n            if smallest > secondSmallest\
    \ {\n                return smallest\n            }\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpuot0wdgd/tmpuot0wdgd.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a46cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a469b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a469b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a469b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuot0wdgd                        0x00005589a46bf611 <unavailable> + 5649

    5    libc.so.6                          0x00002b7a46ea8460 __libc_start_main +
    245

    6    tmpuot0wdgd                        0x00005589a46bf199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    for x in lst {\n        if\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzhidtem_/tmpzhidtem_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6f642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6f339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6f339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6f3387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhidtem_                        0x0000564b48c965a1 <unavailable> + 5537

    5    libc.so.6                          0x00002adb6f82e460 __libc_start_main +
    245

    6    tmpzhidtem_                        0x0000564b48c96129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..lst.count {\n   \
    \     if smallest.isLess(&lst[i]) {\n            secondSmallest = lst[i]\n   \
    \         smallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpl80ns0xg.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest: Int?\n    var smallestIndex: Int?\n    for\
    \ index in 0..<lst.count {\n        if smallest == nil {\n            smallest\
    \ = lst[index]\n            smallestIndex = index\n        }\n        if lst[index]\
    \ < smallest {\n            smallest = lst[index]\n            smallestIndex =\
    \ index\n        }\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgvjhw6p7.swift:21:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if lst[index] < smallest {\n\
    \                        ^\n/tmp/tmpgvjhw6p7.swift:21:25: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        if\
    \ lst[index] < smallest {\n                        ^\n                       \
    \          ?? <#default value#>\n/tmp/tmpgvjhw6p7.swift:21:25: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        if\
    \ lst[index] < smallest {\n                        ^\n                       \
    \         !\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyh13nn47/tmpyh13nn47.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a5c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a591ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55a591a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55a59197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh13nn47                        0x00005578422f4611 <unavailable> + 5649

    5    libc.so.6                          0x00002b55a5e0f460 __libc_start_main +
    245

    6    tmpyh13nn47                        0x00005578422f4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count == 1 {\n  \
    \      return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmped8yvj1u/tmped8yvj1u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b522e826c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b522e51db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b522e51d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b522e51c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped8yvj1u                        0x000055b100525635 <unavailable> + 5685

    5    libc.so.6                          0x00002b522ea12460 __libc_start_main +
    245

    6    tmped8yvj1u                        0x000055b100525019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmz9z_km5/tmpmz9z_km5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6e753cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6e7233b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6e7233988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6e72327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz9z_km5                        0x00005593d3c22601 <unavailable> + 5633

    5    libc.so.6                          0x00002ac6e7728460 __libc_start_main +
    245

    6    tmpmz9z_km5                        0x00005593d3c22189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp6hdgmh1w/tmp6hdgmh1w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd2f8f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd2f5e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd2f5e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd2f5e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hdgmh1w                        0x00005632b4b07601 <unavailable> + 5633

    5    libc.so.6                          0x00002abd2fade460 __libc_start_main +
    245

    6    tmp6hdgmh1w                        0x00005632b4b07189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    let smallest = lst[0]\n    var smallestIndex = 0\n    var smallestIndex2\
    \ = 0\n\n    for index in 1..<lst.count {\n        if lst[index] < smallest {\n\
    \            smallestIndex = index\n            smallest = lst[index]\n      \
    \  }\n        if lst[index] < lst[smallestIndex] {\n            smallestIndex2\
    \ = index\n        }\n    }\n\n    if smallestIndex2 == 0 {\n        return nil\n\
    \    }\n\n    return lst[smallestIndex2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmppsizlsyi.swift:25:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = lst[index]\n            ^~~~~~~~\n\
    /tmp/tmppsizlsyi.swift:18:5: note: change 'let' to 'var' to make it mutable\n\
    \    let smallest = lst[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count == 0 {\n        return nil\n    }\n    if\
    \ lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n       \
    \ return lst[1]\n    }\n    if lst[0] == lst[1] {\n        return nil\n    }\n\
    \    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyht7fo7a/tmpyht7fo7a.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c62f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c62bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c62bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c62bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyht7fo7a                        0x00005612ae9c6635 <unavailable> + 5685

    5    libc.so.6                          0x00002b2c630ee460 __libc_start_main +
    245

    6    tmpyht7fo7a                        0x00005612ae9c6019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n   \
    \     if lst[i] < smallest {\n            secondSmallest = smallest\n        \
    \    smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n        \
    \    secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmp8gd1jkhr.swift:22:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgfm4leb_/tmpgfm4leb_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8df9887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8df957eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8df957e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8df957d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfm4leb_                        0x00005636869ff635 <unavailable> + 5685

    5    libc.so.6                          0x00002b8df9a73460 __libc_start_main +
    245

    6    tmpgfm4leb_                        0x00005636869ff019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpubo8jkaa/tmpubo8jkaa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dc90aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dc8da5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dc8da5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dc8da47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubo8jkaa                        0x000055b9d73e25a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b3dc929a460 __libc_start_main +
    245

    6    tmpubo8jkaa                        0x000055b9d73e2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013502
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: SyntaxError
  stderr: "/tmp/tmpgjya7t4j.swift:19:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..lst.count {\n              ^~\n       \
    \       ...\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for x in lst {\n        if x < smallest {\n            secondSmallest = smallest\n\
    \            smallest = x\n        } else if x < secondSmallest {\n          \
    \  secondSmallest = x\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0v6o_nco/tmp0v6o_nco.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49b044dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49b0144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49b0144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49b01437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0v6o_nco                        0x000056445629d5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b49b0639460 __libc_start_main +
    245

    6    tmp0v6o_nco                        0x000056445629d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n    for index\
    \ in lst.startIndex..<lst.endIndex {\n        if smallestIndex == lst.startIndex\
    \ {\n            break\n        }\n\n        if lst[index] < smallest {\n    \
    \        smallest = lst[index]\n            smallestIndex = index\n        }\n\
    \    }\n\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgfh019ry/tmpgfh019ry.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af56574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af565441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af565441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5654407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfh019ry                        0x000055cf27d266d1 <unavailable> + 5841

    5    libc.so.6                          0x00002af565936460 __libc_start_main +
    245

    6    tmpgfh019ry                        0x000055cf27d26259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013503
