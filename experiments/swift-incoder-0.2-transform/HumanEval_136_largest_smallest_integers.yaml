name: HumanEval_136_largest_smallest_integers
language: swift
prompt: "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n/// (nil,\
  \ 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n/// >>>\
  \ largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst:\
  \ [Int]) -> (Int?, Int?) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1,\
  \ 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5,\
  \ 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6,\
  \ -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7])\
  \ == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9])\
  \ == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\n\
  assert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst:\
  \ [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3,\
  \ -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4,\
  \ -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100,\
  \ 1]) == (-3, 1))"
completions: ["    var largest = nil\n    var smallest = nil\n    for x in lst {\n\
    \        if x < 0 {\n            if smallest == nil {\n                smallest\
    \ = x\n            } else {\n                largest = x\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = x\n\
    \            } else {\n                if x > largest {\n                    largest\
    \ = x\n                }\n                if x < smallest {\n                \
    \    smallest = x\n                }\n            }\n        }\n    }\n    return\
    \ (largest, smallest)", "    var min: Int? = nil\n    var max: Int? = nil\n  \
    \  for x in lst {\n        if x < 0 {\n            if min == nil {\n         \
    \       min = x\n            } else {\n                max = x\n            }\n\
    \        } else {\n            if max == nil {\n                max = x\n    \
    \        } else {\n                if x > max {\n                    max = x\n\
    \                } else if x < min {\n                    min = x\n          \
    \      }\n            }\n        }\n    }\n    return (min, max)", "    guard\
    \ lst.count > 0 else {\n        return (nil, nil)\n    }\n    var largest = Int?()\n\
    \    var smallest = Int?()\n    for num in lst {\n        if num < 0 {\n     \
    \       largest = num\n        } else {\n            smallest = num\n        }\n\
    \    }\n    return (largest, smallest)", "    var largest = Int?()\n    var smallest\
    \ = Int?()\n    for x in lst {\n        if x < 0 {\n            largest = x\n\
    \        } else {\n            smallest = x\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = nil\n    var smallest = nil\n    for x in lst\
    \ {\n        if x < 0 {\n            if smallest == nil {\n                smallest\
    \ = x\n            } else {\n                largest = smallest\n            \
    \    smallest = x\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = x\n            } else {\n                largest\
    \ = largest!\n                smallest = x\n            }\n        }\n    }\n\
    \    return (largest, smallest)", "    var largest = Int?()\n    var smallest\
    \ = Int?()\n    for x in lst {\n        if x < 0 {\n            largest = x\n\
    \        } else {\n            smallest = x\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = Int?()\n    var smallest = Int?()\n    for number\
    \ in lst {\n        if number > largest {\n            largest = number\n    \
    \    } else if number < smallest {\n            smallest = number\n        }\n\
    \    }\n    return (largest, smallest)", "    var min: Int? = nil\n    var max:\
    \ Int? = nil\n    for x in lst {\n        if x < 0 {\n            if min == nil\
    \ {\n                min = x\n            } else {\n                min = nil\n\
    \            }\n        } else {\n            if max == nil {\n              \
    \  max = x\n            } else {\n                max = nil\n            }\n \
    \       }\n    }\n    return (min, max)", "    var min: Int? = nil\n    var max:\
    \ Int? = nil\n    for x in lst {\n        if x < 0 {\n            if min == nil\
    \ {\n                min = x\n            } else {\n                min = min(min,\
    \ x)\n            }\n        } else {\n            if max == nil {\n         \
    \       max = x\n            } else {\n                max = max(max, x)\n   \
    \         }\n        }\n    }\n    return (min, max)", "    var largest = nil\n\
    \    var smallest = nil\n    for x in lst {\n        if x < 0 {\n            if\
    \ smallest == nil {\n                smallest = x\n            } else {\n    \
    \            largest = smallest\n                smallest = x\n            }\n\
    \        } else {\n            if largest == nil {\n                largest =\
    \ x\n            } else {\n                largest = largest! > x ? largest! :\
    \ x\n                smallest = smallest == nil ? x : smallest! < x ? smallest!\
    \ : x\n            }\n        }\n    }\n    return (largest, smallest)", "   \
    \ guard lst.count > 0 else {\n        return (nil, nil)\n    }\n\n    var largest\
    \ = Int?(0)\n    var smallest = Int?(0)\n    for i in lst {\n        if i.isNegative\
    \ {\n            largest = i\n        } else {\n            smallest = i\n   \
    \     }\n    }\n    return (largest, smallest)", "    var largest = Int?()\n \
    \   var smallest = Int?()\n    for x in lst {\n        if x < 0 {\n          \
    \  largest = x\n        } else {\n            smallest = x\n        }\n    }\n\
    \    return (largest, smallest)", "    var largest = Int?()\n    var smallest\
    \ = Int?()\n    for number in lst {\n        if number > 0 {\n            if smallest\
    \ == nil {\n                smallest = number\n            } else {\n        \
    \        if number < smallest {\n                    smallest = number\n     \
    \           }\n            }\n        } else {\n            if largest == nil\
    \ {\n                largest = number\n            } else {\n                if\
    \ number > largest {\n                    largest = number\n                }\n\
    \            }\n        }\n    }\n    return (largest, smallest)", "    var largest\
    \ = nil\n    var smallest = nil\n    for x in lst {\n        if x < 0 {\n    \
    \        if largest == nil {\n                largest = x\n            } else\
    \ {\n                largest = largest!\n            }\n        } else {\n   \
    \         if smallest == nil {\n                smallest = x\n            } else\
    \ {\n                smallest = smallest!\n            }\n        }\n    }\n \
    \   return (largest, smallest)", "    var largest = Int?()\n    var smallest =\
    \ Int?()\n    for number in lst {\n        if number > largest {\n           \
    \ largest = number\n        } else if number < smallest {\n            smallest\
    \ = number\n        }\n    }\n    return (largest, smallest)", "    var min: Int?\
    \ = nil\n    var max: Int? = nil\n    for x in lst {\n        if x < 0 {\n   \
    \         min = x\n        } else {\n            max = x\n        }\n    }\n \
    \   return (min, max)", "    var smallest: Int? = nil\n    var largest: Int? =\
    \ nil\n    for x in lst {\n        if x < 0 {\n            smallest = x\n    \
    \    } else {\n            largest = x\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = Int?()\n    var smallest = Int?()\n    for x\
    \ in lst {\n        if x < 0 {\n            largest = x\n        } else {\n  \
    \          smallest = x\n        }\n    }\n    return (largest, smallest)", " \
    \   var largest = Int?()\n    var smallest = Int?()\n    for num in lst {\n  \
    \      if num < 0 {\n            largest = num\n        } else {\n           \
    \ smallest = num\n        }\n    }\n    return (largest, smallest)", "    var\
    \ largest = Int?()\n    var smallest = Int?()\n    for x in lst {\n        if\
    \ x < 0 {\n            largest = x\n        } else {\n            smallest = x\n\
    \        }\n    }\n    return (largest, smallest)"]
stop_tokens:
- "\n}"
