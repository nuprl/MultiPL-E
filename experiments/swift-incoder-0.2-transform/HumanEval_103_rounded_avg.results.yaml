language: swift
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = n * m / 2\n    let remainder = n\
    \ * m % 2\n    let result = String(format: \"0b%0*b\", remainder, sum)\n    return\
    \ .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpd162h9i4.swift:23:24: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n    let result = String(format:\
    \ \"0b%0*b\", remainder, sum)\n                       ^~~~~~~~~\n            \
    \                              radix:     uppercase: \n/tmp/tmpd162h9i4.swift:23:54:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ let result = String(format: \"0b%0*b\", remainder, sum)\n                  \
    \                                   ^\n                                      \
    \               (   != 0)\n/tmp/tmpd162h9i4.swift:23:18: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'String' conform to 'BinaryInteger'\n    let result = String(format:\
    \ \"0b%0*b\", remainder, sum)\n                 ^\nSwift.String:2:12: note: where\
    \ 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n * m /\
    \ 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ sum, Int(ceil(log2(Float(avg)))), avg)\n    guard let bin = binary.unicodeScalars.first\
    \ else { return .failure(-1) }\n    return .success(bin)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpffynywhl.swift:20:49: error: cannot find 'ceil' in scope\n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), sum, Int(ceil(log2(Float(avg)))),\
    \ avg)\n                                                ^~~~\n/tmp/tmpffynywhl.swift:20:54:\
    \ error: cannot find 'log2' in scope\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), sum, Int(ceil(log2(Float(avg)))), avg)\n      \
    \                                               ^~~~\n/tmp/tmpffynywhl.swift:20:83:\
    \ error: cannot find 'ceil' in scope\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), sum, Int(ceil(log2(Float(avg)))), avg)\n      \
    \                                                                            ^~~~\n\
    /tmp/tmpffynywhl.swift:20:88: error: cannot find 'log2' in scope\n    let binary\
    \ = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), sum, Int(ceil(log2(Float(avg)))),\
    \ avg)\n                                                                     \
    \                  ^~~~\n/tmp/tmpffynywhl.swift:20:24: error: extra arguments\
    \ at positions #4, #5 in call\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ sum, Int(ceil(log2(Float(avg)))), avg)\n                       ^\nSwift.String:2:12:\
    \ note: 'init(_:radix:uppercase:)' declared here\n    public init<T>(_ value:\
    \ T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n     \
    \      ^\n/tmp/tmpffynywhl.swift:20:74: error: type 'Int' cannot be used as a\
    \ boolean; test for '!= 0' instead\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), sum, Int(ceil(log2(Float(avg)))), avg)\n      \
    \                                                                   ^\n      \
    \                                                                   (   != 0)\n\
    /tmp/tmpffynywhl.swift:20:18: error: initializer 'init(_:radix:uppercase:)' requires\
    \ that 'String' conform to 'BinaryInteger'\n    let binary = String(format: \"\
    %0*b%0*b\", Int(ceil(log2(Float(sum)))), sum, Int(ceil(log2(Float(avg)))), avg)\n\
    \                 ^\nSwift.String:2:12: note: whe"
  stdout: ''
  timestamp: 1659825679
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n * m /\
    \ 2\n    let avg = sum / 2\n    let binary = String(format: \"%b\", UInt8(avg))\n\
    \    guard let bin = binary.unicodeScalars.first else {\n        return .failure(-1)\n\
    \    }\n    return .success(bin)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp3bh5y2w5.swift:20:24: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    let binary = String(format:\
    \ \"%b\", UInt8(avg))\n                       ^~~~~~~\n                      \
    \  repeating     count: \n/tmp/tmp3bh5y2w5.swift:20:39: error: cannot convert\
    \ value of type 'UInt8' to expected argument type 'Int'\n    let binary = String(format:\
    \ \"%b\", UInt8(avg))\n                                      ^\n             \
    \                         Int(      )\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n < m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n - m) / 2\n    let binary = String(sum,\
    \ radix: 2)\n    return .success(binary)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpp00yavuk/tmpp00yavuk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc01519c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc01210b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc01210988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0120f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp00yavuk                        0x00005565a7439775 <unavailable> + 6005

    5    libc.so.6                          0x00002adc01705460 __libc_start_main +
    245

    6    tmpp00yavuk                        0x00005565a7439379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    \n    let result =\
    \ n / m\n    let remainder = n % m\n    \n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", result.count, result))\n    }\n    \n  \
    \  return .failure(-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp0mhih0c4.swift:23:31: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        return .success(String(format:\
    \ \"0b%0*b\", result.count, result))\n                              ^~~~~~~~~\n\
    \                                                 radix:        uppercase: \n\
    /tmp/tmp0mhih0c4.swift:23:64: error: type 'Int' cannot be used as a boolean; test\
    \ for '!= 0' instead\n        return .success(String(format: \"0b%0*b\", result.count,\
    \ result))\n                                                               ^\n\
    \                                                               (      != 0)\n\
    /tmp/tmp0mhih0c4.swift:23:25: error: initializer 'init(_:radix:uppercase:)' requires\
    \ that 'String' conform to 'BinaryInteger'\n        return .success(String(format:\
    \ \"0b%0*b\", result.count, result))\n                        ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmp0mhih0c4.swift:23:57:\
    \ error: value of type 'Int' has no member 'count'\n        return .success(String(format:\
    \ \"0b%0*b\", result.count, result))\n                                       \
    \          ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n * m\n\
    \    let avg = sum / 2\n    let remainder = sum % 2\n    \n    if remainder ==\
    \ 0 {\n        return .success(String(format: \"0b%b\", avg))\n    } else {\n\
    \        return .failure(-1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpzscxtpgn.swift:23:31: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        return .success(String(format:\
    \ \"0b%b\", avg))\n                              ^~~~~~~\n                   \
    \            repeating       count: \n"
  stdout: ''
  timestamp: 1659825678
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n >= m {\n    \
    \    return .failure(-1)\n    }\n    let sum = n * m / 2\n    let binary = String(sum)\n\
    \    let rounded = Int(binary)\n    return .success(binary)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpy_jy2j1b/tmpy_jy2j1b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b319a856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b319a54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b319a54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b319a54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_jy2j1b                        0x000056366f389845 <unavailable> + 6213

    5    libc.so.6                          0x00002b319aa42460 __libc_start_main +
    245

    6    tmpy_jy2j1b                        0x000056366f389449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n + m\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg),\
    \ 0, Int(sum))\n    return binary.isValid() ? .success(binary) : .failure(-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmprnll38yu.swift:20:24: error: extra arguments at positions #4, #5\
    \ in call\n    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n\
    \                       ^\nSwift.String:2:12: note: 'init(_:radix:uppercase:)'\
    \ declared here\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n/tmp/tmprnll38yu.swift:20:48:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n      \
    \                                         ^\n                                \
    \               (        != 0)\n/tmp/tmprnll38yu.swift:20:18: error: initializer\
    \ 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \    let binary = String(format: \"%0*b%0*b\", 0, Int(avg), 0, Int(sum))\n   \
    \              ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public init<T>(_\
    \ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659825679
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n * m\n\
    \    let avg = sum / Double(n)\n    let rounded = Int(round(avg))\n    return\
    \ if rounded == avg { return .success(String(rounded)) } else { return .failure(-1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp16lqf9k_.swift:21:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    return if rounded == avg { return .success(String(rounded))\
    \ } else { return .failure(-1) }\n          ^\n          ;\n/tmp/tmp16lqf9k_.swift:19:19:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    let avg = sum / Double(n)\n              ~~~ ^ ~~~~~~~~~\n/tmp/tmp16lqf9k_.swift:19:19:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    let avg = sum / Double(n)\n\
    \                  ^\n/tmp/tmp16lqf9k_.swift:20:23: error: cannot find 'round'\
    \ in scope\n    let rounded = Int(round(avg))\n                      ^~~~~\n/tmp/tmp16lqf9k_.swift:21:5:\
    \ error: non-void function should return a value\n    return if rounded == avg\
    \ { return .success(String(rounded)) } else { return .failure(-1) }\n    ^\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n >= 0 && m\
    \ >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum = n * m /\
    \ 2\n    let remainder = n * m % 2\n    \n    let result = (sum + remainder).rounded(.towardZero)\n\
    \    \n    if result < 0 {\n        return .failure(-1)\n    }\n    \n    return\
    \ .success(String(result))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpqrdha3aa.swift:25:36: error: value of type 'Int' has no member\
    \ 'rounded'\n    let result = (sum + remainder).rounded(.towardZero)\n       \
    \          ~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpqrdha3aa.swift:25:45: error: cannot\
    \ infer contextual base in reference to member 'towardZero'\n    let result =\
    \ (sum + remainder).rounded(.towardZero)\n                                   \
    \        ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let n = n.toInt()\n\
    \    let m = m.toInt()\n    \n    if n > m {\n        return .failure(-1)\n  \
    \  }\n    \n    let sum = n * m / 2\n    let binary = String(sum, radix: 2)\n\
    \    \n    return .success(binary)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpg3c1q3ii.swift:18:15: error: value of type 'Int' has no member\
    \ 'toInt'\n    let n = n.toInt()\n            ~ ^~~~~\n/tmp/tmpg3c1q3ii.swift:19:15:\
    \ error: value of type 'Int' has no member 'toInt'\n    let m = m.toInt()\n  \
    \          ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n >= 0 && m\
    \ >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum = n * m /\
    \ 2\n    let remainder = n % 2\n    \n    if remainder == 0 {\n        return\
    \ .success(String(format: \"0b%0*b\", Int(m), sum))\n    }\n    \n    return .failure(-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpv84w1o8z.swift:26:31: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        return .success(String(format:\
    \ \"0b%0*b\", Int(m), sum))\n                              ^~~~~~~~~\n       \
    \                                          radix:  uppercase: \n/tmp/tmpv84w1o8z.swift:26:58:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     return .success(String(format: \"0b%0*b\", Int(m), sum))\n             \
    \                                            ^\n                             \
    \                            (   != 0)\n/tmp/tmpv84w1o8z.swift:26:25: error: initializer\
    \ 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \        return .success(String(format: \"0b%0*b\", Int(m), sum))\n          \
    \              ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public init<T>(_\
    \ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let result = n / m\n\
    \    let remainder = n % m\n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", result.bitCount, result))\n    }\n    return .failure(-1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp53w9hbdf.swift:21:31: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        return .success(String(format:\
    \ \"0b%0*b\", result.bitCount, result))\n                              ^~~~~~~~~\n\
    \                                                 radix:           uppercase:\
    \ \n/tmp/tmp53w9hbdf.swift:21:67: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return .success(String(format: \"0b%0*b\",\
    \ result.bitCount, result))\n                                                \
    \                  ^\n                                                       \
    \           (      != 0)\n/tmp/tmp53w9hbdf.swift:21:25: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'String' conform to 'BinaryInteger'\n        return .success(String(format:\
    \ \"0b%0*b\", result.bitCount, result))\n                        ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmp53w9hbdf.swift:21:57:\
    \ error: value of type 'Int' has no member 'bitCount'\n        return .success(String(format:\
    \ \"0b%0*b\", result.bitCount, result))\n                                    \
    \             ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    \n    let sum = n * m / 2\n    let remainder\
    \ = n * m % 2\n    \n    return .success(String(format: \"0b%0*b\", (remainder\
    \ + 1).count, remainder))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpte86nz2c.swift:25:57: error: binary operator '+' cannot be applied\
    \ to two 'Int' operands\n    return .success(String(format: \"0b%0*b\", (remainder\
    \ + 1).count, remainder))\n                                              ~~~~~~~~~\
    \ ^ ~\n/tmp/tmpte86nz2c.swift:25:57: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int), (String, String)\n    return\
    \ .success(String(format: \"0b%0*b\", (remainder + 1).count, remainder))\n   \
    \                                                     ^\n/tmp/tmpte86nz2c.swift:25:27:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    return .success(String(format: \"0b%0*b\", (remainder + 1).count, remainder))\n\
    \                          ^~~~~~~~~\n                                       \
    \      radix:                 uppercase: \n/tmp/tmpte86nz2c.swift:25:69: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n    return\
    \ .success(String(format: \"0b%0*b\", (remainder + 1).count, remainder))\n   \
    \                                                                 ^\n        \
    \                                                            (         != 0)\n\
    /tmp/tmpte86nz2c.swift:25:21: error: initializer 'init(_:radix:uppercase:)' requires\
    \ that 'String' conform to 'BinaryInteger'\n    return .success(String(format:\
    \ \"0b%0*b\", (remainder + 1).count, remainder))\n                    ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n + m\n\
    \    let avg = sum / 2\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ n, m, avg)\n    return binary.roundToInt().map(String.init)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpfrn3ed46.swift:20:49: error: cannot find 'ceil' in scope\n    let\
    \ binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), n, m, avg)\n\
    \                                                ^~~~\n/tmp/tmpfrn3ed46.swift:20:54:\
    \ error: cannot find 'log2' in scope\n    let binary = String(format: \"%0*b%0*b\"\
    , Int(ceil(log2(Float(sum)))), n, m, avg)\n                                  \
    \                   ^~~~\n/tmp/tmpfrn3ed46.swift:20:24: error: extra arguments\
    \ at positions #4, #5 in call\n    let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))),\
    \ n, m, avg)\n                       ^\nSwift.String:2:12: note: 'init(_:radix:uppercase:)'\
    \ declared here\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n/tmp/tmpfrn3ed46.swift:20:74:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ let binary = String(format: \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), n, m,\
    \ avg)\n                                                                     \
    \    ^\n                                                                     \
    \    ( != 0)\n/tmp/tmpfrn3ed46.swift:20:18: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'String' conform to 'BinaryInteger'\n    let binary = String(format:\
    \ \"%0*b%0*b\", Int(ceil(log2(Float(sum)))), n, m, avg)\n                 ^\n\
    Swift.String:2:12: note: where 'T' = 'String'\n    public init<T>(_ value: T,\
    \ radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n        \
    \   ^\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let sum = n * m /\
    \ 2\n    let remainder = n * m % 2\n    if remainder == 0 {\n        return .success(String(sum))\n\
    \    }\n    return .failure(-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpdzldn0il/tmpdzldn0il.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07b2bfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07b28f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07b28f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07b28f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzldn0il                        0x0000557e7e158795 <unavailable> + 6037

    5    libc.so.6                          0x00002b07b2de6460 __libc_start_main +
    245

    6    tmpdzldn0il                        0x0000557e7e158399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let result = n / m\n\
    \    if result > m {\n        return .failure(-1)\n    }\n    return .success(String(format:\
    \ \"0b%0*b\", result.magnitude, result))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpbdtw65_z.swift:22:27: error: extra arguments at positions #2, #3\
    \ in call\n    return .success(String(format: \"0b%0*b\", result.magnitude, result))\n\
    \                          ^\nSwift.String:4:23: note: 'init(_:)' declared here\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n >= 0 && m\
    \ >= 0 else {\n        return .failure(-1)\n    }\n    \n    let sum = n * m /\
    \ 2\n    let avg = sum / 2\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n    \n    if binary == \"0b0\" {\n        return .success(binary)\n  \
    \  }\n    \n    return .failure(-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmpjy5ds41n.swift:24:45: error: cannot find 'ceil' in scope\n    let\
    \ binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))), avg)\n     \
    \                                       ^~~~\n/tmp/tmpjy5ds41n.swift:24:50: error:\
    \ cannot find 'log2' in scope\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n                                                 ^~~~\n/tmp/tmpjy5ds41n.swift:24:24:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))), avg)\n\
    \                       ^~~~~~~~~\n                                        radix:\
    \                        uppercase: \n/tmp/tmpjy5ds41n.swift:24:71: error: type\
    \ 'Int' cannot be used as a boolean; test for '!= 0' instead\n    let binary =\
    \ String(format: \"%0*b\", Int(ceil(log2(Double(sum)))), avg)\n              \
    \                                                        ^\n                 \
    \                                                     (   != 0)\n/tmp/tmpjy5ds41n.swift:24:18:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n    let binary = String(format: \"%0*b\", Int(ceil(log2(Double(sum)))),\
    \ avg)\n                 ^\nSwift.String:2:12: note: where 'T' = 'String'\n  \
    \  public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let result = n / m\n\
    \    let remainder = n % m\n    \n    if remainder == 0 {\n        return .success(String(format:\
    \ \"0b%0*b\", m.toBinary(), result))\n    }\n    \n    return .failure(-1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp31lhktcn.swift:22:31: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        return .success(String(format:\
    \ \"0b%0*b\", m.toBinary(), result))\n                              ^~~~~~~~~\n\
    \                                                 radix:        uppercase: \n\
    /tmp/tmp31lhktcn.swift:22:64: error: type 'Int' cannot be used as a boolean; test\
    \ for '!= 0' instead\n        return .success(String(format: \"0b%0*b\", m.toBinary(),\
    \ result))\n                                                               ^\n\
    \                                                               (      != 0)\n\
    /tmp/tmp31lhktcn.swift:22:25: error: initializer 'init(_:radix:uppercase:)' requires\
    \ that 'String' conform to 'BinaryInteger'\n        return .success(String(format:\
    \ \"0b%0*b\", m.toBinary(), result))\n                        ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmp31lhktcn.swift:22:52:\
    \ error: value of type 'Int' has no member 'toBinary'\n        return .success(String(format:\
    \ \"0b%0*b\", m.toBinary(), result))\n                                       \
    \          ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659825678
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    \n    var sum = 0\n    for i in 0..<m {\n\
    \        sum += i\n    }\n    \n    var result = \"\"\n    for i in 0..<n {\n\
    \        let digit = sum % 2 == 0 ? \"0\" : \"1\"\n        result += digit\n \
    \       sum /= 2\n    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp0wn1apdg/tmp0wn1apdg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32eaaacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32ea7a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32ea7a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32ea7a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wn1apdg                        0x0000560d490db815 <unavailable> + 6165

    5    libc.so.6                          0x00002b32eac98460 __libc_start_main +
    245

    6    tmp0wn1apdg                        0x0000560d490db419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659825678
