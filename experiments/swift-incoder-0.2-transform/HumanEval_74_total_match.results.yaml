language: swift
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if lst.contains(x) {\n            lst.remove(x)\n        }\n    }\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwl_yis18.swift:20:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(x)\n                ^\n/tmp/tmpwl_yis18.swift:20:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(x)\n                ^\n/tmp/tmpwl_yis18.swift:20:17: note:\
    \ candidate expects value of type 'Array<String>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            lst.remove(x)\n                ^\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for index\
    \ in 0..<lst2.count {\n        if lst3.contains(lst2[index]) {\n            lst3\
    \ = lst3.filter { $0 != lst2[index] }\n        } else {\n            lst3 = lst3\
    \ + [lst2[index]]\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp35gvc19h/tmp35gvc19h.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b303dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b2d34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2b2d34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2b2d337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35gvc19h                        0x000055f605745afa <unavailable> + 6906

    5    libc.so.6                          0x00002ba2b3229460 __libc_start_main +
    245

    6    tmp35gvc19h                        0x000055f6057454d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst = append(lst, x)\n      \
    \  }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp73th0x0t.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n/tmp/tmp73th0x0t.swift:20:19:\
    \ error: cannot find 'append' in scope\n            lst = append(lst, x)\n   \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc8u1omsy/tmpc8u1omsy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13b8f5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13b8c51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13b8c51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13b8c507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8u1omsy                        0x00005628178649aa <unavailable> + 6570

    5    libc.so.6                          0x00002b13b9146460 __libc_start_main +
    245

    6    tmpc8u1omsy                        0x0000562817864389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in lst2\
    \ {\n        lst3 = lst3\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpbvj3ed43.swift:19:14: error: assigning a variable to itself\n \
    \       lst3 = lst3\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  if result.count == 0 {\n        return result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpz3aeqb8f.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpz3aeqb8f.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpdf6b5qqn.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpdf6b5qqn.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !contains(lst1, x) {\n            lst3 = append(lst3, x)\n   \
    \     }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe_c26_xm.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, x) {\n            ^~~~~~~~\n/tmp/tmpe_c26_xm.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, x)\n \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    if result.count == 0 {\n        return result\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp0sn0u2mh/tmp0sn0u2mh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076117bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0760e72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0760e72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0760e717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sn0u2mh                        0x0000564b147df9ba <unavailable> + 6586

    5    libc.so.6                          0x00002b0761367460 __libc_start_main +
    245

    6    tmp0sn0u2mh                        0x0000564b147df399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpksyln85x.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpksyln85x.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptax2azue/tmptax2azue.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b310f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b30decb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b30dec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b30deb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptax2azue                        0x0000556240e5ca2a <unavailable> + 6698

    5    libc.so.6                          0x00002b9b312e1460 __libc_start_main +
    245

    6    tmptax2azue                        0x0000556240e5c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s == s2 {\n          \
    \      result.append(s)\n                break\n            }\n        }\n   \
    \ }\n    if result.count == 0 {\n        return result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpzriytq9i/tmpzriytq9i.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b14f2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b14c24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b14c24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b14c237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzriytq9i                        0x00005561582719ba <unavailable> + 6586

    5    libc.so.6                          0x00002b6b15119460 __libc_start_main +
    245

    6    tmpzriytq9i                        0x0000556158271399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in lst2\
    \ {\n        lst3 = lst3\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpbvj3ed43.swift:19:14: error: assigning a variable to itself\n \
    \       lst3 = lst3\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  if lst1.count == lst2.count {\n        return result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp32ta0ja0.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp32ta0ja0.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpjiyanh43/tmpjiyanh43.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09c4a21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09c4718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09c4718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09c47177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiyanh43                        0x0000563ebccc597a <unavailable> + 6522

    5    libc.so.6                          0x00002b09c4c0d460 __libc_start_main +
    245

    6    tmpjiyanh43                        0x0000563ebccc5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbu_f34d7/tmpbu_f34d7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a05c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a058ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a058ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a058fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu_f34d7                        0x000055d16b34195a <unavailable> + 6490

    5    libc.so.6                          0x00002b5a05df4460 __libc_start_main +
    245

    6    tmpbu_f34d7                        0x000055d16b341339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpegnzpyf5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpegnzpyf5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n            if str1.characters.count == str2.characters.count\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvka2fc9q.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpvka2fc9q.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvka2fc9q.swift:24:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvka2fc9q.swift:24:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for str\
    \ in lst2 {\n        if !contains(result, str) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmvoe8g_9.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, str) {\n            ^~~~~~~~\n/tmp/tmpmvoe8g_9.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, str)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in lst2\
    \ {\n        lst3 = lst3\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpbvj3ed43.swift:19:14: error: assigning a variable to itself\n \
    \       lst3 = lst3\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n            } else {\n                result\
    \ += [str1]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpy1_6cz3t.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpy1_6cz3t.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                lst3.append(str2)\n            } else {\n               \
    \ lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpix4lle9_/tmpix4lle9_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaec43fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaec40f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaec40f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaec40f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpix4lle9_                        0x00005628cc5a095a <unavailable> + 6490

    5    libc.so.6                          0x00002aaec45e9460 __libc_start_main +
    245

    6    tmpix4lle9_                        0x00005628cc5a0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for str\
    \ in lst2 {\n        if !contains(result, str) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmvoe8g_9.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, str) {\n            ^~~~~~~~\n/tmp/tmpmvoe8g_9.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, str)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<lst1.count {\n        if lst1[i] < lst2[i] {\n            result.append(lst1[i])\n\
    \        } else {\n            result.append(lst2[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp0cwksatv/tmp0cwksatv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b0b00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b07f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b07f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b07f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cwksatv                        0x0000555923f7ca2a <unavailable> + 6698

    5    libc.so.6                          0x00002b05b0cec460 __libc_start_main +
    245

    6    tmp0cwksatv                        0x0000555923f7c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n            } else {\n                result\
    \ += [str1]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpy1_6cz3t.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpy1_6cz3t.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in lst2\
    \ {\n        lst3 = lst3\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpbvj3ed43.swift:19:14: error: assigning a variable to itself\n \
    \       lst3 = lst3\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3 = lst3.filter({$0 != x})\n\
    \        } else {\n            lst3.append(x)\n        }\n    }\n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp616_z_yt/tmp616_z_yt.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1aa3dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1aa0d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1aa0d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1aa0d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp616_z_yt                        0x000055887674fa3a <unavailable> + 6714

    5    libc.so.6                          0x00002ac1aa5c6460 __libc_start_main +
    245

    6    tmp616_z_yt                        0x000055887674f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for element\
    \ in lst2 {\n        if lst3.contains(element) {\n            lst3.remove(element)\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmph9qd2g_4.swift:20:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst3.remove(element)\n                 ^\n/tmp/tmph9qd2g_4.swift:20:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst3.remove(element)\n                 ^\n/tmp/tmph9qd2g_4.swift:20:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst3.remove(element)\n            \
    \     ^\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n        }\n    }\n    if result.count == 0 {\n   \
    \     return result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpd7v5qpvu.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpd7v5qpvu.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi9rxwhx6/tmpi9rxwhx6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c5da66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c5d75db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c5d75d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c5d75c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9rxwhx6                        0x0000563c0e51da2a <unavailable> + 6698

    5    libc.so.6                          0x00002b8c5dc52460 __libc_start_main +
    245

    6    tmpi9rxwhx6                        0x0000563c0e51d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpegnzpyf5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpegnzpyf5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnqi131a1/tmpnqi131a1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc66bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc668cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc668ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc668c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqi131a1                        0x000055966354074a <unavailable> + 5962

    5    libc.so.6                          0x00002acc66dbf460 __libc_start_main +
    245

    6    tmpnqi131a1                        0x0000559663540129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for x in\
    \ lst2 {\n        if !contains(result, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpki3r5vtt.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, x) {\n            ^~~~~~~~\n/tmp/tmpki3r5vtt.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, x)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst.append(x)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwq9vlt_h.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    if lst1.count > lst2.count {\n        return\
    \ lst2\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpknoqk1y5/tmpknoqk1y5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae38e20dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae38df04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae38df04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae38df037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknoqk1y5                        0x000055f1075a974a <unavailable> + 5962

    5    libc.so.6                          0x00002ae38e3f9460 __libc_start_main +
    245

    6    tmpknoqk1y5                        0x000055f1075a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst.append(x)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwq9vlt_h.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n            if str1.characters.count == str2.characters.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp_98p92dl.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp_98p92dl.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_98p92dl.swift:24:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_98p92dl.swift:24:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6bmqopt5/tmp6bmqopt5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6d87ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6d575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6d575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6d5747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bmqopt5                        0x00005597daf3495a <unavailable> + 6490

    5    libc.so.6                          0x00002abb6da6a460 __libc_start_main +
    245

    6    tmp6bmqopt5                        0x00005597daf34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpd2okemrk/tmpd2okemrk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbcba9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbcb793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbcb793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbcb7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2okemrk                        0x0000557d6ced5aba <unavailable> + 6842

    5    libc.so.6                          0x00002adbcbc88460 __libc_start_main +
    245

    6    tmpd2okemrk                        0x0000557d6ced5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp02mpt3g_/tmp02mpt3g_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea747c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea744bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea744bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea744bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02mpt3g_                        0x0000560de500b95a <unavailable> + 6490

    5    libc.so.6                          0x00002aea749b2460 __libc_start_main +
    245

    6    tmp02mpt3g_                        0x0000560de500b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp5wr8ciqc/tmp5wr8ciqc.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba99ec9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba99e993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba99e993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba99e9927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wr8ciqc                        0x000055d00bff8c8f <unavailable> + 7311

    5    libc.so.6                          0x00002ba99ee88460 __libc_start_main +
    245

    6    tmp5wr8ciqc                        0x000055d00bff8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in 0..<(lst1.count\
    \ + lst2.count) {\n        lst3.append(\"\")\n    }\n    var i = 0\n    for _\
    \ in 0..<(lst1.count + lst2.count) {\n        lst3[i] = lst1[i]\n        i +=\
    \ 1\n    }\n    for _ in 0..<(lst2.count + lst1.count) {\n        lst3[i] = lst2[i]\n\
    \        i += 1\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b364bd27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b364ba1e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b364ba1e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b364ba1e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b364ba1dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b364b81dfc3 <unavailable> + 188355

    6    tmpigkc9cge                        0x000055b71b9a6dae <unavailable> + 11694

    7    tmpigkc9cge                        0x000055b71b9a5894 <unavailable> + 6292

    8    libc.so.6                          0x00002b364bf13460 __libc_start_main +
    245

    9    tmpigkc9cge                        0x000055b71b9a53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprd8agxr7/tmprd8agxr7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b711a6b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b711a3a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b711a3a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b711a3a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprd8agxr7                        0x00005562450d8aba <unavailable> + 6842

    5    libc.so.6                          0x00002b711a89e460 __libc_start_main +
    245

    6    tmprd8agxr7                        0x00005562450d8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for element\
    \ in lst2 {\n        if lst.contains(element) {\n            lst.remove(element)\n\
    \        }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpqpozzhm9.swift:20:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(element)\n                ^\n/tmp/tmpqpozzhm9.swift:20:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(element)\n                ^\n/tmp/tmpqpozzhm9.swift:20:17:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst.remove(element)\n             \
    \   ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n            } else {\n                result\
    \ += [str1]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpy1_6cz3t.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpy1_6cz3t.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbu_f34d7/tmpbu_f34d7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a05c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a058ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a058ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a058fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu_f34d7                        0x000055d16b34195a <unavailable> + 6490

    5    libc.so.6                          0x00002b5a05df4460 __libc_start_main +
    245

    6    tmpbu_f34d7                        0x000055d16b341339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in lst2\
    \ {\n        lst3 = lst3\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpbvj3ed43.swift:19:14: error: assigning a variable to itself\n \
    \       lst3 = lst3\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str in lst1 {\n        if lst2.contains(str) {\n            lst3.append(str)\n\
    \        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp0p87emyr/tmp0p87emyr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e1754c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e144bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e144b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e144a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0p87emyr                        0x000056471332196a <unavailable> + 6506

    5    libc.so.6                          0x00002ac7e1940460 __libc_start_main +
    245

    6    tmp0p87emyr                        0x0000564713321349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbu_f34d7/tmpbu_f34d7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a05c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a058ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a058ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a058fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu_f34d7                        0x000055d16b34195a <unavailable> + 6490

    5    libc.so.6                          0x00002b5a05df4460 __libc_start_main +
    245

    6    tmpbu_f34d7                        0x000055d16b341339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmps_anuhe7/tmps_anuhe7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3550586c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b355027db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b355027d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b355027c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_anuhe7                        0x000055991f4d7c8f <unavailable> + 7311

    5    libc.so.6                          0x00002b3550772460 __libc_start_main +
    245

    6    tmps_anuhe7                        0x000055991f4d7389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if element < result {\n            result = element\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpltvkzm6l.swift:19:22: error: cannot convert value of type '[String]'\
    \ to expected argument type 'String'\n        if element < result {\n        \
    \             ^\n/tmp/tmpltvkzm6l.swift:20:22: error: cannot assign value of type\
    \ 'String' to type '[String]'\n            result = element\n                \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        if !contains(lst2, str) {\n            result.append(str)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvy27qaha.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, str) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        if !contains(lst2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpenaqd40v.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbu_f34d7/tmpbu_f34d7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a05c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a058ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a058ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a058fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu_f34d7                        0x000055d16b34195a <unavailable> + 6490

    5    libc.so.6                          0x00002b5a05df4460 __libc_start_main +
    245

    6    tmpbu_f34d7                        0x000055d16b341339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if lst.contains(x) {\n            lst.remove(x)\n        }\n    }\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwl_yis18.swift:20:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(x)\n                ^\n/tmp/tmpwl_yis18.swift:20:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(x)\n                ^\n/tmp/tmpwl_yis18.swift:20:17: note:\
    \ candidate expects value of type 'Array<String>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            lst.remove(x)\n                ^\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  if result.count == 0 {\n        return result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpz3aeqb8f.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpz3aeqb8f.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for str\
    \ in lst2 {\n        if !contains(result, str) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmvoe8g_9.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, str) {\n            ^~~~~~~~\n/tmp/tmpmvoe8g_9.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, str)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1, str2]\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpl6xojrtc.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpl6xojrtc.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpegnzpyf5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpegnzpyf5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6bmqopt5/tmp6bmqopt5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6d87ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6d575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6d575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6d5747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bmqopt5                        0x00005597daf3495a <unavailable> + 6490

    5    libc.so.6                          0x00002abb6da6a460 __libc_start_main +
    245

    6    tmp6bmqopt5                        0x00005597daf34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !contains(lst1, x) {\n            lst3 = append(lst3, x)\n   \
    \     }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe_c26_xm.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, x) {\n            ^~~~~~~~\n/tmp/tmpe_c26_xm.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, x)\n \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for elem in\
    \ lst2 {\n        if lst.contains(elem) {\n            lst.remove(elem)\n    \
    \    }\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvm6ar7b3.swift:20:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(elem)\n                ^\n/tmp/tmpvm6ar7b3.swift:20:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(elem)\n                ^\n/tmp/tmpvm6ar7b3.swift:20:17:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst.remove(elem)\n                ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n            } else {\n                result\
    \ += [str2]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxj30xmhu.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxj30xmhu.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !contains(lst1, x) {\n            lst3 = append(lst3, x)\n   \
    \     }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe_c26_xm.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, x) {\n            ^~~~~~~~\n/tmp/tmpe_c26_xm.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, x)\n \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6bmqopt5/tmp6bmqopt5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6d87ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6d575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6d575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6d5747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bmqopt5                        0x00005597daf3495a <unavailable> + 6490

    5    libc.so.6                          0x00002abb6da6a460 __libc_start_main +
    245

    6    tmp6bmqopt5                        0x00005597daf34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  if result.count == 0 {\n        return lst1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1hdc2od5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp1hdc2od5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                lst3.append(str2)\n            } else {\n               \
    \ lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp3dtch9la.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp3dtch9la.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in 0..<min(lst1.count,\
    \ lst2.count) {\n        lst3.append(\"\")\n    }\n    for (_, v1) in lst1.enumerated()\
    \ {\n        for (_, v2) in lst2.enumerated() {\n            if v1 < v2 {\n  \
    \              lst3[lst1.index(v1)] = v2\n            }\n        }\n    }\n  \
    \  return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpsfyd2po6.swift:24:27: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                lst3[lst1.index(v1)] = v2\n                   \
    \       ^\n/tmp/tmpsfyd2po6.swift:24:27: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n                lst3[lst1.index(v1)]\
    \ = v2\n                          ^\n                                    ?? <#default\
    \ value#>\n/tmp/tmpsfyd2po6.swift:24:27: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                lst3[lst1.index(v1)]\
    \ = v2\n                          ^\n                                   !\n/tmp/tmpsfyd2po6.swift:24:33:\
    \ error: missing argument label 'of:' in call\n                lst3[lst1.index(v1)]\
    \ = v2\n                                ^\n                                of:\
    \ \n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3 = lst3.filter{$0 != x}\n\
    \        } else {\n            lst3.append(x)\n        }\n    }\n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpw03mh9_6/tmpw03mh9_6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ee0cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4eddc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4eddc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4eddc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw03mh9_6                        0x000056014be6aa3a <unavailable> + 6714

    5    libc.so.6                          0x00002ae4ee2b9460 __libc_start_main +
    245

    6    tmpw03mh9_6                        0x000056014be6a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                lst3.append(str2)\n            } else {\n               \
    \ lst3.append(str1)\n            }\n        }\n    }\n    return lst3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpix4lle9_/tmpix4lle9_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaec43fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaec40f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaec40f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaec40f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpix4lle9_                        0x00005628cc5a095a <unavailable> + 6490

    5    libc.so.6                          0x00002aaec45e9460 __libc_start_main +
    245

    6    tmpix4lle9_                        0x00005628cc5a0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpiw6m9ifa.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiw6m9ifa.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst.append(x)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwq9vlt_h.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpiz9jf5ty.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiz9jf5ty.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] != lst2[index] {\n            break\n\
    \        }\n        result.remove(at: index)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqlubtfsm/tmpqlubtfsm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1decf20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1decc17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1decc17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1decc167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlubtfsm                        0x000055e81555c9ca <unavailable> + 6602

    5    libc.so.6                          0x00002b1ded10c460 __libc_start_main +
    245

    6    tmpqlubtfsm                        0x000055e81555c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n            } else {\n                result\
    \ += [str1]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpy1_6cz3t.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpy1_6cz3t.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpd2okemrk/tmpd2okemrk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbcba9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbcb793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbcb793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbcb7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2okemrk                        0x0000557d6ced5aba <unavailable> + 6842

    5    libc.so.6                          0x00002adbcbc88460 __libc_start_main +
    245

    6    tmpd2okemrk                        0x0000557d6ced5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpdf6b5qqn.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpdf6b5qqn.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3.remove(x)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpu3douoxr.swift:20:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst3.remove(x)\n                 ^\n/tmp/tmpu3douoxr.swift:20:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst3.remove(x)\n                 ^\n/tmp/tmpu3douoxr.swift:20:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst3.remove(x)\n                 ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !contains(lst1, x) {\n            lst3 = append(lst3, x)\n   \
    \     }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe_c26_xm.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, x) {\n            ^~~~~~~~\n/tmp/tmpe_c26_xm.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, x)\n \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnqi131a1/tmpnqi131a1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc66bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc668cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc668ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc668c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqi131a1                        0x000055966354074a <unavailable> + 5962

    5    libc.so.6                          0x00002acc66dbf460 __libc_start_main +
    245

    6    tmpnqi131a1                        0x0000559663540129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !lst3.contains(x) {\n            lst3.append(x)\n        }\n \
    \   }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmgsoaw8s/tmpmgsoaw8s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fe133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fde2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fde2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fde297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgsoaw8s                        0x0000560c8482b91a <unavailable> + 6426

    5    libc.so.6                          0x00002b24fe31f460 __libc_start_main +
    245

    6    tmpmgsoaw8s                        0x0000560c8482b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for x in\
    \ lst2 {\n        if !contains(result, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpki3r5vtt.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, x) {\n            ^~~~~~~~\n/tmp/tmpki3r5vtt.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, x)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst.append(x)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwq9vlt_h.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3.remove(x)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpu3douoxr.swift:20:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst3.remove(x)\n                 ^\n/tmp/tmpu3douoxr.swift:20:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst3.remove(x)\n                 ^\n/tmp/tmpu3douoxr.swift:20:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst3.remove(x)\n                 ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for _ in lst2\
    \ {\n        lst = lst1\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp3iprcus9/tmp3iprcus9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7780a01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77806f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77806f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77806f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3iprcus9                        0x000055b8186b385a <unavailable> + 6234

    5    libc.so.6                          0x00002b7780bed460 __libc_start_main +
    245

    6    tmp3iprcus9                        0x000055b8186b3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1, str2]\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpl6xojrtc.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpl6xojrtc.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for _ in lst2\
    \ {\n        lst3 = lst3\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpbvj3ed43.swift:19:14: error: assigning a variable to itself\n \
    \       lst3 = lst3\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.characters.count\
    \ < y.characters.count {\n                result.append(x)\n                continue\n\
    \            }\n            \n            if x.characters.count == y.characters.count\
    \ {\n                result.append(x)\n            }\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp21bi667z.swift:24:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp21bi667z.swift:24:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp21bi667z.swift:29:18: error: 'characters'\
    \ is unavailable: Please use String directly\n            if x.characters.count\
    \ == y.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp21bi667z.swift:29:40: error: 'characters'\
    \ is unavailable: Please use String directly\n            if x.characters.count\
    \ == y.characters.count {\n                                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for element in lst1 {\n        if lst2.contains(element) {\n    \
    \        result.append(element)\n            i += 1\n        }\n    }\n    for\
    \ element in lst2 {\n        if !lst1.contains(element) {\n            result.append(element)\n\
    \        }\n    }\n    if i == 0 {\n        return result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp_v9nmv2t/tmp_v9nmv2t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb40898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb4058fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb4058f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb4058e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_v9nmv2t                        0x0000557e2cae696a <unavailable> + 6506

    5    libc.so.6                          0x00002abb40a84460 __libc_start_main +
    245

    6    tmp_v9nmv2t                        0x0000557e2cae6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for s in lst2\
    \ {\n        if !contains(lst, s) {\n            lst.append(s)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpum3ct38v.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, s) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpszp4qd70.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpszp4qd70.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              lst3.append(str)\n            }\n        }\n    }\n    return lst3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmaeg119k/tmpmaeg119k.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac69745dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac697154b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac697154988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6971537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmaeg119k                        0x00005608c4c91c3f <unavailable> + 7231

    5    libc.so.6                          0x00002ac697649460 __libc_start_main +
    245

    6    tmpmaeg119k                        0x00005608c4c91339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for s in lst2\
    \ {\n        if lst.contains(s) {\n            lst.remove(s)\n        }\n    }\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp47ou_xa_.swift:20:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(s)\n                ^\n/tmp/tmp47ou_xa_.swift:20:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(s)\n                ^\n/tmp/tmp47ou_xa_.swift:20:17: note:\
    \ candidate expects value of type 'Array<String>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            lst.remove(s)\n                ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst.append(x)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwq9vlt_h.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for _ in lst2\
    \ {\n        lst.append(\"\")\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqn2shyxr/tmpqn2shyxr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8f90b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8f8dadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8f8dad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8f8dac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqn2shyxr                        0x000056216ec3c8aa <unavailable> + 6314

    5    libc.so.6                          0x00002ab8f92a2460 __libc_start_main +
    245

    6    tmpqn2shyxr                        0x000056216ec3c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                lst3.append(str2)\n            }\
    \ else {\n                lst3.append(str1)\n            }\n        }\n    }\n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp9vvxqpct.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp9vvxqpct.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwthfzp8_.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpwthfzp8_.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprd8agxr7/tmprd8agxr7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b711a6b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b711a3a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b711a3a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b711a3a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprd8agxr7                        0x00005562450d8aba <unavailable> + 6842

    5    libc.so.6                          0x00002b711a89e460 __libc_start_main +
    245

    6    tmprd8agxr7                        0x00005562450d8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] != lst2[index] {\n            break\n\
    \        }\n        result.remove(at: index)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqlubtfsm/tmpqlubtfsm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1decf20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1decc17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1decc17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1decc167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlubtfsm                        0x000055e81555c9ca <unavailable> + 6602

    5    libc.so.6                          0x00002b1ded10c460 __libc_start_main +
    245

    6    tmpqlubtfsm                        0x000055e81555c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !contains(lst1, x) {\n            lst3 = append(lst3, x)\n   \
    \     }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe_c26_xm.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, x) {\n            ^~~~~~~~\n/tmp/tmpe_c26_xm.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, x)\n \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6bmqopt5/tmp6bmqopt5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6d87ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6d575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6d575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6d5747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bmqopt5                        0x00005597daf3495a <unavailable> + 6490

    5    libc.so.6                          0x00002abb6da6a460 __libc_start_main +
    245

    6    tmp6bmqopt5                        0x00005597daf34339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result = append(result, lst1[index])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpr10vatvm.swift:20:22: error: cannot find 'append' in scope\n  \
    \          result = append(result, lst1[index])\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              lst3.append(str)\n                break\n            }\n      \
    \  }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2i9rzi_5/tmp2i9rzi_5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba19cc8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19c984b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19c984988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba19c9837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2i9rzi_5                        0x000055c51af9995a <unavailable> + 6490

    5    libc.so.6                          0x00002ba19ce79460 __libc_start_main +
    245

    6    tmp2i9rzi_5                        0x000055c51af99339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n                break\n            }\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj86fj5l4.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj86fj5l4.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpquqrkwxs.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpquqrkwxs.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if !contains(lst, x) {\n            lst.append(x)\n        }\n  \
    \  }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpwq9vlt_h.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    lst3.append(x)\n                break\n            }\n        }\n    }\n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp4d8mv8b7/tmp4d8mv8b7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af22682bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af226522b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af226522988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2265217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4d8mv8b7                        0x000055f1669da95a <unavailable> + 6490

    5    libc.so.6                          0x00002af226a17460 __libc_start_main +
    245

    6    tmp4d8mv8b7                        0x000055f1669da339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbu_f34d7/tmpbu_f34d7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a05c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a058ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a058ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a058fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu_f34d7                        0x000055d16b34195a <unavailable> + 6490

    5    libc.so.6                          0x00002b5a05df4460 __libc_start_main +
    245

    6    tmpbu_f34d7                        0x000055d16b341339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpegnzpyf5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpegnzpyf5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmps_anuhe7/tmps_anuhe7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3550586c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b355027db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b355027d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b355027c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_anuhe7                        0x000055991f4d7c8f <unavailable> + 7311

    5    libc.so.6                          0x00002b3550772460 __libc_start_main +
    245

    6    tmps_anuhe7                        0x000055991f4d7389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3.remove(x)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpu3douoxr.swift:20:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst3.remove(x)\n                 ^\n/tmp/tmpu3douoxr.swift:20:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst3.remove(x)\n                 ^\n/tmp/tmpu3douoxr.swift:20:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst3.remove(x)\n                 ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n   \
    \         result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp61uwxpo3/tmp61uwxpo3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5113e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5110e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5110e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5110df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uwxpo3                        0x0000563b01258aba <unavailable> + 6842

    5    libc.so.6                          0x00002ae5115d5460 __libc_start_main +
    245

    6    tmp61uwxpo3                        0x0000563b01258499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnqi131a1/tmpnqi131a1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc66bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc668cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc668ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc668c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqi131a1                        0x000055966354074a <unavailable> + 5962

    5    libc.so.6                          0x00002acc66dbf460 __libc_start_main +
    245

    6    tmpnqi131a1                        0x0000559663540129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s == s2 {\n          \
    \      result.append(s)\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp08vpbzua/tmp08vpbzua.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e72a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e72781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e72781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e727807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp08vpbzua                        0x000055c38079595a <unavailable> + 6490

    5    libc.so.6                          0x00002b5e72c76460 __libc_start_main +
    245

    6    tmp08vpbzua                        0x000055c380795339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str2]\n            }\n        }\n    }\n    if\
    \ lst1.count == lst2.count {\n        return result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1hblyptd.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp1hblyptd.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5zu_wadi.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmp5zu_wadi.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for element\
    \ in lst2 {\n        if !contains(lst1, element) {\n            lst3 = append(lst3,\
    \ element)\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp80x2vth6.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, element) {\n            ^~~~~~~~\n/tmp/tmp80x2vth6.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, element)\n\
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnqi131a1/tmpnqi131a1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc66bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc668cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc668ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc668c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqi131a1                        0x000055966354074a <unavailable> + 5962

    5    libc.so.6                          0x00002acc66dbf460 __libc_start_main +
    245

    6    tmpnqi131a1                        0x0000559663540129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpegnzpyf5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpegnzpyf5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lmhr9a.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpj2lmhr9a.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if element < result {\n            result = element\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpltvkzm6l.swift:19:22: error: cannot convert value of type '[String]'\
    \ to expected argument type 'String'\n        if element < result {\n        \
    \             ^\n/tmp/tmpltvkzm6l.swift:20:22: error: cannot assign value of type\
    \ 'String' to type '[String]'\n            result = element\n                \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n   \
    \         result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnk8fk1lc/tmpnk8fk1lc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c54efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c51e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33c51e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33c51e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnk8fk1lc                        0x00005640eaa99aba <unavailable> + 6842

    5    libc.so.6                          0x00002b33c56db460 __libc_start_main +
    245

    6    tmpnk8fk1lc                        0x00005640eaa99499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpiw6m9ifa.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiw6m9ifa.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for s in lst1 {\n        if i < len(lst2) {\n            if s ==\
    \ lst2[i] {\n                i += 1\n            } else {\n                result.insert(i,\
    \ s)\n                i = 0\n            }\n        } else {\n            result.insert(i,\
    \ s)\n            i = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp2onx_042.swift:20:16: error: cannot find 'len' in scope\n     \
    \   if i < len(lst2) {\n               ^~~\n/tmp/tmp2onx_042.swift:24:30: error:\
    \ missing argument labels 'contentsOf:at:' in call\n                result.insert(i,\
    \ s)\n                             ^\n                              contentsOf:\
    \  at: \n/tmp/tmp2onx_042.swift:24:34: error: cannot convert value of type 'String'\
    \ to expected argument type 'Array<String>.Index' (aka 'Int')\n              \
    \  result.insert(i, s)\n                                 ^\n/tmp/tmp2onx_042.swift:24:17:\
    \ error: instance method 'insert(contentsOf:at:)' requires that 'Int' conform\
    \ to 'Collection'\n                result.insert(i, s)\n                ^\nSwift.RangeReplaceableCollection:7:37:\
    \ note: where 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf\
    \ newElements: __owned C, at i: Self.Index) where C : Collection, Self.Element\
    \ == C.Element\n                                    ^\n/tmp/tmp2onx_042.swift:28:13:\
    \ error: instance method 'insert(contentsOf:at:)' requires that 'Int' conform\
    \ to 'Collection'\n            result.insert(i, s)\n            ^\nSwift.RangeReplaceableCollection:7:37:\
    \ note: where 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf\
    \ newElements: __owned C, at i: Self.Index) where C : Collection, Self.Element\
    \ == C.Element\n                                    ^\n/tmp/tmp2onx_042.swift:28:26:\
    \ error: missing argument labels 'contentsOf:at:' in call\n            result.insert(i,\
    \ s)\n                         ^\n                          contentsOf:  at: \n\
    /tmp/tmp2onx_042.swift:28:30: error: cannot convert value of type 'String' to\
    \ expected argument type 'Array<String>.Index' (aka 'Int')\n            result.insert(i,\
    \ s)\n                             ^\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmps_anuhe7/tmps_anuhe7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3550586c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b355027db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b355027d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b355027c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_anuhe7                        0x000055991f4d7c8f <unavailable> + 7311

    5    libc.so.6                          0x00002b3550772460 __libc_start_main +
    245

    6    tmps_anuhe7                        0x000055991f4d7389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if !contains(lst1, x) {\n            lst3 = append(lst3, x)\n   \
    \     }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpe_c26_xm.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst1, x) {\n            ^~~~~~~~\n/tmp/tmpe_c26_xm.swift:20:20:\
    \ error: cannot find 'append' in scope\n            lst3 = append(lst3, x)\n \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp02mpt3g_/tmp02mpt3g_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea747c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea744bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea744bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea744bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02mpt3g_                        0x0000560de500b95a <unavailable> + 6490

    5    libc.so.6                          0x00002aea749b2460 __libc_start_main +
    245

    6    tmp02mpt3g_                        0x0000560de500b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s == s2 {\n          \
    \      result.append(s)\n                break\n            }\n        }\n   \
    \ }\n    if result.count == 0 {\n        return result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpzriytq9i/tmpzriytq9i.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b14f2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b14c24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b14c24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b14c237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzriytq9i                        0x00005561582719ba <unavailable> + 6586

    5    libc.so.6                          0x00002b6b15119460 __libc_start_main +
    245

    6    tmpzriytq9i                        0x0000556158271399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpxa_w2pwa.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpxa_w2pwa.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpkcm6heqw.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpkcm6heqw.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2nnpn9r5/tmp2nnpn9r5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51e0c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51e0916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51e0916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51e09157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nnpn9r5                        0x000056379f45f95a <unavailable> + 6490

    5    libc.so.6                          0x00002b51e0e0b460 __libc_start_main +
    245

    6    tmp2nnpn9r5                        0x000056379f45f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820834
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp02mpt3g_/tmp02mpt3g_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea747c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea744bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea744bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea744bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02mpt3g_                        0x0000560de500b95a <unavailable> + 6490

    5    libc.so.6                          0x00002aea749b2460 __libc_start_main +
    245

    6    tmp02mpt3g_                        0x0000560de500b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for element\
    \ in lst2 {\n        if lst3.contains(element) {\n            lst3 = lst3.filter\
    \ { $0 != element }\n        } else {\n            lst3 = lst3 + [element]\n \
    \       }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2rqc8efd/tmp2rqc8efd.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7269bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc72392b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc72392988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc723917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rqc8efd                        0x00005592c01fba3a <unavailable> + 6714

    5    libc.so.6                          0x00002adc72887460 __libc_start_main +
    245

    6    tmp2rqc8efd                        0x00005592c01fb419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwc53t3hg/tmpwc53t3hg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69eade1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eaad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eaad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eaad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwc53t3hg                        0x00005635773a274a <unavailable> + 5962

    5    libc.so.6                          0x00002b69eafcd460 __libc_start_main +
    245

    6    tmpwc53t3hg                        0x00005635773a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2:\
    \ [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"\
    hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\"\
    , \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"\
    ], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    if result.count == 0 {\n        return result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpegnzpyf5.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpegnzpyf5.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009517
