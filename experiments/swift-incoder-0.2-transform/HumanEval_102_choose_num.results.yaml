language: swift
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    return choose_num(x, y / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvx6g4v6_.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpvx6g4v6_.swift:20:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n  \
    \  if x > y {\n        result = x\n    } else {\n        result = y\n    }\n \
    \   \n    if result % 2 == 0 {\n        return result\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplpfc7kr8/tmplpfc7kr8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a4e2dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a4dfd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a4dfd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a4dfd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplpfc7kr8                        0x000056125734a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7a4e4c8460 __libc_start_main +
    245

    6    tmplpfc7kr8                        0x0000561257349ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = result + 1\n    \
    \    }\n        remainder = remainder / 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpupabvgfo/tmpupabvgfo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f2f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f2c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f2c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f2c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupabvgfo                        0x000055a6bceab24d <unavailable> + 4685

    5    libc.so.6                          0x00002b34f3145460 __libc_start_main +
    245

    6    tmpupabvgfo                        0x000055a6bceaaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x % 2 == 0 {\n   \
    \     return x / 2\n    }\n    return y / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpuruv1907/tmpuruv1907.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ba7a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ba7783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ba7783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ba77827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuruv1907                        0x0000562259afc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8ba7c78460 __libc_start_main +
    245

    6    tmpuruv1907                        0x0000562259afbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var biggest = Int()\n    var biggest2 = Int()\n    for var i\
    \ = x; i <= y; i++ {\n        if i % 2 == 0 {\n            if biggest < i {\n\
    \                biggest = i\n            }\n        } else {\n            if\
    \ biggest2 < i {\n                biggest2 = i\n            }\n        }\n   \
    \ }\n    if biggest == biggest2 {\n        return biggest\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7ownepey.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return x + (y % 2)\n    }\n    return choose_num(y / 2,\
    \ x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpqa7lpyts.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpqa7lpyts.swift:20:22: error: missing argument\
    \ labels 'x:y:' in call\n    return choose_num(y / 2, x)\n                   \
    \  ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x <= y {\n        if x % 2 == 0 && y\
    \ % 2 == 0 {\n            result = x\n            break\n        }\n        x\
    \ += 1\n        y -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpavczkxhl/tmpavczkxhl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd41543c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4123ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd4123a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd412397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavczkxhl                        0x00005580f4ac333d <unavailable> + 4925

    5    libc.so.6                          0x00002afd4172f460 __libc_start_main +
    245

    6    tmpavczkxhl                        0x00005580f4ac2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var even = Int()\n    var odd = Int()\n    \n    for _\
    \ in 0..<(x-y) {\n        even = even + 2\n        odd = odd + 2\n    }\n    \n\
    \    if even > y {\n        return -1\n    }\n    \n    return even\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp44lwx0jt/tmp44lwx0jt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7cf3e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7cf0d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7cf0d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7cf0d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44lwx0jt                        0x000055dd38c0933d <unavailable> + 4925

    5    libc.so.6                          0x00002ab7cf5ce460 __libc_start_main +
    245

    6    tmp44lwx0jt                        0x000055dd38c08fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x >= y {\n        if x % 2 == 0 {\n\
    \            if y % 2 == 0 {\n                result = x\n                break\n\
    \            } else {\n                result = y\n                break\n   \
    \         }\n        } else {\n            result = x\n            break\n   \
    \     }\n        x /= 2\n        y /= 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph9aciqlv/tmph9aciqlv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5390604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53902fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53902fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53902fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9aciqlv                        0x00005629c252133d <unavailable> + 4925

    5    libc.so.6                          0x00002b53907f0460 __libc_start_main +
    245

    6    tmph9aciqlv                        0x00005629c2520fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ < y {\n        for _ in 0..<(x-y) {\n            let x = x + 1\n           \
    \ if x % 2 == 0 {\n                result = x\n                break\n       \
    \     }\n        }\n    } else {\n        for _ in 0..<(y-x) {\n            let\
    \ y = y + 1\n            if y % 2 == 0 {\n                result = y\n       \
    \         break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b39432c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3942fbd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3942fbd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3942fbd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3942fbcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph06kaz5n                        0x000055fa9bfc684e <unavailable> + 6222

    6    tmph06kaz5n                        0x000055fa9bfc62d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b39434b2460 __libc_start_main +
    245

    8    tmph06kaz5n                        0x000055fa9bfc5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + y\n    }\n    if x % 2 == 0 {\n        return\
    \ y\n    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmr5xsrfi/tmpmr5xsrfi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5406b35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b540682cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b540682c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b540682b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr5xsrfi                        0x0000562d86f6824d <unavailable> + 4685

    5    libc.so.6                          0x00002b5406d21460 __libc_start_main +
    245

    6    tmpmr5xsrfi                        0x0000562d86f67ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for _ in 0..<(x-y)\
    \ {\n        even += 2\n        odd += 1\n    }\n    if even > y {\n        return\
    \ even\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpckzumafe.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpckzumafe.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x %\
    \ 2 == 0 {\n        return x - 1\n    }\n    if y % 2 == 0 {\n        return y\
    \ + 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8lz30mwt.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824544
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even:\
    \ Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even:\
    \ Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even:\
    \ Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even:\
    \ Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var even: Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even:\
    \ Bool = false\n    var x: Int = 0\n    var y: Int = 0\n    var even: Bool = false\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5r6hqr8q.swift:18:9: error: invalid redeclaration of 'x'\n    var\
    \ x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:15:9: note: 'x' previously declared\
    \ here\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:19:9: error: invalid\
    \ redeclaration of 'y'\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:16:9:\
    \ note: 'y' previously declared here\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:20:9:\
    \ error: invalid redeclaration of 'even'\n    var even: Bool = false\n       \
    \ ^\n/tmp/tmp5r6hqr8q.swift:17:9: note: 'even' previously declared here\n    var\
    \ even: Bool = false\n        ^\n/tmp/tmp5r6hqr8q.swift:21:9: error: invalid redeclaration\
    \ of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:15:9: note: 'x'\
    \ previously declared here\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:22:9:\
    \ error: invalid redeclaration of 'y'\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:16:9:\
    \ note: 'y' previously declared here\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:23:9:\
    \ error: invalid redeclaration of 'even'\n    var even: Bool = false\n       \
    \ ^\n/tmp/tmp5r6hqr8q.swift:17:9: note: 'even' previously declared here\n    var\
    \ even: Bool = false\n        ^\n/tmp/tmp5r6hqr8q.swift:24:9: error: invalid redeclaration\
    \ of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:15:9: note: 'x'\
    \ previously declared here\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:25:9:\
    \ error: invalid redeclaration of 'y'\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:16:9:\
    \ note: 'y' previously declared here\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:26:9:\
    \ error: invalid redeclaration of 'even'\n    var even: Bool = false\n       \
    \ ^\n/tmp/tmp5r6hqr8q.swift:17:9: note: 'even' previously declared here\n    var\
    \ even: Bool = false\n        ^\n/tmp/tmp5r6hqr8q.swift:27:9: error: invalid redeclaration\
    \ of 'x'\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:15:9: note: 'x'\
    \ previously declared here\n    var x: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.swift:28:9:\
    \ error: invalid redeclaration of 'y'\n    var y: Int = 0\n        ^\n/tmp/tmp5r6hqr8q.s"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x %\
    \ 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpuce6rlv5.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpuce6rlv5.swift:21:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpuce6rlv5.swift:24:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return\
    \ y / 2\n    }\n    if x > y {\n        return choose_num(y - 1, x)\n    }\n \
    \   if y > x {\n        return choose_num(y, x - 1)\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpuqbyqpf3.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpuqbyqpf3.swift:24:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(y - 1, x)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpuqbyqpf3.swift:27:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(y,\
    \ x - 1)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var result = -1\n    \n    for number in 1...y {\n\
    \        if number % 2 == 0 {\n            if number > result {\n            \
    \    result = number\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmprzf5aofj.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmprzf5aofj.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var result = -1\n    \n    for n in 0..<y {\n   \
    \     if x % 2 == 0 {\n            if n == y {\n                result = x\n \
    \               break\n            }\n            \n            if n == x {\n\
    \                result = n\n                break\n            }\n          \
    \  \n            if n > x {\n                result = n\n                break\n\
    \            }\n        }\n        \n        x /= 2\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpplicqhrv.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpplicqhrv.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpplicqhrv.swift:35:11: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n        x /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = remainder\n     \
    \   }\n        remainder = remainder / 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpgzt013dd/tmpgzt013dd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec452dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec44fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec44fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec44fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzt013dd                        0x00005639ab9b424d <unavailable> + 4685

    5    libc.so.6                          0x00002aec454c8460 __libc_start_main +
    245

    6    tmpgzt013dd                        0x00005639ab9b3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var result: Int = 0\n    var even: Int = 0\n    var\
    \ odd: Int = 0\n    \n    for i in 0..<x {\n        if i % 2 == 0 {\n        \
    \    even = even + i\n        } else {\n            odd = odd + i\n        }\n\
    \    }\n    \n    if even > y {\n        result = even\n    } else {\n       \
    \ result = odd\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpp85rgfqs.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpp85rgfqs.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    for _ in 0..<100\
    \ {\n        x = random(y)\n        y = random(x)\n        if x % 2 == 0 {\n \
    \           even = even * 2 + x\n        } else {\n            odd = odd * 2 +\
    \ y\n        }\n    }\n    if even > odd {\n        return even\n    } else {\n\
    \        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpkojdsr2o.swift:22:13: error: cannot find 'random' in scope\n  \
    \      x = random(y)\n            ^~~~~~\n/tmp/tmpkojdsr2o.swift:23:13: error:\
    \ cannot find 'random' in scope\n        y = random(x)\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x + 1, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y + 1)\n    }\n    return choose_num(x + 1, y + 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvugq1py_.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x + 1, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpvugq1py_.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y + 1)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpvugq1py_.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x + 1,\
    \ y + 1)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 == 0 {\n\
    \        return y\n    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmz82ujq4.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for _ in 0..<(x-y)\
    \ {\n        if x % 2 == 0 {\n            even += 2\n            x /= 2\n    \
    \    } else {\n            odd += 1\n            x /= 2\n        }\n    }\n  \
    \  if even > odd {\n        return even\n    } else {\n        return odd\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpipc81bz_.swift:19:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x /= 2\n            ~ ^\n/tmp/tmpipc81bz_.swift:22:15:\
    \ error: left side of mutating operator isn't mutable: 'x' is a 'let' constant\n\
    \            x /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n \
    \   for _ in 0..<(y - x) {\n        even += 2\n        odd += 2\n    }\n    \n\
    \    if even > odd {\n        return even\n    } else {\n        return -1\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5yyq79q3.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp5yyq79q3.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    if x == y {\n        return x\n    }\n  \
    \  \n    if x % 2 == 0 && y % 2 == 0 {\n        return x + (y / 2)\n    }\n  \
    \  \n    if x % 2 == 0 && y % 2 != 0 {\n        return y\n    }\n    \n    if\
    \ x % 2 != 0 && y % 2 == 0 {\n        return x\n    }\n    \n    if x % 2 != 0\
    \ && y % 2 != 0 {\n        return y\n    }\n    \n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7an72n7x.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    while x < y\
    \ {\n        if x % 2 == 0 {\n            even = even + x\n        }\n       \
    \ else {\n            odd = odd + x\n        }\n        x = x + 1\n    }\n   \
    \ if even > odd {\n        return even\n    }\n    return odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpm1wwtb27/tmpm1wwtb27.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdaa57ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdaa271b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdaa271988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdaa2707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1wwtb27                        0x0000559794c3524d <unavailable> + 4685

    5    libc.so.6                          0x00002abdaa766460 __libc_start_main +
    245

    6    tmpm1wwtb27                        0x0000559794c34ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n\
    \    \n    for i in 0..<x {\n        if i % 2 == 0 {\n            even += i\n\
    \        } else {\n            odd += i\n        }\n    }\n    \n    if even >\
    \ y {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpm8hy5uuw.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7tump8zi.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp7tump8zi.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpakt2saqx.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpakt2saqx.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpakt2saqx.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        result = x\n    } else {\n        result = y\n    }\n    \n \
    \   while result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpowkqejjm/tmpowkqejjm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b2fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b2ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4b2ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4b2ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowkqejjm                        0x000055e62fd0224d <unavailable> + 4685

    5    libc.so.6                          0x00002ba4b31c2460 __libc_start_main +
    245

    6    tmpowkqejjm                        0x000055e62fd01ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        swap(&x,\
    \ &y)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var\
    \ evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n \
    \   var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n   \
    \ var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3:\
    \ Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n   \
    \ var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4:\
    \ Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n   \
    \ var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5:\
    \ Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n   \
    \ var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6:\
    \ Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n   \
    \ var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8:\
    \ Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n   \
    \ var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9:\
    \ Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n   \
    \ var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10:\
    \ Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n \
    \   var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11:\
    \ Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n \
    \   var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13:\
    \ Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13: Int = 0\n \
    \   var oddMinCount13: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfz9rkkn0.swift:12:14: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(&x, &y)\n             ^~\n/tmp/tmpfz9rkkn0.swift:12:18:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \        swap(&x, &y)\n                 ^~\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n    }\n    \n    if even > y {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxaspa2jf/tmpxaspa2jf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b625a9f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b625a6e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b625a6e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b625a6e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaspa2jf                        0x000055f68ff2433d <unavailable> + 4925

    5    libc.so.6                          0x00002b625abdc460 __libc_start_main +
    245

    6    tmpxaspa2jf                        0x000055f68ff23fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7xoe56gj.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp7xoe56gj.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp7xoe56gj.swift:21:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x <= y {\n        if x % 2 == 0 && y\
    \ % 2 == 0 {\n            result = x\n            break\n        }\n        x\
    \ /= 2\n        y /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdoh8gqfv/tmpdoh8gqfv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2a3b6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2a3862b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2a3862988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2a38617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdoh8gqfv                        0x00005612918b033d <unavailable> + 4925

    5    libc.so.6                          0x00002ac2a3d57460 __libc_start_main +
    245

    6    tmpdoh8gqfv                        0x00005612918affe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x)\n    }\n    if x % 2 ==\
    \ 0 {\n        return x - y\n    }\n    if y % 2 == 0 {\n        return x + y\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpexxw35tl.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n\
    \    for _ in 0..<(x - y) {\n        x += 2\n        y += 2\n        if x % 2\
    \ == 0 {\n            even += 2\n            if even > evenMax {\n           \
    \     evenMax = even\n            }\n        } else {\n            odd += 2\n\
    \            if odd > oddMax {\n                oddMax = odd\n            }\n\
    \        }\n    }\n    if evenMax < y {\n        return evenMax\n    }\n    if\
    \ oddMax < y {\n        return oddMax\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0f8b8nmj.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp0f8b8nmj.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    if x == y {\n     \
    \   return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n\
    \    }\n    return choose_num(x, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpbvvcp5vu.swift:21:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpbvvcp5vu.swift:23:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if\
    \ result % 2 == 0 {\n            result = result / 2\n        } else {\n     \
    \       return -1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpchmgvafa/tmpchmgvafa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe36d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe36a50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe36a50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe36a4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchmgvafa                        0x000055aec556e33d <unavailable> + 4925

    5    libc.so.6                          0x00002abe36f45460 __libc_start_main +
    245

    6    tmpchmgvafa                        0x000055aec556dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var max_num = x\n    var min_num = y\n    for num in 1...y {\n\
    \        if num % 2 == 0 {\n            if num > max_num {\n                max_num\
    \ = num\n            }\n            if num < min_num {\n                min_num\
    \ = num\n            }\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppdlpzfdw/tmppdlpzfdw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd2da5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd2a9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd2a9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd2a9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdlpzfdw                        0x0000562c9accc33d <unavailable> + 4925

    5    libc.so.6                          0x00002aadd2f91460 __libc_start_main +
    245

    6    tmppdlpzfdw                        0x0000562c9accbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var even = y\n    var odd = x\n    \n    while even > 0\
    \ {\n        if odd % 2 == 0 {\n            even -= 1\n        } else {\n    \
    \        odd -= 1\n        }\n    }\n    \n    return odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkg6qnf_j/tmpkg6qnf_j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5317fe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5317cdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5317cde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5317cdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkg6qnf_j                        0x0000563cc77d224d <unavailable> + 4685

    5    libc.so.6                          0x00002b53181d3460 __libc_start_main +
    245

    6    tmpkg6qnf_j                        0x0000563cc77d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var biggest = Int()\n    \n    for number in stride(from:\
    \ x, through: y, by: 2) {\n        if number % 2 == 0 {\n            biggest =\
    \ max(number, biggest)\n        }\n    }\n    \n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp59ugd33e/tmp59ugd33e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b641b1dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b641aed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b641aed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b641aed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59ugd33e                        0x000055a5a9fe050d <unavailable> + 5389

    5    libc.so.6                          0x00002b641b3ca460 __libc_start_main +
    245

    6    tmp59ugd33e                        0x000055a5a9fe01b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x % 2 == 0 {\n   \
    \     return x - 1\n    }\n    if y % 2 == 0 {\n        return y + 1\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxi96s_pv/tmpxi96s_pv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fa9ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fa6e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fa6e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fa6e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxi96s_pv                        0x000055a71f14324d <unavailable> + 4685

    5    libc.so.6                          0x00002ba0fabd8460 __libc_start_main +
    245

    6    tmpxi96s_pv                        0x000055a71f142ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpakt2saqx.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpakt2saqx.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpakt2saqx.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var\
    \ evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n \
    \   var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n   \
    \ var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3:\
    \ Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n   \
    \ var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4:\
    \ Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n   \
    \ var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5:\
    \ Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n   \
    \ var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6:\
    \ Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n   \
    \ var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8:\
    \ Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n   \
    \ var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9:\
    \ Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n   \
    \ var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10:\
    \ Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n \
    \   var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11:\
    \ Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n \
    \   var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13:\
    \ Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13: Int = 0\n \
    \   var oddMinCount13: Int = 0\n    var evenMaxCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8efk8vp6.swift:74:9: error: type annotation missing in pattern\n\
    \    var evenMaxCount\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var biggest = Int()\n    var biggestEven = Int()\n    for n in\
    \ 1...y {\n        if n % 2 == 0 {\n            if biggestEven == 0 {\n      \
    \          biggestEven = n\n                biggest = n\n            } else {\n\
    \                if biggest < n {\n                    biggestEven = n\n     \
    \               biggest = n\n                }\n            }\n        }\n   \
    \ }\n    return biggestEven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkv72yorz/tmpkv72yorz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b077f130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b077ee27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b077ee27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b077ee267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkv72yorz                        0x000055c057b1933d <unavailable> + 4925

    5    libc.so.6                          0x00002b077f31c460 __libc_start_main +
    245

    6    tmpkv72yorz                        0x000055c057b18fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if\
    \ result % 2 == 0 {\n            result = result / 2\n        } else {\n     \
    \       return -1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphy8p2dfb/tmphy8p2dfb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd5d69fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd5d396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd5d396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd5d3957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphy8p2dfb                        0x000055acf089033d <unavailable> + 4925

    5    libc.so.6                          0x00002abd5d88b460 __libc_start_main +
    245

    6    tmphy8p2dfb                        0x000055acf088ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n     \
    \   return -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y\
    \ {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if\
    \ x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n     \
    \   return x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y\
    \ {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n    if\
    \ x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n     \
    \   return -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y\
    \ {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if\
    \ x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n     \
    \   return x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y\
    \ {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n    if\
    \ x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n     \
    \   return -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y\
    \ {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if\
    \ x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmp4xh6sihu.swift:173:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var\
    \ evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMinCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptnbr204u.swift:76:9: error: type annotation missing in pattern\n\
    \    var oddMinCount\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = x - 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 {\n  \
    \          result = x\n            break\n        }\n        x = x - 1\n    }\n\
    \    while y >= x {\n        if y % 2 == 0 {\n            result = y\n       \
    \     break\n        }\n        y = y - 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplmm8i21v/tmplmm8i21v.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43999eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43996e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43996e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43996e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmm8i21v                        0x0000556f347322cd <unavailable> + 4813

    5    libc.so.6                          0x00002b4399bda460 __libc_start_main +
    245

    6    tmplmm8i21v                        0x0000556f34731ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for n in 0..<x {\n\
    \        if n % 2 == 0 {\n            even += n\n        } else {\n          \
    \  odd += n\n        }\n    }\n    if even > y {\n        return even\n    }\n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzkoobhkt/tmpzkoobhkt.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b771ff12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b771fc09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b771fc09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b771fc087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkoobhkt                        0x000055c08b94833d <unavailable> + 4925

    5    libc.so.6                          0x00002b77200fe460 __libc_start_main +
    245

    6    tmpzkoobhkt                        0x000055c08b947fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x %\
    \ 2 == 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return y\
    \ / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpanr4kybr.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    while x <= y {\n        if x % 2 == 0 {\n            even = even\
    \ * 2 + x\n            if even > evenMax {\n                evenMax = even\n \
    \           }\n            if even < evenMin {\n                evenMin = even\n\
    \            }\n        } else {\n            odd = odd * 2 + x\n            if\
    \ odd > oddMax {\n                oddMax = odd\n            }\n            if\
    \ odd < oddMin {\n                oddMin = odd\n            }\n        }\n   \
    \     x += 1\n        y += 1\n    }\n    if evenMin > oddMin {\n        return\
    \ evenMin\n    } else {\n        return oddMin\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjxzw9st0/tmpjxzw9st0.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d2ec51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d2e948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d2e948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d2e9477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxzw9st0                        0x0000558a9758824d <unavailable> + 4685

    5    libc.so.6                          0x00002b8d2ee3d460 __libc_start_main +
    245

    6    tmpjxzw9st0                        0x0000558a97587ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var\
    \ evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMinCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5w7frgs8.swift:76:9: error: type annotation missing in pattern\n\
    \    var oddMinCount\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    if x > y {\n        return choose_num(x / 2,\
    \ y)\n    }\n    return choose_num(x, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpni3igaps.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpni3igaps.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpni3igaps.swift:24:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x /\
    \ 2, y)\n                         ^\n                          x:     y: \n/tmp/tmpni3igaps.swift:26:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x, y /\
    \ 2)\n                     ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x >= y {\n        if x % 2 == 0 {\n\
    \            result = x\n            break\n        }\n        x /= 2\n    }\n\
    \    if y > x {\n        result = y\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6z30v4wp/tmp6z30v4wp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc92eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc92ba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc92ba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc92ba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6z30v4wp                        0x00005585bb98133d <unavailable> + 4925

    5    libc.so.6                          0x00002afc9309b460 __libc_start_main +
    245

    6    tmp6z30v4wp                        0x00005585bb980fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        result = x\n    } else {\n        result = y\n    }\n    while\
    \ result > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7czczt6i/tmp7czczt6i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8cdd7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8cda74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8cda74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8cda737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7czczt6i                        0x000055ef0712524d <unavailable> + 4685

    5    libc.so.6                          0x00002af8cdf69460 __libc_start_main +
    245

    6    tmp7czczt6i                        0x000055ef07124ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var even\
    \ = 1\n    var odd = 0\n    \n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    for _ in 0..<(x-y) {\n        if even % 2 == 0 {\n            even\
    \ += 2\n        } else {\n            odd += 2\n        }\n    }\n    \n    if\
    \ even > y {\n        result = even\n    } else {\n        result = odd\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpw4thtgoy.swift:16:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpw4thtgoy.swift:16:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return (x * y) / 2\n    }\n    if x % 2 == 0 && y % 2 !=\
    \ 0 {\n        return -1\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return\
    \ -1\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n        return (x * y) / 2\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplugqpmq5/tmplugqpmq5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e2d8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e2a82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e2a82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e2a817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplugqpmq5                        0x000056215d94f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b68e2f77460 __libc_start_main +
    245

    6    tmplugqpmq5                        0x000056215d94eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x %\
    \ 2 == 0 {\n        return x - 1\n    }\n    if y % 2 == 0 {\n        return y\
    \ + 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8lz30mwt.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824544
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x + 1, y)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0afvgthg.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp0afvgthg.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp0afvgthg.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x + 1,\
    \ y)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n  \
    \      return -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    \n    while x <= y {\n        if x % 2 == 0 {\n            even = even\
    \ * 2 + x\n            if even > evenMax {\n                evenMax = even\n \
    \           }\n        } else {\n            odd = odd * 2 + x\n            if\
    \ odd > oddMax {\n                oddMax = odd\n            }\n        }\n   \
    \     x += 1\n        y += 1\n    }\n    if evenMax < oddMax {\n        return\
    \ evenMax\n    } else {\n        return oddMax\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x <= y {\n        if x % 2 == 0 && y\
    \ % 2 == 0 {\n            result = x\n            break\n        }\n        x\
    \ += 1\n        y -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpavczkxhl/tmpavczkxhl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd41543c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4123ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd4123a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd412397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavczkxhl                        0x00005580f4ac333d <unavailable> + 4925

    5    libc.so.6                          0x00002afd4172f460 __libc_start_main +
    245

    6    tmpavczkxhl                        0x00005580f4ac2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int\
    \ = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount:\
    \ Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var\
    \ evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2:\
    \ Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n   \
    \ var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3:\
    \ Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n   \
    \ var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5:\
    \ Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n   \
    \ var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6:\
    \ Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n   \
    \ var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7:\
    \ Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n   \
    \ var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8:\
    \ Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n   \
    \ var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10:\
    \ Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n \
    \   var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11:\
    \ Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n \
    \   var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12:\
    \ Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n \
    \   var oddMaxCount13: Int = 0\n    var evenMinCount13: Int\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpbbz0ul1v.swift:17:9: warning: variable 'even' was never used; consider\
    \ replacing with '_' or removing it\n    var even: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpbbz0ul1v.swift:18:9: warning: variable 'odd' was never used;\
    \ consider replacing with '_' or removing it\n    var odd: Int = 0\n        ^~~\n\
    \        _\n/tmp/tmpbbz0ul1v.swift:19:9: warning: variable 'x' was never used;\
    \ consider replacing with '_' or removing it\n    var x: Int = 0\n        ^\n\
    \        _\n/tmp/tmpbbz0ul1v.swift:20:9: warning: variable 'y' was never used;\
    \ consider replacing with '_' or removing it\n    var y: Int = 0\n        ^\n\
    \        _\n/tmp/tmpbbz0ul1v.swift:21:9: warning: variable 'z' was never used;\
    \ consider replacing with '_' or removing it\n    var z: Int = 0\n        ^\n\
    \        _\n/tmp/tmpbbz0ul1v.swift:22:9: warning: variable 'evenMax' was never\
    \ used; consider replacing with '_' or removing it\n    var evenMax: Int = 0\n\
    \        ^~~~~~~\n        _\n/tmp/tmpbbz0ul1v.swift:23:9: warning: variable 'oddMax'\
    \ was never used; consider replacing with '_' or removing it\n    var oddMax:\
    \ Int = 0\n        ^~~~~~\n        _\n/tmp/tmpbbz0ul1v.swift:24:9: warning: variable\
    \ 'evenMin' was never used; consider replacing with '_' or removing it\n    var\
    \ evenMin: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpbbz0ul1v.swift:25:9: warning:\
    \ variable 'oddMin' was never used; consider replacing with '_' or removing it\n\
    \    var oddMin: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpbbz0ul1v.swift:26:9:\
    \ warning: variable 'evenMaxCount' was never used; consider replacing with '_'\
    \ or removing it\n    var evenMaxCount: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmpbbz0ul1v.swift:27:9: warning: variable 'oddMaxCount' was never used;\
    \ consider replacing with '_' or removing it\n    var oddMaxCount: Int = 0\n \
    \       ^~~~~~~~~~~\n        _\n/tmp/tmpbbz0ul1v.swift:28:9: warning: variable\
    \ 'evenMinCount' was never used; consider replacing with '_' or removing it\n\
    \    var evenMinCount: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpbbz0ul1v.swift:29:9:\
    \ warning: variable 'oddMinCount' was never used; consid"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    var m = 1\n    var n = 2\n    while m <= y\
    \ {\n        if x % n == 0 {\n            if m == y {\n                result\
    \ = n\n            } else {\n                result = m\n            }\n     \
    \       break\n        }\n        n += 2\n        m += 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6oqmc6zg/tmp6oqmc6zg.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5129db5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5129aacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5129aac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5129aab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oqmc6zg                        0x000055f141cde33d <unavailable> + 4925

    5    libc.so.6                          0x00002b5129fa1460 __libc_start_main +
    245

    6    tmp6oqmc6zg                        0x000055f141cddfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var result = x\n    if x % 2 == 0 {\n        result = x\n   \
    \ }\n    if y % 2 == 0 {\n        result = y\n    }\n    while result > y {\n\
    \        result = result / 2\n    }\n    while result < x {\n        result =\
    \ result * 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp86zvhbe1/tmp86zvhbe1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe15063c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe14d5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe14d5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe14d597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86zvhbe1                        0x0000557a3c99224d <unavailable> + 4685

    5    libc.so.6                          0x00002afe1524f460 __libc_start_main +
    245

    6    tmp86zvhbe1                        0x0000557a3c991ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even = Int()\n\
    \    var odd = Int()\n    var biggest = Int()\n    var evenBiggest = Int()\n \
    \   var oddBiggest = Int()\n    for _ in 0..<(x-y) {\n        even = even + 2\n\
    \        odd = odd + 3\n        if even > y {\n            even = Int()\n    \
    \        evenBiggest = Int()\n        }\n        if odd > y {\n            odd\
    \ = Int()\n            oddBiggest = Int()\n        }\n        if even > biggest\
    \ {\n            biggest = even\n            evenBiggest = even\n        }\n \
    \       if odd > biggest {\n            biggest = odd\n            oddBiggest\
    \ = odd\n        }\n    }\n    if even > biggest {\n        return even\n    }\n\
    \    if odd > biggest {\n        return odd\n    }\n    if evenBiggest > biggest\
    \ {\n        return evenBiggest\n    }\n    return oddBiggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsoxi3u3l/tmpsoxi3u3l.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad5dd58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5da4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5da4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5da4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsoxi3u3l                        0x000055bd7273c33d <unavailable> + 4925

    5    libc.so.6                          0x00002aad5df44460 __libc_start_main +
    245

    6    tmpsoxi3u3l                        0x000055bd7273bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return (x * y) / 2\n    }\n    if x % 2 ==\
    \ 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return y / 2\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpdapo0my8.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x >= y {\n        if x % 2 == 0 {\n\
    \            if y % 2 == 0 {\n                result = x\n                break\n\
    \            } else {\n                result = y\n                break\n   \
    \         }\n        } else {\n            result = x\n            break\n   \
    \     }\n        x /= 2\n        y /= 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph9aciqlv/tmph9aciqlv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5390604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53902fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53902fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53902fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9aciqlv                        0x00005629c252133d <unavailable> + 4925

    5    libc.so.6                          0x00002b53907f0460 __libc_start_main +
    245

    6    tmph9aciqlv                        0x00005629c2520fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<y {\n        if x % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n    }\n    \n    if even > odd {\n     \
    \   return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpg47c78ho/tmpg47c78ho.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc13eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc10e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc10e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc10e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg47c78ho                        0x0000556749d5033d <unavailable> + 4925

    5    libc.so.6                          0x00002b9fc15da460 __libc_start_main +
    245

    6    tmpg47c78ho                        0x0000556749d4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var remainder\
    \ = x % y\n    if remainder == 0 {\n        result = x\n    }\n    else {\n  \
    \      result = y\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1ytwp22b/tmp1ytwp22b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16e7ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16e789db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16e789d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16e789c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ytwp22b                        0x0000559de206624d <unavailable> + 4685

    5    libc.so.6                          0x00002b16e7d92460 __libc_start_main +
    245

    6    tmp1ytwp22b                        0x0000559de2065ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even = Int()\n    var odd = Int()\n    \n   \
    \ if x % 2 == 0 {\n        even = x\n    } else {\n        even = x + 1\n    }\n\
    \    \n    if y % 2 == 0 {\n        odd = y\n    } else {\n        odd = y + 1\n\
    \    }\n    \n    if even > odd {\n        return even\n    } else {\n       \
    \ return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7dtyt19w.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp7dtyt19w.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    return choose_num(x, y / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvx6g4v6_.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpvx6g4v6_.swift:20:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x %\
    \ 2 == 0 {\n        return x - 1\n    }\n    if y % 2 == 0 {\n        return y\
    \ + 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8lz30mwt.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824544
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var\
    \ evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpujguuaox.swift:76:9: error: type annotation missing in pattern\n\
    \    var oddMin\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    var xx = x * x\n    var yy = y * y\n    var\
    \ xy = x * y\n    while xx <= yy {\n        if xy > xx {\n            result +=\
    \ x\n            x += 1\n        } else {\n            result += y\n         \
    \   y += 1\n        }\n        xx = x * x\n        yy = y * y\n        xy = x\
    \ * y\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978984
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\n   \
    \ var y: Int\n    for (x = min(x, y); x <= max(x, y); x++) {\n        if x % 2\
    \ == 0 {\n            even += x\n        } else {\n            odd += x\n    \
    \    }\n    }\n    if even > odd {\n        return even\n    } else {\n      \
    \  return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp03_kh2t2.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = min(x, y); x <= max(x, y); x++) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var even\
    \ = 1\n    var odd = 1\n    var xMin = Int(x)\n    var xMax = Int(y)\n    \n \
    \   while even < xMax && odd < xMax {\n        if even % 2 == 0 {\n          \
    \  if odd % 2 == 0 {\n                result = even\n            } else {\n  \
    \              result = odd\n            }\n            even = even + 2\n    \
    \        odd = odd + 1\n        } else {\n            if odd % 2 == 0 {\n    \
    \            result = odd\n            } else {\n                result = even\n\
    \            }\n            even = even + 1\n            odd = odd + 2\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzm0ekomf/tmpzm0ekomf.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6b5b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6b5842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6b5842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6b58417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzm0ekomf                        0x00005614b83d337d <unavailable> + 4989

    5    libc.so.6                          0x00002ac6b5d37460 __libc_start_main +
    245

    6    tmpzm0ekomf                        0x00005614b83d3029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if\
    \ result % 2 == 0 {\n            result = result / 2\n        } else {\n     \
    \       result /= 2\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptmriv0je/tmptmriv0je.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28f1e7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28f1b72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28f1b72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28f1b717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmriv0je                        0x000055bddfeb433d <unavailable> + 4925

    5    libc.so.6                          0x00002b28f2067460 __libc_start_main +
    245

    6    tmptmriv0je                        0x000055bddfeb3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n  \
    \      return -1\n    }\n    if x == y {\n        return x\n    }\n    if x >\
    \ y {\n        return choose_num(y, x)\n    }\n    var max_even = y\n    for num\
    \ in stride(from: x, through: y, by: 2) {\n        if num % 2 == 0 {\n       \
    \     if num > max_even {\n                max_even = num\n            }\n   \
    \     }\n    }\n    return max_even\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwoi9o4jg.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        result = x\n    } else {\n        result = y\n    }\n    while\
    \ result > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7czczt6i/tmp7czczt6i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8cdd7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8cda74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8cda74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8cda737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7czczt6i                        0x000055ef0712524d <unavailable> + 4685

    5    libc.so.6                          0x00002af8cdf69460 __libc_start_main +
    245

    6    tmp7czczt6i                        0x000055ef07124ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    var xx = x * x\n    var yy = y * y\n    var\
    \ xy = x * y\n    while (xx <= yy) {\n        if (xx > yy) {\n            if ((xy\
    \ % xx) == 0) {\n                result = x\n                break\n         \
    \   }\n        } else {\n            if ((yy % yy) == 0) {\n                result\
    \ = y\n                break\n            }\n        }\n        xx /= 2\n    \
    \    yy /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpso1rnbjq/tmpso1rnbjq.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9861748c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b986143fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b986143f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b986143e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpso1rnbjq                        0x000055d662d9633d <unavailable> + 4925

    5    libc.so.6                          0x00002b9861934460 __libc_start_main +
    245

    6    tmpso1rnbjq                        0x000055d662d95fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpj3qjpkz1.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpj3qjpkz1.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpj3qjpkz1.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var max_num: Int\n    \n    for i in 0..<(x-y) {\n    \
    \    if ((x % 2) == 0) {\n            if ((y % 2) == 0) {\n                if\
    \ ((x + (y-i)) % 2 == 0) {\n                    max_num = x + (y-i)\n        \
    \            break\n                }\n            }\n        }\n    }\n    \n\
    \    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxidx4vwu.swift:28:12: error: variable 'max_num' used before being\
    \ initialized\n    return max_num\n           ^\n/tmp/tmpxidx4vwu.swift:15:9:\
    \ note: variable defined here\n    var max_num: Int\n        ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    \n    var even = Int()\n    var odd = Int()\n    \n    for i\
    \ in 0..<(x - y) {\n        if i % 2 == 0 {\n            even = even + i\n   \
    \     } else {\n            odd = odd + i\n        }\n    }\n    \n    if even\
    \ > odd {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpn6dgqlal/tmpn6dgqlal.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d454fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d4246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d4246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d42457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6dgqlal                        0x0000560bf313133d <unavailable> + 4925

    5    libc.so.6                          0x00002b42d473b460 __libc_start_main +
    245

    6    tmpn6dgqlal                        0x0000560bf3130fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpj3qjpkz1.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpj3qjpkz1.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpj3qjpkz1.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 == 0 {\n\
    \        return y\n    }\n    if y % 2 == 0 {\n        return x\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpkrjd2slj.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    \n    for z in x ..< y {\n      \
    \  if z % 2 == 0 {\n            even = z\n        } else {\n            odd =\
    \ z\n        }\n    }\n    \n    if even > odd {\n        return even\n    } else\
    \ {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbljzylsc/tmpbljzylsc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6d068bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6d0382b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6d0382988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6d03817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbljzylsc                        0x000055c57018033d <unavailable> + 4925

    5    libc.so.6                          0x00002af6d0877460 __libc_start_main +
    245

    6    tmpbljzylsc                        0x000055c57017ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var biggest = y\n \
    \   for number in stride(from: x, through: y, by: 2) {\n        if number % 2\
    \ == 0 {\n            biggest = number\n        }\n    }\n    return biggest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1_zzckz5/tmp1_zzckz5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b142dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b13fd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b13fd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b13fd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_zzckz5                        0x0000565108fdc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b5b144ca460 __libc_start_main +
    245

    6    tmp1_zzckz5                        0x0000565108fdc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    if x > y {\n        result = x\n    } else\
    \ {\n        result = y\n    }\n    if result > 0 {\n        if result % 2 ==\
    \ 0 {\n            result = (result / 2) * 2\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpemf09tb7/tmpemf09tb7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6e5235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6e4f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6e4f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6e4f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemf09tb7                        0x0000560d593a033d <unavailable> + 4925

    5    libc.so.6                          0x00002ab6e5421460 __libc_start_main +
    245

    6    tmpemf09tb7                        0x0000560d5939ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x >= y {\n        if x % 2 == 0 {\n\
    \            x = x / 2\n        } else {\n            x = x * 3 + 1\n        }\n\
    \    }\n    while y >= x {\n        if y % 2 == 0 {\n            y = y / 2\n \
    \       } else {\n            y = y * 3 + 1\n        }\n    }\n    if x == y {\n\
    \        result = x\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2am2hpjh/tmp2am2hpjh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae543a70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae543767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae543767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5437667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2am2hpjh                        0x000055d9dc2fb33d <unavailable> + 4925

    5    libc.so.6                          0x00002ae543c5c460 __libc_start_main +
    245

    6    tmp2am2hpjh                        0x000055d9dc2fafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        swap(&x, &y)\n    }\n    for number in stride(from: x, through:\
    \ y, by: 2) {\n        if number % 2 == 0 {\n            if number > result {\n\
    \                result = number\n            }\n        } else {\n          \
    \  if number < result {\n                result = number\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpz9nyview.swift:13:14: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(&x, &y)\n             ^~\n/tmp/tmpz9nyview.swift:13:18:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \        swap(&x, &y)\n                 ^~\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var\
    \ evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n \
    \   var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n   \
    \ var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3:\
    \ Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n   \
    \ var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4:\
    \ Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n   \
    \ var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5:\
    \ Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n   \
    \ var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6:\
    \ Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n   \
    \ var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8:\
    \ Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n   \
    \ var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9:\
    \ Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n   \
    \ var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10:\
    \ Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n \
    \   var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11:\
    \ Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n \
    \   var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13:\
    \ Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13: Int = 0\n \
    \   var oddMinCount13: Int = 0\n    var evenMaxCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8efk8vp6.swift:74:9: error: type annotation missing in pattern\n\
    \    var evenMaxCount\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var result: Int = 0\n    \n    for i in 0..<(x-y) {\n \
    \       if (((x+y) - i) % 2 == 0) {\n            result = i\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplpeb40j3/tmplpeb40j3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbdc28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbd91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbd91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbd91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplpeb40j3                        0x000055b64305033d <unavailable> + 4925

    5    libc.so.6                          0x00002b7cbde14460 __libc_start_main +
    245

    6    tmplpeb40j3                        0x000055b64304ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even = Int()\n    var odd = Int()\n    \n   \
    \ for i in 0..<x {\n        if i % 2 == 0 {\n            even += i\n        }\
    \ else {\n            odd += i\n        }\n    }\n    \n    if even > y {\n  \
    \      return -1\n    }\n    \n    if even < y {\n        return even\n    }\n\
    \    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpz41ajh4k.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpz41ajh4k.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even = Int()\n    var odd = Int()\n    var x = Int()\n  \
    \  var y = Int()\n    for _ in 0..<(x-y) {\n        x = rand()%(x-y)+y\n     \
    \   y = rand()%(x-y)+y\n        if x%2 == 0 {\n            even = even*10+x\n\
    \        } else {\n            odd = odd*10+x\n        }\n    }\n    if even >\
    \ odd {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmprd7cj1ot.swift:19:13: error: cannot find 'rand' in scope\n    \
    \    x = rand()%(x-y)+y\n            ^~~~\n/tmp/tmprd7cj1ot.swift:20:13: error:\
    \ cannot find 'rand' in scope\n        y = rand()%(x-y)+y\n            ^~~~\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7xoe56gj.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp7xoe56gj.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp7xoe56gj.swift:21:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n \
    \   for _ in 0..<(x-y) {\n        if x % 2 == 0 {\n            even += 2\n   \
    \         x /= 2\n        } else {\n            odd += 1\n            x /= 2\n\
    \        }\n    }\n    \n    if even > odd {\n        return even\n    } else\
    \ {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpkanqlihy.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpkanqlihy.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpkanqlihy.swift:21:15: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n            x /= 2\n      \
    \      ~ ^\n/tmp/tmpkanqlihy.swift:24:15: error: left side of mutating operator\
    \ isn't mutable: 'x' is a 'let' constant\n            x /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var\
    \ odd: Int = 0\n    var x: Int = x\n    var y: Int = y\n    \n    while x >= y\
    \ {\n        if x % 2 == 0 {\n            even += x\n        }\n        else {\n\
    \            odd += x\n        }\n        x /= 2\n        y /= 2\n    }\n    \n\
    \    if even > y {\n        return even\n    }\n    else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5im1l2s7/tmp5im1l2s7.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b20c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b1dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b1dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b1db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5im1l2s7                        0x000055fdaba8d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b80b22af460 __libc_start_main +
    245

    6    tmp5im1l2s7                        0x000055fdaba8cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    \n    while result < y {\n        result\
    \ *= 2\n    }\n    \n    while result > y {\n        result /= 2\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1b5tyn5c/tmp1b5tyn5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66f3d17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66f3a0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66f3a0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66f3a0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b5tyn5c                        0x0000556c669b224d <unavailable> + 4685

    5    libc.so.6                          0x00002b66f3f03460 __libc_start_main +
    245

    6    tmp1b5tyn5c                        0x0000556c669b1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var xEven:\
    \ Bool = false\n    var yEven: Bool = false\n    var xEvenCount: Int = 0\n   \
    \ var yEvenCount: Int = 0\n    var xEvenMax: Int = 0\n    var yEvenMax: Int =\
    \ 0\n    var xEvenMin: Int = 0\n    var yEvenMin: Int = 0\n    var xEvenMaxCount:\
    \ Int = 0\n    var yEvenMaxCount: Int = 0\n    var xEvenMinCount: Int = 0\n  \
    \  var yEvenMinCount: Int = 0\n    var xEvenMaxSum: Int = 0\n    var yEvenMaxSum:\
    \ Int = 0\n    var xEvenMinSum: Int = 0\n    var yEvenMinSum: Int = 0\n    var\
    \ xEvenMaxSumCount: Int = 0\n    var yEvenMaxSumCount: Int = 0\n    var xEvenMinSumCount:\
    \ Int = 0\n    var yEvenMinSumCount: Int = 0\n    var xEvenMaxSumSum: Int = 0\n\
    \    var yEvenMaxSumSum: Int = 0\n    var xEvenMinSumSum: Int = 0\n    var yEvenMinSumSum:\
    \ Int = 0\n    var xEvenMaxSumSumCount: Int = 0\n    var yEvenMaxSumSumCount:\
    \ Int = 0\n    var xEvenMinSumSumCount: Int = 0\n    var yEvenMinSumSumCount:\
    \ Int = 0\n    var xEvenMaxSumSumSum: Int = 0\n    var yEvenMaxSumSumSum: Int\
    \ = 0\n    var xEvenMinSumSumSum: Int = 0\n    var yEvenMinSumSumSum: Int = 0\n\
    \    var xEvenMaxSumSumSumCount: Int = 0\n    var yEvenMaxSumSumSumCount: Int\
    \ = 0\n    var xEvenMinSumSumSumCount: Int = 0\n    var yEvenMinSumSumSumCount:\
    \ Int = 0\n    var xEvenMaxSumSumSumSum: Int = 0\n    var yEvenMaxSumSumSumSum:\
    \ Int = 0\n    var xEvenMinSumSumSumSum: Int = 0\n    var yEvenMinSumSumSumSum:\
    \ Int = 0\n    var xEvenMaxSumSumSumSumCount: Int = 0\n    var yEvenMaxSumSumSumSumCount:\
    \ Int = 0\n    var xEvenMinSumSumSumSumCount: Int = 0\n    var yEvenMinSumSumSumSumCount:\
    \ Int = 0\n    var xEvenMaxSumSumSumSumSum: Int = 0\n    var yEvenMaxSumSumSumSumSum:\
    \ Int = 0\n    var xEvenMinSumSumSumSumSum: Int = 0\n    var yEvenMinSumSumSumSumSum:\
    \ Int = 0\n    var xEvenMaxSumSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmph_ynyapx.swift:60:9: error: type annotation missing in pattern\n\
    \    var xEvenMaxSumSum\n        ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var\
    \ evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n \
    \   var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n   \
    \ var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3:\
    \ Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n   \
    \ var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4:\
    \ Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n   \
    \ var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5:\
    \ Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n   \
    \ var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6:\
    \ Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n   \
    \ var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8:\
    \ Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n   \
    \ var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9:\
    \ Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n   \
    \ var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10:\
    \ Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n \
    \   var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11:\
    \ Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n \
    \   var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13:\
    \ Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13: Int = 0\n \
    \   var oddMinCount13: Int = 0\n    var evenMaxCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8efk8vp6.swift:74:9: error: type annotation missing in pattern\n\
    \    var evenMaxCount\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return (x * y) / 2\n    }\n    if x % 2 == 0 {\n       \
    \ return x / 2\n    }\n    return y / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp_5q7byr5/tmp_5q7byr5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59e88d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59e85d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59e85d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59e85cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5q7byr5                        0x000055731105724d <unavailable> + 4685

    5    libc.so.6                          0x00002b59e8ac5460 __libc_start_main +
    245

    6    tmp_5q7byr5                        0x0000557311056ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result: Int = 0\n    var x: Int\n    var y: Int\n    for\
    \ (x = y; x > x; x--) { \n        if x % 2 == 0 {\n            result = x\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpz6bhcbs4.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > x; x--) { \n    ^   ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    for _ in 0..<y {\n        if result % 2 ==\
    \ 0 {\n            return result\n        }\n        result /= 2\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2op9fvwk/tmp2op9fvwk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d3165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d2e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d2e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d2e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2op9fvwk                        0x00005638e711833d <unavailable> + 4925

    5    libc.so.6                          0x00002b18d3351460 __libc_start_main +
    245

    6    tmp2op9fvwk                        0x00005638e7117fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    \n    var biggest = y\n    \n    for _ in 0..<(x-y) {\n     \
    \   biggest = biggest * 2\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2o5v4as_/tmp2o5v4as_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0822aaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08227a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08227a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08227a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o5v4as_                        0x000055d4b5eaf33d <unavailable> + 4925

    5    libc.so.6                          0x00002b0822c96460 __libc_start_main +
    245

    6    tmp2o5v4as_                        0x000055d4b5eaefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    if x > y {\n        return -1\n\
    \    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4bg0ufbf.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp4bg0ufbf.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp4bg0ufbf.swift:21:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n/tmp/tmp4bg0ufbf.swift:26:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var biggest = Int()\n    for num in 1...y {\n        if num %\
    \ 2 == 0 {\n            if biggest < num {\n                biggest = num\n  \
    \          }\n        }\n    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7udd6iri/tmp7udd6iri.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af238a00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2386f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2386f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2386f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7udd6iri                        0x000055cccaddd33d <unavailable> + 4925

    5    libc.so.6                          0x00002af238bec460 __libc_start_main +
    245

    6    tmp7udd6iri                        0x000055cccaddcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpakt2saqx.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpakt2saqx.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpakt2saqx.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n \
    \   for _ in 0..<(x-y) {\n        even += 2\n        odd += 2\n    }\n    \n \
    \   if even > y {\n        return even\n    }\n    \n    if odd > y {\n      \
    \  return -1\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_cbr962l.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp_cbr962l.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 == 0 &&\
    \ y % 2 != 0 {\n        return x - y\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n\
    \        return x - y\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n        return\
    \ x + y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpnoz87yk5.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y - x)\n    }\n    if x % 2 == 0 && y % 2 !=\
    \ 0 {\n        return -1\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return\
    \ -1\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n        return x + (y - x)\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpksq9qe00/tmpksq9qe00.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90d8648c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90d833fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90d833f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90d833e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksq9qe00                        0x00005555839cd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b90d8834460 __libc_start_main +
    245

    6    tmpksq9qe00                        0x00005555839ccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if\
    \ result % 2 == 0 {\n            result = result / 2\n        } else {\n     \
    \       return -1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpchmgvafa/tmpchmgvafa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe36d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe36a50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe36a50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe36a4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchmgvafa                        0x000055aec556e33d <unavailable> + 4925

    5    libc.so.6                          0x00002abe36f45460 __libc_start_main +
    245

    6    tmpchmgvafa                        0x000055aec556dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    if x == y {\n        return x\n    }\n  \
    \  \n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    \n \
    \   if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n    \n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpqwtj9o8h.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpqwtj9o8h.swift:20:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpqwtj9o8h.swift:24:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = remainder\n     \
    \       break\n        }\n        remainder /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkd6crz9g/tmpkd6crz9g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ab09bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69aad92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69aad92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69aad917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkd6crz9g                        0x00005575e7c2124d <unavailable> + 4685

    5    libc.so.6                          0x00002b69ab287460 __libc_start_main +
    245

    6    tmpkd6crz9g                        0x00005575e7c20ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n  \
    \      return -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int\n    var y: Int\n    for x = 1; x <= y; x++ {\n        if x % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    }\n\
    \    if even > odd {\n        return even\n    } else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpb3gzptlp.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for x = 1; x <= y; x++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x <= y {\n        if x % 2 == 0 && y\
    \ % 2 == 0 {\n            if x > y {\n                result = x\n           \
    \ } else {\n                result = y\n            }\n            break\n   \
    \     }\n        x += 1\n        y -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmps8ghw859/tmps8ghw859.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1b79b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1b76aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1b76ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1b76ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8ghw859                        0x000055a1acc3d33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba1b7ba3460 __libc_start_main +
    245

    6    tmps8ghw859                        0x000055a1acc3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<(x - y) {\n        if i % 2 == 0 {\n            even += i\n       \
    \ } else {\n            odd += i\n        }\n    }\n    \n    if even > odd {\n\
    \        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c25ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c257bc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2c257bc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2c257bc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2c257bbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvttigqkr                        0x0000556f94107837 <unavailable> + 6199

    6    tmpvttigqkr                        0x0000556f941072d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b2c25cb1460 __libc_start_main +
    245

    8    tmpvttigqkr                        0x0000556f94106fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even = 0\n    var odd = 0\n    var x = x - 1\n    var y =\
    \ y - 1\n    while x > 0 {\n        if x % 2 == 0 {\n            even = even +\
    \ x\n        }\n        x = x / 2\n    }\n    while y > 0 {\n        if y % 2\
    \ == 0 {\n            odd = odd + y\n        }\n        y = y / 2\n    }\n   \
    \ if even > odd {\n        return even\n    }\n    return odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3c917vxv/tmp3c917vxv.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02d6293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02d5f8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02d5f8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02d5f897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c917vxv                        0x000055ee466b524d <unavailable> + 4685

    5    libc.so.6                          0x00002b02d647f460 __libc_start_main +
    245

    6    tmp3c917vxv                        0x000055ee466b4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if\
    \ result % 2 == 0 {\n            result = result / 2\n        } else {\n     \
    \       result = result * 3 + 1\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_bpm6p0d/tmp_bpm6p0d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62220ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac621f05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac621f05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac621f047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bpm6p0d                        0x0000564f25ea333d <unavailable> + 4925

    5    libc.so.6                          0x00002ac6223fa460 __libc_start_main +
    245

    6    tmp_bpm6p0d                        0x0000564f25ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    while x <= y {\n        if x % 2 == 0 && y\
    \ % 2 == 0 {\n            result = x\n            break\n        }\n        x\
    \ /= 2\n        y /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdoh8gqfv/tmpdoh8gqfv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2a3b6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2a3862b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2a3862988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2a38617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdoh8gqfv                        0x00005612918b033d <unavailable> + 4925

    5    libc.so.6                          0x00002ac2a3d57460 __libc_start_main +
    245

    6    tmpdoh8gqfv                        0x00005612918affe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x)\n    }\n    if x % 2 ==\
    \ 0 {\n        return y\n    }\n    if y % 2 == 0 {\n        return x\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpggb9qnq5.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var remainder\
    \ = x % y\n    while remainder != 0 {\n        if remainder % 2 == 0 {\n     \
    \       result = remainder\n            break\n        }\n        remainder =\
    \ remainder / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8x9u1jjq/tmp8x9u1jjq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47ce348c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ce03fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ce03f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ce03e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8x9u1jjq                        0x000055bd7a31c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b47ce534460 __libc_start_main +
    245

    6    tmp8x9u1jjq                        0x000055bd7a31bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x: x, y: y - 1)\n    }\n    if y % 2 == 0 {\n      \
    \  return choose_num(x: x - 1, y: y)\n    }\n    return choose_num(x: x - 1, y:\
    \ y - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7o8zb2oa/tmp7o8zb2oa.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af07bdbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07bab5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07bab5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07bab47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7o8zb2oa                        0x000055d4cbeab24d <unavailable> + 4685

    5    libc.so.6                          0x00002af07bfaa460 __libc_start_main +
    245

    6    tmp7o8zb2oa                        0x000055d4cbeaaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var biggest = y\n    for num in stride(from: x, through: y, by:\
    \ 2) {\n        if num % 2 == 0 {\n            biggest = num\n        }\n    }\n\
    \    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvmev9mtg/tmpvmev9mtg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92bba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92bb6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92bb6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92bb6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmev9mtg                        0x0000559c7871047d <unavailable> + 5245

    5    libc.so.6                          0x00002b92bbbed460 __libc_start_main +
    245

    6    tmpvmev9mtg                        0x0000559c78710129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    \n    while x < y {\n        if x % 2 == 0 {\n      \
    \      even = even + x\n        }\n        else {\n            odd = odd + x\n\
    \        }\n        x = x + 1\n    }\n    if even > odd {\n        return even\n\
    \    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpwq6r2d9o/tmpwq6r2d9o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71cb51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71cb215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71cb215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71cb2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwq6r2d9o                        0x00005583e8e9624d <unavailable> + 4685

    5    libc.so.6                          0x00002b71cb70a460 __libc_start_main +
    245

    6    tmpwq6r2d9o                        0x00005583e8e95ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n \
    \   for _ in 0..<(x-y) {\n        let x = random(y)\n        let y = random(x)\n\
    \        if x % 2 == 0 && y % 2 == 0 {\n            even = x + y\n           \
    \ break\n        }\n        \n        if x % 2 != 0 && y % 2 != 0 {\n        \
    \    odd = x + y\n            break\n        }\n    }\n    \n    if even > odd\
    \ {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd5nqdrh7.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpd5nqdrh7.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpd5nqdrh7.swift:19:17: error: cannot find 'random'\
    \ in scope\n        let x = random(y)\n                ^~~~~~\n/tmp/tmpd5nqdrh7.swift:20:17:\
    \ error: cannot find 'random' in scope\n        let y = random(x)\n          \
    \      ^~~~~~\n/tmp/tmpd5nqdrh7.swift:22:22: error: cannot assign value of type\
    \ 'String' to type 'Int'\n            even = x + y\n                   ~~^~~\n\
    /tmp/tmpd5nqdrh7.swift:27:21: error: cannot assign value of type 'String' to type\
    \ 'Int'\n            odd = x + y\n                  ~~^~~\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    if x == y {\n        return x\n    }\n  \
    \  \n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    \n  \
    \  if x % 2 == 0 && y % 2 != 0 {\n        return y\n    }\n    \n    if x % 2\
    \ != 0 && y % 2 == 0 {\n        return x\n    }\n    \n    if x % 2 != 0 && y\
    \ % 2 != 0 {\n        return y\n    }\n    \n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzgs2074z.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    if x == y {\n        return x\n    }\n  \
    \  \n    if x % 2 == 0 && y % 2 == 0 {\n        return x + (y - x)\n    }\n  \
    \  \n    if x % 2 == 0 {\n        return y\n    }\n    \n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpetif9iwy.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    var result = x\n    \n    for _ in 0..<y\
    \ {\n        if result % 2 == 0 {\n            return result\n        }\n    \
    \    result += 1\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphit0byg9.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = result + 1\n    \
    \    }\n        remainder = remainder / 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpekq87zx7/tmpekq87zx7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd02265c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd01f5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd01f5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd01f5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekq87zx7                        0x000055a5b1eb824d <unavailable> + 4685

    5    libc.so.6                          0x00002afd02451460 __libc_start_main +
    245

    6    tmpekq87zx7                        0x000055a5b1eb7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 {\n            result = x\n       \
    \     break\n        }\n        x /= 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmppjb898_w.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmppjb898_w.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = result + 1\n    \
    \    }\n        remainder = remainder / 2\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpekq87zx7/tmpekq87zx7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd02265c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd01f5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd01f5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd01f5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekq87zx7                        0x000055a5b1eb824d <unavailable> + 4685

    5    libc.so.6                          0x00002afd02451460 __libc_start_main +
    245

    6    tmpekq87zx7                        0x000055a5b1eb7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return (x * y) / 2\n    }\n    if x % 2 == 0 {\n       \
    \ return x / 2\n    }\n    if y % 2 == 0 {\n        return y / 2\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmaalyh17/tmpmaalyh17.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97ad6fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97ad3f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97ad3f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97ad3f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmaalyh17                        0x0000559d8d2d624d <unavailable> + 4685

    5    libc.so.6                          0x00002b97ad8e9460 __libc_start_main +
    245

    6    tmpmaalyh17                        0x0000559d8d2d5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + (y - x)\n    }\n    if x % 2 ==\
    \ 0 && y % 2 != 0 {\n        return -1\n    }\n    if x % 2 != 0 && y % 2 == 0\
    \ {\n        return -1\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n        return\
    \ -1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpx9f_6hhz.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    if x > y {\n        return -1\n\
    \    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4bg0ufbf.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp4bg0ufbf.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp4bg0ufbf.swift:21:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n/tmp/tmp4bg0ufbf.swift:26:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    return choose_num(x, y / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpc6a96vxo.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpc6a96vxo.swift:20:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = result * 10 + remainder\
    \ / 2\n        }\n        remainder = remainder / 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpp2m171v0/tmpp2m171v0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc45ce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc459dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc459db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc459da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2m171v0                        0x0000564c40eed24d <unavailable> + 4685

    5    libc.so.6                          0x00002adc45ed0460 __libc_start_main +
    245

    6    tmpp2m171v0                        0x0000564c40eecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    var x_even = x % 2 == 0\n    var y_even =\
    \ y % 2 == 0\n    if x_even && y_even {\n        if x > y {\n            result\
    \ = x\n        } else {\n            result = y\n        }\n    } else if x_even\
    \ {\n        result = x\n    } else if y_even {\n        result = y\n    } else\
    \ {\n        if x > y {\n            result = x\n        } else {\n          \
    \  result = y\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqib6km0l/tmpqib6km0l.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad580886c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad58057db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad58057d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad58057c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqib6km0l                        0x000055f7623c833d <unavailable> + 4925

    5    libc.so.6                          0x00002ad580a72460 __libc_start_main +
    245

    6    tmpqib6km0l                        0x000055f7623c7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    return choose_num(x\
    \ / 2 + 1, y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpezgqoqty.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpezgqoqty.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpezgqoqty.swift:20:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2 +\
    \ 1, y)\n                     ^\n                      x:         y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var\
    \ evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n \
    \   var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n   \
    \ var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3:\
    \ Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n   \
    \ var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4:\
    \ Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n   \
    \ var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5:\
    \ Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n   \
    \ var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6:\
    \ Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n   \
    \ var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8:\
    \ Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n   \
    \ var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9:\
    \ Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n   \
    \ var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10:\
    \ Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n \
    \   var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11:\
    \ Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n \
    \   var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13:\
    \ Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13: Int = 0\n \
    \   var oddMinCount13: Int = 0\n    var evenMaxCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8efk8vp6.swift:74:9: error: type annotation missing in pattern\n\
    \    var evenMaxCount\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = result * 10 + remainder\
    \ / 2\n        }\n        remainder = remainder / 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyzb3u2mg/tmpyzb3u2mg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb07071c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb06d68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb06d68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb06d677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzb3u2mg                        0x000055b46949824d <unavailable> + 4685

    5    libc.so.6                          0x00002adb0725d460 __libc_start_main +
    245

    6    tmpyzb3u2mg                        0x000055b469497ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    return choose_num(x, y / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvx6g4v6_.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpvx6g4v6_.swift:20:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var\
    \ evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpujguuaox.swift:76:9: error: type annotation missing in pattern\n\
    \    var oddMin\n        ^\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<(x-y) {\n        if (x-y) < (i+1) {\n            even = even * 10 +\
    \ i\n        } else {\n            odd = odd * 10 + i\n        }\n    }\n    \n\
    \    if even > 0 {\n        return even\n    } else {\n        return odd\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpczq51ij4/tmpczq51ij4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38212d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3820fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3820fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3820fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczq51ij4                        0x000055efa1f0f33d <unavailable> + 4925

    5    libc.so.6                          0x00002b38214bc460 __libc_start_main +
    245

    6    tmpczq51ij4                        0x000055efa1f0efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even = Int()\n    var\
    \ odd = Int()\n    var result = Int()\n    \n    if x > y {\n        even = choose_num(y,\
    \ x)\n        odd = choose_num(x, y)\n    } else {\n        even = choose_num(x,\
    \ y)\n        odd = choose_num(y, x)\n    }\n    \n    if even % 2 == 0 {\n  \
    \      result = even\n    } else {\n        result = odd\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp11nxi1w0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp11nxi1w0.swift:17:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n/tmp/tmp11nxi1w0.swift:19:26: error:\
    \ missing argument labels 'x:y:' in call\n        even = choose_num(x, y)\n  \
    \                       ^\n                          x: y: \n/tmp/tmp11nxi1w0.swift:20:25:\
    \ error: missing argument labels 'x:y:' in call\n        odd = choose_num(y, x)\n\
    \                        ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n\
    \    while x <= y {\n        if x % 2 == 0 {\n            even = even * 2 + x\n\
    \            if even > evenMax {\n                evenMax = even\n           \
    \ }\n        } else {\n            odd = odd * 2 + x\n            if odd > oddMax\
    \ {\n                oddMax = odd\n            }\n        }\n        x += 1\n\
    \        y += 1\n    }\n    if evenMax == 0 {\n        return -1\n    }\n    if\
    \ evenMax < x {\n        return evenMax\n    }\n    return evenMax\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpl4ysq_4i.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpl4ysq_4i.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = x\n\
    \    var y: Int = y\n    while x > 0 {\n        if x % 2 == 0 {\n            even\
    \ = even + x\n        }\n        else {\n            odd = odd + x\n        }\n\
    \        x = x / 2\n    }\n    while y > 0 {\n        if y % 2 == 0 {\n      \
    \      even = even + y\n        }\n        else {\n            odd = odd + y\n\
    \        }\n        y = y / 2\n    }\n    if even > odd {\n        return even\n\
    \    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqab3ypm_/tmpqab3ypm_.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62b8acac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62b87c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62b87c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62b87c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqab3ypm_                        0x000055a291e4824d <unavailable> + 4685

    5    libc.so.6                          0x00002b62b8cb6460 __libc_start_main +
    245

    6    tmpqab3ypm_                        0x000055a291e47ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n  \
    \      return -1\n    }\n    if x > y {\n        x, y = y, x\n    }\n    var result:\
    \ Int = 0\n    var remainder: Int = 0\n    while y > 0 {\n        remainder =\
    \ x % y\n        result = remainder + result\n        x /= y\n        y /= 2\n\
    \    }\n    if x == 0 {\n        result = 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphbixjk6u.swift:15:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        x, y = y, x\n         ^\n         ;\n/tmp/tmphbixjk6u.swift:15:10:\
    \ error: expected expression\n        x, y = y, x\n         ^\n/tmp/tmphbixjk6u.swift:15:9:\
    \ warning: expression of type 'Int' is unused\n        x, y = y, x\n        ^\n\
    /tmp/tmphbixjk6u.swift:22:11: error: left side of mutating operator isn't mutable:\
    \ 'x' is a 'let' constant\n        x /= y\n        ~ ^\n/tmp/tmphbixjk6u.swift:23:11:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = remainder\n     \
    \       break\n        }\n        remainder /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkd6crz9g/tmpkd6crz9g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ab09bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69aad92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69aad92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69aad917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkd6crz9g                        0x00005575e7c2124d <unavailable> + 4685

    5    libc.so.6                          0x00002b69ab287460 __libc_start_main +
    245

    6    tmpkd6crz9g                        0x00005575e7c20ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= 0 || y <= 0\
    \ {\n        return -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n \
    \   var x: Int\n    var y: Int\n    for x in stride(from: x, through: y, by: 2)\
    \ {\n        if x % 2 == 0 {\n            even = even + x\n        } else {\n\
    \            odd = odd + x\n        }\n    }\n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5gh1un3e.swift:22:9: warning: variable 'x' was never mutated; consider\
    \ changing to 'let' constant\n    var x: Int\n    ~~~ ^\n    let\n/tmp/tmp5gh1un3e.swift:23:9:\
    \ warning: variable 'y' was never mutated; consider changing to 'let' constant\n\
    \    var y: Int\n    ~~~ ^\n    let\n/tmp/tmp5gh1un3e.swift:24:27: error: variable\
    \ 'x' used before being initialized\n    for x in stride(from: x, through: y,\
    \ by: 2) {\n                          ^\n/tmp/tmp5gh1un3e.swift:22:9: note: variable\
    \ defined here\n    var x: Int\n        ^\n/tmp/tmp5gh1un3e.swift:24:39: error:\
    \ variable 'y' used before being initialized\n    for x in stride(from: x, through:\
    \ y, by: 2) {\n                                      ^\n/tmp/tmp5gh1un3e.swift:23:9:\
    \ note: variable defined here\n    var y: Int\n        ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y - x)\n    }\n    if x % 2 == 0 {\n       \
    \ return x + (y - x) / 2\n    }\n    if y % 2 == 0 {\n        return (y + x) /\
    \ 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpiyqic8lp/tmpiyqic8lp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eb7e95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eb7b8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eb7b8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eb7b8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyqic8lp                        0x0000562fee0b724d <unavailable> + 4685

    5    libc.so.6                          0x00002b9eb8081460 __libc_start_main +
    245

    6    tmpiyqic8lp                        0x0000562fee0b6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    for x in stride(from: x, to: y, by: 2) {\n        if\
    \ x % 2 == 0 {\n            even += x\n        } else {\n            odd += x\n\
    \        }\n    }\n    if even > odd {\n        return even\n    } else {\n  \
    \      return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpydcx3l4q/tmpydcx3l4q.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30e5577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30e526eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30e526e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30e526d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydcx3l4q                        0x000055da09bf545d <unavailable> + 5213

    5    libc.so.6                          0x00002b30e5763460 __libc_start_main +
    245

    6    tmpydcx3l4q                        0x000055da09bf5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpj3qjpkz1.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpj3qjpkz1.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpj3qjpkz1.swift:23:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978979
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        let tmp = x\n        x = y\n        y = tmp\n    }\n    if x\
    \ % 2 == 0 {\n        if y % 2 == 0 {\n            result = x\n        } else\
    \ {\n            result = y\n        }\n    } else {\n        if y % 2 == 0 {\n\
    \            result = y\n        } else {\n            result = x\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpi1n__m96.swift:14:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpi1n__m96.swift:15:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = tmp\n        ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = x - 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 {\n  \
    \          result = x\n            break\n        }\n        x = x - 1\n    }\n\
    \    while y >= x {\n        if y % 2 == 0 {\n            result = y\n       \
    \     break\n        }\n        y = y - 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplmm8i21v/tmplmm8i21v.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43999eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43996e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43996e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43996e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmm8i21v                        0x0000556f347322cd <unavailable> + 4813

    5    libc.so.6                          0x00002b4399bda460 __libc_start_main +
    245

    6    tmplmm8i21v                        0x0000556f34731ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978978
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = x - 1\n    var y = y - 1\n    var even = 1\n    var odd = 0\n    while x >=\
    \ 0 && y >= 0 {\n        if x % 2 == 0 && y % 2 == 0 {\n            if even >\
    \ result {\n                result = even\n            }\n            even = even\
    \ + 2\n        } else {\n            if odd > result {\n                result\
    \ = odd\n            }\n            odd = odd + 1\n        }\n        x = x -\
    \ 1\n        y = y - 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkjajsibo/tmpkjajsibo.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81b66ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81b63c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81b63c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81b63c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkjajsibo                        0x000055b5bc2bc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b81b68b8460 __libc_start_main +
    245

    6    tmpkjajsibo                        0x000055b5bc2bbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    return choose_num(x, y / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvx6g4v6_.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpvx6g4v6_.swift:20:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824633
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 {\n            result = x\n       \
    \     break\n        }\n        x = x - 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpk4l1i00n.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpk4l1i00n.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n    }\n    \n    if even > y {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphlpftzbo/tmphlpftzbo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66ef452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66ef149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66ef149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66ef1487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphlpftzbo                        0x000055820498333d <unavailable> + 4925

    5    libc.so.6                          0x00002b66ef63e460 __libc_start_main +
    245

    6    tmphlpftzbo                        0x0000558204982fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    while x < y {\n        even = even + x\n      \
    \  odd = odd + y\n        if even > odd {\n            x = x + 1\n        } else\
    \ {\n            y = y + 1\n        }\n    }\n    if even > odd {\n        return\
    \ even\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7mqoyt46.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp7mqoyt46.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var max_num = x\n    var min_num = y\n    while max_num < min_num\
    \ {\n        max_num += 2\n        min_num -= 2\n    }\n    while max_num > min_num\
    \ {\n        if max_num % 2 == 0 {\n            max_num -= 2\n        } else {\n\
    \            max_num -= 1\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmdl6_6is/tmpmdl6_6is.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3160b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af315da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af315da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af315da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdl6_6is                        0x0000560eeef3e24d <unavailable> + 4685

    5    libc.so.6                          0x00002af31629e460 __libc_start_main +
    245

    6    tmpmdl6_6is                        0x0000560eeef3def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n  \
    \  if x >= y {\n        result = x\n    } else {\n        result = y\n    }\n\
    \    \n    while result % 2 == 0 {\n        result = result / 2\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpd0to2xd8/tmpd0to2xd8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a36badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a368a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a368a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a368a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0to2xd8                        0x000055bd8853324d <unavailable> + 4685

    5    libc.so.6                          0x00002b6a36d99460 __libc_start_main +
    245

    6    tmpd0to2xd8                        0x000055bd88532ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var\
    \ evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int = 0\n \
    \   var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxSum: Int = 0\n    var oddMaxSum: Int = 0\n    var evenMinSum:\
    \ Int = 0\n    var oddMinSum: Int = 0\n    var evenMaxAvg: Int = 0\n    var oddMaxAvg:\
    \ Int = 0\n    var evenMinAvg: Int = 0\n    var oddMinAvg: Int = 0\n    var evenMaxMax:\
    \ Int = 0\n    var oddMaxMax: Int = 0\n    var evenMinMax: Int = 0\n    var oddMinMax:\
    \ Int = 0\n    var evenMaxMin: Int = 0\n    var oddMaxMin: Int = 0\n    var evenMaxMaxCount:\
    \ Int = 0\n    var oddMaxMaxCount: Int = 0\n    var evenMinMaxCount: Int = 0\n\
    \    var oddMinMaxCount: Int = 0\n    var evenMaxMinCount: Int = 0\n    var oddMinMaxCount:\
    \ Int = 0\n    var evenMaxSum: Int = 0\n    var oddMaxSum: Int = 0\n    var evenMinSum:\
    \ Int = 0\n    var oddMinSum: Int = 0\n    var evenMaxAvg: Int = 0\n    var oddMaxAvg:\
    \ Int = 0\n    var evenMinAvg: Int = 0\n    var oddMinAvg: Int = 0\n    var evenMaxMax:\
    \ Int = 0\n    var oddMaxMax: Int = 0\n    var evenMinMax: Int = 0\n    var oddMinMax:\
    \ Int = 0\n    var evenMaxMin: Int = 0\n    var oddMaxMin: Int = 0\n    var evenMaxMaxCount:\
    \ Int = 0\n    var oddMaxMaxCount: Int = 0\n    var evenMinMaxCount: Int = 0\n\
    \    var oddMinMaxCount: Int = 0\n    var evenMaxMinCount: Int = 0\n    var oddMinMaxCount:\
    \ Int = 0\n    var evenMaxSum: Int = 0\n    var oddMaxSum: Int = 0\n    var evenMinSum:\
    \ Int = 0\n    var oddMinSum: Int = 0\n    var evenMaxAvg: Int = 0\n    var oddMaxAvg:\
    \ Int = 0\n    var evenMinAvg: Int = 0\n    var oddMinAvg: Int = 0\n    var evenMaxMax:\
    \ Int = 0\n    var oddMaxMax: Int = 0\n    var evenMinMax: Int = 0\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp85vg3gu4.swift:45:9: error: invalid redeclaration of 'oddMinMaxCount'\n\
    \    var oddMinMaxCount: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:43:9: note:\
    \ 'oddMinMaxCount' previously declared here\n    var oddMinMaxCount: Int = 0\n\
    \        ^\n/tmp/tmp85vg3gu4.swift:46:9: error: invalid redeclaration of 'evenMaxSum'\n\
    \    var evenMaxSum: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:26:9: note: 'evenMaxSum'\
    \ previously declared here\n    var evenMaxSum: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:47:9:\
    \ error: invalid redeclaration of 'oddMaxSum'\n    var oddMaxSum: Int = 0\n  \
    \      ^\n/tmp/tmp85vg3gu4.swift:27:9: note: 'oddMaxSum' previously declared here\n\
    \    var oddMaxSum: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:48:9: error: invalid\
    \ redeclaration of 'evenMinSum'\n    var evenMinSum: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:28:9:\
    \ note: 'evenMinSum' previously declared here\n    var evenMinSum: Int = 0\n \
    \       ^\n/tmp/tmp85vg3gu4.swift:49:9: error: invalid redeclaration of 'oddMinSum'\n\
    \    var oddMinSum: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:29:9: note: 'oddMinSum'\
    \ previously declared here\n    var oddMinSum: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:50:9:\
    \ error: invalid redeclaration of 'evenMaxAvg'\n    var evenMaxAvg: Int = 0\n\
    \        ^\n/tmp/tmp85vg3gu4.swift:30:9: note: 'evenMaxAvg' previously declared\
    \ here\n    var evenMaxAvg: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:51:9: error:\
    \ invalid redeclaration of 'oddMaxAvg'\n    var oddMaxAvg: Int = 0\n        ^\n\
    /tmp/tmp85vg3gu4.swift:31:9: note: 'oddMaxAvg' previously declared here\n    var\
    \ oddMaxAvg: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:52:9: error: invalid redeclaration\
    \ of 'evenMinAvg'\n    var evenMinAvg: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:32:9:\
    \ note: 'evenMinAvg' previously declared here\n    var evenMinAvg: Int = 0\n \
    \       ^\n/tmp/tmp85vg3gu4.swift:53:9: error: invalid redeclaration of 'oddMinAvg'\n\
    \    var oddMinAvg: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:33:9: note: 'oddMinAvg'\
    \ previously declared here\n    var oddMinAvg: Int = 0\n        ^\n/tmp/tmp85vg3gu4.swift:54:9:\
    \ error: inval"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n  \
    \      return -1\n    }\n    if x == y {\n        return x\n    }\n    if x >\
    \ y {\n        return choose_num(y, x)\n    }\n    var even: Int = 0\n    var\
    \ odd: Int = 0\n    var x: Int\n    var y: Int\n    for x = 1; x <= y; x++ {\n\
    \        if x % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    if even > odd {\n        return even\n    } else {\n  \
    \      return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe8_mdwb2.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for x = 1; x <= y; x++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpe8_mdwb2.swift:18:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(y,\
    \ x)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var biggest = y\n \
    \   for num in stride(from: x, through: y, by: 2) {\n        if num % 2 == 0 {\n\
    \            biggest = num\n        }\n    }\n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpc75j66cw/tmpc75j66cw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba1a81ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba1a515b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba1a515988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba1a5147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc75j66cw                        0x000055985959047d <unavailable> + 5245

    5    libc.so.6                          0x00002aba1aa0a460 __libc_start_main +
    245

    6    tmpc75j66cw                        0x0000559859590129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var even = Int()\n    var odd = Int()\n    var result = Int()\n\
    \    \n    if x % 2 == 0 {\n        even = x\n    } else {\n        even = y\n\
    \    }\n    \n    if even > y {\n        even = y\n    }\n    \n    if even >\
    \ x {\n        even = x\n    }\n    \n    if even > y {\n        even = y\n  \
    \  }\n    \n    if even > x {\n        even = x\n    }\n    \n    if even > y\
    \ {\n        even = y\n    }\n    \n    if even > x {\n        even = x\n    }\n\
    \    \n    if even > y {\n        even = y\n    }\n    \n    if even > x {\n \
    \       even = x\n    }\n    \n    if even > y {\n        even = y\n    }\n  \
    \  \n    if even > x {\n        even = x\n    }\n    \n    if even > y {\n   \
    \     even = y\n    }\n    \n    if even > x {\n        even = x\n    }\n    \n\
    \    if even > y {\n        even = y\n    }\n    \n    if even > x {\n       \
    \ even = x\n    }\n    \n    if even > y {\n        even = y\n    }\n    \n  \
    \  if even > x {\n        even = x\n    }\n    \n    if even > y {\n        even\
    \ = y\n    }\n    \n    if even > x {\n        even = x\n    }\n    \n    if even\
    \ > y {\n        even = y\n    }\n    \n    if even > x {\n        even = x\n\
    \    }\n    \n    if even > y {\n        even = y\n    }\n    \n    if even >\
    \ x {\n        even = x\n    }\n    \n    if even > y {\n        even = y\n  \
    \  }\n    \n    if even > x {\n        even = x\n    }\n    \n    if even > y\
    \ {\n        even = y\n    }\n    \n    if even > x {\n        even = x\n    }\n\
    \    \n    if even > y {\n        even = y\n    }\n    \n    if even > x {\n \
    \       even = x\n    }\n    \n    if even > y {\n        even = y\n    }\n  \
    \  \n    if even > x {\n        even = x\n    }\n    \n    if even > y {\n   \
    \     even = y\n    }\n    \n    if even > x {\n        even = x\n    }\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp10elyy3p.swift:15:9: warning: initialization of variable 'odd'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var odd = Int()\n    ~~~~^~~\n    _\n/tmp/tmp10elyy3p.swift:16:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = Int()\n    ~~~~^~~~~~\n \
    \   _\n/tmp/tmp10elyy3p.swift:152:1: error: missing return in global function\
    \ expected to return 'Int'\n}\n^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n    }\n    \n    if even > y {\n       \
    \ return even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp0sfdkoxf/tmp0sfdkoxf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1b08abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1b05a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1b05a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1b05a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sfdkoxf                        0x000055f806ee033d <unavailable> + 4925

    5    libc.so.6                          0x00002ad1b0a97460 __libc_start_main +
    245

    6    tmp0sfdkoxf                        0x000055f806edffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return\
    \ y / 2\n    }\n    if x > y {\n        return choose_num(y - 1, x)\n    }\n \
    \   return choose_num(y - 1, x - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp63akq6m1.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp63akq6m1.swift:24:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(y - 1, x)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp63akq6m1.swift:26:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(y - 1,\
    \ x - 1)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        swap(x,\
    \ y)\n    }\n    var result = -1\n    var even = 1\n    var odd = 1\n    var xMin\
    \ = IntMax\n    var xMax = IntMin\n    var yMin = IntMax\n    var yMax = IntMin\n\
    \    for x in stride(from: x, through: y, by: 1) {\n        if even % 2 == 0 {\n\
    \            if x < xMin {\n                xMin = x\n            }\n        \
    \    if x > xMax {\n                xMax = x\n            }\n        }\n     \
    \   else {\n            if x < yMin {\n                yMin = x\n            }\n\
    \            if x > yMax {\n                yMax = x\n            }\n        }\n\
    \        even += 2\n        odd += 2\n    }\n    if xMin == IntMax {\n       \
    \ return -1\n    }\n    if yMin == IntMax {\n        return -1\n    }\n    if\
    \ xMax == IntMin {\n        return xMin\n    }\n    if yMax == IntMin {\n    \
    \    return yMin\n    }\n    if xMax < yMin {\n        return choose_num(xMin,\
    \ yMin)\n    }\n    if xMin > yMax {\n        return choose_num(xMax, yMax)\n\
    \    }\n    if xMin == yMin {\n        return choose_num(xMin, xMax)\n    }\n\
    \    if xMax == yMax {\n        return choose_num(xMax, xMin)\n    }\n    if xMin\
    \ < yMin {\n        return choose_num(xMin, yMax)\n    }\n    if xMax > yMax {\n\
    \        return choose_num(xMax, yMin)\n    }\n    return choose_num(xMin, yMin)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp33ngp0go.swift:12:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n/tmp/tmp33ngp0go.swift:17:16:\
    \ error: cannot find 'IntMax' in scope\n    var xMin = IntMax\n              \
    \ ^~~~~~\n/tmp/tmp33ngp0go.swift:18:16: error: cannot find 'IntMin' in scope\n\
    \    var xMax = IntMin\n               ^~~~~~\n/tmp/tmp33ngp0go.swift:19:16: error:\
    \ cannot find 'IntMax' in scope\n    var yMin = IntMax\n               ^~~~~~\n\
    /tmp/tmp33ngp0go.swift:20:16: error: cannot find 'IntMin' in scope\n    var yMax\
    \ = IntMin\n               ^~~~~~\n/tmp/tmp33ngp0go.swift:41:16: error: cannot\
    \ find 'IntMax' in scope\n    if xMin == IntMax {\n               ^~~~~~\n/tmp/tmp33ngp0go.swift:44:16:\
    \ error: cannot find 'IntMax' in scope\n    if yMin == IntMax {\n            \
    \   ^~~~~~\n/tmp/tmp33ngp0go.swift:47:16: error: cannot find 'IntMin' in scope\n\
    \    if xMax == IntMin {\n               ^~~~~~\n/tmp/tmp33ngp0go.swift:50:16:\
    \ error: cannot find 'IntMin' in scope\n    if yMax == IntMin {\n            \
    \   ^~~~~~\n/tmp/tmp33ngp0go.swift:54:26: error: missing argument labels 'x:y:'\
    \ in call\n        return choose_num(xMin, yMin)\n                         ^\n\
    \                          x:    y: \n/tmp/tmp33ngp0go.swift:57:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(xMax, yMax)\n    \
    \                     ^\n                          x:    y: \n/tmp/tmp33ngp0go.swift:60:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(xMin,\
    \ xMax)\n                         ^\n                          x:    y: \n/tmp/tmp33ngp0go.swift:63:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(xMax,\
    \ xMin)\n                         ^\n                          x:    y: \n/tmp/tmp33ngp0go.swift:66:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(xMin,\
    \ yMax)\n                         ^\n                          x:    y: \n/tmp/tmp33ngp0go.swift:69:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(xMax,\
    \ yMin)\n            "
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n \
    \   for i in 0..<(x - y) {\n        if i % 2 == 0 {\n            even += i\n \
    \       } else {\n            odd += i\n        }\n    }\n    \n    if even >\
    \ odd {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_nwibgbb.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp_nwibgbb.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x % 2 == 0 {\n   \
    \     return x / 2\n    }\n    if y % 2 == 0 {\n        return y / 2\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6yqpizzj/tmp6yqpizzj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34bb266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34baf5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34baf5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34baf5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yqpizzj                        0x00005651f019924d <unavailable> + 4685

    5    libc.so.6                          0x00002b34bb452460 __libc_start_main +
    245

    6    tmp6yqpizzj                        0x00005651f0198ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return (x * y) / 2\n    }\n    if x % 2 == 0 {\n       \
    \ return x / 2\n    }\n    if y % 2 == 0 {\n        return y / 2\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmaalyh17/tmpmaalyh17.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97ad6fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97ad3f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97ad3f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97ad3f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmaalyh17                        0x0000559d8d2d624d <unavailable> + 4685

    5    libc.so.6                          0x00002b97ad8e9460 __libc_start_main +
    245

    6    tmpmaalyh17                        0x0000559d8d2d5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var result = x\n    for _ in 0..<y {\n        if result % 2 ==\
    \ 0 {\n            result = result / 2\n        } else {\n            return result\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphyhy31jn/tmphyhy31jn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c7d022c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c7cd19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c7cd19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c7cd187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyhy31jn                        0x00005638e3f6c33d <unavailable> + 4925

    5    libc.so.6                          0x00002b7c7d20e460 __libc_start_main +
    245

    6    tmphyhy31jn                        0x00005638e3f6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result: Int = 0\n    var x: Int\n    var y: Int\n    for\
    \ x in stride(from: x, to: y, by: 2) {\n        if x % 2 == 0 {\n            result\
    \ = x\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy1pd93cf.swift:15:9: warning: variable 'x' was never mutated; consider\
    \ changing to 'let' constant\n    var x: Int\n    ~~~ ^\n    let\n/tmp/tmpy1pd93cf.swift:16:9:\
    \ warning: variable 'y' was never mutated; consider changing to 'let' constant\n\
    \    var y: Int\n    ~~~ ^\n    let\n/tmp/tmpy1pd93cf.swift:17:27: error: variable\
    \ 'x' used before being initialized\n    for x in stride(from: x, to: y, by: 2)\
    \ {\n                          ^\n/tmp/tmpy1pd93cf.swift:15:9: note: variable\
    \ defined here\n    var x: Int\n        ^\n/tmp/tmpy1pd93cf.swift:17:34: error:\
    \ variable 'y' used before being initialized\n    for x in stride(from: x, to:\
    \ y, by: 2) {\n                                 ^\n/tmp/tmpy1pd93cf.swift:16:9:\
    \ note: variable defined here\n    var y: Int\n        ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<y {\n        if x % 2 == 0 {\n            even = even + x\n       \
    \ } else {\n            odd = odd + x\n        }\n        x = x + 1\n    }\n \
    \   \n    if even > odd {\n        return even\n    } else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpii5dz3z_.swift:24:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x + 1\n        ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    for _ in 0..<(x\
    \ - y) {\n        x = x + 1\n    }\n    for _ in 0..<(y - x) {\n        y = y\
    \ + 1\n    }\n    for _ in 0..<(x - y) {\n        x = x + 1\n    }\n    for _\
    \ in 0..<(y - x) {\n        y = y + 1\n    }\n    for _ in 0..<(x - y) {\n   \
    \     x = x + 1\n    }\n    for _ in 0..<(y - x) {\n        y = y + 1\n    }\n\
    \    for _ in 0..<(x - y) {\n        x = x + 1\n    }\n    for _ in 0..<(y - x)\
    \ {\n        y = y + 1\n    }\n    for _ in 0..<(x - y) {\n        x = x + 1\n\
    \    }\n    for _ in 0..<(y - x) {\n        y = y + 1\n    }\n    for _ in 0..<(x\
    \ - y) {\n        x = x + 1\n    }\n    for _ in 0..<(y - x) {\n        y = y\
    \ + 1\n    }\n    for _ in 0..<(x - y) {\n        x = x + 1\n    }\n    for _\
    \ in 0..<(y - x) {\n        y = y + 1\n    }\n    for _ in 0..<(x - y) {\n   \
    \     x = x + 1\n    }\n    for _ in 0..<(y - x) {\n        y = y + 1\n    }\n\
    \    for _ in 0..<(x - y) {\n        x = x + 1\n    }\n    for _ in 0..<(y - x)\
    \ {\n        y = y + 1\n    }\n    for _ in 0..<(x - y) {\n        x = x + 1\n\
    \    }\n    for _ in 0..<(y - x) {\n        y = y + 1\n    }\n    for _ in 0..<(x\
    \ - y) {\n        x = x + 1\n    }\n    for _ in 0..<(y - x) {\n        y = y\
    \ + 1\n    }\n    for _ in 0..<(x - y) {\n        x = x + 1\n    }\n    for _\
    \ in 0..<(y - x) {\n        y = y + 1\n    }\n    for _ in 0..<(x - y) {\n   \
    \     x = x + 1\n    }\n    for _ in 0..<(y - x) {\n        y = y + 1\n    }\n\
    \    for _ in 0..<(x - y) {\n        x = x + 1\n    }\n    for _ in 0..<(y - x)\
    \ {\n        y = y + 1\n    }\n    for _ in 0..<(x - y) {\n        x = x + 1\n\
    \    }\n    for _ in 0..<(y - x) {\n        y = y + 1\n    }\n    for _ in 0..<(x\
    \ - y) {\n        x = x + 1\n    }\n    for _ in 0..<(\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0iczsedi.swift:115:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp0iczsedi.swift:114:19: error: expected '{' to start the body of\
    \ for-each loop\n    for _ in 0..<(\n                  ^\n/tmp/tmp0iczsedi.swift:114:18:\
    \ error: cannot convert value of type '()' to expected argument type 'Int'\n \
    \   for _ in 0..<(\n                 ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    for _ in 0..<y {\n        if result % 2 ==\
    \ 0 {\n            result = result / 2\n        } else {\n            return -1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpr9ofvdoh/tmpr9ofvdoh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b980d106c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b980cdfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b980cdfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b980cdfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9ofvdoh                        0x00005625bc58b33d <unavailable> + 4925

    5    libc.so.6                          0x00002b980d2f2460 __libc_start_main +
    245

    6    tmpr9ofvdoh                        0x00005625bc58afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var max_num: Int = 0\n    \n    for num in 1...y {\n  \
    \      if num % 2 == 0 {\n            if num > max_num {\n                max_num\
    \ = num\n            }\n        }\n    }\n    \n    if max_num == 0 {\n      \
    \  return -1\n    }\n    \n    for num in 1...x {\n        if num % 2 == 0 {\n\
    \            if num > max_num {\n                max_num = num\n            }\n\
    \        }\n    }\n    \n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptp66s094/tmptp66s094.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50dab84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50da87bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50da87b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50da87a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptp66s094                        0x0000562122ed033d <unavailable> + 4925

    5    libc.so.6                          0x00002b50dad70460 __libc_start_main +
    245

    6    tmptp66s094                        0x0000562122ecffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    var even = 1\n    var odd = 0\n    var xEven\
    \ = abs(x) / 2\n    var yEven = abs(y) / 2\n    var xOdd = abs(x) / 2\n    var\
    \ yOdd = abs(y) / 2\n    var xEvenOdd = abs(xEven * yOdd) / 2\n    var yEvenOdd\
    \ = abs(yEven * xOdd) / 2\n    var xOddEven = abs(xOdd * yEven) / 2\n    var yOddEven\
    \ = abs(yOdd * xEven) / 2\n    var xEvenOddEven = abs(xEvenOdd * yOddEven) / 2\n\
    \    var yEvenOddEven = abs(yEvenOdd * xOddEven) / 2\n    var xOddEvenOddEven\
    \ = abs(xOddEven * yEvenOdd) / 2\n    var yOddEvenOddEven = abs(yOddEven * xEvenOdd)\
    \ / 2\n    var xEvenOddEvenOddEven = abs(xEvenOddEven * yOddEvenOdd) / 2\n   \
    \ var yEvenOddEvenOddEven = abs(yEvenOddEven * xOddEvenOdd) / 2\n    var xOddEvenOddEvenOddEven\
    \ = abs(xOddEvenOddEven * yEvenOddEvenOdd) / 2\n    var yOddEvenOddEvenOddEven\
    \ = abs(yOddEvenOddEven * xEvenOddEvenOddEven) / 2\n    var xEvenOddEvenOddEvenOddEven\
    \ = abs(xEvenOddEvenOddEven * yOddEvenOddEvenOdd) / 2\n    var yEvenOddEvenOddEvenOddEven\
    \ = abs(yEvenOddEvenOddEven * xOddEvenOddEvenOddEven) / 2\n    var xOddEvenOddEvenOddEvenOddEven\
    \ = abs(xOddEvenOddEvenOddEven * yEvenOddEvenOddEvenOddEven) / 2\n    var yOddEvenOddEvenOddEvenOddEven\
    \ = abs(yOddEvenOddEvenOddEven * xEvenOddEvenOddEvenOddEven) / 2\n    var xEvenOddEvenOddEvenOddEvenOddEven\
    \ = abs(xEvenOddEvenOddEvenOddEven * yOddEvenOddEvenOddEvenOddEven) / 2\n    var\
    \ yEvenOddEvenOddEvenOddEven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpev9r58xb.swift:28:50: error: cannot find 'yOddEvenOdd' in scope\n\
    \    var xEvenOddEvenOddEven = abs(xEvenOddEven * yOddEvenOdd) / 2\n         \
    \                                        ^~~~~~~~~~~\n/tmp/tmpev9r58xb.swift:29:50:\
    \ error: cannot find 'xOddEvenOdd' in scope\n    var yEvenOddEvenOddEven = abs(yEvenOddEven\
    \ * xOddEvenOdd) / 2\n                                                 ^~~~~~~~~~~\n\
    /tmp/tmpev9r58xb.swift:30:56: error: cannot find 'yEvenOddEvenOdd' in scope\n\
    \    var xOddEvenOddEvenOddEven = abs(xOddEvenOddEven * yEvenOddEvenOdd) / 2\n\
    \                                                       ^~~~~~~~~~~~~~~\n/tmp/tmpev9r58xb.swift:32:64:\
    \ error: cannot find 'yOddEvenOddEvenOdd' in scope\n    var xEvenOddEvenOddEvenOddEven\
    \ = abs(xEvenOddEvenOddEven * yOddEvenOddEvenOdd) / 2\n                      \
    \                                         ^~~~~~~~~~~~~~~~~~\n/tmp/tmpev9r58xb.swift:32:62:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    var xEvenOddEvenOddEvenOddEven = abs(xEvenOddEvenOddEven * yOddEvenOddEvenOdd)\
    \ / 2\n                                                             ^\n/tmp/tmpev9r58xb.swift:33:62:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    var yEvenOddEvenOddEvenOddEven = abs(yEvenOddEvenOddEven * xOddEvenOddEvenOddEven)\
    \ / 2\n                                                             ^\n/tmp/tmpev9r58xb.swift:34:68:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    var xOddEvenOddEvenOddEvenOddEven = abs(xOddEvenOddEvenOddEven * yEvenOddEvenOddEvenOddEven)\
    \ / 2\n                                                                   ^\n\
    /tmp/tmpev9r58xb.swift:35:68: error: cannot convert value of type 'Duration' to\
    \ expected argument type 'Int'\n    var yOddEvenOddEvenOddEvenOddEven = abs(yOddEvenOddEvenOddEven\
    \ * xEvenOddEvenOddEvenOddEven) / 2\n                                        \
    \                           ^\n/tmp/tmpev9r58xb.swift:36:76: error: cannot convert\
    \ value of type 'Duration' to expected argument t"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y - x) / 2\n    }\n    if x % 2 == 0 {\n   \
    \     return x / 2\n    }\n    if y % 2 == 0 {\n        return y / 2\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6yqpizzj/tmp6yqpizzj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34bb266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34baf5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34baf5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34baf5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yqpizzj                        0x00005651f019924d <unavailable> + 4685

    5    libc.so.6                          0x00002b34bb452460 __libc_start_main +
    245

    6    tmp6yqpizzj                        0x00005651f0198ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var biggest = Int()\n    for number in 1...y {\n        if number\
    \ > x {\n            break\n        }\n        if number % 2 == 0 {\n        \
    \    biggest = number\n        }\n    }\n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzdlyn2gg/tmpzdlyn2gg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ade99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6adb90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6adb90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6adb8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdlyn2gg                        0x0000564cff12733d <unavailable> + 4925

    5    libc.so.6                          0x00002af6ae085460 __libc_start_main +
    245

    6    tmpzdlyn2gg                        0x0000564cff126fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder % 2 == 0 {\n            result = remainder\n     \
    \       break\n        }\n        remainder /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkd6crz9g/tmpkd6crz9g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ab09bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69aad92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69aad92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69aad917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkd6crz9g                        0x00005575e7c2124d <unavailable> + 4685

    5    libc.so.6                          0x00002b69ab287460 __libc_start_main +
    245

    6    tmpkd6crz9g                        0x00005575e7c20ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978979
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    var result = x\n    var remainder = y\n    while remainder >\
    \ 0 {\n        if remainder & 1 == 0 {\n            result = result + 1\n    \
    \    }\n        remainder = remainder >> 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7l2g83u4/tmp7l2g83u4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05043e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05040dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05040da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05040d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7l2g83u4                        0x0000557b890531bd <unavailable> + 4541

    5    libc.so.6                          0x00002b05045cf460 __libc_start_main +
    245

    6    tmp7l2g83u4                        0x0000557b89052e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    \n    var result = x\n    var remainder = y\n    \n    while\
    \ remainder > 0 {\n        if remainder % 2 == 0 {\n            result = result\
    \ + 1\n        }\n        remainder = remainder / 2\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpe0d2p8w0/tmpe0d2p8w0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b555d04ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b555cd45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b555cd45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b555cd447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0d2p8w0                        0x0000555e42aff24d <unavailable> + 4685

    5    libc.so.6                          0x00002b555d23a460 __libc_start_main +
    245

    6    tmpe0d2p8w0                        0x0000555e42afeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x\
    \ = abs(x)\n    var y = abs(y)\n    var x_even = x % 2 == 0\n    var y_even =\
    \ y % 2 == 0\n    if x_even && y_even {\n        if x == y {\n            return\
    \ x\n        }\n        if x > y {\n            return x\n        }\n        return\
    \ y\n    }\n    if x_even {\n        if x == y {\n            return x\n     \
    \   }\n        if x > y {\n            return x\n        }\n        return y\n\
    \    }\n    if y_even {\n        if x == y {\n            return x\n        }\n\
    \        if x > y {\n            return x\n        }\n        return y\n    }\n\
    \    if x == y {\n        return x\n    }\n    if x > y {\n        return x\n\
    \    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpl9rsr_w4/tmpl9rsr_w4.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb4235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb3f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fb3f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fb3f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl9rsr_w4                        0x00005638e4e4633d <unavailable> + 4925

    5    libc.so.6                          0x00002b8fb4421460 __libc_start_main +
    245

    6    tmpl9rsr_w4                        0x00005638e4e45fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    while x <= y {\n        if x % 2 == 0 {\n            even = even\
    \ * 2 + x\n            if even > evenMax {\n                evenMax = even\n \
    \           }\n            if even < evenMin {\n                evenMin = even\n\
    \            }\n        } else {\n            odd = odd * 2 + x\n            if\
    \ odd > oddMax {\n                oddMax = odd\n            }\n            if\
    \ odd < oddMin {\n                oddMin = odd\n            }\n        }\n   \
    \     x += 1\n        y += 1\n    }\n    if evenMin == evenMax {\n        return\
    \ evenMin\n    }\n    if oddMin == oddMax {\n        return oddMin\n    }\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2m2z7n1o/tmp2m2z7n1o.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3174723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b317441ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b317441a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31744197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2m2z7n1o                        0x000056044211824d <unavailable> + 4685

    5    libc.so.6                          0x00002b317490f460 __libc_start_main +
    245

    6    tmp2m2z7n1o                        0x0000560442117ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    return choose_num(x\
    \ / 2, y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpegoxvieb.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpegoxvieb.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpegoxvieb.swift:20:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y)\
    \ = (y, x)\n    }\n    \n    var result = -1\n    var even = 1\n    var odd =\
    \ 1\n    \n    for _ in 0..<(x-y) {\n        if even % 2 == 0 {\n            even\
    \ = even + 2\n        } else {\n            odd = odd + 2\n        }\n    }\n\
    \    \n    if even % 2 == 0 {\n        result = even\n    } else {\n        result\
    \ = odd\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpi_n7yrl5.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpi_n7yrl5.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    if x == y {\n     \
    \   return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x: x, y: y\
    \ - 1)\n    }\n    if y % 2 == 0 {\n        return choose_num(x: x - 1, y: y)\n\
    \    }\n    return choose_num(x: x - 1, y: y - 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyffoo6mr/tmpyffoo6mr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fd814ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fd7e41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fd7e41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fd7e407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyffoo6mr                        0x000055658721c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b9fd8336460 __libc_start_main +
    245

    6    tmpyffoo6mr                        0x000055658721bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return\
    \ y / 2\n    }\n    if x > y {\n        return choose_num(y, x)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu5wj4d.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpxpu5wj4d.swift:24:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(y, x)\n                   \
    \      ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    while x < y {\n        if x % 2 == 0 {\n            even\
    \ = even + x\n        }\n        else {\n            odd = odd + x\n        }\n\
    \        x = x + 1\n    }\n    if even > odd {\n        return even\n    }\n \
    \   return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7i1rzb15/tmp7i1rzb15.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2939bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29398cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29398ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29398c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i1rzb15                        0x00005599c1d3a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b2939dbf460 __libc_start_main +
    245

    6    tmp7i1rzb15                        0x00005599c1d39ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    var result = x\n    \n    for _ in 0..<y\
    \ {\n        if result % 2 == 0 {\n            result = result / 2\n        }\
    \ else {\n            return -1\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp6uv5i90_.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return\
    \ y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpqq2074fd.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return x / 2\n    }\n    if y % 2 == 0 {\n        return\
    \ y / 2\n    }\n    if x > y {\n        return choose_num(y, x)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu5wj4d.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpxpu5wj4d.swift:24:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(y, x)\n                   \
    \      ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest = y\n    if x\
    \ > y {\n        biggest = x\n    }\n    for var i = x; i <= biggest; i++ {\n\
    \        if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4dyh6dde.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= biggest; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978980
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return\
    \ -1\n    }\n    if x > y {\n        return -1\n    }\n    if x % 2 == 0 && y\
    \ % 2 == 0 {\n        return x + (y / 2)\n    }\n    if x % 2 == 0 {\n       \
    \ return x + (y / 2)\n    }\n    if y % 2 == 0 {\n        return x + (y / 2)\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3thkt2on/tmp3thkt2on.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0f10e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0f0ddfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0f0ddf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0f0dde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3thkt2on                        0x000055fe50d1224d <unavailable> + 4685

    5    libc.so.6                          0x00002ba0f12d4460 __libc_start_main +
    245

    6    tmp3thkt2on                        0x000055fe50d11ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    if x > y {\n        return -1\n    }\n    return\
    \ choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmppcy6c0ia.swift:18:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmppcy6c0ia.swift:21:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmppcy6c0ia.swift:26:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    if x > y {\n        return choose_num(y,\
    \ x)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpcrit91t3.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpcrit91t3.swift:18:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpcrit91t3.swift:21:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n/tmp/tmpcrit91t3.swift:24:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(y,\
    \ x)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659978980
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return\
    \ choose_num(y, x)\n    }\n    \n    if x == y {\n        return x\n    }\n  \
    \  \n    if x % 2 == 0 && y % 2 == 0 {\n        return x + (y - x)/2\n    }\n\
    \    \n    if x % 2 == 0 && y % 2 != 0 {\n        return -1\n    }\n    \n   \
    \ if x % 2 != 0 && y % 2 == 0 {\n        return -1\n    }\n    \n    if x % 2\
    \ != 0 && y % 2 != 0 {\n        return -1\n    }\n    \n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpcjfuq9g5.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659978980
