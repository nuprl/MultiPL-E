name: HumanEval_56_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
  \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n///\
  \ >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
  \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
  \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
  ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
  \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\")\
  \ == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)"
completions: ["    let openingBrackets = brackets.components(separatedBy: \"<\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \">\")\n    \n   \
    \ if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] !=\
    \ \"<\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ guard closingBrackets[closingBracketIndex] != \">\" else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n\n    if openingBracketIndex\
    \ == closingBracketIndex {\n        return true\n    }\n\n    return false", " \
    \   let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"<\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \">\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    \n    return openingBrackets.count == 0", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true", "    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\
    \ && closing.count == 0\n    }\n    if closing.isEmpty {\n        return opening.count\
    \ == 0\n    }\n    if opening.count != closing.count {\n        return false\n\
    \    }\n    if opening.count == 1 {\n        return opening.first! == closing.first!\n\
    \    }\n    if opening.count == 2 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 3 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 4 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 5 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 6 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 7 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 8 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 9 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 10 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 11 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 12 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 13 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 14 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 15 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 16 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 17 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 18 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 19 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 20 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 21 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == ", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if !closingBrackets.contains(where:\
    \ { $0 == openingBracket }) {\n            return false\n        }\n    }\n  \
    \  return true", "    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    return opening.count == closing.count",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    var\
    \ openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex -= 1\n    }\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            openingBracketIndex += 1\n            continue\n   \
    \     }\n\n        openingBracketIndex += 1\n\n        if openingBracketIndex\
    \ < brackets.endIndex {\n            if openingBrackets[openingBracketIndex] ==\
    \ \">\" {\n                openingBracketIndex += 1\n                continue\n\
    \            }\n\n            if openingBrackets[openingBracketIndex] != \"<\"\
    \ {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n            openingBracketIndex += 1\n        }\n\n        if\
    \ openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n            openingBracketIndex += 1\n        }\n\n        if\
    \ openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsCountIndex = 0\n\
    \    var closingBracketsCountIndex = 0\n    var openingBracketsFound = false\n\
    \    var closingBracketsFound = false\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsCountIndex += 1\n        if openingBracketsCountIndex\
    \ == openingBracketsCount {\n            openingBracketsCountIndex = 0\n     \
    \       openingBracketsIndex += 1\n        }\n        if openingBrackets[openingBracketsIndex]\
    \ == '<' {\n            openingBracketsFound = true\n            openingBracketsIndex\
    \ += 1\n        }\n        if openingBrackets[openingBracketsIndex] == '>' {\n\
    \            openingBracketsFound = true\n            openingBracketsIndex +=\
    \ 1\n        }\n        if openingBracketsFound {\n            openingBracketsCount\
    \ -= openingBracketsCountIndex\n            if openingBracketsCount == 0 {\n \
    \               openingBracketsFound = false\n            }\n        }\n    }\n\
    \    while closingBracketsIndex < closingBracketsCount {\n        closingBracketsCountIndex\
    \ += 1\n        if closingBracketsCountIndex == closingBracketsCount {\n     \
    \       closingBracketsCountIndex = 0\n            closingBracketsIndex += 1\n\
    \        }\n        if closingBrackets[closingBracketsIndex] == '<' {\n      \
    \      closingBracketsFound = true\n            closingBracketsIndex += 1\n  \
    \      }\n        if closingBrackets[closingBracketsIndex] == '>' {\n        \
    \    closingBracketsFound = true\n            closingBracketsIndex += 1\n    \
    \    }\n        if closingBracketsFound {\n            closingBracketsCount -=\
    \ closingBracketsCountIndex\n            if closingBracketsCount == 0 {\n    \
    \            closingBracketsFound = false\n            }\n        }\n    }\n \
    \   return openingBracketsIndex == closingBracketsIndex", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \    while openingBracketIndex < brackets.endIndex {\n        openingBracketIndex\
    \ = openingBracketIndex.successor()\n        closingBracketIndex = closingBracketIndex.successor()\n\
    \        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"<\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \">\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for i in 0..<openingBrackets.count {\n   \
    \     if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    \n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    return openingBrackets.count == 0", " \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \">\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n    }\n\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ != \"<\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketIndex == closingBracketIndex", "   \
    \ var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0", "  \
    \  var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n        if\
    \ openingBracket == \"<\" {\n            openingBracketIndex += 1\n          \
    \  continue\n        }\n        if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketCount += 1\n            if closingBracketCount\
    \ > 1 {\n                closingBracketIndex += 1\n                closingBracketCount\
    \ = 0\n                continue\n            }\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    return openingBracketCount == closingBracketCount", "    var\
    \ openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n            closingBracketIndex += 1\n  \
    \      } else if openingBracket == \">\" {\n            openingBracketIndex +=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          let nextOpeningBracket = brackets[openingBracketIndex]\n          \
    \  if nextOpeningBracket == \"<\" {\n                openingBracketIndex += 1\n\
    \            } else {\n                openingBracketIndex += 1\n            \
    \    closingBracketIndex += 1\n            }\n        }\n\n        if closingBracketIndex\
    \ < brackets.endIndex {\n            let nextClosingBracket = brackets[closingBracketIndex]\n\
    \            if nextClosingBracket == \">\" {\n                closingBracketIndex\
    \ += 1\n            } else {\n                closingBracketIndex += 1\n     \
    \           openingBracketIndex += 1\n            }\n        }\n    }\n\n    return\
    \ openingBracketIndex == closingBracketIndex", "    brackets = brackets.lowercased()\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == \">\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < openingBrackets.endIndex {\n    \
    \            openingBrackets[openingBracketIndex] = \"<\"\n                closingBrackets[closingBracketIndex]\
    \ = \"<\"\n                closingBracketIndex += 1\n            }\n        }\
    \ else if openingBrackets[openingBracketIndex] != \"<\" {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n    }\n    return openingBracketIndex\
    \ == openingBrackets.endIndex && closingBracketIndex == closingBrackets.endIndex",
  "    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0"]
stop_tokens:
- "\n}"
