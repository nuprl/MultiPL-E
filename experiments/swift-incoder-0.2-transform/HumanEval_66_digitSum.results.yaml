language: swift
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, char)\
    \ -> Int in\n        let code = Int(char)\n        if code >= 48 && code <= 57\
    \ {\n            return sum + code - 48\n        }\n        return 0\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqn2ckiix.swift:20:20: error: no exact matches in call to initializer\
    \ \n        let code = Int(char)\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659824965
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter{\
    \ $0.value > 0 }\n    return digits.reduce(0, combine: { $0 + $1.value })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfa8tbupn.swift:20:25: error: extraneous argument label 'combine:'\
    \ in call\n    return digits.reduce(0, combine: { $0 + $1.value })\n         \
    \               ^   ~~~~~~~~~\n                            \n/tmp/tmpfa8tbupn.swift:20:19:\
    \ error: cannot convert return expression of type 'UInt32' to return type 'Int'\n\
    \    return digits.reduce(0, combine: { $0 + $1.value })\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                        )\n"
  stdout: ''
  timestamp: 1659824965
