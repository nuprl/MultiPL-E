language: swift
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, char)\
    \ -> Int in\n        let code = Int(char)\n        if code >= 48 && code <= 57\
    \ {\n            return sum + code - 48\n        }\n        return 0\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqn2ckiix.swift:20:20: error: no exact matches in call to initializer\
    \ \n        let code = Int(char)\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659824965
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter{\
    \ $0.value > 0 }\n    return digits.reduce(0, combine: { $0 + $1.value })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfa8tbupn.swift:20:25: error: extraneous argument label 'combine:'\
    \ in call\n    return digits.reduce(0, combine: { $0 + $1.value })\n         \
    \               ^   ~~~~~~~~~\n                            \n/tmp/tmpfa8tbupn.swift:20:19:\
    \ error: cannot convert return expression of type 'UInt32' to return type 'Int'\n\
    \    return digits.reduce(0, combine: { $0 + $1.value })\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                        )\n"
  stdout: ''
  timestamp: 1659824965
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, ch) in\n\
    \        if let _ = Int(ch) {\n            return sum + Int(ch)\n        }\n \
    \       return sum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpary1ir2m.swift:20:24: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n        if let _ = Int(ch)\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter\
    \ { $0.value > 0 }\n    return digits.reduce(0) { $0 + $1.value }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmplahr9rnt.swift:20:19: error: cannot convert return expression of\
    \ type 'UInt32' to return type 'Int'\n    return digits.reduce(0) { $0 + $1.value\
    \ }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Int(          \
    \                    )\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter\
    \ { $0.value > 0 }\n    return digits.reduce(0) { $0 + Int($1) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphya6b1q8.swift:20:36: error: no exact matches in call to initializer\
    \ \n    return digits.reduce(0) { $0 + Int($1) }\n                           \
    \        ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that 'Unicode.Scalar'\
    \ conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n  \
    \                    ^\nSwift.SignedInteger:2:23: note: candidate requires that\
    \ 'Unicode.Scalar' conform to 'BinaryInteger' (requirement specified as 'T' :\
    \ 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, char)\
    \ -> Int in\n        let code = Int(char)\n        return sum + code - '0'\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptx2r70fm.swift:21:29: error: single-quoted string literal found,\
    \ use '\"'\n        return sum + code - '0'\n                            ^~~\n\
    \                            \"0\"\n/tmp/tmptx2r70fm.swift:20:20: error: no exact\
    \ matches in call to initializer \n        let code = Int(char)\n            \
    \       ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8mygboye.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8mygboye.swift:21:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c)\n   \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { sum, char in\n\
    \        switch char {\n        case 'A':\n            return sum + 65\n     \
    \   case 'B':\n            return sum + 66\n        case 'C':\n            return\
    \ sum + 67\n        case 'D':\n            return sum + 68\n        case 'E':\n\
    \            return sum + 69\n        case 'F':\n            return sum + 70\n\
    \        case 'G':\n            return sum + 71\n        case 'H':\n         \
    \   return sum + 72\n        case 'I':\n            return sum + 73\n        case\
    \ 'J':\n            return sum + 74\n        case 'K':\n            return sum\
    \ + 75\n        case 'L':\n            return sum + 76\n        case 'M':\n  \
    \          return sum + 77\n        case 'N':\n            return sum + 78\n \
    \       case 'O':\n            return sum + 79\n        case 'P':\n          \
    \  return sum + 80\n        case 'Q':\n            return sum + 81\n        case\
    \ 'R':\n            return sum + 82\n        case 'S':\n            return sum\
    \ + 83\n        case 'T':\n            return sum + 84\n        case 'U':\n  \
    \          return sum + 85\n        case 'V':\n            return sum + 86\n \
    \       case 'W':\n            return sum + 87\n        case 'X':\n          \
    \  return sum + 88\n        case 'Y':\n            return sum + 89\n        case\
    \ 'Z':\n            return sum + 90\n        default:\n            return sum\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpp65mv9ip.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmpp65mv9ip.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'B':\n   \
    \          ^~~\n             \"B\"\n/tmp/tmpp65mv9ip.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'C':\n             ^~~\n      \
    \       \"C\"\n/tmp/tmpp65mv9ip.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'D':\n             ^~~\n             \"D\"\n/tmp/tmpp65mv9ip.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'E':\n   \
    \          ^~~\n             \"E\"\n/tmp/tmpp65mv9ip.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'F':\n             ^~~\n      \
    \       \"F\"\n/tmp/tmpp65mv9ip.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'G':\n             ^~~\n             \"G\"\n/tmp/tmpp65mv9ip.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'H':\n   \
    \          ^~~\n             \"H\"\n/tmp/tmpp65mv9ip.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'I':\n             ^~~\n      \
    \       \"I\"\n/tmp/tmpp65mv9ip.swift:39:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'J':\n             ^~~\n             \"J\"\n/tmp/tmpp65mv9ip.swift:41:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'K':\n   \
    \          ^~~\n             \"K\"\n/tmp/tmpp65mv9ip.swift:43:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'L':\n             ^~~\n      \
    \       \"L\"\n/tmp/tmpp65mv9ip.swift:45:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'M':\n             ^~~\n             \"M\"\n/tmp/tmpp65mv9ip.swift:47:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'N':\n   \
    \          ^~~\n             \"N\"\n/tmp/tmpp65mv9ip.swift:49:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'O':\n             ^~~\n      \
    \       \"O\"\n/tmp/tmpp65mv9ip.swift:51:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0, combine:\
    \ +)\n    return result % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp5ibxjxyq.swift:19:26: error: extraneous argument label 'combine:'\
    \ in call\n    let result = s.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n/tmp/tmp5ibxjxyq.swift:19:39:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, String.Element) throws -> Int' (aka '(Int, Character) throws -> Int')\n\
    \    let result = s.reduce(0, combine: +)\n                                  \
    \    ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0) { (sum,\
    \ ch) in\n        let code = Int(ch)\n        return sum + Int(UnicodeScalar(code).value)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp383jw322.swift:20:20: error: no exact matches in call to initializer\
    \ \n        let code = Int(ch)\n                   ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, char)\
    \ in\n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \        return sum + digit * 10\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4zc8vnn3.swift:20:33: error: no exact matches in call to initializer\
    \ \n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:33: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:33: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:33: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:33: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:33: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:33: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                                ^\n/tmp/tmp4zc8vnn3.swift:20:21: error: no exact\
    \ matches in call to initializer \n        let digit = Int(char) - Int(Character(UnicodeScalar(UInt8(char)!)))\n\
    \                    ^\n/tmp/tmp4zc8vnn3.swift:20:21: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \        let digit = Int(char) - Int(Character(UnicodeScalar(UInt"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyp5y2u8f.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyp5y2u8f.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { acc, c in\n\
    \        let digit = Int(c)\n        return acc + digit * Int(Character(UnicodeScalar(digit).value))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzpyfkzum.swift:20:21: error: no exact matches in call to initializer\
    \ \n        let digit = Int(c)\n                    ^\nSwift.Int:7:12: note: candidate\
    \ expects value of type 'Float16' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, char)\
    \ -> Int in\n        switch char {\n        case 'A':\n            return sum\
    \ + 65\n        case 'a':\n            return sum + 97\n        case 'B':\n  \
    \          return sum + 66\n        case 'b':\n            return sum + 98\n \
    \       case 'C':\n            return sum + 67\n        case 'c':\n          \
    \  return sum + 99\n        case 'D':\n            return sum + 68\n        case\
    \ 'd':\n            return sum + 100\n        case 'E':\n            return sum\
    \ + 69\n        case 'e':\n            return sum + 101\n        case 'F':\n \
    \           return sum + 70\n        case 'f':\n            return sum + 102\n\
    \        case 'G':\n            return sum + 71\n        case 'g':\n         \
    \   return sum + 103\n        case 'H':\n            return sum + 72\n       \
    \ case 'h':\n            return sum + 104\n        case 'I':\n            return\
    \ sum + 73\n        case 'i':\n            return sum + 105\n        case 'J':\n\
    \            return sum + 74\n        case 'j':\n            return sum + 106\n\
    \        case 'K':\n            return sum + 75\n        case 'k':\n         \
    \   return sum + 107\n        case 'L':\n            return sum + 76\n       \
    \ case 'l':\n            return sum + 108\n        case 'M':\n            return\
    \ sum + 77\n        case 'm':\n            return sum + 109\n        case 'N':\n\
    \            return sum + 78\n        case 'n':\n            return sum + 110\n\
    \        case 'O':\n            return sum + 79\n        case 'o':\n         \
    \   return sum + 111\n        case 'P':\n            return sum + 80\n       \
    \ case 'p':\n            return sum + 112\n        case 'Q':\n            return\
    \ sum + 81\n        case 'q':\n            return sum + 113\n        case 'R':\n\
    \            return sum + 82\n        case 'r':\n            return sum + 114\n\
    \        case 'S':\n            return sum + 83\n        case 's':\n         \
    \   return sum + 115\n        case 'T':\n            return sum + 84\n       \
    \ case 't':\n            return sum + 116\n        case 'U':\n            return\
    \ sum + 85\n        case 'u':\n            return sum + 117\n        case 'V':\n\
    \            return sum + 86\n        case 'v':\n            return sum + 118\n\
    \        case 'W':\n            return sum + 87\n        case 'w':\n         \
    \   return sum + 119\n        case 'X':\n            return sum + 88\n       \
    \ case 'x':\n            return sum + 120\n        case 'Y':\n            return\
    \ sum + 89\n        case 'y':\n            return sum + 121\n        case 'Z':\n\
    \            return sum + 90\n        case 'z':\n            return sum + 122\n\
    \        default:\n            return sum\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpehuf82tp.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmpehuf82tp.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmpehuf82tp.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'B':\n             ^~~\n      \
    \       \"B\"\n/tmp/tmpehuf82tp.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'b':\n             ^~~\n             \"b\"\n/tmp/tmpehuf82tp.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'C':\n   \
    \          ^~~\n             \"C\"\n/tmp/tmpehuf82tp.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpehuf82tp.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'D':\n             ^~~\n             \"D\"\n/tmp/tmpehuf82tp.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'd':\n   \
    \          ^~~\n             \"d\"\n/tmp/tmpehuf82tp.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'E':\n             ^~~\n      \
    \       \"E\"\n/tmp/tmpehuf82tp.swift:39:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'e':\n             ^~~\n             \"e\"\n/tmp/tmpehuf82tp.swift:41:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'F':\n   \
    \          ^~~\n             \"F\"\n/tmp/tmpehuf82tp.swift:43:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpehuf82tp.swift:45:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'G':\n             ^~~\n             \"G\"\n/tmp/tmpehuf82tp.swift:47:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'g':\n   \
    \          ^~~\n             \"g\"\n/tmp/tmpehuf82tp.swift:49:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'H':\n             ^~~\n      \
    \       \"H\"\n/tmp/tmpehuf82tp.swift:51:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbyzea2b5.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpbyzea2b5.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.reduce(0) { $0 + Int($1)\
    \ }\n    return sum % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpf7dln9da.swift:19:34: error: no exact matches in call to initializer\
    \ \n    let sum = s.reduce(0) { $0 + Int($1) }\n                             \
    \    ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, ch) in\n\
    \        switch ch {\n        case \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\":\n            return sum + Int(ch)\n        default:\n\
    \            return sum\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp5zk7d6_c.swift:22:26: error: no exact matches in call to initializer\
    \ \n            return sum + Int(ch)\n                         ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659979987
