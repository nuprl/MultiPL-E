language: swift
name: HumanEval_60_sum_to_n
results:
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum_to_n_impl(&n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpnbhfmfx0.swift:14:12: error: cannot find 'sum_to_n_impl' in scope\n\
    \    return sum_to_n_impl(&n, n)\n           ^~~~~~~~~~~~~\n/tmp/tmpnbhfmfx0.swift:14:26:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return sum_to_n_impl(&n, n)\n                         ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_impl(&n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp41vqnetn.swift:14:10: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return sum_to_n_impl(&n, 1)\n         ^~~~~~~~~~~~~\n/tmp/tmp41vqnetn.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return sum_to_n_impl(&n, 1)\n                       ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpji62fpz_.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    \               ^~~~~~~~~~~~~~~~~~\n/tmp/tmpji62fpz_.swift:14:53: error: cannot\
    \ find 'arc4random_uniform' in scope\n    return Int(arc4random_uniform(UInt32(n)))\
    \ + Int(arc4random_uniform(UInt32(n)))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum_to_n_impl(&n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpnbhfmfx0.swift:14:12: error: cannot find 'sum_to_n_impl' in scope\n\
    \    return sum_to_n_impl(&n, n)\n           ^~~~~~~~~~~~~\n/tmp/tmpnbhfmfx0.swift:14:26:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return sum_to_n_impl(&n, n)\n                         ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum_to_n_impl(&n, 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpr9wmod3k.swift:14:12: error: cannot find 'sum_to_n_impl' in scope\n\
    \    return sum_to_n_impl(&n, 1)\n           ^~~~~~~~~~~~~\n/tmp/tmpr9wmod3k.swift:14:26:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return sum_to_n_impl(&n, 1)\n                         ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpji62fpz_.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    \               ^~~~~~~~~~~~~~~~~~\n/tmp/tmpji62fpz_.swift:14:53: error: cannot\
    \ find 'arc4random_uniform' in scope\n    return Int(arc4random_uniform(UInt32(n)))\
    \ + Int(arc4random_uniform(UInt32(n)))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_impl(&n, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpd7fjg9mh.swift:14:10: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return sum_to_n_impl(&n, n)\n         ^~~~~~~~~~~~~\n/tmp/tmpd7fjg9mh.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return sum_to_n_impl(&n, n)\n                       ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp6kakjh2y.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + 1\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum_to_n_impl(&n, 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpr9wmod3k.swift:14:12: error: cannot find 'sum_to_n_impl' in scope\n\
    \    return sum_to_n_impl(&n, 1)\n           ^~~~~~~~~~~~~\n/tmp/tmpr9wmod3k.swift:14:26:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return sum_to_n_impl(&n, 1)\n                         ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_impl(&n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp41vqnetn.swift:14:10: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return sum_to_n_impl(&n, 1)\n         ^~~~~~~~~~~~~\n/tmp/tmp41vqnetn.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return sum_to_n_impl(&n, 1)\n                       ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp6kakjh2y.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + 1\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int64(Int64(n) + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmub3jgwh.swift:14:12: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n    return Int64(Int64(n) + 1)\n        \
    \   ^~~~~~~~~~~~~~~~~~~\n           Int(               )\n"
  stdout: ''
  timestamp: 1659824779
