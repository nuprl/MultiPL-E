name: HumanEval_61_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
  \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n///\
  \ >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
  \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
  \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
  ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
  \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
  \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets:\
  \ \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\")\
  \ == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)"
completions: ["    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    for openingBracket in openingBrackets {\n     \
    \   if openingBracket == \"(\" {\n            openingBrackets.removeLast()\n \
    \           closingBrackets.append(\")\")\n        } else if openingBracket ==\
    \ \")\" {\n            openingBrackets.removeLast()\n            closingBrackets.append(\"\
    (\")\n        }\n    }\n\n    return openingBrackets.count == 0 && closingBrackets.count\
    \ == 0", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            return\
    \ false\n        }\n        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex\
    \ < closingBracketsCount {\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n            return false\n        }\n        closingBracketsIndex\
    \ += 1\n    }\n\n    return openingBracketsIndex == closingBracketsIndex", " \
    \   let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ !closingBrackets.contains(openingBracket) {\n            return false\n    \
    \    }\n    }\n    \n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n   \
    \ while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketIndex += 1\n        if\
    \ openingBracket == \"(\" {\n            openingBracketIndex += 1\n          \
    \  if openingBracketIndex < brackets.endIndex {\n                let closingBracket\
    \ = brackets[openingBracketIndex]\n                openingBracketIndex += 1\n\
    \                closingBracketIndex += 1\n                if closingBracket ==\
    \ \")\" {\n                    openingBracketIndex += 1\n                    if\
    \ openingBracketIndex < brackets.endIndex {\n                        let closingBracket\
    \ = brackets[openingBracketIndex]\n                        openingBracketIndex\
    \ += 1\n                        closingBracketIndex += 1\n                   \
    \     if closingBracket == \")\" {\n                            openingBracketIndex\
    \ += 1\n                            if openingBracketIndex < brackets.endIndex\
    \ {\n                                let closingBracket = brackets[openingBracketIndex]\n\
    \                                openingBracketIndex += 1\n                  \
    \              closingBracketIndex += 1\n                                if closingBracket\
    \ == \")\" {\n                                    openingBracketIndex += 1\n \
    \                                   if openingBracketIndex < brackets.endIndex\
    \ {\n                                        let closingBracket = brackets[openingBracketIndex]\n\
    \                                        openingBracketIndex += 1\n          \
    \                              closingBracketIndex += 1\n                    \
    \                    if closingBracket == \")\" {\n                          \
    \                  openingBracketIndex += 1\n                                \
    \            if openingBracketIndex < brackets.endIndex {\n                  \
    \                              let closingBracket = brackets[openingBracketIndex]\n\
    \                                                openingBracketIndex += 1\n  \
    \                                              closingBracketIndex += 1\n    \
    \                                            if closingBracket == \")\" {\n  \
    \                                                  openingBracketIndex += 1\n\
    \                                                    if openingBracketIndex <\
    \ brackets.endIndex {\n                                                      \
    \  let closingBracket = brackets[openingBracketIndex]\n                      \
    \                                  openingBracketIndex += 1\n                \
    \                                        closingBracketIndex += 1\n          \
    \                                              if closingBracket == \")\" {\n\
    \                                                            openingBracketIndex\
    \ += 1\n                                                            if openingBracketIndex\
    \ < brackets.endIndex {\n                                                    \
    \            let closingBracket = brackets[openingBracketIndex]\n            \
    \                                                    openingBracketIndex += 1\n\
    \                                                                closingBracketIndex\
    \ += 1\n                                                                if closingBracket\
    \ == \")\" {\n                                                               \
    \     openingBracket", "    var openingBrackets = brackets.characters\n    var\
    \ closingBrackets = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    while openingBracketsCount\
    \ > 0 && closingBracketsCount > 0 {\n        if openingBrackets[openingBracketsCount\
    \ - 1] == closingBrackets[0] {\n            openingBracketsCount -= 1\n      \
    \      closingBracketsCount -= 1\n        } else {\n            return false\n\
    \        }\n    }\n\n    return openingBracketsCount == 0", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeFirst()\n    for openingBracket in openingBrackets\
    \ {\n        if closingBrackets.contains(openingBracket) {\n            return\
    \ false\n        }\n    }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.first(where: { $0 == openingBracket })\n        if closingBracket\
    \ == nil {\n            return false\n        }\n    }\n    return true", "  \
    \  var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n\n    while openingBracketsCountIndex < openingBracketsCount\
    \ {\n        openingBracketsCountIndex += 1\n        if openingBracketsCountIndex\
    \ == openingBracketsCount {\n            openingBracketsCountIndex = 0\n     \
    \       openingBracketsCountMax += 1\n        }\n        if openingBrackets[openingBracketsCountIndex]\
    \ == '(' {\n            openingBracketsCountMax -= 1\n            if openingBracketsCountMax\
    \ == 0 {\n                openingBracketsCountMax = openingBracketsCount\n   \
    \             openingBracketsCount += 1\n            }\n        }\n    }\n   \
    \ while closingBracketsCountIndex < closingBracketsCount {\n        closingBracketsCountIndex\
    \ += 1\n        if closingBracketsCountIndex == closingBracketsCount {\n     \
    \       closingBracketsCountIndex = 0\n            closingBracketsCountMax +=\
    \ 1\n        }\n        if closingBrackets[closingBracketsCountIndex] == ')' {\n\
    \            closingBracketsCountMax -= 1\n            if closingBracketsCountMax\
    \ == 0 {\n                closingBracketsCountMax = closingBracketsCount\n   \
    \             closingBracketsCount += 1\n            }\n        }\n    }\n\n \
    \   if openingBracketsCountMax != closingBracketsCountMax {\n        return false\n\
    \    }\n\n    if openingBracketsCount != closingBracketsCount {\n        return\
    \ false\n    }\n\n    if openingBracketsCount > 0 && closingBracketsCount > 0\
    \ {\n        if openingBrackets[openingBracketsCount - 1] != closingBrackets[closingBracketsCount\
    \ - 1] {\n            return false\n        }\n    }\n\n    return true", "  \
    \  var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n    var bracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 || closingBracketsCount\
    \ > 0 || bracketsCount > 0 {\n        if openingBracketsCount == 0 {\n       \
    \     openingBrackets.removeLast()\n            openingBracketsCount--\n     \
    \   }\n        if closingBracketsCount == 0 {\n            closingBrackets.removeLast()\n\
    \            closingBracketsCount--\n        }\n        if bracketsCount == 0\
    \ {\n            brackets.removeLast()\n            bracketsCount--\n        }\n\
    \        if openingBracketsCount == 0 {\n            openingBrackets.removeLast()\n\
    \            openingBracketsCount--\n        }\n        if closingBracketsCount\
    \ == 0 {\n            closingBrackets.removeLast()\n            closingBracketsCount--\n\
    \        }\n        if bracketsCount == 0 {\n            brackets.removeLast()\n\
    \            bracketsCount--\n        }\n    }\n    return brackets.characters.count\
    \ == 0", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    \n   \
    \ if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsCountIndex = 0\n\
    \    var closingBracketsCountIndex = 0\n    var openingBracketsCountMax = openingBracketsCount\n\
    \    var closingBracketsCountMax = closingBracketsCount\n    var openingBracketsCountMaxIndex\
    \ = 0\n    var closingBracketsCountMaxIndex = 0\n    var openingBracketsCountMin\
    \ = openingBracketsCount\n    var closingBracketsCountMin = closingBracketsCount\n\
    \    var openingBracketsCountMinIndex = 0\n    var closingBracketsCountMinIndex\
    \ = 0\n    var openingBracketsCountMaxMin = openingBracketsCount\n    var closingBracketsCountMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMaxMinIndex = 0\n    var\
    \ closingBracketsCountMaxMinIndex = 0\n    var openingBracketsCountMinMax = openingBracketsCount\n\
    \    var closingBracketsCountMinMax = closingBracketsCount\n    var openingBracketsCountMinMaxIndex\
    \ = 0\n    var closingBracketsCountMinMaxIndex = 0\n    var openingBracketsCountMaxMinMax\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMax = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxIndex = 0\n    var closingBracketsCountMaxMinMaxIndex\
    \ = 0\n    var openingBracketsCountMinMaxMin = openingBracketsCount\n    var closingBracketsCountMinMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMinMaxMinIndex = 0\n   \
    \ var closingBracketsCountMinMaxMinIndex = 0\n    var openingBracketsCountMaxMinMaxMin\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMaxMin = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxMinIndex = 0\n    var closingBracketsCountMaxMinMaxMinIndex\
    \ = 0\n    var openingBracketsCountMinMaxMinMax = openingBracketsCount\n    var\
    \ closingBracketsCountMinMaxMinMax = closingBracketsCount\n    var openingBracket",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    for openingBracket in openingBrackets\
    \ {\n        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        } else {\n\
    \            return false\n        }\n    }\n    \n    return openingBrackets.count\
    \ == closingBrackets.count", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n\n    var openingBracketIndex\
    \ = 0\n    var closingBracketIndex = 0\n\n    while openingBracketIndex < openingBrackets.count\
    \ {\n        guard openingBrackets[openingBracketIndex] == '(' else {\n      \
    \      return false\n        }\n\n        openingBracketIndex += 1\n\n       \
    \ while closingBracketIndex < closingBrackets.count {\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                return false\n            }\n\n            closingBracketIndex\
    \ += 1\n        }\n\n        openingBracketIndex += 1\n    }\n\n    return true",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    while openingBracketIndex\
    \ < openingBracketCount {\n        if openingBrackets[openingBracketIndex] ==\
    \ \")\" {\n            closingBracketIndex--\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        openingBracketIndex++\n\
    \    }\n\n    while closingBracketIndex < closingBracketCount {\n        if closingBrackets[closingBracketIndex]\
    \ == \")\" {\n            openingBracketIndex++\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n        closingBracketIndex++\n\
    \    }\n\n    return openingBracketIndex == closingBracketIndex", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n\n   \
    \ var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n    while\
    \ openingBracketsIndex < openingBrackets.count {\n        if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n            openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketsIndex < closingBrackets.count {\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n            closingBracketsIndex += 1\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsIndex += 1\n            openingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsIndex == closingBracketsIndex", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketsCount =\
    \ brackets.characters.count\n    var closingBracketsCount = brackets.characters.count\n\
    \    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n    while\
    \ openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] == '(' {\n          \
    \  openingBracketsCount -= 1\n            if openingBracketsCount == 0 {\n   \
    \             openingBracketsIndex += 1\n            }\n        }\n    }\n   \
    \ while closingBracketsIndex < closingBracketsCount {\n        closingBracketsIndex\
    \ += 1\n        if closingBrackets[closingBracketsIndex] == ')' {\n          \
    \  closingBracketsCount -= 1\n            if closingBracketsCount == 0 {\n   \
    \             closingBracketsIndex += 1\n            }\n        }\n    }\n   \
    \ return openingBracketsIndex == closingBracketsIndex", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for openingBracket in openingBrackets {\n\
    \        if !closingBrackets.contains(where: { $0 == openingBracket }) {\n   \
    \         return false\n        }\n    }\n    \n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    )\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ guard closingBrackets[closingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n\n        closingBracketIndex += 1\n\n        if closingBracketIndex\
    \ == brackets.endIndex {\n            return true\n        }\n\n        guard\
    \ closingBrackets[closingBracketIndex] == \")\" else {\n            return false\n\
    \        }\n\n        closingBracketIndex += 1\n    }\n\n    return true", " \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \")\":\n            closingBracketCount++\n            openingBracketCount--\n\
    \            if openingBracketCount < 0 {\n                openingBracketIndex\
    \ = brackets.startIndex\n                openingBracketCount = 0\n           \
    \ }\n        case \")\":\n            openingBracketCount++\n            closingBracketCount--\n\
    \            if closingBracketCount < 0 {\n                closingBracketIndex\
    \ = brackets.startIndex\n                closingBracketCount = 0\n           \
    \ }\n        default:\n            openingBracketCount++\n            closingBracketCount++\n\
    \        }\n        openingBracketIndex++\n    }\n\n    return openingBracketCount\
    \ == closingBracketCount", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count == closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        guard let\
    \ closingBracket = closingBrackets.first {\n            return openingBracket\
    \ == closingBracket\n        }\n    }\n    return true"]
stop_tokens:
- "\n}"
