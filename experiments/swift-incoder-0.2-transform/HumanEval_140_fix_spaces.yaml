name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>>\
  \ fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text:\
  \ \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n\
  /// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if text.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"  \", withString:\
    \ \"-\", options: .LiteralSearch, range: nil) : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedString.substringToIndex(fixedString.rangeOfString(\"-\"\
    ))", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\\
    s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let fixed = text\n        .components(separatedBy:\
    \ \" \")\n        .joined(separator: \"_\")\n        .trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        .lowercased()\n    return fixed + (fixed.isEmpty ? \"_\" : \"\")", " \
    \   let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n \
    \   return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let fixed2 = regex.stringByReplacingMatchesInString(fixed,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, fixed.characters.count),\
    \ withTemplate: \"-\")\n    return fixed2", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let fixed = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    }\n\
    \    return fixed", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    let result = regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.count > 2 ? result.replacingOccurrences(of: \" \", with:\
    \ \"-\") : result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixedString.characters.count > 2 {\n        let\
    \ regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n        let fixedString = regex.stringByReplacingMatchesInString(fixedString,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, fixedString.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return fixedString", "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if text.hasPrefix(\" \") {\n        return result.dropFirst()\n\
    \    } else {\n        return result\n    }", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let result = regex.stringByReplacingMatchesInString(result, options: NSMatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n \
    \   }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    _\", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.remove(at: 0)\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: text.endIndex))\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: text.endIndex)))\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: text.endIndex)))\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: text.endIndex)))\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed.characters.count > 2 ? fixed : \"_\" + fixed", "    let\
    \ fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    let fixed2 =\
    \ fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return fixed2", "  \
    \  var result = text\n    for c in text.unicodeScalars {\n        if c == \" \"\
    \ {\n            result = result.replacingOccurrences(of: c, with: \"_\")\n  \
    \      }\n    }\n    if result.hasSuffix(\" \") {\n        result = result.dropLast()\n\
    \    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \   let fixed = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithTransparentBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.stringByReplacingOccurrencesOfString(\" \", withString: \"-\")", "   \
    \ let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed.hasPrefix(\"\
    \ \") {\n        return fixed.dropFirst()\n    }\n    return fixed", "    let\
    \ regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ NSRegularExpressionOptions.CaseInsensitive, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    let fixed2 = regex.stringByReplacingMatches(in: fixed, options:\
    \ [], range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n  \
    \  return fixed2", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    if fixed.count > 2 {\n        let range = (fixed.startIndex..<fixed.endIndex).reversed()\n\
    \        let fixed = fixed.replacingCharacters(in: range, with: \"-\")\n    }\n\
    \    return fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \   let result = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithTransparentBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if result.characters.count\
    \ > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \       let result = regex.stringByReplacingMatchesInString(result, options: NSMatchingOptions.WithTransparentBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    var result = text\n    \n    if text.hasPrefix(\" \"\
    ) {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + text.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + \"-\"\n    }\n    \n    return result", " \
    \   let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n\
    \    let fixed2 = regex.stringByReplacingMatches(in: fixed, options: [], range:\
    \ NSMakeRange(0, fixed.count), withTemplate: \"-\")\n    return fixed2", "   \
    \ let fixed = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    let fixed2\
    \ = fixed.replacingOccurrences(of: \" \", with: \"_\")\n    let fixed3 = fixed2.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    return fixed3", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return fixed.count>2 ? fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\") : fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \",\
    \ with: \"-\")\n    return fixed2", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    let fixed2 = fixed.stringByReplacingOccurrencesOfString(\"\\\\s+\",\
    \ withString: \"-\")\n    return fixed2", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.characters.count > 2 ? \"_\" + result\
    \ : result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    _\", withString: \" \")", "    let regex = try! NSRegularExpression(pattern: \"\
    \\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n    return\
    \ fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\") : fixed",
  "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    let fixed2\
    \ = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return fixed2", " \
    \   let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n \
    \   return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")", "   \
    \ let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n   \
    \ let fixed = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    return fixed.characters.count\
    \ == text.characters.count ? fixed : text", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let fixed = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    }\n\
    \    return fixed", "    var result = text\n    let spaces = text.countOfSpaces()\n\
    \    if spaces > 2 {\n        result = result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n        result = result.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\", options: NSStringCompareOptions.RegularExpressionSearch,\
    \ range: nil)\n    }\n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\\
    s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    -\", withString: \" \")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let fixed2 = fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")\n    return fixed2", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\") : fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    \n    if fixed.count > 2 {\n        let range = (fixed.startIndex..<fixed.endIndex)\n\
    \        let range2 = range.map { $0 == \" \" ? \"_\" : $0 }\n        return fixed.replacingCharacters(in:\
    \ range, with: range2)\n    } else {\n        return fixed\n    }", "    let fixed\
    \ = text.replacingOccurrences(of: \" \", with: \"_\")\n    let consecutive = fixed.components(separatedBy:\
    \ \" \")\n    .map { $0.count > 1 ? \"-\".addingPercentEncoding(withAllowedCharacters:\
    \ .urlFragmentAllowed) : \"_\" }\n    return consecutive.joinWithSeparator(\"\"\
    )", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n\
    \    let fixed = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ NSMakeRange(0, text.count), withTemplate: \"_\")\n    return fixed.count > 2\
    \ ? fixed.replacingOccurrences(of: \" \", with: \"-\") : fixed", "    var result\
    \ = text\n    \n    let spaces = text.countOfString(\" \")\n    if spaces > 2\
    \ {\n        result = result.replacingOccurrences(of: \" \", with: \"_\")\n  \
    \  }\n    \n    if spaces == 2 {\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    \n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixedString.substringToIndex(fixedString.rangeOfString(\"\
    -\")!.location)", "    var result = text\n    for c in text.unicodeScalars {\n\
    \        if let _ = c.isWhitespace() {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        }\n    }\n    if result.hasSuffix(\"_\") {\n  \
    \      result = result.suffix(1)\n    }\n    return result", "    let fixed =\
    \ text\n        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed : \"_\"\
    \ + fixed", "    var result = text\n    \n    if text.hasPrefix(\" \") {\n   \
    \     result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\" \") {\n\
    \        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.", " \
    \   let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed.count\
    \ > 2 {\n        let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\"\
    )\n        return fixed2\n    } else {\n        return fixed\n    }", "    let\
    \ regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.stringByReplacingOccurrencesOfString(\" \", withString: \"-\")", "   \
    \ let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    let fixed2\
    \ = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return fixed2", " \
    \   let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    var result = text\n    \n    // Replace all spaces\
    \ with underscores\n    result = result.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    \n    // If there are more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n    if result.hasPrefix(\" \") {\n        let firstSpaceIndex\
    \ = result.index(of: \" \")\n        let secondSpaceIndex = result.index(of: \"\
    \ \", after: firstSpaceIndex)\n        \n        if secondSpaceIndex == firstSpaceIndex\
    \ {\n            result = result.dropFirst()\n        } else {\n            result\
    \ = result.prefix(firstSpaceIndex).appending(\"-\").appending(result.suffix(secondSpaceIndex))\n\
    \        }\n    }\n    \n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n        let fixed = regex.stringByReplacingMatchesInString(fixed,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, fixed.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return fixed", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n\
    \    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\"\
    ) : fixed", "    let fixed = text\n        .replacingOccurrences(of: \" \", with:\
    \ \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"\")\n    return fixed", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed : text",
  "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    let fixed2\
    \ = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return fixed2", " \
    \   var result = text\n    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options:\
    \ .CaseInsensitive, range: NSMakeRange(0, text.characters.count))\n    for match\
    \ in matches {\n        let start = match.rangeAtIndex(0)\n        let end = match.rangeAtIndex(1).location\n\
    \        let replacement = String(text[start..<end])\n        result = result.stringByReplacingCharactersInRange(start,\
    \ withString: replacement)\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \   let fixed = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithTransparentBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed", "    var result = text\n    \n    if text.hasPrefix(\" \") {\n     \
    \   result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\" \") {\n\
    \        result = result + text.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result + \"-\"\n    }\n    \n    return result", " \
    \   let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.substringToIndex(fixed.rangeOfString(\"-\")!.startIndex)", "    var result\
    \ = text\n    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    let matches = regex.matches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count))\n    for match in matches {\n        let start = match.rangeAt(0)\n\
    \        let end = match.rangeAt(1)\n        let replacement = String(text[start..<end])\n\
    \        result = result.replacingOccurrences(of: replacement, with: \"_\")\n\
    \    }\n    if result.count > 2 {\n        result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let fixed = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    }\n\
    \    return fixed", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n\
    \    return fixed2", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    return fixed.countElements(of: \" \") < 2 ? fixed : fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let fixed2 = fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")\n    return fixed2", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let fixed2 = regex.stringByReplacingMatchesInString(fixed,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, fixed.characters.count),\
    \ withTemplate: \"-\")\n    return fixed2", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \",\
    \ with: \"-\")\n    return fixed2", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"\
    \  \", withString: \"-\") : fixed", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\") : fixed", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    var result = text\n    \n    // Replace all spaces\
    \ with underscores\n    result = result.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    \n    // If there are more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n    if result.hasPrefix(\" \") {\n        let firstSpaceIndex\
    \ = result.index(of: \" \")!\n        let secondSpaceIndex = result.index(of:\
    \ \" \", after: firstSpaceIndex)\n        \n        if secondSpaceIndex != nil\
    \ {\n            result = result.replacingOccurrences(of: \" \", with: \"-\")\n\
    \        }\n    }\n    \n    return result", "    let fixed = text.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\", options: .LiteralSearch, range: nil)\n    let fixed2\
    \ = fixed.stringByReplacingOccurrencesOfString(\"  \", withString: \"-\", options:\
    \ .LiteralSearch, range: nil)\n    return fixed2", "    let fixed = text\n   \
    \     .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"\")\n\
    \    return fixed", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n\
    \    return fixed2", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let fixed = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    }\n\
    \    return fixed", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n   \
    \ return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\")\
    \ : fixed", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\"\
    )\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return\
    \ fixed2", "    var result = text\n    \n    if result.hasPrefix(\" \") {\n  \
    \      result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\" \"\
    ) {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.dropFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.dropLast()\n    }\n    \n    if result.", " \
    \   let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    guard fixed.count\
    \ > 2 else {\n        return fixed\n    }\n    return fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? \"_\" + fixed\
    \ : fixed", "    var result = text\n    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let matches = regex.matches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count))\n    for match in matches\
    \ {\n        let range = Range(match.range, in: text)\n        let replacement\
    \ = String(repeating: \" \", count: range.length)\n        result = result.replacingCharacters(in:\
    \ range, with: replacement)\n    }\n    if result.hasPrefix(\" \") {\n       \
    \ result = String(result.dropFirst())\n    }\n    if result.hasSuffix(\" \") {\n\
    \        result = String(result.dropLast())\n    }\n    return result", "    let\
    \ fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    guard fixed.count\
    \ > 2 else {\n        return fixed\n    }\n    return fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\")", "    let fixed = text.replacingOccurrences(of: \" \",\
    \ with: \"_\")\n    return fixed.count > 2 ? fixed.replacingOccurrences(of: \"\
    \ \", with: \"-\") : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \   let result = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithTransparentBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ result.stringByReplacingOccurrencesOfString(\"\\\\s+\", withString: \"-\")",
  "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    let fixed2\
    \ = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return fixed2", " \
    \   let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if result.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let result = regex.stringByReplacingMatchesInString(result, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n   \
    \ let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return\
    \ fixed2", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n\
    \    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    if fixed.hasSuffix(\"\
    \ \") && fixed2.hasPrefix(\" \") {\n        return fixed2\n    } else {\n    \
    \    return fixed\n    }", "    let fixed = text.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    guard fixed.count > 2 else {\n        return fixed\n    }\n\
    \    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return\
    \ fixed2", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    let result = regex.stringByReplacingMatches(in: text, options: [],\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if text.hasPrefix(\"\
    \ \") {\n        return text.replacingOccurrences(of: \" \", with: \"_\", options:\
    \ .literal, range: nil)\n    } else {\n        return result\n    }", "    let\
    \ regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    let\
    \ result = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    if text.hasPrefix(\" \") {\n\
    \        return text.replacingOccurrences(of: \" \", with: \"_\")\n    } else\
    \ {\n        return result\n    }", "    let fixed = text\n        .stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n        .stringByReplacingOccurrencesOfString(\" \"\
    , withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"\
    -\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n\
    \        .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n   \
    \     .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n      \
    \  .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n        .stringByReplacingOccurrencesOfString(\" \"\
    , withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"\
    -\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n\
    \        .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n   \
    \     .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n      \
    \  .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n        .stringByReplacingOccurrencesOfString(\" \"\
    , withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"\
    -\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n\
    \        .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n   \
    \     .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n      \
    \  .stringByReplacingOccurrencesOfString(\" \", withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"_\")\n        .stringByReplacingOccurrencesOfString(\" \"\
    , withString: \"-\")\n        .stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"_\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"\
    -\")\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\")\n\
    \        .stringByReplacingOccurrencesOfString(\" \", withString", "    let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    return regex.stringByReplacingMatches(in: text, options: [], range:\
    \ NSMakeRange(0, text.count), withTemplate: \"_\")", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\") : fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \",\
    \ with: \"-\")\n    return fixed2", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with", "    var result = text\n    \n    let spaces = text.unicodeScalars.filter\
    \ { $0.value == 0x20 }\n    if spaces.count > 2 {\n        let spaces_count =\
    \ spaces.count\n        let spaces_indexes = (0..<spaces_count).map { $0 }\n \
    \       let spaces_indexes_to_remove = spaces_indexes\n            .enumerated()\n\
    \            .filter { $0.element != spaces_count - 1 }\n            .map { $0.element\
    \ }\n        result = result.replacingOccurrences(of: \" \", with: \"_\", options:\
    \ .literal, range: nil)\n        result = result.replacingOccurrences(of: String(repeating:\
    \ \"-\", count: spaces_indexes_to_remove.count), with: \"\", options: .literal,\
    \ range: nil)\n    }\n    \n    return result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  let fixed = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.count), withTemplate: \"_\")\n    if fixed.count > 2 {\n        let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n        let fixed\
    \ = regex.stringByReplacingMatches(in: fixed, options: [], range: NSMakeRange(0,\
    \ fixed.count), withTemplate: \"-\")\n    }\n    return fixed", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive,\
    \ error: nil)\n    let result = regex.stringByReplacingMatchesInString(text, options:\
    \ NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if text.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \       let result = regex.stringByReplacingMatchesInString(result, options: NSMatchingOptions.allZeros,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let regex = NSRegularExpression(pattern: \"\\\\s{2,}\"\
    , options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(result,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if fixed.count > 2 {\n        let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n        let fixed = regex.stringByReplacingMatches(in:\
    \ fixed, options: [], range: NSMakeRange(0, fixed.count), withTemplate: \"-\"\
    )\n    }\n    return fixed", "    let fixed = text.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\")\n    return fixed2", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result + text.removeLast()\n    }\n    \n    if text.hasPrefix(\"\
    \ \") {\n        let firstSpaceIndex = text.index(text.startIndex, offsetBy: 1)\n\
    \        let secondSpaceIndex = text.index(text.startIndex, offsetBy: 2)\n   \
    \     \n        if firstSpaceIndex == secondSpaceIndex {\n            result =\
    \ result + \"-\"\n        } else {\n            result = result + \"_\"\n    \
    \    }\n    }\n    \n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.characters.count > 2 ? result.replacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\") : result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return fixed.countElements() > 2 ? fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\") : fixed", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    -\", withString: \" \")", "    let regex = try! NSRegularExpression(pattern: \"\
    \\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\") : fixed", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n\
    \    return fixed2", "    var result = text\n    let spaces = text.countOfString(\"\
    \ \")\n    if spaces > 1 {\n        let ranges = text.rangeOfString(\" \")\n \
    \       for range in ranges {\n            let start = range.startIndex\n    \
    \        let end = range.endIndex\n            let sub = text[start..<end]\n \
    \           let replacement = sub.stringByReplacingOccurrencesOfString(\" \",\
    \ withString: \"_\")\n            result = result.replacingCharacters(in: range,\
    \ with: replacement)\n        }\n    }\n    return result", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if fixed.count > 2 {\n        let fixed2 = fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        return fixed2\n    } else {\n        return fixed\n\
    \    }", "    var result = \"\"\n    for c in text {\n        if c == \" \" {\n\
    \            result += \"_\"\n        } else {\n            result += String(c)\n\
    \        }\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if result.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed : text",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  let result = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    return result.count > 2 ?\
    \ result.replacingOccurrences(of: \" \", with: \"-\") : result", "    let regex\
    \ = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options: nil,\
    \ error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text, options:\
    \ NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    return fixed", "    let fixed = text.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\")\n    return fixed2", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.stringByReplacingOccurrencesOfString(\"\\\\s+\", withString:\
    \ \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let result = regex.stringByReplacingMatchesInString(result, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    return regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")", " \
    \   let fixed = text\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \" \", with: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with", "    let\
    \ regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.substringToIndex(result.rangeOfString(\"-\"))", "    let\
    \ fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed.count\
    \ > 2 {\n        let range = (fixed.startIndex..<fixed.endIndex).reversed()\n\
    \        let fixed = fixed.replacingCharacters(in: range, with: \"-\")\n    }\n\
    \    return fixed", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n   \
    \ let fixed2 = regex.stringByReplacingMatches(in: fixed, options: [], range: NSMakeRange(0,\
    \ fixed.characters.count), withTemplate: \"-\")\n    return fixed2", "    let\
    \ regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.stringByReplacingOccurrencesOfString(\"  \", withString: \"-\")", "  \
    \  var result = text\n    for c in text.unicodeScalars {\n        if c == \" \"\
    \ {\n            let start = text.index(text.startIndex, offsetBy: 0)\n      \
    \      let end = text.index(start, offsetBy: 1)\n            let range = start..<end\n\
    \            let replacement = String(unicodeScalars: \" \", count: range.length)\n\
    \            result = result.replacingOccurrences(of: range, with: replacement)\n\
    \        }\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed : text",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\")", "    let fixed = text.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let fixed2 = fixed.components(separatedBy: \" \")\n    .joined(separator:\
    \ \"\")\n    .trimmingCharacters(in: .whitespacesAndNewlines)\n    .components(separatedBy:\
    \ \" \")\n    .joined(separator: \"-\")\n    return fixed2", "    let regex =\
    \ NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    let\
    \ result = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if text.characters.count\
    \ > 2 {\n        let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if text.hasPrefix(\" \") {\n        return text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixed.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"-\")", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ [])\n    let fixed = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ NSMakeRange(0, text.count), withTemplate: \"_\")\n    if fixed.count > 2 {\n\
    \        let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n\
    \        let fixed = regex.stringByReplacingMatches(in: fixed, options: [], range:\
    \ NSMakeRange(0, fixed.count), withTemplate: \"-\")\n    }\n    return fixed",
  "    let fixed = text.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let fixed = fixed.components(separatedBy: \" \")\n    return fixed.count\
    \ == 1 ? fixed[0] : fixed.joined(separator: \"_\")", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let consecutive = fixed.components(separatedBy: \"\
    \ \")\n    .dropLast()\n    .joined(separator: \"-\")\n    if consecutive.count\
    \ > 2 {\n        return consecutive\n    } else {\n        return fixed\n    }",
  "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let result = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if result.characters.count\
    \ > 2 {\n        let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let fixed = text.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    guard fixed.count > 2 else {\n        return fixed\n \
    \   }\n    return fixed.replacingOccurrences(of: \" \", with: \"-\")", "    var\
    \ result = text\n    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: [])\n    let matches = regex.matches(in: text, options: [], range:\
    \ NSRange(location: 0, length: text.count))\n    for match in matches {\n    \
    \    let range = match.range\n        let start = text.index(text.startIndex,\
    \ offsetBy: range.location)\n        let end = text.index(text.startIndex, offsetBy:\
    \ range.length)\n        let replacement = String(text[start..<end])\n       \
    \ result = result.replacingOccurrences(of: replacement, with: \"_\")\n    }\n\
    \    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.stringByReplacingOccurrencesOfString(\"\\\\s+\", withString:\
    \ \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"\
    \  \", withString: \"-\", options: .LiteralSearch, range: nil) : fixed", "   \
    \ let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    if fixed.hasSuffix(\"\
    _\") {\n        return fixed\n    }\n    return fixed + \"-\"", "    let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    let\
    \ fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    let\
    \ fixed2 = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    return\
    \ fixed2", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let fixed = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    }\n\
    \    return fixed", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    if fixed.count > 2 {\n        let range = (fixed.startIndex..<fixed.endIndex)\n\
    \        let range2 = range.map { $0 == \" \" ? $0 : \"-\" }\n        return String(fixed[range2])\n\
    \    } else {\n        return fixed\n    }", "    let fixed = text\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")\n        .replacingOccurrences(of: \" \", with: \"-\")\n\
    \        .replacingOccurrences(of: \" \", with: \"\")\n    return fixed", "  \
    \  let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ NSRegularExpressionOptions.CaseInsensitive, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithTransparentBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    -\", withString: \" \")", "    let fixed = text.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    let fixed2 = fixed.components(separatedBy: \" \")\n    .map\
    \ { $0.count > 2 ? \"-\".addingPercentEncoding(withAllowedCharacters: .urlFragmentAllowed)\
    \ : \"_\".addingPercentEncoding(withAllowedCharacters: .urlFragmentAllowed) }\n\
    \    .joined(separator: \"\")\n    return fixed2", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\") : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    -\", withString: \" \")", "    let fixed = text.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if fixed.characters.count\
    \ > 2 {\n        let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n        let fixed = regex.stringByReplacingMatchesInString(fixed,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, fixed.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return fixed", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let result = regex.stringByReplacingMatchesInString(result, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    return regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")", " \
    \   let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"  \", withString:\
    \ \"-\", options: .LiteralSearch, range: nil) : fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n   \
    \ return fixed.characters.count > 2 ? \"_\" + fixed : fixed", "    let regex =\
    \ NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    let\
    \ result = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if text.characters.count\
    \ > 2 {\n        let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, result.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \   let result = regex.stringByReplacingMatchesInString(text, options: NSMatchingOptions.WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    if result.characters.count\
    \ > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: NSRegularExpressionOptions.CaseInsensitive, error: nil)\n \
    \       let result = regex.stringByReplacingMatchesInString(result, options: NSMatchingOptions.WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    let regex = NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let fixed2 = regex.stringByReplacingMatchesInString(fixed,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, fixed.characters.count),\
    \ withTemplate: \"-\")\n    return fixed2", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return fixed.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n  \
    \  let fixed = regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")\n    let fixed2 = regex.stringByReplacingMatches(in:\
    \ fixed, options: [], range: NSMakeRange(0, fixed.characters.count), withTemplate:\
    \ \"-\")\n    return fixed2", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let fixed = text.replacingOccurrences(of: \"\
    \ \", with: \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with:\
    \ \"-\")\n    return fixed2", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n\
    \    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\"\
    ) : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed : text",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if fixed.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let fixed = regex.stringByReplacingMatchesInString(fixed,\
    \ options: nil, range: NSMakeRange(0, fixed.characters.count), withTemplate: \"\
    -\")\n    }\n    return fixed", "    let fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if fixed.count > 2 {\n        return fixed.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n    }\n    return fixed", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"\
    \\\\s+\", withString: \"-\") : fixed", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n  \
    \  let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n    return\
    \ fixed2", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options:\
    \ .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let result = regex.stringByReplacingMatchesInString(result, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n    }\n\
    \    return result", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in: text, options:\
    \ [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n    let fixed2\
    \ = regex.stringByReplacingMatches(in: fixed, options: [], range: NSMakeRange(0,\
    \ fixed.count), withTemplate: \"-\")\n    return fixed2", "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    let fixed = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.count), withTemplate: \"_\")\n\
    \    return fixed.count > 2 ? fixed.replacingOccurrences(of: \" \", with: \"-\"\
    ) : fixed", "    var result = text\n    \n    // Replace all spaces with underscores\n\
    \    result = result.replacingOccurrences(of: \" \", with: \"_\")\n    \n    //\
    \ If there are more than 2 consecutive spaces, replace all consecutive spaces\
    \ with -\n    if result.hasPrefix(\" \") {\n        let firstSpace = result.index(of:\
    \ \" \")!\n        let lastSpace = result.index(of: \" \", offsetBy: 1)!\n   \
    \     if lastSpace == firstSpace {\n            result = result.replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        }\n    }\n    \n    return result", "    let fixed\
    \ = text\n        .replacingOccurrences(of: \" \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"-\")\n        .replacingOccurrences(of: \" \", with: \"\")\n\
    \    return fixed", "    let fixed = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let fixed2 = fixed.replacingOccurrences(of: \" \", with: \"-\")\n\
    \    return fixed2", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedString.substringToIndex(fixedString.rangeOfString(\"-\"\
    ))"]
stop_tokens:
- "\n}"
