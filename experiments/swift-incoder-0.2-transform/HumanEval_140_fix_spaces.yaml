name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>>\
  \ fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text:\
  \ \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n\
  /// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if text.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")", "    let regex = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n\
    \    let fixed = regex.stringByReplacingMatchesInString(text, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, text.characters.count), withTemplate: \"_\")\n    return\
    \ fixed.characters.count > 2 ? fixed.replacingOccurrencesOfString(\"  \", withString:\
    \ \"-\", options: .LiteralSearch, range: nil) : fixed", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return fixedString.substringToIndex(fixedString.rangeOfString(\"-\"\
    ))", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\\
    s+\", options: nil, error: nil)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \  \", withString: \"-\")", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.removeFirst()\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = text.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.removeLast()\n    }\n    \n    if result.hasSuffix(\"\
    \ \") {\n        result = result.removeFirst()\n    }\n    \n    if result.",
  "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result", "    let fixed = text\n        .components(separatedBy:\
    \ \" \")\n        .joined(separator: \"_\")\n        .trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        .lowercased()\n    return fixed + (fixed.isEmpty ? \"_\" : \"\")", " \
    \   let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n \
    \   return regex.stringByReplacingMatches(in: text, options: [], range: NSMakeRange(0,\
    \ text.characters.count), withTemplate: \"_\")", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    let fixed2 = regex.stringByReplacingMatchesInString(fixed,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, fixed.characters.count),\
    \ withTemplate: \"-\")\n    return fixed2", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixed.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let fixed = regex.stringByReplacingMatchesInString(fixed, options: .WithoutAnchoringBounds,\
    \ range: NSMakeRange(0, fixed.characters.count), withTemplate: \"-\")\n    }\n\
    \    return fixed", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    s+\", options: [])\n    let result = regex.stringByReplacingMatches(in: text,\
    \ options: [], range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    return result.count > 2 ? result.replacingOccurrences(of: \" \", with:\
    \ \"-\") : result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let fixedString = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if fixedString.characters.count > 2 {\n        let\
    \ regex = NSRegularExpression.regularExpressionWithPattern(\"\\\\s+\", options:\
    \ nil, error: nil)\n        let fixedString = regex.stringByReplacingMatchesInString(fixedString,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, fixedString.characters.count),\
    \ withTemplate: \"-\")\n    }\n    return fixedString", "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"_\")\n    if text.hasPrefix(\" \") {\n        return result.dropFirst()\n\
    \    } else {\n        return result\n    }", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions(rawValue: 0), range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    if text.characters.count > 2 {\n        let regex\
    \ = NSRegularExpression(pattern: \"\\\\s+\", options: .CaseInsensitive)\n    \
    \    let result = regex.stringByReplacingMatchesInString(result, options: NSMatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, result.characters.count), withTemplate: \"-\")\n \
    \   }\n    return result", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: NSMatchingOptions.allZeros, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return result.stringByReplacingOccurrencesOfString(\"\
    _\", withString: \"-\")", "    let regex = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .CaseInsensitive)\n    let fixed = regex.stringByReplacingMatchesInString(text,\
    \ options: .WithoutAnchoringBounds, range: NSMakeRange(0, text.characters.count),\
    \ withTemplate: \"_\")\n    return fixed.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"-\")", "    var result = text\n    \n    if text.hasPrefix(\"\
    \ \") {\n        result = text.remove(at: 0)\n    }\n    \n    if text.hasSuffix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: text.endIndex))\n\
    \    }\n    \n    if result.hasSuffix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: text.endIndex)))\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: text.endIndex)))\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(at: result.index(before: result.index(before: text.endIndex)))\n\
    \    }\n    \n    if result.hasPrefix(\" \") {\n        result = result.remove(at:\
    \ result.index(before: result.index(before: text.endIndex)))\n    }\n    \n  \
    \  if result.hasPrefix(\" \") {\n        result = result.remove(at: result.index(before:\
    \ result.index(before: text.endIndex)))\n    }\n    \n    if result.hasPrefix(\"\
    \ \") {\n        result = result.remove(at: result.index(before: result.index(before:\
    \ text.endIndex)))\n    }\n    \n    if result.hasPrefix(\" \") {\n        result\
    \ = result.remove(", "    let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n    let result = regex.stringByReplacingMatchesInString(text,\
    \ options: nil, range: NSMakeRange(0, text.characters.count), withTemplate: \"\
    _\")\n    if result.characters.count > 2 {\n        let regex = NSRegularExpression.regularExpressionWithPattern(\"\
    \\\\s+\", options: nil, error: nil)\n        let result = regex.stringByReplacingMatchesInString(result,\
    \ options: nil, range: NSMakeRange(0, result.characters.count), withTemplate:\
    \ \"-\")\n    }\n    return result"]
stop_tokens:
- "\n}"
