name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\
  \ capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n///\
  \ >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n\
  /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <=\
  \ grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\n\
  func max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    var result = 0\n    for _ in 0..<capacity {\n        result +=\
    \ max_fill_helper(grid, 0)\n    }\n    return result", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    var max = 0\n    var cur = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col == 0 {\n              \
    \  cur += 1\n            } else {\n                if cur > max {\n          \
    \          max = cur\n                }\n                cur = 0\n           \
    \ }\n        }\n    }\n    if cur > max {\n        max = cur\n    }\n    return\
    \ max", "    \n    var result = 0\n    \n    for row in grid {\n        var max\
    \ = 0\n        for col in row {\n            if col > max {\n                max\
    \ = col\n            }\n        }\n        \n        if max > capacity {\n   \
    \         result += capacity - max\n        }\n    }\n    \n    return result",
  "    var max = 0\n    var maxCount = 0\n    for row in grid {\n        var count\
    \ = 0\n        for val in row {\n            if val == 1 {\n                count\
    \ += 1\n            }\n        }\n        if count > max {\n            max =\
    \ count\n            maxCount = 1\n        } else {\n            if count == max\
    \ {\n                maxCount += 1\n            }\n        }\n    }\n    return\
    \ maxCount", "    var result = 0\n    var minCapacity = capacity\n    for row\
    \ in grid {\n        var minBucket = capacity\n        for bucket in row {\n \
    \           if bucket > minBucket {\n                minBucket = bucket\n    \
    \        }\n        }\n        result += minBucket - minCapacity\n        minCapacity\
    \ = minBucket\n    }\n    return result", "    \n    var count = 0\n    var max\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n                if count > max {\n        \
    \            max = count\n                }\n            }\n        }\n    }\n\
    \    return max", "    var count = 0\n    var max = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 0 {\n                count +=\
    \ 1\n                if count > max {\n                    max = count\n     \
    \           }\n            }\n        }\n    }\n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n  \
    \  \n    for row in grid {\n        for col in row {\n            if col > 0 {\n\
    \                max += col\n                if max > capacity {\n           \
    \         max = capacity\n                    maxIndex = col.index\n         \
    \       }\n            }\n        }\n    }\n    \n    return maxIndex", "    if\
    \ grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n    var index\
    \ = 0\n    var buckets = make([][]int, capacity)\n    for row in grid {\n    \
    \    for col in row {\n            if col == 1 {\n                buckets[index%capacity]\
    \ = append(buckets[index%capacity], 0)\n            }\n            buckets[index%capacity][index%capacity]\
    \ = col\n            index++\n        }\n    }\n    for bucket in buckets {\n\
    \        max = max(max, bucket.count)\n    }\n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n  \
    \  var maxRow = 0\n    var maxCol = 0\n    \n    for row in grid {\n        for\
    \ col in row {\n            if col == 0 {\n                maxCount = 0\n    \
    \            maxRow = row\n                maxCol = col\n            } else {\n\
    \                maxCount = maxCount + 1\n                if maxCount > max {\n\
    \                    max = maxCount\n                    maxRow = row\n      \
    \              maxCol = col\n                }\n            }\n        }\n   \
    \ }\n    \n    for row in grid {\n        for col in row {\n            if col\
    \ == 0 {\n                grid[row][col] = maxRow\n                grid[maxRow][col]\
    \ = maxCol\n            }\n        }\n    }\n    \n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    var max = 0\n    var maxCount = 0\n    for row\
    \ in grid {\n        if row[0] == 0 {\n            continue\n        }\n     \
    \   var count = 0\n        for j in 0..<row[0] {\n            if row[j] == 1 {\n\
    \                count += 1\n            }\n        }\n        if count > max\
    \ {\n            max = count\n            maxCount = 1\n        } else {\n   \
    \         maxCount *= count\n        }\n    }\n    return maxCount * capacity",
  "    guard grid.count > 0 else { return 0 }\n    \n    var max = 0\n    \n    for\
    \ row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n        \
    \    if grid[row][col] == 1 {\n                max += capacity\n            }\n\
    \        }\n    }\n    \n    return max", "    guard grid.count > 0 else { return\
    \ 0 }\n    \n    var max = 0\n    var maxCount = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 0\n                \n                if\
    \ capacity > 0 {\n                    capacity -= 1\n                }\n     \
    \           \n                if capacity == 0 {\n                    max += 1\n\
    \                    maxCount += 1\n                }\n            }\n       \
    \ }\n    }\n    \n    return maxCount", "    \n    // write your code here\n \
    \   \n    return 0", "    var result = 0\n    var max = 0\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == ", "    var result = 0\n    for _ in 0..<capacity {\n\
    \        for _ in 0..<grid.count {\n            if grid[_][0] == 0 {\n       \
    \         grid[_][0] = grid[_][1]\n                grid[_][1] = 0\n          \
    \      grid[_][2] = 0\n                grid[_][3] = 0\n                grid[_][4]\
    \ = 0\n                grid[_][5] = 0\n                grid[_][6] = 0\n      \
    \          grid[_][7] = 0\n                grid[_][8] = 0\n                grid[_][9]\
    \ = 0\n                grid[_][10] = 0\n                grid[_][11] = 0\n    \
    \            grid[_][12] = 0\n                grid[_][13] = 0\n              \
    \  grid[_][14] = 0\n                grid[_][15] = 0\n                grid[_][16]\
    \ = 0\n                grid[_][17] = 0\n                grid[_][18] = 0\n    \
    \            grid[_][19] = 0\n                grid[_][20] = 0\n              \
    \  grid[_][21] = 0\n                grid[_][22] = 0\n                grid[_][23]\
    \ = 0\n                grid[_][24] = 0\n                grid[_][25] = 0\n    \
    \            grid[_][26] = 0\n                grid[_][27] = 0\n              \
    \  grid[_][28] = 0\n                grid[_][29] = 0\n                grid[_][30]\
    \ = 0\n                grid[_][31] = 0\n                grid[_][32] = 0\n    \
    \            grid[_][33] = 0\n                grid[_][34] = 0\n              \
    \  grid[_][35] = 0\n                grid[_][36] = 0\n                grid[_][37]\
    \ = 0\n                grid[_][38] = 0\n                grid[_][39] = 0\n    \
    \            grid[_][40] = 0\n                grid[_][41] = 0\n              \
    \  grid[_][42] = 0\n                grid[_][43] = 0\n                grid[_][44]\
    \ = 0\n                grid[_][45] = 0\n                grid[_][46] = 0\n    \
    \            grid[_][47] = 0\n                grid[_][48] = 0\n              \
    \  grid[_][49] = 0\n                grid[_][50] = 0\n                grid[_][51]\
    \ = 0\n                grid[_][52] = 0\n                grid[_][53] = 0\n    \
    \            grid[_][54] = 0\n                grid[_][55] = 0\n              \
    \  grid[_][56] = 0\n                grid[_][57] = 0\n                grid[_][58]\
    \ = 0\n                grid[_][59] = 0\n                grid[_][60] = 0\n    \
    \            grid[_][61] = 0\n                grid[_][62] = 0\n              \
    \  grid[_][63] = 0\n                grid[_][64] = 0\n                grid[_][65]\
    \ = 0\n                grid[_][66] = 0\n                grid[_][67", "    var\
    \ result = 0\n    for row in grid {\n        for bucket in row {\n           \
    \ if bucket > capacity {\n                result += capacity - bucket\n      \
    \      } else {\n                result += bucket\n            }\n        }\n\
    \    }\n    return result", "    \n    // write your code here\n    \n    return\
    \ 0", "    var max = 0\n    for row in grid {\n        for bucket in row {\n \
    \           if bucket > max {\n                max = bucket\n            }\n \
    \       }\n    }\n    return max", "    \n    // write your code here\n    \n\
    \    return 0"]
stop_tokens:
- "\n}"
