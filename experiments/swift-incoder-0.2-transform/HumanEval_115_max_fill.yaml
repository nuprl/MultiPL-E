name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\
  \ capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n///\
  \ >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n\
  /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <=\
  \ grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\n\
  func max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    var result = 0\n    for _ in 0..<capacity {\n        result +=\
    \ max_fill_helper(grid, 0)\n    }\n    return result", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    var max = 0\n    var cur = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col == 0 {\n              \
    \  cur += 1\n            } else {\n                if cur > max {\n          \
    \          max = cur\n                }\n                cur = 0\n           \
    \ }\n        }\n    }\n    if cur > max {\n        max = cur\n    }\n    return\
    \ max", "    \n    var result = 0\n    \n    for row in grid {\n        var max\
    \ = 0\n        for col in row {\n            if col > max {\n                max\
    \ = col\n            }\n        }\n        \n        if max > capacity {\n   \
    \         result += capacity - max\n        }\n    }\n    \n    return result",
  "    var max = 0\n    var maxCount = 0\n    for row in grid {\n        var count\
    \ = 0\n        for val in row {\n            if val == 1 {\n                count\
    \ += 1\n            }\n        }\n        if count > max {\n            max =\
    \ count\n            maxCount = 1\n        } else {\n            if count == max\
    \ {\n                maxCount += 1\n            }\n        }\n    }\n    return\
    \ maxCount", "    var result = 0\n    var minCapacity = capacity\n    for row\
    \ in grid {\n        var minBucket = capacity\n        for bucket in row {\n \
    \           if bucket > minBucket {\n                minBucket = bucket\n    \
    \        }\n        }\n        result += minBucket - minCapacity\n        minCapacity\
    \ = minBucket\n    }\n    return result", "    \n    var count = 0\n    var max\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n                if count > max {\n        \
    \            max = count\n                }\n            }\n        }\n    }\n\
    \    return max", "    var count = 0\n    var max = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 0 {\n                count +=\
    \ 1\n                if count > max {\n                    max = count\n     \
    \           }\n            }\n        }\n    }\n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n  \
    \  \n    for row in grid {\n        for col in row {\n            if col > 0 {\n\
    \                max += col\n                if max > capacity {\n           \
    \         max = capacity\n                    maxIndex = col.index\n         \
    \       }\n            }\n        }\n    }\n    \n    return maxIndex", "    if\
    \ grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n    var index\
    \ = 0\n    var buckets = make([][]int, capacity)\n    for row in grid {\n    \
    \    for col in row {\n            if col == 1 {\n                buckets[index%capacity]\
    \ = append(buckets[index%capacity], 0)\n            }\n            buckets[index%capacity][index%capacity]\
    \ = col\n            index++\n        }\n    }\n    for bucket in buckets {\n\
    \        max = max(max, bucket.count)\n    }\n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n  \
    \  var maxRow = 0\n    var maxCol = 0\n    \n    for row in grid {\n        for\
    \ col in row {\n            if col == 0 {\n                maxCount = 0\n    \
    \            maxRow = row\n                maxCol = col\n            } else {\n\
    \                maxCount = maxCount + 1\n                if maxCount > max {\n\
    \                    max = maxCount\n                    maxRow = row\n      \
    \              maxCol = col\n                }\n            }\n        }\n   \
    \ }\n    \n    for row in grid {\n        for col in row {\n            if col\
    \ == 0 {\n                grid[row][col] = maxRow\n                grid[maxRow][col]\
    \ = maxCol\n            }\n        }\n    }\n    \n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    var max = 0\n    var maxCount = 0\n    for row\
    \ in grid {\n        if row[0] == 0 {\n            continue\n        }\n     \
    \   var count = 0\n        for j in 0..<row[0] {\n            if row[j] == 1 {\n\
    \                count += 1\n            }\n        }\n        if count > max\
    \ {\n            max = count\n            maxCount = 1\n        } else {\n   \
    \         maxCount *= count\n        }\n    }\n    return maxCount * capacity",
  "    guard grid.count > 0 else { return 0 }\n    \n    var max = 0\n    \n    for\
    \ row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n        \
    \    if grid[row][col] == 1 {\n                max += capacity\n            }\n\
    \        }\n    }\n    \n    return max", "    guard grid.count > 0 else { return\
    \ 0 }\n    \n    var max = 0\n    var maxCount = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 0\n                \n                if\
    \ capacity > 0 {\n                    capacity -= 1\n                }\n     \
    \           \n                if capacity == 0 {\n                    max += 1\n\
    \                    maxCount += 1\n                }\n            }\n       \
    \ }\n    }\n    \n    return maxCount", "    \n    // write your code here\n \
    \   \n    return 0", "    var result = 0\n    var max = 0\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            max = row[0]\n        }\n        if\
    \ row[0] == 1 {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == ", "    var result = 0\n    for _ in 0..<capacity {\n\
    \        for _ in 0..<grid.count {\n            if grid[_][0] == 0 {\n       \
    \         grid[_][0] = grid[_][1]\n                grid[_][1] = 0\n          \
    \      grid[_][2] = 0\n                grid[_][3] = 0\n                grid[_][4]\
    \ = 0\n                grid[_][5] = 0\n                grid[_][6] = 0\n      \
    \          grid[_][7] = 0\n                grid[_][8] = 0\n                grid[_][9]\
    \ = 0\n                grid[_][10] = 0\n                grid[_][11] = 0\n    \
    \            grid[_][12] = 0\n                grid[_][13] = 0\n              \
    \  grid[_][14] = 0\n                grid[_][15] = 0\n                grid[_][16]\
    \ = 0\n                grid[_][17] = 0\n                grid[_][18] = 0\n    \
    \            grid[_][19] = 0\n                grid[_][20] = 0\n              \
    \  grid[_][21] = 0\n                grid[_][22] = 0\n                grid[_][23]\
    \ = 0\n                grid[_][24] = 0\n                grid[_][25] = 0\n    \
    \            grid[_][26] = 0\n                grid[_][27] = 0\n              \
    \  grid[_][28] = 0\n                grid[_][29] = 0\n                grid[_][30]\
    \ = 0\n                grid[_][31] = 0\n                grid[_][32] = 0\n    \
    \            grid[_][33] = 0\n                grid[_][34] = 0\n              \
    \  grid[_][35] = 0\n                grid[_][36] = 0\n                grid[_][37]\
    \ = 0\n                grid[_][38] = 0\n                grid[_][39] = 0\n    \
    \            grid[_][40] = 0\n                grid[_][41] = 0\n              \
    \  grid[_][42] = 0\n                grid[_][43] = 0\n                grid[_][44]\
    \ = 0\n                grid[_][45] = 0\n                grid[_][46] = 0\n    \
    \            grid[_][47] = 0\n                grid[_][48] = 0\n              \
    \  grid[_][49] = 0\n                grid[_][50] = 0\n                grid[_][51]\
    \ = 0\n                grid[_][52] = 0\n                grid[_][53] = 0\n    \
    \            grid[_][54] = 0\n                grid[_][55] = 0\n              \
    \  grid[_][56] = 0\n                grid[_][57] = 0\n                grid[_][58]\
    \ = 0\n                grid[_][59] = 0\n                grid[_][60] = 0\n    \
    \            grid[_][61] = 0\n                grid[_][62] = 0\n              \
    \  grid[_][63] = 0\n                grid[_][64] = 0\n                grid[_][65]\
    \ = 0\n                grid[_][66] = 0\n                grid[_][67", "    var\
    \ result = 0\n    for row in grid {\n        for bucket in row {\n           \
    \ if bucket > capacity {\n                result += capacity - bucket\n      \
    \      } else {\n                result += bucket\n            }\n        }\n\
    \    }\n    return result", "    \n    // write your code here\n    \n    return\
    \ 0", "    var max = 0\n    for row in grid {\n        for bucket in row {\n \
    \           if bucket > max {\n                max = bucket\n            }\n \
    \       }\n    }\n    return max", "    \n    // write your code here\n    \n\
    \    return 0", "    var max = 0\n    for row in grid {\n        for col in row\
    \ {\n            if col > max {\n                max = col\n            }\n  \
    \      }\n    }\n    for row in grid {\n        for col in row {\n           \
    \ if col > max {\n                max = col\n            }\n        }\n    }\n\
    \    return max", "    var result = 0\n    var buckets = [Int](capacity)\n   \
    \ for row in grid {\n        for bucket in row {\n            buckets[bucket]\
    \ += 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n\
    \            result += bucket\n        }\n    }\n    return result", "    var\
    \ result = 0\n    var minCapacity = capacity\n    for row in grid {\n        var\
    \ minBucket = capacity\n        for bucket in row {\n            if bucket > minBucket\
    \ {\n                minBucket = bucket\n            }\n        }\n        result\
    \ += minBucket - capacity\n        minCapacity -= minBucket\n    }\n    return\
    \ result", "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max\
    \ = 0\n    var maxCount = 0\n    \n    for row in grid {\n        var count =\
    \ 0\n        for val in row {\n            if val == 1 {\n                count\
    \ += 1\n            }\n        }\n        if count > max {\n            max =\
    \ count\n            maxCount = 1\n        }\n        if count == max {\n    \
    \        maxCount += 1\n        }\n    }\n    \n    return maxCount", "    \n\
    \    // write your code here\n    \n    return 0", "    \n    // write your code\
    \ here\n    \n    return 0", "    \n    // Write your code here.\n    \n    return\
    \ 0", "    var count = 0\n    var max = 0\n    for row in grid {\n        for\
    \ col in row {\n            if col == 0 {\n                count += 1\n      \
    \          if count > max {\n                    max = count\n               \
    \ }\n            }\n        }\n    }\n    return max", "    if capacity <= 0 {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var buckets = [Int](capacity)\n\
    \    \n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                buckets[col] = buckets[col] + 1\n            }\n      \
    \  }\n    }\n    \n    for bucket in buckets {\n        if bucket > max {\n  \
    \          max = bucket\n        }\n    }\n    \n    return max", "    \n    var\
    \ max = 0\n    var count = 0\n    \n    for row in grid {\n        for col in\
    \ row {\n            if col == 0 {\n                count += capacity\n      \
    \      } else {\n                count -= 1\n            }\n            if count\
    \ > max {\n                max = count\n            }\n        }\n    }\n    return\
    \ max", "    if grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n\
    \    var maxIndex = 0\n    var index = 0\n    \n    for row in grid {\n      \
    \  if row[0] == 0 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 1 {\n            max = row[0]\n   \
    \         maxIndex = index\n        }\n        \n        if row[0] == 2 {\n  \
    \          max = row[0]\n            maxIndex = index\n        }\n        \n \
    \       if row[0] == 3 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 4 {\n            max = row[0]\n   \
    \         maxIndex = index\n        }\n        \n        if row[0] == 5 {\n  \
    \          max = row[0]\n            maxIndex = index\n        }\n        \n \
    \       if row[0] == 6 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 7 {\n            max = row[0]\n   \
    \         maxIndex = index\n        }\n        \n        if row[0] == 8 {\n  \
    \          max = row[0]\n            maxIndex = index\n        }\n        \n \
    \       if row[0] == 9 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 10 {\n            max = row[0]\n  \
    \          maxIndex = index\n        }\n        \n        if row[0] == 11 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        \n\
    \        if row[0] == 12 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 13 {\n            max = row[0]\n  \
    \          maxIndex = index\n        }\n        \n        if row[0] == 14 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        \n\
    \        if row[0] == 15 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 16 {\n            max = row[0]\n  \
    \          maxIndex = index\n        }\n        \n        if row[0] == 17 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        \n\
    \        if row[0] == 18 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 19 {\n            max = row[0]\n  \
    \          maxIndex = index\n        }\n        \n        if row[0] == 20 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        \n\
    \        if row[0] == 21 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 22 {\n            max = row[0]\n  \
    \          maxIndex = index\n        }\n        \n        if row[0] == 23 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        \n\
    \        if row[0] == 24 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        \n        if row[0] == 25 {\n            max = row[0]", " \
    \   if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ maxCount = 0\n    \n    for row in grid {\n        if row[0] == 0 {\n      \
    \      continue\n        }\n        \n        var count = 0\n        for col in\
    \ row {\n            if col == 0 {\n                count += 1\n            }\n\
    \        }\n        \n        if count > max {\n            max = count\n    \
    \        maxCount = 1\n        } else if count == max {\n            maxCount\
    \ += 1\n        }\n    }\n    \n    return maxCount", "    \n    // write your\
    \ code here\n    \n    return 0", "    \n    // write your code here\n    \n \
    \   return 0", "    \n    // write your code here\n    \n    return 0", "    \n\
    \    // write your code here\n    \n    return 0", "    if capacity <= 0 {\n \
    \       return 0\n    }\n    if grid[0][0] == 0 {\n        return 0\n    }\n \
    \   if grid[0][0] == 1 {\n        return grid[0].length\n    }\n    var max =\
    \ 0\n    var min = 0\n    for row in 0..<grid.length {\n        for col in 0..<grid[row].length\
    \ {\n            if grid[row][col] == 1 {\n                max += capacity\n \
    \           } else {\n                min += capacity\n            }\n       \
    \ }\n    }\n    return max - min", "    var count = 0\n    var minCapacity = capacity\n\
    \    for row in grid {\n        for col in row {\n            if col == 1 {\n\
    \                minCapacity = minCapacity - col\n            }\n        }\n \
    \   }\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count = count + 1\n            }\n        }\n    }\n  \
    \  return count", "    \n    let n = grid.count\n    \n    var max = 0\n    \n\
    \    for _ in 0..<n {\n        let bucket = buckets[capacity]\n        \n    \
    \    for _ in 0..<n {\n            if bucket[grid[Int(i)]] == 1 {\n          \
    \      bucket[grid[Int(i)]] = 0\n                max += 1\n            }\n   \
    \     }\n    }\n    \n    return max", "    \n    // write your code here\n  \
    \  \n    return 0", "    \n    // write your code here\n    var max = 0\n    var\
    \ i = 0\n    var j = 0\n    var count = 0\n    for i < grid.length {\n       \
    \ for j = 0 ; j < grid[i].length ; j++ {\n            if grid[i][j] == 1 {\n \
    \               count += 1\n            }\n        }\n    }\n    \n    if count\
    \ > capacity {\n        max = count\n    } else {\n        max = capacity\n  \
    \  }\n    \n    for i = 0 ; i <= grid.length ; i++ {\n        for j = 0 ; j <=\
    \ grid[i].length ; j++ {\n            if grid[i][j] == 1 {\n                grid[i][j]\
    \ = 0\n                count -= 1\n                if count <= 0 {\n         \
    \           grid[i][j] = 1\n                    count += capacity\n          \
    \      }\n            }\n        }\n    }\n    return max", "    var result =\
    \ 0\n    for row in grid {\n        for bucket in row {\n            if bucket\
    \ > capacity {\n                result += capacity - bucket\n            } else\
    \ {\n                result += bucket\n            }\n        }\n    }\n    return\
    \ result", "    var max = 0\n    var count = 0\n    for row in grid {\n      \
    \  if row[0] == 0 {\n            count += row[1]\n        } else {\n         \
    \   count += capacity - row[1]\n        }\n        if count > max {\n        \
    \    max = count\n        }\n        count = 0\n    }\n    return max", "    if\
    \ grid.isEmpty {\n        return 0\n    }\n    var max = 0\n    var maxIndex =\
    \ 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 1 {\n                max += 1\n                if max\
    \ > capacity {\n                    max = capacity\n                    maxIndex\
    \ = i\n                }\n            }\n        }\n    }\n    return maxIndex",
  "    var result = 0\n    for row in grid {\n        for well in row {\n        \
    \    if well > capacity {\n                result += 1\n                capacity\
    \ = well\n            }\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var minBucket = capacity\n    for row in grid {\n        for bucket\
    \ in row {\n            if bucket < minBucket {\n                minBucket = bucket\n\
    \            }\n        }\n    }\n    for row in grid {\n        for bucket in\
    \ row {\n            if bucket == minBucket {\n                result += 1\n \
    \           }\n        }\n    }\n    return result", "    guard grid.count ==\
    \ 1 else {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount =\
    \ 0\n    \n    for row in grid {\n        if row[0] > max {\n            max =\
    \ row[0]\n            maxCount = 1\n        }\n        \n        if row[0] > max\
    \ && row[1] > max {\n            max = row[0]\n            maxCount = 1\n    \
    \    }\n        \n        if row[0] > max && row[1] > max && row[2] > max {\n\
    \            max = row[0]\n            maxCount = 1\n        }\n        \n   \
    \     if row[0] > max && row[1] > max && row[2] > max && row[3] > max {\n    \
    \        max = row[0]\n            maxCount = 1\n        }\n        \n       \
    \ if row[0] > max && row[1] > max && row[2] > max && row[3] > max && row[4] >\
    \ max {\n            max = row[0]\n            maxCount = 1\n        }\n     \
    \   \n        if row[0] > max && row[1] > max && row[2] > max && row[3] > max\
    \ && row[4] > max && row[5] > max {\n            max = row[0]\n            maxCount\
    \ = 1\n        }\n        \n        if row[0] > max && row[1] > max && row[2]\
    \ > max && row[3] > max && row[4] > max && row[5] > max && row[6] > max {\n  \
    \          max = row[0]\n            maxCount = 1\n        }\n        \n     \
    \   if row[0] > max && row[1] > max && row[2] > max && row[3] > max && row[4]\
    \ > max && row[5] > max && row[6] > max && row[7] > max {\n            max = row[0]\n\
    \            maxCount = 1\n        }\n        \n        if row[0] > max && row[1]\
    \ > max && row[2] > max && row[3] > max && row[4] > max && row[5] > max && row[6]\
    \ > max && row[7] > max && row[8] > max {\n            max = row[0]\n        \
    \    maxCount = 1\n        }\n        \n        if row[0] > max && row[1] > max\
    \ && row[2] > max && row[3] > max && row[4] > max && row[5] > max && row[6] >\
    \ max && row[7] > max && row[8] > max && row[9] > max {\n            max = row[0]\n\
    \            maxCount = 1\n        }\n        \n        if row[0] > max && row[1]\
    \ > max && row[2] > max && row[3] > max && row[4] > max && row[5] > max && row[6]\
    \ > max && row[7] > max && row[8] > max && row[9] > max && row[10] > max {\n",
  "    var count = 0\n    for row in grid {\n        for col in row {\n          \
    \  if col == 0 {\n                count += min_fill(grid: grid, row: row, col:\
    \ col, capacity: capacity)\n            }\n        }\n    }\n    return count",
  "    \n    // write your code here\n    \n    return 0", "    var max = 0\n    for\
    \ row in grid {\n        for col in row {\n            if col > max {\n      \
    \          max = col\n            }\n        }\n    }\n    return max", "    \n\
    \    // write your code here\n    \n    return 0", "    guard capacity > 0 else\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n  \
    \  \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n\
    \            if grid[row][col] == 1 {\n                max += capacity\n     \
    \           maxCount += 1\n            }\n        }\n    }\n    \n    return maxCount\
    \ > max ? maxCount : max", "    \n    // write your code here\n    var max = 0\n\
    \    var count = 0\n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                grid[row][col] = 0\n\
    \                count += capacity - grid[row][col]\n                if count\
    \ > max {\n                    max = count\n                }\n              \
    \  grid[row][col] = 1\n            }\n        }\n    }\n    return max", "   \
    \ var max = 0\n    for row in grid {\n        for bucket in row {\n          \
    \  if bucket > max {\n                max = bucket\n            }\n        }\n\
    \    }\n    return max", "    var count = 0\n    var max = 0\n    for row in grid\
    \ {\n        for col in row {\n            if col == 0 {\n                count\
    \ += 1\n                if count > max {\n                    max = count\n  \
    \              }\n            }\n        }\n    }\n    return max", "    if capacity\
    \ == 0 {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n\
    \    var buckets = make([][]int, capacity)\n    \n    for row in grid {\n    \
    \    for bucket in bucket {\n            if bucket > 0 {\n                buckets[bucket]++\n\
    \            }\n        }\n    }\n    \n    for bucket in buckets {\n        if\
    \ bucket > max {\n            max = bucket\n            maxCount = 1\n       \
    \ } else if bucket == max {\n            maxCount++\n        }\n    }\n    \n\
    \    return maxCount", "    if capacity == 0 {\n        return 0\n    }\n    \n\
    \    var max = 0\n    var buckets = make([][]int, capacity)\n    for row in grid\
    \ {\n        for bucket in bucket {\n            if bucket > 0 {\n           \
    \     buckets[bucket-1][row - 1]++\n            }\n        }\n    }\n    for bucket\
    \ in buckets {\n        if bucket > max {\n            max = bucket\n        }\n\
    \    }\n    return max", "    if grid.isEmpty() {\n        return 0\n    }\n \
    \   \n    var max = 0\n    var maxIndex = 0\n    \n    for row in grid {\n   \
    \     for col in row {\n            if col > 0 {\n                max += col\n\
    \                maxIndex += 1\n            }\n        }\n    }\n    \n    if\
    \ maxIndex == 0 {\n        return 0\n    }\n    \n    if maxIndex == 1 {\n   \
    \     return max\n    }\n    \n    var buckets = [Int](capacity)\n    \n    for\
    \ row in grid {\n        for col in row {\n            if col > 0 {\n        \
    \        buckets[col-1] += 1\n            }\n        }\n    }\n    \n    for bucket\
    \ in buckets {\n        if bucket > max {\n            max = bucket\n        \
    \    maxIndex = buckets.indexOf(bucket)\n        }\n    }\n    \n    return maxIndex",
  "    \n    var max = 0\n    var count = 0\n    \n    for row in grid {\n       \
    \ for col in row {\n            if col == 0 {\n                count += 1\n  \
    \          } else {\n                count = 0\n            }\n            \n\
    \            if count > max {\n                max = count\n            }\n  \
    \      }\n    }\n    \n    return max", "    var result = 0\n    var minCapacity\
    \ = capacity\n    for _ in 0..<grid.count {\n        var minBucket = capacity\n\
    \        for _ in 0..<grid[0].count {\n            if grid[0][_] == 1 {\n    \
    \            minBucket = minBucket - 1\n            } else {\n               \
    \ minBucket = minBucket + 1\n            }\n        }\n        if minBucket <\
    \ minCapacity {\n            minCapacity = minBucket\n        }\n    }\n    for\
    \ _ in 0..<grid.count {\n        for _ in 0..<grid[0].count {\n            if\
    \ grid[0][_] == 1 {\n                grid[0][_] = 0\n            } else {\n  \
    \              grid[0][_] = 1\n            }\n        }\n    }\n    for _ in 0..<grid.count\
    \ {\n        for _ in 0..<grid[0].count {\n            if grid[0][_] == 1 {\n\
    \                grid[0][_] = 0\n            } else {\n                grid[0][_]\
    \ = 1\n            }\n        }\n    }\n    for _ in 0..<grid.count {\n      \
    \  for _ in 0..<grid[0].count {\n            if grid[0][_] == 1 {\n          \
    \      grid[0][_] = 0\n            } else {\n                grid[0][_] = 1\n\
    \            }\n        }\n    }\n    for _ in 0..<grid.count {\n        for _\
    \ in 0..<grid[0].count {\n            if grid[0][_] == 1 {\n                grid[0][_]\
    \ = 0\n            } else {\n                grid[0][_] = 1\n            }\n \
    \       }\n    }\n    for _ in 0..<grid.count {\n        for _ in 0..<grid[0].count\
    \ {\n            if grid[0][_] == 1 {\n                grid[0][_] = 0\n      \
    \      } else {\n                grid[0][_] = 1\n            }\n        }\n  \
    \  }\n    for _ in 0..<grid.count {\n        for _ in 0..<grid[0].count {\n  \
    \          if grid[0][_] == 1 {\n                grid[0][_] = 0\n            }\
    \ else {\n                grid[0][_] = 1\n            }\n        }\n    }\n  \
    \  for _ in 0..<grid.count {\n        for _ in 0..<grid[0].count {\n         \
    \   if grid[0][_] == 1 {\n                grid[0][_] = 0\n            } else {\n\
    \                grid[0][_] = 1\n            }\n        }\n    }\n    for _ in\
    \ 0..<grid.count {\n        for _ in 0..<grid[0].count {\n            if grid[0][_]\
    \ == 1 {\n                grid[0][_] = 0\n            } else {\n             \
    \   grid[0][_] = 1\n            }\n        }\n    }\n    for _ in 0..<grid.count\
    \ {\n        for _ in 0..<grid[0].count {\n            if grid[0][_] == 1 {\n\
    \                grid[0][_] = 0\n            } else {\n                grid[0][_]\
    \ = 1\n            }\n        }\n    }\n    for _ in 0..<grid.count {\n      \
    \  for _ in ", "    \n    // write your code here\n    \n    return 0", "    if\
    \ grid.count == 0 {\n        return 0\n    }\n    \n    var max = 0\n    var index\
    \ = 0\n    var buckets = [Int](capacity)\n    \n    for row in grid {\n      \
    \  for col in row {\n            if col == 0 {\n                buckets[index]\
    \ += 1\n            }\n        }\n    }\n    \n    for bucket in buckets {\n \
    \       if bucket > max {\n            max = bucket\n            index = buckets.indexOf(bucket)\n\
    \        }\n    }\n    \n    return index", "    if grid.count == 0 {\n      \
    \  return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n    for\
    \ row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n        \
    \    if grid[row][col] == 1 {\n                max += 1\n                if max\
    \ > capacity {\n                    maxIndex = row\n                    break\n\
    \                }\n            }\n        }\n    }\n    \n    return maxIndex",
  "    var result = 0\n    var buckets = [Int](capacity)\n    for row in grid {\n\
    \        for bucket in row {\n            buckets[bucket] = buckets[bucket] +\
    \ 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n\
    \            result = max(result, bucket)\n        }\n    }\n    return result",
  "    \n    // write your code here\n    \n    return 0", "    \n    var count =\
    \ 0\n    \n    for row in grid {\n        for col in row {\n            if col\
    \ == 0 {\n                count += capacity\n            } else {\n          \
    \      count -= 1\n            }\n        }\n    }\n    \n    return count", " \
    \   \n    // write your code here\n    \n    return 0", "    \n    // write your\
    \ code here\n    \n    return 0", "    var result = 0\n    for row in grid {\n\
    \        for well in row {\n            if well > 0 {\n                result\
    \ += capacity - well\n            }\n        }\n    }\n    return result", " \
    \   if capacity <= 0 {\n        return 0\n    }\n    \n    var result = 0\n  \
    \  var current = 0\n    var currentCapacity = capacity\n    \n    for row in grid\
    \ {\n        for col in row {\n            if col == 0 {\n                currentCapacity\
    \ -= 1\n                current++\n            }\n            if current > currentCapacity\
    \ {\n                current = 0\n                currentCapacity = capacity\n\
    \            }\n        }\n        result += current\n        current = 0\n  \
    \  }\n    \n    return result", "    guard capacity > 0 else {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n    for row in\
    \ 0..<grid.count {\n        for col in 0..<grid[row].count {\n            if grid[row][col]\
    \ == 1 {\n                max += capacity\n                maxIndex = row * grid[row].count\
    \ + col\n            }\n        }\n    }\n    \n    return max - maxIndex", " \
    \   if grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ maxIndex = 0\n    \n    for row in grid {\n        if row[0] == 0 {\n      \
    \      continue\n        }\n        \n        for col in row {\n            if\
    \ col == 0 {\n                continue\n            }\n            \n        \
    \    if col > max {\n                max = col\n                maxIndex = col\n\
    \            }\n        }\n    }\n    \n    if maxIndex == capacity {\n      \
    \  return maxIndex\n    }\n    \n    return maxIndex + 1", "    var count = 0\n\
    \    for row in grid {\n        for col in row {\n            if col == 0 {\n\
    \                count += capacity\n            }\n        }\n    }\n    return\
    \ count", "    guard grid.count == 1 else {\n        return 0\n    }\n    \n \
    \   var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid[0].length {\n\
    \        for j in 0..<grid.count {\n            if grid[j][i] == 1 {\n       \
    \         max += 1\n                if max > capacity {\n                    maxIndex\
    \ = j\n                    break\n                }\n            }\n        }\n\
    \    }\n    \n    return maxIndex", "    var result = 0\n    for row in grid {\n\
    \        var max = 0\n        for bucket in row {\n            if bucket > max\
    \ {\n                max = bucket\n            }\n        }\n        result +=\
    \ max - capacity\n    }\n    return result", "    var max = 0\n    var count =\
    \ 0\n    for row in grid {\n        for col in row {\n            if col == 0\
    \ {\n                count += 1\n            } else {\n                count =\
    \ 0\n            }\n            if count > max {\n                max = count\n\
    \            }\n        }\n    }\n    return max", "    guard grid.count == 1\
    \ else {\n        return 0\n    }\n    \n    var max = 0\n    \n    for row in\
    \ 0..<grid.count {\n        for col in 0..<grid[row].count {\n            if grid[row][col]\
    \ == 0 {\n                grid[row][col] = capacity\n                \n      \
    \          if capacity > max {\n                    max = capacity\n         \
    \       }\n                \n                for _ in 0..<capacity {\n       \
    \             grid[row][col] = 0\n                }\n            }\n        }\n\
    \    }\n    \n    return max", "    \n    // write your code here\n    \n    return\
    \ 0", "    var result = 0\n    for row in grid {\n        var max = 0\n      \
    \  for _ in row {\n            max += capacity\n        }\n        max -= capacity\n\
    \        if max > 0 {\n            result += max\n        }\n    }\n    return\
    \ result", "    if grid.isEmpty() {\n        return 0\n    }\n    var max = 0\n\
    \    var min = 0\n    var minRow = grid[0]\n    var minCol = grid[0]\n    var\
    \ minVal = grid[0]\n    for row in grid {\n        for col in row {\n        \
    \    if col > 0 {\n                max = max(max, col - minVal)\n            \
    \    min = min(min, col - minVal)\n            }\n        }\n    }\n    for row\
    \ in grid {\n        for col in row {\n            if col > 0 {\n            \
    \    minVal = minVal * capacity / max\n                minRow = minRow * capacity\
    \ / max\n                minCol = minCol * capacity / max\n            }\n   \
    \     }\n    }\n    return max - min", "    \n    // Your code here\n    var max\
    \ = 0\n    var count = 0\n    for row in grid {\n        for col in row {\n  \
    \          if col == 0 {\n                count += 1\n            }\n        \
    \    if count > max {\n                max = count\n            }\n          \
    \  count = 0\n        }\n    }\n    return max", "    if grid.isEmpty() {\n  \
    \      return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n  \
    \  for row in grid {\n        for col in row {\n            if col > 0 {\n   \
    \             max += col\n                maxIndex += 1\n            }\n     \
    \   }\n    }\n    \n    if capacity == 1 {\n        return maxIndex\n    }\n \
    \   \n    if capacity == max {\n        return maxIndex\n    }\n    \n    if capacity\
    \ > max {\n        return maxIndex\n    }\n    \n    return maxIndex + max_fill(grid:\
    \ grid[..<maxIndex], capacity: capacity - max)", "    var count = 0\n    for row\
    \ in grid {\n        var max = 0\n        for _ in row {\n            max += capacity\n\
    \        }\n        for _ in row {\n            max -= capacity\n        }\n \
    \       if max > 0 {\n            count += max - capacity\n        }\n    }\n\
    \    return count", "    \n    // write your code here\n    \n    return 0", " \
    \   \n    // write your code here\n    \n    return 0", "    if grid.count ==\
    \ 0 {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n\
    \    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                max += capacity\n \
    \               maxCount += 1\n            }\n        }\n    }\n    \n    return\
    \ maxCount > max ? maxCount : max", "    var count = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 0 {\n                count +=\
    \ min_fill(grid: grid, row: row, col: col, capacity: capacity)\n            }\n\
    \        }\n    }\n    return count", "    if grid.count == 0 {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n    for row in\
    \ 0..<grid.count {\n        for col in 0..<grid[row].count {\n            if grid[row][col]\
    \ == 1 {\n                max += 1\n                if max > capacity {\n    \
    \                max = capacity\n                    maxIndex = row\n        \
    \        }\n            }\n        }\n    }\n    \n    return maxIndex", "   \
    \ var result = 0\n    for row in grid {\n        for bucket in row {\n       \
    \     if bucket > capacity {\n                result += capacity - bucket\n  \
    \          } else {\n                result += bucket\n            }\n       \
    \ }\n    }\n    return result", "    var count = 0\n    for row in grid {\n  \
    \      var max = 0\n        for _ in row {\n            max += capacity\n    \
    \    }\n        for _ in row {\n            max -= capacity\n        }\n     \
    \   if max > 0 {\n            count += max - capacity\n        }\n    }\n    return\
    \ count", "    \n    var count = 0\n    \n    for row in grid {\n        var max\
    \ = 0\n        for _ in row {\n            max = max(max, buckets[row])\n    \
    \    }\n        \n        if max > capacity {\n            count += capacity -\
    \ max\n        }\n    }\n    \n    return count", "    var count = 0\n    for\
    \ row in grid {\n        for col in row {\n            if col == 0 {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count", "  \
    \  \n    // write your code here\n    \n    return 0", "    \n    // write your\
    \ code here\n    \n    return 0", "    var count = 0\n    for row in grid {\n\
    \        var max = 0\n        for col in row {\n            if col > max {\n \
    \               max = col\n            }\n        }\n        if max > capacity\
    \ {\n            count = 0\n        } else {\n            count += 1\n       \
    \ }\n    }\n    return count", "    var result = 0\n    for row in grid {\n  \
    \      var max = 0\n        for _ in row {\n            max += capacity\n    \
    \    }\n        if max > capacity {\n            max -= capacity\n        }\n\
    \        result += max\n    }\n    return result", "    \n    // write your code\
    \ here\n    \n    return 0", "    var result = 0\n    for row in grid {\n    \
    \    for col in row {\n            if col == 0 {\n                result += capacity\
    \ - grid[row][col]\n            }\n        }\n    }\n    return result", "   \
    \ \n    // write your code here\n    \n    return 0", "    \n    // write your\
    \ code here\n    \n    return 0", "    if grid.isEmpty() {\n        return 0\n\
    \    }\n    \n    var result = 0\n    \n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += 1\n        }\n    }\n    \n    for row in grid\
    \ {\n        if row[0] == 1 {\n            result -= capacity\n        }\n   \
    \ }\n    \n    return result", "    if grid.isEmpty() {\n        return 0\n  \
    \  }\n    \n    var max = 0\n    var buckets = make([][]int, capacity)\n    for\
    \ row in grid {\n        for bucket in row {\n            buckets[bucket] = buckets[bucket]\
    \ + 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > max\
    \ {\n            max = bucket\n        }\n    }\n    return max", "    \n    var\
    \ result = 0\n    \n    for row in grid {\n        var buckets = make([]int, capacity)\n\
    \        for bucket in bucket {\n            buckets[bucket] = 1\n        }\n\
    \        \n        for bucket in buckets {\n            if bucket > 0 {\n    \
    \            buckets[bucket] = 0\n            }\n        }\n        \n       \
    \ for bucket in buckets {\n            result += bucket\n        }\n    }\n  \
    \  \n    return result", "    \n    // write your code here\n    \n    return\
    \ 0", "    var max = 0\n    var count = 0\n    for row in grid {\n        for\
    \ col in row {\n            if col == 0 {\n                count += 1\n      \
    \      } else {\n                count -= 1\n            }\n            if count\
    \ > max {\n                max = count\n            }\n        }\n    }\n    return\
    \ max", "    var result = 0\n    for _ in 0..<capacity {\n        result += 1\n\
    \        for j in 0..<grid[0].length {\n            if grid[0][j] == 1 {\n   \
    \             for i in 0..<grid.length {\n                    if grid[i][j] ==\
    \ 1 {\n                        grid[i][j] = 0\n                        result\
    \ = max(result, max_fill(grid, capacity - 1))\n                        grid[i][j]\
    \ = 1\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return result", "    \n    var result = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                result += capacity\n            }\n        }\n    }\n \
    \   \n    return result", "    guard capacity > 0 else {\n        return 0\n \
    \   }\n    \n    var max = 0\n    var maxCount = 0\n    \n    for row in grid\
    \ {\n        if row[0] == 0 {\n            continue\n        }\n        \n   \
    \     var count = 0\n        for col in row {\n            if col == 0 {\n   \
    \             count += 1\n            }\n        }\n        \n        if count\
    \ > max {\n            max = count\n            maxCount = 1\n        } else {\n\
    \            maxCount += 1\n        }\n    }\n    \n    return maxCount", "  \
    \  guard grid.count == 1 else {\n        return -1\n    }\n    \n    var max =\
    \ 0\n    var maxIndex = 0\n    var index = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                grid[row][col] = 0\n                \n                if\
    \ capacity > 0 {\n                    capacity -= 1\n                }\n     \
    \           \n                if capacity == 0 {\n                    maxIndex\
    \ += 1\n                    \n                    if maxIndex > max {\n      \
    \                  max = maxIndex\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    return max", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var count = 0\n    \n\
    \    for row in grid {\n        for col in row {\n            if col == 0 {\n\
    \                count += 1\n                if count > max {\n              \
    \      max = count\n                }\n            }\n        }\n    }\n    \n\
    \    return max", "    var result = 0\n    var buckets = make([][]int, capacity)\n\
    \    for row in grid {\n        for bucket in row {\n            buckets[bucket]++\n\
    \        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n    \
    \        result += bucket\n        }\n    }\n    return result", "    \n    //\
    \ write your code here\n    \n    return 0", "    var result = 0\n    for row\
    \ in grid {\n        var max = 0\n        for cell in row {\n            if cell\
    \ > max {\n                max = cell\n            }\n        }\n        if max\
    \ > capacity {\n            result += capacity - max\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var buckets = make([][]int, capacity)\n  \
    \  for row in grid {\n        for bucket in bucket {\n            buckets[bucket]++\n\
    \        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n    \
    \        result += 1\n            bucket -= 1\n        }\n    }\n    return result",
  "    guard capacity > 0 else {\n        return 0\n    }\n    \n    var max = 0\n\
    \    var maxIndex = 0\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          \n                if max < capacity {\n                    max = capacity\n\
    \                    maxIndex = i\n                }\n                \n     \
    \           grid[i][j] = 1\n            }\n        }\n    }\n    \n    return\
    \ maxIndex", "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var\
    \ max = 0\n    var buckets = [Int](capacity)\n    \n    for row in grid {\n  \
    \      for bucket in row {\n            buckets[bucket] += 1 \n        }\n   \
    \ }\n    \n    for bucket in buckets {\n        if bucket > max {\n          \
    \  max = bucket \n        }\n    }\n    \n    return max", "    var result = 0\n\
    \    for row in grid {\n        for well in row {\n            if well > capacity\
    \ {\n                result += 1\n                capacity = well\n          \
    \  }\n        }\n    }\n    return result", "    var result = 0\n    for row in\
    \ grid {\n        var max = 0\n        for cell in row {\n            if cell\
    \ > max {\n                max = cell\n            }\n        }\n        if max\
    \ > capacity {\n            result += capacity - max\n        }\n    }\n    return\
    \ result", "    var result = 0\n    for row in grid {\n        var max = 0\n \
    \       for _ in row {\n            max += capacity\n        }\n        if max\
    \ > result {\n            result = max\n        }\n    }\n    return result",
  "    guard grid.count == 1 || grid.count == grid[0].length else {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid[0].length\
    \ {\n        for j in 0..<grid.count {\n            if grid[j][i] == 1 {\n   \
    \             grid[j][i] = 0\n                \n                if grid[j][maxIndex]\
    \ == 1 {\n                    grid[j][maxIndex] = 0\n                    \n  \
    \                  if grid[j][maxIndex] == 1 {\n                        grid[j][maxIndex]\
    \ = 0\n                        \n                        if grid[j][maxIndex]\
    \ == 1 {\n                            grid[j][maxIndex] = 0\n                \
    \        }\n                    }\n                }\n                \n     \
    \           if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex]\
    \ = 0\n                }\n                \n                if grid[j][maxIndex]\
    \ == 1 {\n                    grid[j][maxIndex] = 0\n                }\n     \
    \           \n                if grid[j][maxIndex] == 1 {\n                  \
    \  grid[j][maxIndex] = 0\n                }\n                \n              \
    \  if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex] = 0\n  \
    \              }\n                \n                if grid[j][maxIndex] == 1\
    \ {\n                    grid[j][maxIndex] = 0\n                }\n          \
    \      \n                if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex]\
    \ = 0\n                }\n                \n                if grid[j][maxIndex]\
    \ == 1 {\n                    grid[j][maxIndex] = 0\n                }\n     \
    \           \n                if grid[j][maxIndex] == 1 {\n                  \
    \  grid[j][maxIndex] = 0\n                }\n                \n              \
    \  if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex] = 0\n  \
    \              }\n                \n                if grid[j][maxIndex] == 1\
    \ {\n                    grid[j][maxIndex] = 0\n                }\n          \
    \      \n                if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex]\
    \ = 0\n                }\n                \n                if grid[j][maxIndex]\
    \ == 1 {\n                    grid[j][maxIndex] = 0\n                }\n     \
    \           \n                if grid[j][maxIndex] == 1 {\n                  \
    \  grid[j][maxIndex] = 0\n                }\n                \n              \
    \  if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex] = 0\n  \
    \              }\n                \n                if grid[j][maxIndex] == 1\
    \ {\n                    grid[j][maxIndex] = 0\n                }\n          \
    \      \n                if grid[j][maxIndex] == 1 {\n                    grid[j][maxIndex]\
    \ = 0\n                }\n                \n                if grid[j][maxIndex]\
    \ == 1 {\n                    grid[j][maxIndex] = 0\n                }\n     \
    \           \n                if grid[j][maxIndex] == 1 {\n                  \
    \  grid[j][maxIndex] = 0\n                }\n                \n              \
    \  if grid[j][maxIndex] == 1 {", "    \n    // write your code here\n    \n  \
    \  return 0", "    var result = 0\n    var buckets = [Int](capacity)\n    for\
    \ row in grid {\n        for bucket in row {\n            buckets[bucket] += 1\n\
    \        }\n    }\n    for bucket in buckets {\n        result += bucket\n   \
    \ }\n    return result", "    \n    // write your code here\n    var max = 0\n\
    \    var count = 0\n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += capacity\n\
    \            } else {\n                count -= capacity\n            }\n    \
    \        if count > max {\n                max = count\n            }\n      \
    \  }\n    }\n    return max", "    \n    let rowCount = grid.count\n    let colCount\
    \ = grid[0].count\n    \n    var max = 0\n    \n    for row in 0..<rowCount {\n\
    \        for col in 0..<colCount {\n            if grid[row][col] == 1 {\n   \
    \             \n                let bucket = grid[row][col]\n                \n\
    \                for _ in 0..<capacity {\n                    \n             \
    \       grid[row][col] = 0\n                    \n                    if bucket\
    \ > 0 {\n                        \n                        max += 1\n        \
    \                \n                        grid[row][col] = bucket\n         \
    \               \n                    }\n                    \n              \
    \  }\n                \n            }\n        }\n    }\n    \n    return max",
  "    if capacity <= 0 {\n        return 0\n    }\n    if grid.isEmpty() {\n    \
    \    return 0\n    }\n    var max = 0\n    var maxIndex = 0\n    for i := 0; i\
    \ < grid.length-1; i++ {\n        for j := 0; j < grid[0].length-1; j++ {\n  \
    \          if grid[i][j] == 1 {\n                grid[i][j] = 0\n            \
    \    grid[i+1][j] = 0\n                grid[i][j+1] = 0\n                grid[i+1][j+1]\
    \ = 0\n                max += capacity\n                if max > capacity {\n\
    \                    max = 0\n                    maxIndex = i\n             \
    \   }\n            }\n        }\n    }\n    return maxIndex", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    var count = 0\n    var max = 0\n    for row\
    \ in grid {\n        for col in row {\n            if col == 0 {\n           \
    \     count += 1\n                max = max(max, count)\n            }\n     \
    \   }\n    }\n    return max", "    var count = 0\n    for row in grid {\n   \
    \     for bucket in row {\n            if bucket > capacity {\n              \
    \  count += capacity - bucket\n            }\n        }\n    }\n    return count",
  "    \n    let n = grid.count\n    \n    var result = 0\n    \n    for _ in 0..<n\
    \ {\n        \n        let buckets = [Int](repeating: 0, count: capacity)\n  \
    \      \n        for _ in 0..<n {\n            \n            let bucket = grid[Int(arc4random_uniform(UInt32(n)))][Int(arc4random_uniform(UInt32(n)))]\n\
    \            \n            if bucket == 0 {\n                \n              \
    \  buckets[Int(arc4random_uniform(UInt32(capacity)))] += 1\n                \n\
    \            }\n            \n        }\n        \n        for bucket in buckets\
    \ {\n            \n            if bucket > 0 {\n                \n           \
    \     result += bucket\n                \n            }\n            \n      \
    \  }\n        \n    }\n    \n    return result\n    ", "    var max = 0\n    var\
    \ maxCount = 0\n    for row in grid {\n        var count = 0\n        for col\
    \ in row {\n            if col == 1 {\n                count += 1\n          \
    \  }\n        }\n        if count > max {\n            max = count\n         \
    \   maxCount = 1\n        } else {\n            maxCount *= count\n        }\n\
    \    }\n    return maxCount * capacity", "    var result = 0\n    for row in grid\
    \ {\n        for bucket in row {\n            if bucket > capacity {\n       \
    \         result += capacity - bucket\n            } else {\n                result\
    \ += bucket\n            }\n        }\n    }\n    return result", "    var max\
    \ = 0\n    var index = 0\n    for row in grid {\n        for col in row {\n  \
    \          if col == 0 {\n                max += 1\n            } else {\n   \
    \             max += capacity - col\n            }\n        }\n    }\n    return\
    \ max", "    \n    // write your code here\n    \n    return 0", "    \n    //\
    \ write your code here\n    \n    return 0", "    var result = 0\n    for row\
    \ in grid {\n        for col in row {\n            if col == 0 {\n           \
    \     result += capacity\n            }\n        }\n    }\n    return result",
  "    if grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ min = 0\n    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                max += capacity\n \
    \               min += capacity\n            }\n        }\n    }\n    \n    if\
    \ max < min {\n        return max\n    }\n    \n    return min", "    \n    //\
    \ write your code here\n    \n    return 0", "    \n    // write your code here\n\
    \    \n    return 0", "    \n    // write your code here\n    var max = 0\n  \
    \  for row in grid {\n        for col in row {\n            if col > max {\n \
    \               max = col\n            }\n        }\n    }\n    return max", " \
    \   \n    // write your code here\n    \n    return 0", "    var max = 0\n   \
    \ for row in grid {\n        var maxRow = 0\n        for col in row {\n      \
    \      if col == 1 {\n                maxRow = maxRow + 1\n            }\n   \
    \     }\n        if maxRow > max {\n            max = maxRow\n        }\n    }\n\
    \    return max", "    \n    var count = 0\n    var max = 0\n    var min = 0\n\
    \    \n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n                max = max(max, col)\n     \
    \           min = min(min, col)\n            }\n        }\n    }\n    \n    if\
    \ count > capacity {\n        return 0\n    }\n    \n    return count - capacity",
  "    var count = 0\n    var minCapacity = capacity\n    for row in grid {\n    \
    \    for col in row {\n            if col == 1 {\n                count += 1\n\
    \                if count > minCapacity {\n                    minCapacity = count\n\
    \                }\n            }\n        }\n    }\n    return minCapacity",
  "    \n    // TODO: write your code here\n    \n    return 0", "    var count =\
    \ 0\n    var max = 0\n    for row in grid {\n        for col in row {\n      \
    \      if col == 0 {\n                count += 1\n                if count > max\
    \ {\n                    max = count\n                }\n            }\n     \
    \   }\n    }\n    return max", "    if grid.length == 0 || grid[0].length == 0\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n  \
    \  var maxVal = grid[0][0] // first row is max value\n    \n    for i in 1..<grid.length\
    \ {\n        for j in 1..<grid[i].length {\n            if grid[i][j] > maxVal\
    \ {\n                maxVal = grid[i][j]\n                maxIndex = i\n     \
    \       }\n        }\n    }\n    \n    for i in 1..<grid.length {\n        for\
    \ j in 1..<grid[i].length {\n            if grid[i][j] == maxVal {\n         \
    \       grid[maxIndex][j] = capacity // fill bucket with capacity\n          \
    \      max += capacity - grid[maxIndex][j]\n            }\n        }\n    }\n\
    \    \n    return max", "    \n    var max = 0\n    var count = 0\n    \n    for\
    \ row in grid {\n        for col in row {\n            if col == 0 {\n       \
    \         count += 1\n            } else {\n                count = 0\n      \
    \      }\n            if count > max {\n                max = count\n        \
    \    }\n        }\n    }\n    \n    return max", "    var result = 0\n    for\
    \ row in grid {\n        var count = 0\n        for val in row {\n           \
    \ if val == 1 {\n                count += 1\n            }\n        }\n      \
    \  if count > capacity {\n            result = count\n        }\n    }\n    return\
    \ result", "    \n    // write your code here\n    \n    var count = 0\n    var\
    \ max = 0\n    for row in grid {\n        if row[0] > max {\n            max =\
    \ row[0]\n        }\n    }\n    for row in grid {\n        if row[0] > max {\n\
    \            max = row[0]\n        }\n    }\n    for row in grid {\n        if\
    \ row[0] > max {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] > max {\n            max = row[0]\n        }\n    }\n \
    \   for row in grid {\n        if row[0] > max {\n            max = row[0]\n \
    \       }\n    }\n    for row in grid {\n        if row[0] > max {\n         \
    \   max = row[0]\n        }\n    }\n    for row in grid {\n        if row[0] >\
    \ max {\n            max = row[0]\n        }\n    }\n    for row in grid {\n \
    \       if row[0] > max {\n            max = row[0]\n        }\n    }\n    for\
    \ row in grid {\n        if row[0] > max {\n            max = row[0]\n       \
    \ }\n    }\n    for row in grid {\n        if row[0] > max {\n            max\
    \ = row[0]\n        }\n    }\n    for row in grid {\n        if row[0] > max {\n\
    \            max = row[0]\n        }\n    }\n    for row in grid {\n        if\
    \ row[0] > max {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] > max {\n            max = row[0]\n        }\n    }\n \
    \   for row in grid {\n        if row[0] > max {\n            max = row[0]\n \
    \       }\n    }\n    for row in grid {\n        if row[0] > max {\n         \
    \   max = row[0]\n        }\n    }\n    for row in grid {\n        if row[0] >\
    \ max {\n            max = row[0]\n        }\n    }\n    for row in grid {\n \
    \       if row[0] > max {\n            max = row[0]\n        }\n    }\n    for\
    \ row in grid {\n        if row[0] > max {\n            max = row[0]\n       \
    \ }\n    }\n    for row in grid {\n        if row[0] > max {\n            max\
    \ = row[0]\n        }\n    }\n    for row in grid {\n        if row[0] > max {\n\
    \            max = row[0]\n        }\n    }\n    for row in grid {\n        if\
    \ row[0] > max {\n            max = row[0]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] > max {\n            max = row[0]\n        }\n    }\n \
    \   for row in grid {\n        if row[0] > max {\n            max = row[0]\n \
    \       }\n    }\n    for row in grid {\n        if row[0] > max {\n         \
    \   ", "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max =\
    \ 0\n    var maxCount = 0\n    \n    for row in grid {\n        for bucket in\
    \ row {\n            if bucket > max {\n                max = bucket\n       \
    \         maxCount = 1\n            } else {\n                maxCount += 1\n\
    \            }\n        }\n    }\n    \n    return maxCount", "    \n    // Write\
    \ your code here.\n    \n    return 0", "    var result = 0\n    var minCapacity\
    \ = capacity\n    for row in grid {\n        for bucket in row {\n           \
    \ if bucket > minCapacity {\n                minCapacity = bucket\n          \
    \  }\n        }\n    }\n    for row in grid {\n        for bucket in row {\n \
    \           if bucket > minCapacity {\n                minCapacity = bucket\n\
    \            }\n        }\n    }\n    for row in grid {\n        for bucket in\
    \ row {\n            if bucket > minCapacity {\n                minCapacity =\
    \ bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > minCapacity {\n                minCapacity\
    \ = bucket\n            }\n        }\n    }\n    for row in grid {\n        for ",
  "    guard grid.count == 1 else {\n        return 0\n    }\n    \n    var count\
    \ = 0\n    var max = 0\n    \n    for i in 0..<grid[0].length {\n        for j\
    \ in 0..<grid.count {\n            if grid[j][i] == 0 {\n                grid[j][i]\
    \ = 1\n                count += capacity\n                max += capacity\n  \
    \          }\n        }\n    }\n    \n    return count", "    \n    var count\
    \ = 0\n    var max = 0\n    var min = 0\n    \n    for row in grid {\n       \
    \ for col in row {\n            if col == 1 {\n                count += 1\n  \
    \              if count > max {\n                    max = count\n           \
    \     }\n                if count < min {\n                    min = count\n \
    \               }\n            }\n        }\n    }\n    \n    return max - min",
  "    \n    // init result and bucket array\n    var result = 0\n    var buckets\
    \ = [Int](capacity)\n    \n    // init bucket index\n    var bucketIndex = 0\n\
    \    \n    // init bucket capacity\n    var bucketCapacity = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket sum\n    var bucketSum = 0\n    \n    // init bucket sum\n    var bucketSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum", "    \n    // write your\
    \ code here\n    \n    return 0", "    var count = 0\n    for row in grid {\n\
    \        for well in row {\n            if well > capacity {\n               \
    \ count += well - capacity\n            } else {\n                count = 0\n\
    \            }\n        }\n    }\n    return count", "    guard capacity > 0 else\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n  \
    \  \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 1 {\n                max += 1\n                if max\
    \ > capacity {\n                    maxIndex = i\n                    break\n\
    \                }\n            }\n        }\n    }\n    \n    return maxIndex",
  "    \n    // write your code here\n    \n    return 0", "    if grid.isEmpty {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                max += 1\n                if max >\
    \ capacity {\n                    max = capacity\n                    maxIndex\
    \ = i\n                }\n            }\n        }\n    }\n    \n    return maxIndex",
  "    guard grid.count > 0 else { return 0 }\n    guard capacity > 0 else { return\
    \ 0 }\n    \n    var max = 0\n    var maxCount = 0\n    \n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                grid[i][j] = 0\n                \n                let newCount\
    \ = capacity\n                \n                while newCount > 0 {\n       \
    \             newCount -= 1\n                    \n                    if newCount\
    \ > max {\n                        max = newCount\n                        maxCount\
    \ = i\n                    }\n                    \n                    if grid[maxCount][j]\
    \ == 1 {\n                        grid[maxCount][j] = 0\n                    \
    \    break\n                    }\n                }\n            }\n        }\n\
    \    }\n    \n    return maxCount", "    if grid.isEmpty {\n        return 0\n\
    \    }\n    \n    var max = 0\n    var buckets = [Int](capacity)\n    \n    for\
    \ row in grid {\n        for bucket in row {\n            buckets[bucket] += 1\n\
    \        }\n    }\n    \n    for bucket in buckets {\n        if bucket > max\
    \ {\n            max = bucket\n        }\n    }\n    \n    return max", "    if\
    \ grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var buckets\
    \ = [Int](capacity)\n    \n    for row in grid {\n        for bucket in row {\n\
    \            buckets[bucket] += 1\n        }\n    }\n    \n    for bucket in buckets\
    \ {\n        if bucket > max {\n            max = bucket\n        }\n    }\n \
    \   \n    return max", "    \n    let n = grid.count\n    \n    // init buckets\n\
    \    var buckets = [Int](capacity)\n    \n    // init result\n    var result =\
    \ 0\n    \n    // init bucket\n    var bucket: Int = 0\n    \n    // init wells\n\
    \    var wells = [Int](n) { _ in 0 }\n    \n    // init index\n    var index:\
    \ Int = 0\n    \n    // init index\n    var row: Int = 0\n    \n    // init index\n\
    \    var col: Int = 0\n    \n    // init index\n    var i: Int = 0\n    \n   \
    \ // init index\n    var j: Int = 0\n    \n    // init index\n    var k: Int =\
    \ 0\n    \n    // init index\n    var l: Int = 0\n    \n    // init index\n  \
    \  var m: Int = 0\n    \n    // init index\n    var n: Int = 0\n    \n    // init\
    \ index\n    var o: Int = 0\n    \n    // init index\n    var p: Int = 0\n   \
    \ \n    // init index\n    var q: Int = 0\n    \n    // init index\n    var r:\
    \ Int = 0\n    \n    // init index\n    var s: Int = 0\n    \n    // init index\n\
    \    var t: Int = 0\n    \n    // init index\n    var u: Int = 0\n    \n    //\
    \ init index\n    var v: Int = 0\n    \n    // init index\n    var w: Int = 0\n\
    \    \n    // init index\n    var x: Int = 0\n    \n    // init index\n    var\
    \ y: Int = 0\n    \n    // init index\n    var z: Int = 0\n    \n    // init index\n\
    \    var A: Int = 0\n    \n    // init index\n    var B: Int = 0\n    \n    //\
    \ init index\n    var C: Int = 0\n    \n    // init index\n    var D: Int = 0\n\
    \    \n    // init index\n    var E: Int = 0\n    \n    // init index\n    var\
    \ F: Int = 0\n    \n    // init index\n    var G: Int = 0\n    \n    // init index\n\
    \    var H: Int = 0\n    \n    // init index\n    var I: Int = 0\n    \n    //\
    \ init index\n    var J: Int = 0\n    \n    // init index\n    var K: Int = 0\n\
    \    \n    // init index\n    var L: Int = 0\n    \n    // init index\n    var\
    \ M: Int = 0\n    \n    // init index\n    var N: Int = 0\n    \n    // init index\n\
    \    var O: Int = 0\n    \n    // init index\n    var P: Int = 0\n    \n    //\
    \ init index\n    var Q: Int = 0\n    \n    // init index", "    \n    let n =\
    \ grid.count\n    var max = 0\n    \n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if grid[i][j] == 1 {\n                max += capacity\n     \
    \       }\n        }\n    }\n    \n    return max", "    var max = 0\n    for\
    \ row in grid {\n        for col in row {\n            if col > max {\n      \
    \          max = col\n            }\n        }\n    }\n    return max", "    if\
    \ capacity <= 0 {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount\
    \ = 0\n    \n    for row in grid {\n        for col in row {\n            if col\
    \ == 0 {\n                max += 1\n                maxCount += 1\n          \
    \  }\n        }\n    }\n    \n    if maxCount > capacity {\n        return 0\n\
    \    }\n    \n    return max", "    \n    // write your code here\n    \n    return\
    \ 0", "    guard capacity > 0 && capacity <= 10 else { return 0 }\n    \n    var\
    \ max = 0\n    var maxCount = 0\n    \n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     max += capacity\n                maxCount++\n            }\n        }\n\
    \    }\n    \n    return maxCount > max ? maxCount : max", "    \n    // TODO:\
    \ write your code here\n    \n    return 0", "    var max = 0\n    var count =\
    \ 0\n    for row in grid {\n        for col in row {\n            if col == 0\
    \ {\n                count += 1\n            } else {\n                count =\
    \ 0\n            }\n            if count > max {\n                max = count\n\
    \            }\n        }\n    }\n    return max", "    guard capacity > 0 &&\
    \ capacity <= 10 else { return 0 }\n    \n    var max = 0\n    var count = 0\n\
    \    \n    for row in grid {\n        if row[0] == 0 {\n            count += row[1]\n\
    \        } else {\n            count -= row[1]\n            if count > max {\n\
    \                max = count\n            }\n            count = 0\n        }\n\
    \    }\n    \n    return max", "    if grid.isEmpty() {\n        return 0\n  \
    \  }\n    \n    var result = 0\n    \n    var minBucket = capacity\n    for row\
    \ in 0..<grid.count {\n        for col in 0..<grid[row].count {\n            if\
    \ grid[row][col] == 1 {\n                minBucket = minBucket > capacity ? minBucket\
    \ : capacity\n                \n                if minBucket == capacity {\n \
    \                   result = result + 1\n                }\n                \n\
    \                minBucket -= 1\n            }\n        }\n    }\n    \n    return\
    \ result", "    guard grid.count == 1 else {\n        return -1\n    }\n    \n\
    \    var count = 0\n    \n    for row in grid {\n        if row[0] == 0 {\n  \
    \          count += row[1]\n        }\n    }\n    \n    return count", "    \n\
    \    var result = 0\n    \n    for row in grid {\n        var count = 0\n    \
    \    for cell in row {\n            if cell == 1 {\n                count += 1\n\
    \            }\n        }\n        if count > capacity {\n            result =\
    \ count\n        }\n    }\n    return result", "    guard capacity > 0 else {\n\
    \        return 0\n    }\n    \n    var count = 0\n    var max = 0\n    \n   \
    \ for row in grid {\n        for col in row {\n            if col == 0 {\n   \
    \             count += 1\n            }\n        }\n    }\n    \n    for row in\
    \ grid {\n        for col in row {\n            if col == 0 {\n              \
    \  max += 1\n            }\n        }\n    }\n    \n    return count - max", " \
    \   var count = 0\n    for row in grid {\n        for col in row {\n         \
    \   if col == 0 {\n                count += capacity\n            } else {\n \
    \               count -= 1\n            }\n        }\n    }\n    return count",
  "    \n    // write your code here\n    \n    return 0", "    \n    var count =\
    \ 0\n    var max = 0\n    \n    for row in grid {\n        for col in row {\n\
    \            if col > max {\n                max = col\n            }\n      \
    \  }\n    }\n    \n    for row in grid {\n        for col in row {\n         \
    \   if col == max {\n                count += 1\n            }\n        }\n  \
    \  }\n    \n    return count", "    var result = 0\n    for row in grid {\n  \
    \      var max = 0\n        for _ in row {\n            max += capacity\n    \
    \    }\n        if max > result {\n            result = max\n        }\n    }\n\
    \    return result", "    \n    // write your code here\n    \n    return 0",
  "    var result = 0\n    var buckets = make([][]int, capacity)\n    for row in grid\
    \ {\n        for bucket in bucket {\n            buckets[bucket]++\n        }\n\
    \    }\n    for bucket in buckets {\n        if bucket > 0 {\n            result\
    \ += bucket\n            bucket -= 1\n        }\n    }\n    return result", " \
    \   \n    var count = 0\n    \n    for row in grid {\n        for col in row {\n\
    \            if col == 1 {\n                count += capacity\n            }\n\
    \        }\n    }\n    \n    return count", "    guard grid.count == 1 else {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<grid[0].length {\n        for j in 0..<grid.count\
    \ {\n            if grid[j][i] == 0 {\n                grid[j][i] = 1\n      \
    \          \n                if capacity > max {\n                    max = capacity\n\
    \                    maxCount = 1\n                    maxIndex = j\n        \
    \        } else {\n                    maxCount += 1\n                }\n    \
    \        }\n        }\n    }\n    \n    return maxCount", "    var result = 0\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 1 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 2 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 3 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 4 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 5 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 6 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 7 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 8 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 9 {\n         \
    \   result += row[1]\n        }\n    }\n    return result", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n  \
    \  \n    for row in grid {\n        var index = 0\n        for _ in row {\n  \
    \          if index == capacity {\n                index = 0\n            }\n\
    \            \n            if row[index] == 1 {\n                index++\n   \
    \         }\n        }\n        \n        if index > max {\n            max =\
    \ index\n            maxIndex = row\n        }\n    }\n    \n    return maxIndex.count",
  "    if grid.count == 0 {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ maxIndex = 0\n    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 0 {\n                grid[row][col] = capacity\n\
    \                \n                if capacity > max {\n                    max\
    \ = capacity\n                    maxIndex = row\n                }\n        \
    \        \n                capacity -= 1\n            }\n        }\n    }\n  \
    \  \n    return maxIndex", "    var count = 0\n    for row in grid {\n       \
    \ if row[0] == 0 {\n            count += row[1]\n        }\n    }\n    return\
    \ count", "    \n    // write your code here\n    \n    return 0", "    var max\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col > max\
    \ {\n                max = col\n            }\n        }\n    }\n    var count\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col > 0\
    \ {\n                count += 1\n                col -= max\n            }\n \
    \       }\n    }\n    return count", "    var result = 0\n    for row in grid\
    \ {\n        for col in row {\n            if col == 0 {\n                result\
    \ += capacity\n            } else {\n                result -= capacity\n    \
    \        }\n        }\n    }\n    return result", "    \n    // Write your code\
    \ here.\n    \n    return 0", "    var result = 0\n    var buckets = make([][]int,\
    \ capacity)\n    for _, row := range grid {\n        for _, bucket := range row\
    \ {\n            buckets[bucket]++\n        }\n    }\n    for _, bucket := range\
    \ buckets {\n        if bucket > 0 {\n            result += 1\n            bucket\
    \ -= 1\n        }\n    }\n    return result", "    \n    // write your code here\n\
    \    \n    return 0", "    var result = 0\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > capacity {\n                result\
    \ += capacity - bucket\n            } else {\n                result += bucket\n\
    \            }\n        }\n    }\n    return result", "    if grid.isEmpty() {\n\
    \        return 0\n    }\n    var max = 0\n    var maxIndex = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col > max {\n             \
    \   max = col\n                maxIndex = row.startIndex\n            }\n    \
    \    }\n    }\n    if maxIndex == 0 {\n        return 0\n    }\n    var count\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n            }\n        }\n    }\n    if count\
    \ > capacity {\n        return count\n    }\n    for row in grid {\n        for\
    \ col in row {\n            if col == 0 {\n                grid[row.startIndex][col]\
    \ = max\n                count -= capacity\n            }\n        }\n    }\n\
    \    return count", "    if grid.isEmpty() {\n        return 0\n    }\n    \n\
    \    var max = 0\n    var maxCount = 0\n    \n    for row in grid {\n        var\
    \ count = 0\n        for cell in row {\n            if cell == 1 {\n         \
    \       count += 1\n            }\n        }\n        if count > max {\n     \
    \       max = count\n            maxCount = 1\n        } else if count == max\
    \ {\n            maxCount += 1\n        }\n    }\n    \n    return maxCount",
  "    \n    // Write your code here.\n    \n    return 0", "    if grid.isEmpty {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n\
    \    for row in grid {\n        if row[0] == 0 {\n            continue\n     \
    \   }\n        \n        var index = row[0]\n        \n        for _ in 1...row[0]\
    \ {\n            index = index * capacity + row[1]\n        }\n        \n    \
    \    if index > max {\n            max = index\n            maxIndex = index\n\
    \        }\n    }\n    \n    return maxIndex", "    var count = 0\n    for row\
    \ in grid {\n        var max = 0\n        for col in row {\n            if col\
    \ > max {\n                max = col\n            }\n        }\n        if max\
    \ > capacity {\n            count = 0\n        } else {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    if grid.isEmpty() {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    var maxIndex = 0\n\
    \    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                max += capacity\n \
    \               maxCount += 1\n                if maxCount > max {\n         \
    \           max = maxCount\n                    maxIndex = row\n             \
    \   }\n            }\n        }\n    }\n    \n    return max"]
stop_tokens:
- "\n}"
