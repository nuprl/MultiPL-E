name: HumanEval_6_parse_nested_parens
language: swift
prompt: "\n/// Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n/// For each of the group, output the\
  \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
  \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
  \ String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()())\
  \ ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
  \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
  \ \"(()(())((())))\") == [4])"
completions: ["    var levels = [Int]()\n    var paren_count = 0\n    for char in\
    \ paren_string {\n        if char == '(' {\n            paren_count += 1\n   \
    \     } else if char == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                levels.append(paren_count)\n            }\n        }\n\
    \    }\n    return levels", "    var levels = [Int]()\n    var level = 0\n   \
    \ var parens = 0\n    for char in paren_string.characters {\n        if char ==\
    \ '(' {\n            levels[level] = parens\n            parens += 1\n       \
    \ } else if char == ')' {\n            levels[level] = parens\n            parens\
    \ -= 1\n        } else if char == ' ' {\n            levels[level] = parens\n\
    \        }\n        level += 1\n    }\n    return levels", "    var levels = [Int]()\n\
    \    var level = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     parens_count += 1\n            parens_level += 1\n        } else if c ==\
    \ ')' {\n            parens_count -= 1\n            parens_level -= 1\n      \
    \      if parens_level == 0 {\n                levels.append(level)\n        \
    \    }\n        } else if parens_count > 0 {\n            level = 0\n        \
    \    parens = 0\n            parens_count = 0\n            parens_level = 0\n\
    \        }\n        level += 1\n    }\n    return levels", "    var levels = [Int]()\n\
    \    var level = 0\n    var parens = 0\n    var parens_count = 0\n    var parens_level\
    \ = 0\n    for char in paren_string.characters {\n        switch char {\n    \
    \    case ')':\n            levels[level] = parens_level\n            parens_level\
    \ = 0\n            parens_count += 1\n            parens += parens_count\n   \
    \         level++\n        case ')':\n            levels[level] = parens_level\n\
    \            parens_level = 0\n            parens_count += 1\n            parens\
    \ += parens_count\n            level++\n        default:\n            parens_level++\n\
    \        }\n    }\n    return levels", "    var level = 0\n    var max_level =\
    \ 0\n    var max_level_parens = 0\n    var paren_count = 0\n    var paren_char_count\
    \ = 0\n    var paren_char = \"\"\n    var paren_chars = []\n    var paren_char_index\
    \ = 0\n    var paren_char_indexes = []\n    var paren_char_indexes_count = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n\
    \    var paren_char_indexes_index = 0\n    var paren_char_indexes_index = 0\n",
  "    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n    var levels_stack\
    \ = [Int]()\n    var levels_stack_index = 0\n    var paren_level = 0\n    var\
    \ paren_level_stack = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_index2\
    \ = 0\n    var paren_level_stack_index3 = 0\n    var paren_level_stack_index4\
    \ = 0\n    var paren_level_stack_index5 = 0\n    var paren_level_stack_index6\
    \ = 0\n    var paren_level_stack_index7 = 0\n    var paren_level_stack_index8\
    \ = 0\n    var paren_level_stack_index9 = 0\n    var paren_level_stack_index10\
    \ = 0\n    var paren_level_stack_index11 = 0\n    var paren_level_stack_index12\
    \ = 0\n    var paren_level_stack_index13 = 0\n    var paren_level_stack_index14\
    \ = 0\n    var paren_level_stack_index15 = 0\n    var paren_level_stack_index16\
    \ = 0\n    var paren_level_stack_index17 = 0\n    var paren_level_stack_index18\
    \ = 0\n    var paren_level_stack_index19 = 0\n    var paren_level_stack_index20\
    \ = 0\n    var paren_level_stack_index21 = 0\n    var paren_level_stack_index22\
    \ = 0\n    var paren_level_stack_index23 = 0\n    var paren_level_stack_index24\
    \ = 0\n    var paren_level_stack_index25 = 0\n    var paren_level_stack_index26\
    \ = 0\n    var paren_level_stack_index27 = 0\n    var paren_level_stack_index28\
    \ = 0\n    var paren_level_stack_index29 = 0\n    var paren_level_stack_index30\
    \ = 0\n    var paren_level_stack_index31 = 0\n    var paren_level_stack_index32\
    \ = 0\n    var paren_level_stack_index33 = 0\n    var paren_level_stack_index34\
    \ = 0\n    var paren_level_stack_index35 = 0\n    var paren_level_stack_index36\
    \ = 0\n    var paren_level_stack_index37 = 0\n    var paren_level_stack_index38\
    \ = 0\n    var paren_level_stack_index39 = 0\n    var paren_level_stack_index40\
    \ = 0\n    var paren_level_stack_index41 = 0\n    var paren_level_stack_index42\
    \ = 0\n    var paren_level_stack_index43 = 0\n    var paren_level_stack_index44\
    \ = 0\n    var paren_level_stack_index45 = 0\n    var paren_level_stack_index46\
    \ = 0\n    var paren_level_stack_index47 = 0\n    var paren_level_stack_index48\
    \ = 0\n    var paren_level_stack_index49 = 0\n    var paren_level_stack_index50\
    \ = 0\n    var paren_level_stack_index51 = 0\n    var paren_level_stack_index",
  "    var levels = [Int]()\n    var level = 0\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char_start\
    \ = 0\n    var paren_char_end = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_start = 0\n\
    \    var paren_char_char_end = 0\n    var paren_char_char_char = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_count = 0\n    var paren_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_start = 0\n    var paren_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_end = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_start = 0\n    var\
    \ paren_char_char_char_", "    var levels = [Int]()\n    var level = 0\n    var\
    \ paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_count_prev = 0\n    var\
    \ paren_char_count_next = 0\n    var paren_char_count_prev_next = 0\n    var paren_char_count_prev_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next = 0\n    var paren_char_count_prev_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next = 0\n    var paren_char_count_prev_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next = 0\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next = 0\n \
    \   var paren_char_count_prev_next_next_next_next_next_next_next_next_next = 0\n\
    \    var paren_char_count_prev_next_next_next_next_next_next_next_next_next =\
    \ 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var paren_char_count_prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var ", "    var levels = [Int]()\n    var level = 0\n    var parens\
    \ = 0\n    for char in paren_string.characters {\n        if char == '(' {\n \
    \           parens += 1\n            levels.append(level)\n            level =\
    \ 0\n        } else if char == ')' {\n            level -= 1\n            levels.append(level)\n\
    \            level = 0\n        } else {\n            level += 1\n        }\n\
    \    }\n    return levels", "    var level = 0\n    var max_level = 0\n    var\
    \ max_level_parens = 0\n    var parens = 0\n    var parens_count = 0\n    var\
    \ parens_string = \"\"\n    for char in paren_string.characters {\n        if\
    \ char == \"(\" {\n            parens += 1\n            parens_count += 1\n  \
    \          parens_string += String(char)\n        } else if char == \")\" {\n\
    \            parens -= 1\n            parens_count -= 1\n            if parens_count\
    \ == 0 {\n                parens_string = parens_string[..<parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, startIndex: parens_string.index(char,\
    \ startIndex: parens_string.index(char, start", "    var level = 0\n    var max_level\
    \ = 0\n    var max_level_parens = 0\n    var paren_level = 0\n    var paren_level_parens\
    \ = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_max_max = 0\n    var paren_level_parens_count_max_min\
    \ = 0\n    var paren_level_parens_count_max_min_index = 0\n    var paren_level_parens_count_max_min_index_index\
    \ = 0\n    var paren_level_parens_count_max_min_index2 = 0\n    var paren_level_parens_count_max_min_index2_index\
    \ = 0\n    var paren_level_parens_count_max_min_index3 = 0\n    var paren_level_parens_count_max_min_index3_index\
    \ = 0\n    var paren_level_parens_count_max_min_index4 = 0\n    var paren_level_parens_count_max_min_index4_index\
    \ = 0\n    var paren_level_parens_count_max_min_index5 = 0\n    var paren_level_parens_count_max_min_index5_index\
    \ = 0\n    var paren_level_parens_count_max_min_index6 = 0\n    var paren_level_parens_count_max_min_index6_index\
    \ = 0\n    var paren_level_parens_count_max_min_index7 = 0\n    var paren_level_parens_count_max_min_index7_index\
    \ = 0\n    var paren_level_parens_count_max_min_index8 = 0\n    var paren_level_parens_count_max_min_index8_index\
    \ = 0\n    var paren_level_parens_count_max_min_index9 = 0\n    var paren_level_parens_count_max_min_index9_index\
    \ = 0\n    var paren_level_parens_count_max_min_index10 = 0\n    var paren_level_parens_count_max_min_index10_index\
    \ = 0\n    var paren_level_parens_count_max_min_index11 = 0\n    var paren_level_parens_count_max_min_index11_index\
    \ = 0\n    var paren_level_parens_count_max_min_index12 = 0\n    var paren_level_parens_count_max_min_index12_index\
    \ = 0\n    var paren_level_parens_count_max_min_index13 = 0\n    var paren_level_parens_count_max_min_index13_index\
    \ = 0\n    var paren_level_parens_count_max_min_index14 = 0\n    var paren_level_parens_count_max_min_index14_index\
    \ = 0\n    var paren_level_parens_count_max_min_index15 = 0\n    var paren_level_parens_count_max_min_index15_index\
    \ = 0\n    var paren_level_parens_count_max_min_index16 = 0\n    var paren_level_parens_count_max_min_index16_index\
    \ = 0\n    var paren_level_parens_count_max_min_index17 = 0\n    var ", "    var\
    \ levels = [Int]()\n    var level = 0\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start", "    var level = 0\n    var max_level = 0\n    var\
    \ max_level_parens = 0\n    var paren_count = 0\n    var paren_level = 0\n   \
    \ var paren_level_parens = 0\n    var paren_level_parens_count = 0\n    var paren_level_parens_count_max\
    \ = 0\n    var paren_level_parens_count_min = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n    var paren_level_parens_count_max_index = 0\n    var paren_level_parens_count_min_index\
    \ = 0\n", "    var levels = [Int]()\n    var level = 0\n    var parens = 0\n \
    \   var parens_level = 0\n    for c in paren_string.unicodeScalars {\n       \
    \ if c == '(' {\n            parens += 1\n            parens_level += 1\n    \
    \    } else if c == ')' {\n            parens -= 1\n            if parens == 0\
    \ {\n                levels.append(parens_level)\n            }\n        }\n \
    \   }\n    return levels", "    var levels = [Int]()\n    var level = 0\n    var\
    \ parens = 0\n    var parens_level = 0\n    var parens_count = 0\n    var parens_count_max\
    \ = 0\n    var parens_count_max_index = 0\n    var parens_count_max_index2 = 0\n\
    \    var parens_count_max_index3 = 0\n    var parens_count_max_index4 = 0\n  \
    \  var parens_count_max_index5 = 0\n    var parens_count_max_index6 = 0\n    var\
    \ parens_count_max_index7 = 0\n    var parens_count_max_index8 = 0\n    var parens_count_max_index9\
    \ = 0\n    var parens_count_max_index10 = 0\n    var parens_count_max_index11\
    \ = 0\n    var parens_count_max_index12 = 0\n    var parens_count_max_index13\
    \ = 0\n    var parens_count_max_index14 = 0\n    var parens_count_max_index15\
    \ = 0\n    var parens_count_max_index16 = 0\n    var parens_count_max_index17\
    \ = 0\n    var parens_count_max_index18 = 0\n    var parens_count_max_index19\
    \ = 0\n    var parens_count_max_index20 = 0\n    var parens_count_max_index21\
    \ = 0\n    var parens_count_max_index22 = 0\n    var parens_count_max_index23\
    \ = 0\n    var parens_count_max_index24 = 0\n    var parens_count_max_index25\
    \ = 0\n    var parens_count_max_index26 = 0\n    var parens_count_max_index27\
    \ = 0\n    var parens_count_max_index28 = 0\n    var parens_count_max_index29\
    \ = 0\n    var parens_count_max_index30 = 0\n    var parens_count_max_index31\
    \ = 0\n    var parens_count_max_index32 = 0\n    var parens_count_max_index33\
    \ = 0\n    var parens_count_max_index34 = 0\n    var parens_count_max_index35\
    \ = 0\n    var parens_count_max_index36 = 0\n    var parens_count_max_index37\
    \ = 0\n    var parens_count_max_index38 = 0\n    var parens_count_max_index39\
    \ = 0\n    var parens_count_max_index40 = 0\n    var parens_count_max_index41\
    \ = 0\n    var parens_count_max_index42 = 0\n    var parens_count_max_index43\
    \ = 0\n    var parens_count_max_index44 = 0\n    var parens_count_max_index45\
    \ = 0\n    var parens_count_max_index46 = 0\n    var parens_count_max_index47\
    \ = 0\n    var parens_count_max_index48 = 0\n    var parens_count_max_index49\
    \ = 0\n    var parens_count_max_index50 = 0\n    var parens_count_max_index51\
    \ = 0\n    var parens_count_max_index52 = 0\n    var parens_count_max_index53\
    \ = 0\n    var parens_", "    var levels = [Int]()\n    var level = 0\n    var\
    \ parens = 0\n    var parens_count = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if parens_count == 0 {\n            levels.append(level)\n      \
    \  }\n        if parens_count == 1 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 2 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 3 {\n            levels[level]\
    \ = levels[level] + 1\n        }\n        if parens_count == 4 {\n           \
    \ levels[level] = levels[level] + 1\n        }\n        if parens_count == 5 {\n\
    \            levels[level] = levels[level] + 1\n        }\n        if parens_count\
    \ == 6 {\n            levels[level] = levels[level] + 1\n        }\n        if\
    \ parens_count == 7 {\n            levels[level] = levels[level] + 1\n       \
    \ }\n        if parens_count == 8 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 9 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 10 {\n            levels[level]\
    \ = levels[level] + 1\n        }\n        if parens_count == 11 {\n          \
    \  levels[level] = levels[level] + 1\n        }\n        if parens_count == 12\
    \ {\n            levels[level] = levels[level] + 1\n        }\n        if parens_count\
    \ == 13 {\n            levels[level] = levels[level] + 1\n        }\n        if\
    \ parens_count == 14 {\n            levels[level] = levels[level] + 1\n      \
    \  }\n        if parens_count == 15 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 16 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 17 {\n            levels[level]\
    \ = levels[level] + 1\n        }\n        if parens_count == 18 {\n          \
    \  levels[level] = levels[level] + 1\n        }\n        if parens_count == 19\
    \ {\n            levels[level] = levels[level] + 1\n        }\n        if parens_count\
    \ == 20 {\n            levels[level] = levels[level] + 1\n        }\n        if\
    \ parens_count == 21 {\n            levels[level] = levels[level] + 1\n      \
    \  }\n        if parens_count == 22 {\n            levels[level] = levels[level]\
    \ + 1\n        }\n        if parens_count == 23 {\n            levels[level] =\
    \ levels[level] + 1\n        }\n        if parens_count == 24 {\n            levels[level]\
    \ = levels[", "    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_count_max =\
    \ paren_levels_count + 1\n    var paren_levels_count_min = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_index = paren_levels_count - 1\n    var\
    \ paren_levels_count_min_index = paren_levels_count - 1\n    var paren_levels_count_max_value\
    \ = paren_levels_count - 1\n    var paren_levels_count_min_value = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_value_minus_1 = paren_levels_count - 1\n\
    \    var paren_levels_count_min_value_minus_1 = paren_levels_count - 1\n    var\
    \ paren_levels_count_max_value_minus_2 = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_2\
    \ = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_3 = paren_levels_count\
    \ - 1\n    var paren_levels_count_min_value_minus_3 = paren_levels_count - 1\n\
    \    var paren_levels_count_max_value_minus_4 = paren_levels_count - 1\n    var\
    \ paren_levels_count_min_value_minus_4 = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_5\
    \ = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_5 = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_value_minus_6 = paren_levels_count - 1\n\
    \    var paren_levels_count_min_value_minus_6 = paren_levels_count - 1\n    var\
    \ paren_levels_count_max_value_minus_7 = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_7\
    \ = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_8 = paren_levels_count\
    \ - 1\n    var paren_levels_count_min_value_minus_8 = paren_levels_count - 1\n\
    \    var paren_levels_count_max_value_minus_9 = paren_levels_count - 1\n    var\
    \ paren_levels_count_min_value_minus_9 = paren_levels_count - 1\n    var paren_levels_count_max_value_minus_10\
    \ = paren_levels_count - 1\n    var paren_levels_count_min_value_minus_10 = paren_levels_count\
    \ - 1\n    var paren_levels_count_max_value_minus_11 = paren_levels_count - 1\n\
    \    var paren_levels_count_min_value_minus_11 = paren_levels_count - 1", "  \
    \  var levels = [Int]()\n    var level = 0\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren_start_idx = 0\n    var paren_end_idx\
    \ = 0\n    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx\
    \ = 0\n    var paren_end_idx = 0\n    var paren", "    var levels = [Int]()\n\
    \    var paren_count = 0\n    var paren_level = 0\n    for c in paren_string {\n\
    \        if c == '(' {\n            paren_count += 1\n        } else if c == ')'\
    \ {\n            paren_count -= 1\n            if paren_count == 0 {\n       \
    \         levels.append(paren_level)\n            }\n        }\n        paren_level\
    \ += (c == '(' ? 1 : -1)\n    }\n    return levels", "    var levels = [Int]()\n\
    \    var level = 0\n    var parens = 0\n    for char in paren_string.characters\
    \ {\n        switch char {\n        case ')':\n            levels[level] = parens\n\
    \            parens = 0\n            level += 1\n        case ')':\n         \
    \   parens += 1\n        default:\n            parens = 0\n        }\n    }\n\
    \    return levels"]
stop_tokens:
- "\n}"
