name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as\
  \ [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"\
  array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ["    var filtered = strings\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filtered = filtered.filter({$0 !=\
    \ string})\n        }\n    }\n    return filtered", "    return strings.filter\
    \ {\n        if let index = strings.firstIndex(of: $0) {\n            return index\
    \ != nil && index!.contains(substring)\n        } else {\n            return false\n\
    \        }\n    }", "    var filtered = [String]()\n    for s in strings {\n \
    \       if s.contains(substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered", "    var filtered = [String]()\n    for s in strings {\n\
    \        if s.contains(substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", "    var\
    \ filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    var filtered = strings\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered\
    \ = filtered.filter { $0 != string }\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered: [String] = []\n    for string in strings {\n \
    \       if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", "    var filtered: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered: [String] = []\n    for string in strings {\n \
    \       if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    return\
    \ strings.filter {\n        strings.contains(substring)\n    }", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", '    return strings.filter({ $0.contains(substring)
    })', "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", '    return filter_by_substring(strings, substring: substring, options:
    .CaseInsensitive)', "    return strings.filter { (string: String) -> Bool in\n\
    \        let index = string.index(of: substring)\n        return index != nil\n\
    \    }", '    return strings.filter({ $0.contains(substring) })', '    return
    strings.filter({ $0.contains(substring) })', "    return strings.filter {\n  \
    \      if let index = strings.firstIndex(of: $0) {\n            return index !=\
    \ nil && index!.contains(substring)\n        } else {\n            return false\n\
    \        }\n    }", "    return strings.filter {\n        strings.contains(substring)\n\
    \    }", "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = strings\n    for s\
    \ in strings {\n        if s.contains(substring) {\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy:\
    \ -s.distance(from: substring))]\n        }\n    }\n    return filtered", "  \
    \  var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", '    return filter_by_substring(strings.filter({
    $0.contains(substring) }), substring)', "    return strings.filter { (string:\
    \ String) -> Bool in\n        let index = string.index(of: substring)\n      \
    \  return index != nil\n    }", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", '    return filter_by_substring(strings:
    strings, substring: substring, options: .caseInsensitive)', "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  '    return strings.filter({ $0.contains(substring) })', "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }", '    return strings.filter({
    $0.contains(substring) })', "    var filtered = [String]()\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", '    return strings.filter({
    $0.contains(substring) })', "    var filtered = [String]()\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    return strings.filter\
    \ {\n        contains($0, substring)\n    }", "    var filtered = strings\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered = filtered.filter { $0 != string }\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    return strings.filter {\n        if let\
    \ index = strings.firstIndex(of: $0) {\n            return index != nil && index!.contains(substring)\n\
    \        } else {\n            return false\n        }\n    }", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filteredStrings = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.remove(at: filteredStrings.index(of: string))\n\
    \        }\n    }\n    return filteredStrings", "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  '    return filter_by_substring(strings, substring, true)', "    var filtered =\
    \ [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filteredStrings: [String] = []\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    return strings.filter {\n\
    \        if let index = strings.firstIndex(of: $0) {\n            return index\
    \ != nil && index!.contains(substring)\n        } else {\n            return false\n\
    \        }\n    }", "    var filteredStrings = strings\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filteredStrings.remove(at:\
    \ filteredStrings.index(of: string))\n        }\n    }\n    return filteredStrings",
  "    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n            break\n        }\n    }\n    return filtered",
  "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", "    var\
    \ filteredStrings: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filtered: [String] = []\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", '    return strings.filter({
    $0.contains(substring) })', "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered: [String] = []\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = strings\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered\
    \ = filtered\n        } else {\n            break\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from:\
    \ substring))]\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = strings\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered = filtered.filter({$0 != string})\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for string in strings {\n      \
    \  if string.contains(substring) {\n            filtered = filtered.filter({$0\
    \ != string})\n        }\n    }\n    return filtered", '    return strings.filter({
    $0.contains(substring) })', "    return strings.filter {\n        strings.contains(substring)\n\
    \    }", '    return strings.filter({ $0.contains(substring) })', "    var filtered:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    var filteredStrings = strings\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.remove(at: filteredStrings.index(of: string))\n       \
    \ }\n    }\n    return filteredStrings", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for string in strings {\n   \
    \     if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", "    return strings.filter\
    \ { (string: String) -> Bool in\n        let index = string.index(of: substring)\n\
    \        return index != nil\n    }", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", '    return strings.filter({ $0.contains(substring) })', " \
    \   var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", '    return strings.filter({ $0.contains(substring)
    })', "    return strings.filter { (string) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered: [String] = []\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", '    return filter_by_substring(strings.filter({
    $0.contains(substring) }))', "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    return strings.filter { (string)\
    \ -> Bool in\n        let index = string.range(of: substring)\n        return\
    \ index != nil\n    }", "    var filtered = strings\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered = filtered.filter({$0\
    \ != string})\n        }\n    }\n    return filtered", "    var filtered: [String]\
    \ = []\n    for s in strings {\n        if s.contains(substring) {\n         \
    \   filtered = append(filtered, s)\n        }\n    }\n    return filtered", " \
    \   var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for string in strings {\n   \
    \     if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filteredStrings:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    return strings.filter {\n        guard let index = strings.firstIndex(of:\
    \ $0) else {\n            return false\n        }\n        return index != 0 &&\
    \ index == strings.index(of: substring)\n    }", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered", "    var filtered = strings\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered = filtered\n\
    \        } else {\n            break\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    var filtered: [String] = []\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = strings\n    for s in strings {\n        if s.contains(substring) {\n    \
    \        filtered = filtered\n        } else {\n            filtered = filtered.filter({$0\
    \ != s})\n        }\n    }\n    return filtered", "    var filtered: [String]\
    \ = []\n    for s in strings {\n        if s.contains(substring) {\n         \
    \   filtered = append(filtered, s)\n        }\n    }\n    return filtered", " \
    \   var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))..<filtered.index(s.endIndex, offsetBy: -s.distance(from:\
    \ substring))]\n        }\n    }\n    return filtered", "    var filtered = strings\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = filtered[..<filtered.index(of: string)] // remove all occurrences\
    \ of substring\n        }\n    }\n    return filtered", "    var filtered = strings\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from: substring))]\
    \ + filtered[filtered.index(s.endIndex, offsetBy: s.distance(from: substring))..<filtered.count]\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", '    return
    strings.filter({ $0.contains(substring) })', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    return strings.filter {\n        guard let index = string.range(of:\
    \ substring) else { return false }\n        return index != nil\n    }", "   \
    \ var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered: [String] = []\n    for string in strings {\n \
    \       if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    return strings.filter { (string: String) -> Bool in\n        let index = string.index(of:\
    \ substring)\n        return index != nil\n    }", "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", "    var\
    \ filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for string in strings {\n      \
    \  if string.contains(substring) {\n            filtered = filtered\n        }\
    \ else {\n            break\n        }\n    }\n    return filtered", '    return
    strings.filter({ $0.contains(substring) })', "    var filtered: [String] = []\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", '    return strings.filter({
    $0.contains(substring) })', "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        contains($0, substring)\n    }", "    var\
    \ filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filteredStrings: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filtered = strings\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered = filtered\n  \
    \      } else {\n            break\n        }\n    }\n    return filtered", '    return
    filter_by_substrings(strings, substring, true)', "    var filtered = strings\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = filtered\n        } else {\n            break\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", '    return strings.filter({ $0.contains(substring)
    })', "    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = strings\n    for string in strings {\n      \
    \  if string.contains(substring) {\n            filtered = filtered.filter({$0\
    \ != string})\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    return strings.filter { (string: String) -> Bool in\n      \
    \  let index = string.index(of: substring)\n        return index != nil\n    }",
  '    return strings.filter({ $0.contains(substring) })', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", '    return strings.filter({ $0.contains(substring)
    })', "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filteredStrings: [String] = []\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.contains(substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", '    return strings.filter({ $0.contains(substring) })', "    var\
    \ filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    var filtered: [String] = []\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring, to: s.endIndex))]\n            break\n        }\n\
    \    }\n    return filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered"]
stop_tokens:
- "\n}"
