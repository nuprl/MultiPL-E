name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as\
  \ [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"\
  array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ["    var filtered = strings\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filtered = filtered.filter({$0 !=\
    \ string})\n        }\n    }\n    return filtered", "    return strings.filter\
    \ {\n        if let index = strings.firstIndex(of: $0) {\n            return index\
    \ != nil && index!.contains(substring)\n        } else {\n            return false\n\
    \        }\n    }", "    var filtered = [String]()\n    for s in strings {\n \
    \       if s.contains(substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    var filtered\
    \ = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered", "    var filtered = [String]()\n    for s in strings {\n\
    \        if s.contains(substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered\
    \ = append(filtered, string)\n        }\n    }\n    return filtered", "    var\
    \ filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            filtered = append(filtered, s)\n      \
    \  }\n    }\n    return filtered", "    var filtered = strings\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered\
    \ = filtered.filter { $0 != string }\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered: [String] = []\n    for string in strings {\n \
    \       if string.contains(substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered", "    var filtered: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered", "    var filtered: [String] = []\n    for string in strings {\n \
    \       if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered = append(filtered, string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered"]
stop_tokens:
- "\n}"
