name: HumanEval_13_greatest_common_divisor
language: swift
prompt: "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(a:\
  \ 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a: 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a:\
  \ Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\n\
  assert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
  \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
completions: ['    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ b", '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b > 0 else { return 0 }\n    return greatest_common_divisor(a, (b * b) % a)",
  '    return greatest_common_divisor(UInt32(a), UInt32(b))', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', '    return gcd(a, b) * b', "    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    var gcd = a\n    for\
    \ i = 2; i <= b; i++ {\n        if a % i == 0 {\n            gcd = i\n       \
    \ }\n    }\n    return gcd", '    return a / gcd(a, b)', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a,
    b)', "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return gcd(a, b) * b', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a >=\
    \ 0 else { return b }\n        guard b >= 0 else { return a }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    guard b >= 0 else { return a }\n\
    \    guard a >= 0 else { return b }\n    return greatest_common_divisor(b, a %\
    \ b)", "    var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n         \
    \   return gcd\n        }\n        gcd = b\n        b %= gcd\n    }\n    return\
    \ b", '    return a / gcd(a, b)', "    if a < b {\n        guard a >= 0 else {\
    \ return b }\n        guard b >= 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b >= 0 else { return a }\n    guard a >= 0 else { return\
    \ b }\n    return greatest_common_divisor(b, a % b)", "    if a < b {\n      \
    \  return greatest_common_divisor(b, a)\n    }\n    if a == 0 || b == 0 {\n  \
    \      return 0\n    }\n    var gcd = 1\n    var i = a\n    var j = b\n    while\
    \ i != 0 {\n        if i % j == 0 {\n            gcd = j\n        }\n        i\
    \ /= j\n        j /= gcd\n    }\n    return gcd", '    return a / gcd(a, b)',
  '    return greatest_common_divisor(UInt32(a), UInt32(b))', '    return a / gcd(a,
    b)', "    if a < b {\n        return greatest_common_divisor(b, a)\n    }\n  \
    \  if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n \
    \   }\n    var gcd = a\n    while gcd != 0 {\n        if b % gcd == 0 {\n    \
    \        return gcd\n        }\n        gcd = b % gcd\n    }\n    return gcd",
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n      \
    \  guard a > 0 else { return b }\n        return greatest_common_divisor(b, a\
    \ % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        return greatest_common_divisor(b, a)\n    }\n    if a == 0\
    \ {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if\
    \ a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ greatest_common_divisor(a % b, b)", '    return a / gcd(a, b)', "    var gcd\
    \ = a\n    while gcd != 0 && b != 0 {\n        if gcd > b {\n            gcd -=\
    \ b\n        } else {\n            gcd -= a\n        }\n    }\n    return gcd",
  '    return a / gcd(a, b)', "    var gcd = a\n    while gcd != 0 {\n        if b\
    \ == 0 {\n            return gcd\n        }\n        gcd = b\n        b /= a\n\
    \    }\n    return b", '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    var gcd = a\n    while\
    \ gcd != 0 {\n        if b == 0 {\n            return gcd\n        }\n       \
    \ gcd = (a % gcd) / b\n    }\n    return gcd", '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    var\
    \ divisor = a % b\n    while divisor != 0 {\n        divisor = b\n        b =\
    \ (a % b) + b\n        divisor = a % b\n    }\n    return b", '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a\
    \ < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else { return\
    \ a }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b >=\
    \ 0 else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return
    gcd(a, b) * b', '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n\
    \            return gcd\n        }\n        gcd = b\n        b %= gcd\n    }\n\
    \    return b", '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return 0 }\n     \
    \   return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ 0 }\n    return greatest_common_divisor(a, (b % a) + a)", '    return a / gcd(a,
    b)', '    return greatest_common_divisor(UInt32(a), UInt32(b))', '    return a
    / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return gcd(a, b) * b', "    if a < b {\n        guard a >=\
    \ 0 else { return b }\n        guard b >= 0 else { return a }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    guard b >= 0 else { return a }\n\
    \    guard a >= 0 else { return b }\n    return greatest_common_divisor(b, a %\
    \ b)", '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a >= 0 else { return b }\n    \
    \    guard b >= 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b >= 0 else { return a }\n    guard a >= 0 else { return\
    \ b }\n    return greatest_common_divisor(a, b % a)", '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return greatest_common_divisor(UInt32(a), UInt32(b))', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', "    var remainder: Int\n    var divisor: Int\n\
    \n    while b != 0 {\n        remainder = a % b\n        a = b\n        b = remainder\n\
    \    }\n\n    return a", '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', "    var gcd = a\n    while gcd != 0 {\n        if b\
    \ == 0 {\n            return gcd\n        }\n        gcd = b\n        b /= a\n\
    \    }\n    return b", '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return greatest_common_divisor(UInt32(a), UInt32(b))', "   \
    \ var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n            return gcd\n\
    \        }\n        gcd = (a % gcd) / b\n    }\n    return gcd", "    var gcd\
    \ = a\n    while gcd != 0 {\n        if b == 0 {\n            return gcd\n   \
    \     }\n        gcd = b\n        b /= a\n    }\n    return b", '    return a
    / gcd(a, b)', '    return a / gcd(a, b)', '    return gcd(a, b) * b', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a >= 0 else { return b }\n    \
    \    guard b >= 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b >= 0 else { return a }\n    guard a >= 0 else { return\
    \ b }\n    return greatest_common_divisor(b, a % b)", '    return a / gcd(a, b)',
  "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return greatest_common_divisor(UInt32(a), UInt32(b))', "    if\
    \ a < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else {\
    \ return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b >= 0 else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', "    var gcd = a\n    while gcd !=\
    \ 0 {\n        if b == 0 {\n            return gcd\n        }\n        gcd = b\n\
    \        b /= a\n    }\n    return b", '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return gcd(a, b) * b', '    return greatest_common_divisor(UInt32(a),
    UInt32(b))', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    gcd(a, b) * b', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a >= 0 else {\n            preconditionFailure(\"a must\
    \ be non-negative\")\n        }\n        return greatest_common_divisor(b, a)\n\
    \    }\n    guard b > 0 else {\n        preconditionFailure(\"b must be positive\"\
    )\n    }\n    var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n       \
    \     return gcd\n        }\n        guard b % gcd == 0 else {\n            preconditionFailure(\"\
    b must be a divisor of a\")\n        }\n        gcd = gcd / b\n    }\n    return\
    \ gcd", '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b > 0 else { return 0 }\n    return greatest_common_divisor(a, (b % a) + a)",
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)']
stop_tokens:
- "\n}"
