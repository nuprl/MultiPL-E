name: HumanEval_13_greatest_common_divisor
language: swift
prompt: "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(a:\
  \ 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a: 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a:\
  \ Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\n\
  assert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
  \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
completions: ['    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ b", '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b > 0 else { return 0 }\n    return greatest_common_divisor(a, (b * b) % a)",
  '    return greatest_common_divisor(UInt32(a), UInt32(b))', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', '    return gcd(a, b) * b', "    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    var gcd = a\n    for\
    \ i = 2; i <= b; i++ {\n        if a % i == 0 {\n            gcd = i\n       \
    \ }\n    }\n    return gcd", '    return a / gcd(a, b)', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a,
    b)', "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)']
stop_tokens:
- "\n}"
