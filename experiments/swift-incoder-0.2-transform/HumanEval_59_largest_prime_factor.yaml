name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
  \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var i\
    \ = 2\n    var j = 2\n    var factor = 2\n\n    while i < n && !maxFactorFound\
    \ {\n        if n % i == 0 {\n            j += 1\n            if j > maxFactor\
    \ {\n                maxFactor = j\n                maxFactorFound = true\n  \
    \          }\n            factor *= i\n        }\n        i += 1\n    }\n\n  \
    \  return maxFactor", "    var largest = 1\n    var largestPrimeFactor = 1\n \
    \   for prime in 2...n {\n        if n % prime == 0 {\n            if largest\
    \ < prime {\n                largest = prime\n                largestPrimeFactor\
    \ = prime\n            }\n        } else {\n            if largest == prime {\n\
    \                largestPrimeFactor = prime\n            }\n        }\n    }\n\
    \    return largestPrimeFactor", "    let limit = Int(sqrt(Double(n)))\n    var\
    \ factor = 2\n    var i = 2\n    while i <= limit {\n        if n % i == 0 {\n\
    \            factor++\n            n /= i\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return factor", "    var largest = 1\n    var prime\
    \ = 2\n    var factor = 2\n    for factor <= n / 2 {\n        if n % factor ==\
    \ 0 {\n            largest = factor\n        }\n        if largest == 1 {\n  \
    \          largest = factor\n            prime = 2\n        }\n        if largest\
    \ % prime == 0 {\n            largest = prime\n        }\n        prime += 2\n\
    \    }\n    return largest", "    if n < 2 {\n        return n\n    }\n\n    var\
    \ max_factor: Int = 0\n    var max_factor_index: Int = 0\n    var i: Int = 0\n\
    \n    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor", "    let maxPrimeFactor\
    \ = Int(ceil(log2(n)))\n    var factor = 1\n    for _ in 0..<maxPrimeFactor {\n\
    \        if n % factor == 0 {\n            factor++\n        } else {\n      \
    \      break\n        }\n    }\n    return factor", "    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 2\n    var prime = 1\n    for _ in 0..<limit {\n        if n\
    \ % factor == 0 {\n            prime = factor\n        }\n        factor++\n \
    \   }\n    return prime", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }", "    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if\
    \ largest < i {\n                largest = i\n                largestPrimeFactor\
    \ = 1\n            } else {\n                largestPrimeFactor = largestPrimeFactor\
    \ * i\n            }\n        }\n    }\n    return largestPrimeFactor", "    if\
    \ n < 2 {\n        return n\n    }\n\n    // Sieve of Eratosthenes\n    var primes\
    \ = make(map[Int]bool)\n    var prime_factors = make([]int, n)\n\n    for i :=\
    \ 2; i < n; i++ {\n        if primes[i] {\n            continue\n        }\n\n\
    \        for j := i * i; j < n; j += i {\n            primes[j] = true\n     \
    \   }\n    }\n\n    for i := 2; i < n; i++ {\n        if !primes[i] {\n      \
    \      continue\n        }\n\n        prime_factors = append(prime_factors, i)\n\
    \    }\n\n    return prime_factors[len(prime_factors)-1]", "    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            } else {\n                if maxFactor < factor {\n             \
    \       maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor", "    var largest = 1\n    var prime = 2\n    for number\
    \ in 2...n {\n        if number % prime == 0 {\n            largest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \        prime = number\n        }\n    }\n    return largest", "    let limit\
    \ = sqrt(Double(n))\n    var factor = 2\n    var prime = 1\n    while factor <=\
    \ limit {\n        if n % factor == 0 {\n            prime = factor\n        \
    \    break\n        }\n        factor += 1\n    }\n    return prime", "    if\
    \ n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorFoundInt = Int()\n    var maxFactorFoundInt2 = Int()\n    for\
    \ var i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if maxFactorFoundInt\
    \ == 0 {\n                maxFactorFoundInt = i\n            } else {\n      \
    \          if maxFactorFoundInt != i {\n                    maxFactorFoundInt\
    \ = i\n                }\n            }\n        }\n    }\n    if maxFactorFoundInt\
    \ == 0 {\n        maxFactorFoundInt = 1\n    }\n    for var i = 2; i <= n / 2;\
    \ i += 1 {\n        if n % i == 0 {\n            if maxFactorFoundInt2 == 0 {\n\
    \                maxFactorFoundInt2 = i\n            } else {\n              \
    \  if maxFactorFoundInt2 != i {\n                    maxFactorFoundInt2 = i\n\
    \                }\n            }\n        }\n    }\n    if maxFactorFoundInt2\
    \ == 0 {\n        maxFactorFoundInt2 = 1\n    }\n    if maxFactorFoundInt > maxFactorFoundInt2\
    \ {\n        maxFactor = maxFactorFoundInt\n    } else {\n        maxFactor =\
    \ maxFactorFoundInt2\n    }\n    return maxFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n     \
    \   return 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return 0", "    let maxFactor = primeFactors(n)\n\
    \    return maxFactor.count", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    var factor = 2\n    while !maxFactorFound {\n        if n % factor\
    \ == 0 {\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n        factor++\n    }\n    return maxFactor", "    var max: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var\
    \ s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n   \
    \ var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n\
    \    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int =\
    \ 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int", "    if n < 2 {\n        return n\n    }\n    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if maxFactorFound {\n             \
    \   return factor\n            }\n            maxFactorFound = true\n        \
    \    maxFactor = factor\n        }\n    }\n    return maxFactor", "    let maxFactor\
    \ = prime_factors(n)\n    return maxFactor.count", "    if n < 2 {\n        return\
    \ n\n    }\n    var largest = 1\n    var largestPrimeFactor = 2\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            if largest < i {\n  \
    \              largest = i\n            }\n            if largestPrimeFactor <\
    \ i {\n                largestPrimeFactor = i\n            }\n        }\n    }\n\
    \    return largestPrimeFactor", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            } else {\n\
    \                maxFactorFound = true\n                maxFactor = factor\n \
    \           }\n        }\n    }\n    return maxFactor", "    var max_factor =\
    \ 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if max_factor < i {\n                max_factor = i\n\
    \                max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    if n < 2 {\n        return n\n    }\n\n    var largest = 1\n\
    \    var largestPrimeFactor = 1\n\n    for prime in 2...n {\n        if n % prime\
    \ == 0 {\n            largestPrimeFactor = prime\n            largest = prime\n\
    \        }\n    }\n\n    if largest == 1 {\n        return largestPrimeFactor\n\
    \    }\n\n    return largest", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for number in 2...n {\n        if number % 2 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 3 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 5 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 7 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 11 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 13 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 17 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 19 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 23 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 29 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 31 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 37 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 41 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 43 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 47 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 53 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 59 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 61 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 67 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 71 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 73 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 79 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 83 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 89 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 97 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 103 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 107 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 111 == 0 {\n", "    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    var i = 2\n    while i <= limit {\n        if n % i ==\
    \ 0 {\n            factor *= i\n            n /= i\n        }\n        i += 1\n\
    \    }\n    return factor", "    let maxFactor = sqrt(Double(n))\n    var factor:\
    \ Int = 0\n    for factor in 2..<maxFactor {\n        if n % factor == 0 {\n \
    \           break\n        }\n    }\n    return factor", "    if n < 2 {\n   \
    \     return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor", "    var maxFactor\
    \ = Int(1)\n    var maxFactorFound = false\n    for factor in 2...Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if !maxFactorFound {\n    \
    \            maxFactorFound = true\n                maxFactor = factor\n     \
    \       }\n        } else {\n            if maxFactorFound {\n               \
    \ break\n            }\n        }\n    }\n    return maxFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor",
  "    var largestPrimeFactor = Int(1)\n    var largestPrimeFactorIsPrime = true\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if largestPrimeFactorIsPrime\
    \ {\n                largestPrimeFactor = factor\n            } else {\n     \
    \           largestPrimeFactorIsPrime = false\n            }\n        }\n    }\n\
    \    return largestPrimeFactor", "    let factors = prime_factors(n)\n    return\
    \ factors.reduce(max) { $0 > $1 ? $0 : $1 }", "    var max_factor: Int = 0\n \
    \   var max_factor_index: Int = 0\n    for i := 2; i <= n / 2; i += 1 {\n    \
    \    if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var largest = 1\n    var factor = 2\n    for factor\
    \ <= n / 2 {\n        if n % factor == 0 {\n            largest = factor\n   \
    \     }\n        factor++\n    }\n    return largest", "    if n < 2 {\n     \
    \   return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int\
    \ = 0\n    var i: Int\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                return maxFactor\n            }\n            maxFactorFound =\
    \ true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n\n    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    var currentPrimeFactor = 1\n    var currentPrimeFactorIsPrime = true\n\
    \n    for currentPrimeFactor = 2; currentPrimeFactor <= n; currentPrimeFactor++\
    \ {\n        if n % currentPrimeFactor == 0 {\n            largestPrimeFactor\
    \ = currentPrimeFactor\n            largest = currentPrimeFactor\n        }\n\n\
    \        if currentPrimeFactor % 2 == 0 {\n            if currentPrimeFactorIsPrime\
    \ {\n                largestPrimeFactor = largest\n                largest = currentPrimeFactor\n\
    \            }\n            currentPrimeFactorIsPrime = false\n        } else\
    \ {\n            if currentPrimeFactorIsPrime {\n                largestPrimeFactor\
    \ = largest\n                largest = currentPrimeFactor\n            }\n   \
    \         currentPrimeFactorIsPrime = true\n        }\n    }\n\n    return largestPrimeFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            }\n            maxFactorFound = true\n    \
    \        maxFactor = factor\n        }\n    }\n    return maxFactor", "    if\
    \ n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    if n < 2 {\n        return n\n    }\n    var largest = 1\n\
    \    var largestPrimeFactor = 2\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            largestPrimeFactor = i\n    \
    \    }\n    }\n    return largestPrimeFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    if n < 2 {\n  \
    \      return n\n    }\n\n    var largest = 2\n    var largestPrimeFactor = 2\n\
    \n    for i := 2; i <= n / largestPrimeFactor; i++ {\n        if n % i == 0 {\n\
    \            largest = i\n            largestPrimeFactor = largest\n        }\n\
    \    }\n\n    return largestPrimeFactor", "    var largestPrimeFactor: Int = 0\n\
    \    var largestPrimeFactorFound = false\n    var largestPrimeFactorFoundInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivision = 0\n  \
    \  var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactors = false\n\
    \    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfter",
  "    var max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            if max_factor < i {\n              \
    \  max_factor = i\n                max_factor_index = i\n            }\n     \
    \   }\n    }\n    return max_factor", "    if n < 2 {\n        return n\n    }\n\
    \    var maxFactor = Int()\n    var maxFactorFound = false\n    var factor = 2\n\
    \    for factor < n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n        factor++\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    let mut i = 2\n    let mut largest = 1\n    while i <= n {\n\
    \        if n % i == 0 {\n            largest = i\n        }\n        i += 2\n\
    \    }\n    largest", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = 2 // start at 2\n    var maxFactorIsPrime = true // start at true\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorIsPrime\
    \ {\n                maxFactor = factor\n                maxFactorIsPrime = true\n\
    \            } else {\n                // factor is prime\n                if\
    \ factor > maxFactor {\n                    maxFactor = factor\n             \
    \   }\n            }\n        } else {\n            if maxFactorIsPrime {\n  \
    \              maxFactorIsPrime = false\n            }\n        }\n    }\n   \
    \ return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return 0", "    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var i = 2\n    while i <= limit {\n        if n % i ==\
    \ 0 {\n            factor++\n            if factor > limit {\n               \
    \ factor = 1\n            }\n        }\n        i += 1\n    }\n    return factor",
  "    let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $0 : $1 }", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }", "    let max = (n / 2) + 1\n    var factor: Int = 0\n\
    \    for prime in 2...max {\n        if n % prime == 0 {\n            factor++\n\
    \        }\n    }\n    return factor", "    if n < 2 {\n        return n\n   \
    \ }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i\
    \ := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i\
    \ {\n                max_factor = i\n                max_factor_index = i\n  \
    \          }\n        }\n    }\n    return max_factor", "    if n < 2 {\n    \
    \    return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorFoundIndex = -1\n\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = i\n                maxFactorFoundIndex =\
    \ i\n            } else {\n                if maxFactorFoundIndex < i {\n    \
    \                maxFactorFoundIndex = i\n                }\n            }\n \
    \       }\n    }\n\n    if maxFactorFound == false {\n        return n\n    }\n\
    \n    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            } else {\n \
    \               maxFactorFound = true\n                maxFactor = factor\n  \
    \          }\n        }\n    }\n    return maxFactor", "    if n < 2 {\n     \
    \   return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound = false\n\
    \n    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n    var maxFactor = 2 // start at 2 since\
    \ 2 > 1\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactor < factor {\n                maxFactor = factor\n            }\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var primeFactors\
    \ = [1]\n    var primeFactorFound = false\n\n    for factor in 2...n {\n     \
    \   if primeFactorFound {\n            if factor == 1 {\n                maxFactorFound\
    \ = true\n            } else {\n                if factor > maxFactor {\n    \
    \                maxFactor = factor\n                }\n            }\n      \
    \  } else {\n            if factor > maxFactor {\n                maxFactor =\
    \ factor\n                maxFactorFound = true\n            }\n        }\n\n\
    \        if factor > 1 {\n            primeFactorFound = false\n            for\
    \ prime in 2...factor {\n                if prime > 1 {\n                    if\
    \ primeFactors.contains(prime) {\n                        primeFactorFound = true\n\
    \                        break\n                    }\n                }\n   \
    \         }\n\n            if primeFactorFound {\n                primeFactors.append(factor)\n\
    \            }\n        }\n    }\n\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n\n    return 0", "    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            } else {\n \
    \               maxFactorFound = true\n                maxFactor = factor\n  \
    \          }\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    } else {\n        return n\n    }", "    if n < 2 {\n        return n\n \
    \   }\n\n    var maxFactor: Int = 0\n    var maxFactorFound = false\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var factor: Int = 0\n\n    for i = 2; i <=\
    \ n / 2; i += 1 {\n        if n % i == 0 {\n            j = i\n            factor\
    \ = 1\n            while j > 1 {\n                if n % j == 0 {\n          \
    \          factor *= j\n                    n /= j\n                } else {\n\
    \                    j -= 1\n                }\n            }\n            if\
    \ maxFactorFound == false {\n                maxFactor = factor\n            \
    \    maxFactorFound = true\n            } else {\n                if factor >\
    \ maxFactor {\n                    maxFactor = factor\n                }\n   \
    \         }\n        }\n    }\n\n    if maxFactorFound == false {\n        maxFactor\
    \ = 1\n    }\n\n    return maxFactor", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            if largest < largestPrimeFactor {\n                largest\
    \ = largestPrimeFactor\n            }\n        }\n    }\n    return largest",
  "    if n < 2 {\n        return 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n  \
    \  return maxFactor", "    let mut i = 2\n    let mut largest = 1\n    while i\
    \ <= n {\n        if n % i == 0 {\n            largest = i\n        }\n      \
    \  i += 2\n    }\n    return largest", "    let factors = prime_factors(n)\n \
    \   return factors.reduce(max) { $0 > $1 ? $1 : $0 }", "    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $1 : $0 }", "    if n < 2 {\n    \
    \    return 0\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound = false\n\
    \    var i = 2\n    while i <= n && !maxFactorFound {\n        if n % i == 0 {\n\
    \            maxFactorFound = true\n            maxFactor = i\n        }\n   \
    \     i += 1\n    }\n    return maxFactor", "    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n    \
    \    return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    let max_divisor = sqrt(Double(n))\n\
    \    var max_divisor_index = 0\n    var max_divisor_value = n\n    for divisor\
    \ in stride(from: 1, through: max_divisor, by: 2) {\n        if n % divisor ==\
    \ 0 {\n            max_divisor_value = divisor\n            max_divisor_index\
    \ = divisor\n        }\n    }\n    return max_divisor_value", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n", "    if n < 2 {\n        return n\n    }\n\n    var maxFactor:\
    \ Int = 0\n    var maxFactorFound = false\n    var factor: Int = 0\n    var factorFound\
    \ = false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n       \
    \     if !factorFound {\n                factorFound = true\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        } else {\n\
    \            if factorFound {\n                factorFound = false\n         \
    \   }\n        }\n    }\n\n    if !maxFactorFound {\n        return n\n    }\n\
    \n    return maxFactor", "    let max_prime = sqrt(Double(n))\n    var max_factor\
    \ = 1\n    var max_factor_index = 0\n    for factor in 2...max_prime {\n     \
    \   if n % factor == 0 {\n            if factor > max_factor {\n             \
    \   max_factor = factor\n                max_factor_index = factor\n         \
    \   }\n        }\n    }\n    return max_factor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                return factor\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return n", "    let mut i = 2\n    let mut\
    \ largest = i\n    while i < n {\n        if n % i == 0 {\n            largest\
    \ = i\n        }\n        i += 2\n    }\n    return largest", "    if n < 2 {\n\
    \        return n\n    }\n    var maxFactor: Int = 0\n    var maxFactorFound =\
    \ false\n    var i: Int\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i\
    \ == 0 {\n            if maxFactorFound {\n                return i\n        \
    \    }\n            maxFactor = i\n            maxFactorFound = true\n       \
    \ }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return\
    \ n", "    var max: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ d: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int =\
    \ 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var\
    \ t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var t: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var t: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var d: Int = 0\n    var t: Int = 0\n    var f: Int =\
    \ 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var d: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var d: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int =\
    \ 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d:\
    \ Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int", "    let limit\
    \ = Int(sqrt(Double(n)))\n    var factor = 2\n    var prime = 1\n    while factor\
    \ <= limit {\n        if n % factor == 0 {\n            prime *= factor\n    \
    \        n /= factor\n        } else {\n            factor++\n        }\n    }\n\
    \    return prime", "    if n < 2 {\n        return n\n    }\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            }\n        \
    \    maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $0 : $1 }", "    let maxPrime: Int = Int(sqrt(Double(n)))\n    var factor: Int\
    \ = 0\n    var i: Int = 0\n    while i < maxPrime {\n        if n % i == 0 {\n\
    \            factor++\n        }\n        i += 1\n    }\n    return factor", " \
    \   var largest = 1\n    var largestPrimeFactor = 1\n    for number in 2...n {\n\
    \        if number % 2 == 0 {\n            if number > largestPrimeFactor {\n\
    \                largestPrimeFactor = number\n                largest = number\n\
    \            }\n        } else {\n            if number > largestPrimeFactor {\n\
    \                largestPrimeFactor = number\n                largest = number\n\
    \            }\n        }\n    }\n    return largest", "    if n < 2 {\n     \
    \   return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    if n < 2 {\n       \
    \ return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \n    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n\n    return n", "    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $1 : $0 }", "    var largest = 1\n\
    \    var largestPrimeFactor = 1\n    for prime in 2...n {\n        if n % prime\
    \ == 0 {\n            if largest < prime {\n                largest = prime\n\
    \                largestPrimeFactor = prime\n            }\n        }\n    }\n\
    \    return largestPrimeFactor", "    let mut prime_factors = vec![Int::new();\
    \ n]\n    let mut prime_factors_size = prime_factors.len();\n    let mut prime_factors_index\
    \ = 0;\n    let mut prime_factors_index_max = 0;\n    let mut prime_factors_index_min\
    \ = 0;\n    let mut prime_factors_index_current = 0;\n    let mut prime_factors_index_current_max\
    \ = 0;\n    let mut prime_factors_index_current_min = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_max_index = 0;\n    let mut prime_factors_index_current_max_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime", "    var largest = 1\n    var prime = 1\n    for factor\
    \ in 2..<n {\n        if n % factor == 0 {\n            largest = factor\n   \
    \         prime *= factor\n        }\n    }\n    return largest", "    if n <\
    \ 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    var maxFactor = Int()\n    var maxFactorFound = false\n   \
    \ for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return 0", "    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $0 : $1 }", "    var max_factor: Int\
    \ = 0\n    var max_factor_index: Int = 0\n    for i : Int in 1...n {\n       \
    \ if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n", "    var largest = 1\n    var prime = 1\n    for _ in 0..<n\
    \ {\n        if n % prime == 0 {\n            largest = prime\n        }\n   \
    \     prime += 2\n    }\n    return largest", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    let maxPrime = Int(sqrt(Double(n)))\n    var primeFactors = [1]\n    for i\
    \ in 2...maxPrime {\n        if n % i == 0 {\n            primeFactors.append(i)\n\
    \        }\n    }\n    return primeFactors.max()!", "    var largest = 1\n   \
    \ var largestPrimeFactor = 1\n    for number in 2...n {\n        if number % 2\
    \ == 0 {\n            for divisor in 3...number {\n                if number %\
    \ divisor == 0 {\n                    largestPrimeFactor = divisor\n         \
    \           break\n                }\n            }\n        }\n        if number\
    \ % largestPrimeFactor == 0 {\n            largest = number\n        }\n    }\n\
    \    return largest", "    let max = (2..<n).reduce(1) { $0 % $1 }\n    return\
    \ max", "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    let mut i = 2\n    let mut largest = 1\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            largest = i\n            n /= i\n\
    \        } else {\n            i += 2\n        }\n    }\n    largest", "    let\
    \ primes = prime_factors(n)\n    return primes.reduce(max) { $0 > $1 ? $1 : $0\
    \ }", "    if n < 2 {\n        return n\n    }\n\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n    var factorFound = false\n\
    \    var i = 2\n\n    while i <= n {\n        if n % i == 0 {\n            factorFound\
    \ = true\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = i\n            }\n            factor = i\n\
    \        }\n        i += 1\n    }\n\n    if maxFactorFound == false {\n      \
    \  return n\n    }\n\n    return factor", "    var largest = 1\n    for prime\
    \ in 2..<n {\n        if n % prime == 0 {\n            largest = prime\n     \
    \       break\n        }\n    }\n    return largest", "    var largest = 1\n \
    \   var prime = 2\n    for factor in 2...n {\n        if n % factor == 0 {\n \
    \           largest = factor\n            prime *= factor\n        }\n    }\n\
    \    return largest", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    var maxFactor = Int(1)\n\
    \    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n\
    \            if factor > maxFactor {\n                maxFactor = factor\n   \
    \         }\n        }\n    }\n    return maxFactor", "    if n < 2 {\n      \
    \  return n\n    }\n\n    // The largest prime factor is n-1 (mod 2)\n    var\
    \ largestPrimeFactor = n-1\n\n    // The smallest prime factor is 2\n    var smallestPrimeFactor\
    \ = 2\n\n    // The largest factor is 2\n    var largestFactor = 2\n\n    // The\
    \ smallest factor is 2\n    var smallestFactor = 2\n\n    // The largest factor\
    \ is 2\n    var largestPrimeFactor2 = 2\n\n    // The smallest factor is 2\n \
    \   var smallestPrimeFactor2 = 2\n\n    // The largest factor is 2\n    var largestFactor2\
    \ = 2\n\n    // The smallest factor is 2\n    var smallestFactor2 = 2\n\n    //\
    \ The largest factor is 2\n    var largestPrimeFactor3 = 2\n\n    // The smallest\
    \ factor is 2\n    var smallestPrimeFactor3 = 2\n\n    // The largest factor is\
    \ 2\n    var largestFactor3 = 2\n\n    // The smallest factor is 2\n    var smallestFactor3\
    \ = 2\n\n    // The largest factor is 2\n    var largestPrimeFactor4 = 2\n\n \
    \   // The smallest factor is 2\n    var smallestPrimeFactor4 = 2\n\n    // The\
    \ largest factor is 2\n    var largestFactor4 = 2\n\n    // The smallest factor\
    \ is 2\n    var smallestFactor4 = 2\n\n    // The largest factor is 2\n    var\
    \ largestPrimeFactor5 = 2\n\n    // The smallest factor is 2\n    var smallestPrimeFactor5\
    \ = 2\n\n    // The largest factor is 2\n    var largestFactor5 = 2\n\n    //\
    \ The smallest factor is 2\n    var smallestFactor5 = 2\n\n    // The largest\
    \ factor is 2\n    var largestPrimeFactor6 = 2\n\n    // The smallest factor is\
    \ 2\n    var smallestPrimeFactor6 = 2\n\n    // The largest factor is 2\n    var\
    \ largestFactor6 = 2\n\n    // The smallest factor is 2\n    var smallestFactor6\
    \ = 2\n\n    // The largest factor is 2\n    var largestPrimeFactor7 = 2\n\n \
    \   // The smallest factor is 2\n    var smallestPrimeFactor7 = 2\n\n    // The\
    \ largest factor is 2\n    var largestFactor7 = 2\n\n    // The smallest factor\
    \ is 2\n    var smallestFactor7 = 2\n\n    // The largest factor is 2\n    var\
    \ largestPrimeFactor8 = 2\n\n    // The smallest factor is 2\n    var smallestPrimeFactor8\
    \ = 2\n\n    // The largest factor is 2\n    var largestFactor8 = 2\n\n    //\
    \ The smallest factor is 2\n    var smallestFactor8 = 2\n\n    // The largest\
    \ factor is 2\n    var largestPrimeFactor9 = 2\n\n    // The smallest factor ",
  "    var largest = 1\n    var factor = 2\n    for _ in 0..<n {\n        if n % factor\
    \ == 0 {\n            largest = factor\n        }\n        factor++\n    }\n \
    \   return largest", "    if n < 2 {\n        return 0\n    }\n    var maxFactor\
    \ = 2 // start at 2\n    var maxFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if maxFactorFound {\n             \
    \   return factor\n            }\n            maxFactorFound = true\n        \
    \    maxFactor = factor\n        }\n    }\n    return maxFactor", "    var largest\
    \ = 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            largest\
    \ = factor\n        }\n    }\n    return largest", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    let factors\
    \ = factors(n)\n    return factors.count > 0 ? factors.last : 1", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for factor in 2...n {\n    \
    \    if n % factor == 0 {\n            if factor > max_factor {\n            \
    \    max_factor = factor\n                max_factor_index = factor\n        \
    \    }\n        }\n    }\n    return max_factor", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var\
    \ factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \      factor++\n    }\n    return maxFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    if n < 2 {\n  \
    \      return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    if n < 2\
    \ {\n        return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorIsPrime\
    \ = true\n    for factor in 2...n {\n        if n % factor == 0 {\n          \
    \  if factor > maxFactor {\n                maxFactor = factor\n            }\n\
    \            if factor > 1 && factor * factor < n {\n                maxFactorIsPrime\
    \ = false\n            }\n        }\n    }\n    if maxFactorIsPrime {\n      \
    \  return maxFactor\n    }\n    return n", "    if n < 2 {\n        return n\n\
    \    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                return factor\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return n", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n     \
    \   return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n     \
    \   return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor", " \
    \   var largest = 1\n    var largestPrimeFactor = 1\n    for prime in 2...n {\n\
    \        if n % prime == 0 {\n            if largest < prime {\n             \
    \   largest = prime\n                largestPrimeFactor = prime\n            }\n\
    \        }\n    }\n    return largestPrimeFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n    var max_factor_value\
    \ = n\n    for factor_index in 2..<n {\n        if n % factor_index == 0 {\n \
    \           if max_factor_value < n / factor_index {\n                max_factor_value\
    \ = n / factor_index\n                max_factor_index = factor_index\n      \
    \      }\n        }\n    }\n    return max_factor_value", "    if n < 2 {\n  \
    \      return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int(1)\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if !maxFactorFound {\n                maxFactorFound = true\n            \
    \    maxFactor = factor\n            } else {\n                if maxFactor !=\
    \ factor {\n                    return maxFactor\n                }\n        \
    \    }\n        }\n    }\n    return maxFactor", "    var largest = 1\n    var\
    \ factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n            largest\
    \ = factor\n        }\n        n /= factor\n        factor += 1\n    }\n    return\
    \ largest", "    if n < 2 {\n        return n\n    }\n    var max_factor = 1\n\
    \    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    if n < 2 {\n        return n\n    }\n\n    var maxFactor =\
    \ 2 // start at 2, since 2 is the largest factor\n    var maxFactorIsPrime = true\
    \ // start at true, since 2 is the largest factor\n    for factor in 2..<n {\n\
    \        if n % factor == 0 {\n            if factor > maxFactor {\n         \
    \       maxFactor = factor\n            }\n            if factor > maxFactorIsPrime\
    \ {\n                maxFactorIsPrime = true\n            }\n        } else {\n\
    \            if factor > maxFactor {\n                maxFactor = factor\n   \
    \         }\n            if factor > maxFactorIsPrime {\n                maxFactorIsPrime\
    \ = false\n            }\n        }\n    }\n\n    if maxFactorIsPrime {\n    \
    \    return maxFactor\n    } else {\n        return n\n    }", "    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    for factor in 2...Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor * factor > n {\n\
    \                largestPrimeFactorIsPrime = false\n            } else {\n   \
    \             largestPrimeFactor = factor\n            }\n        }\n    }\n \
    \   if largestPrimeFactorIsPrime {\n        return largestPrimeFactor\n    } else\
    \ {\n        return n\n    }", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n/2; i += 1 {\n        if n % i == 0 {\n         \
    \   if largest == 1 {\n                largest = i\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largestPrimeFactor != i {\n  \
    \                  largest = largestPrimeFactor\n                    largestPrimeFactor\
    \ = i\n                }\n            }\n        }\n    }\n    return largest",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInt\
    \ = Int()\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound == false {\n                maxFactorFound = true\n    \
    \            maxFactorFoundInt = factor\n            } else {\n              \
    \  if maxFactorFoundInt > factor {\n                    maxFactorFoundInt = factor\n\
    \                }\n            }\n        }\n    }\n    if maxFactorFound ==\
    \ false {\n        return 0\n    } else {\n        return maxFactorFoundInt\n\
    \    }", "    var largest = 1\n    var factor = 2\n    var i = 2\n    while i\
    \ < n {\n        if n % i == 0 {\n            largest = factor\n            factor\
    \ = 1\n        } else {\n            factor *= i\n        }\n        i += 1\n\
    \    }\n    return largest", "    if n < 2 {\n        return n\n    }\n\n    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    var factor = 2\n    var\
    \ factorFound = false\n\n    while !factorFound {\n        if n % factor == 0\
    \ {\n            factorFound = true\n        } else {\n            factor += 1\n\
    \        }\n\n        if factor > maxFactor {\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n\n    return maxFactor",
  "    if n < 2 {\n        return n\n    }\n    if n == 2 {\n        return 2\n  \
    \  }\n    if n == 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return\
    \ largest_prime_factor(n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n\
    \ / 3)\n    }\n    var max_factor: Int\n    var max_factor_index: Int\n    for\
    \ max_factor_index in 2...n {\n        if n % max_factor_index == 0 {\n      \
    \      continue\n        }\n        var factor: Int\n        if max_factor_index\
    \ > 2 {\n            factor = max_factor_index\n        } else {\n           \
    \ factor = 2\n        }\n        for factor_index in 3...factor {\n          \
    \  if n % factor_index == 0 {\n                break\n            }\n        }\n\
    \        if factor > max_factor {\n            max_factor = factor\n        }\n\
    \    }\n    return max_factor", "    if n < 2 {\n        return n\n    }\n   \
    \ var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            }\n            maxFactorFound = true\n    \
    \        maxFactor = factor\n        }\n    }\n    return maxFactor", "    if\
    \ n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n    return n", "  \
    \  if n < 2 {\n        return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if !maxFactorFound {\n                maxFactorFound = true\n            \
    \    maxFactor = factor\n            }\n        } else {\n            if maxFactorFound\
    \ {\n                break\n            }\n        }\n    }\n    return maxFactor",
  "    let mut i = 2\n    let mut largest = i\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            largest = i\n        }\n        i += 2\n    }\n  \
    \  return largest", "    let limit = sqrt(Double(n))\n    var factor = 2\n   \
    \ var i = 1\n    while i <= limit {\n        if n % i == 0 {\n            factor++\n\
    \            if factor > limit {\n                factor = 1\n            }\n\
    \        }\n        i += 1\n    }\n    return factor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        } else {\n\
    \            if maxFactorFound == true {\n                return maxFactor\n \
    \           }\n        }\n    }\n    return maxFactor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound == false\
    \ {\n                maxFactorFound = true\n                maxFactorFoundInt\
    \ = factor\n            } else {\n                if factor > maxFactorFoundInt\
    \ {\n                    maxFactorFoundInt = factor\n                }\n     \
    \       }\n        }\n    }\n    if maxFactorFound == false {\n        return\
    \ 0\n    } else {\n        return maxFactorFoundInt\n    }", "    if n < 2 {\n\
    \        return n\n    }\n    var maxFactor = 2 // start at 2, since 2 is the\
    \ only even prime\n    for factor in 2...n {\n        if n % factor == 0 {\n \
    \           maxFactor = factor\n        }\n    }\n    return maxFactor", "   \
    \ if n < 2 {\n        return n\n    }\n    if n == 2 {\n        return 2\n   \
    \ }\n    if n == 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return\
    \ largest_prime_factor(n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n\
    \ / 3)\n    }\n    var max: Int = 0\n    var i: Int = 0\n    for i = 2; i <= Int(sqrt(Double(n)));\
    \ i++ {\n        if n % i == 0 {\n            if max < i {\n                max\
    \ = i\n            }\n        }\n    }\n    return max", "    if n < 2 {\n   \
    \     return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor", " \
    \   var largest = 1\n    for factor in 2...n {\n        if n % factor == 0 {\n\
    \            largest = factor\n            break\n        }\n    }\n    return\
    \ largest", "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return n", "    if n < 2 {\n        return n\n    }\n    if n == 2 {\n  \
    \      return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n % 2\
    \ == 0 {\n        return largest_prime_factor(n / 2)\n    }\n    var maxFactor:\
    \ Int = 2\n    var maxFactorFound: Bool = false\n    var i: Int\n    for i = 4;\
    \ i <= sqrt(n); i += 2 {\n        if n % i == 0 {\n            if maxFactorFound\
    \ {\n                return maxFactor\n            }\n            maxFactor =\
    \ i\n            maxFactorFound = true\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n", "    if n < 2 {\n       \
    \ return n\n    }\n    var maxFactor: Int = 0\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactorFound = true\n                maxFactor = factor\n\
    \            } else {\n                if maxFactor != factor {\n            \
    \        return maxFactor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInPrimeFactors\
    \ = false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n       \
    \     if !maxFactorFound {\n                maxFactor = factor\n             \
    \   maxFactorFound = true\n            }\n            if factor > maxFactorFoundInPrimeFactors\
    \ {\n                maxFactorFoundInPrimeFactors = factor\n            }\n  \
    \      }\n    }\n\n    if maxFactorFound {\n        return maxFactor\n    }\n\n\
    \    return n", "    if n < 2 {\n        return n\n    }\n    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return factor\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            if\
    \ largest == 1 {\n                largest = factor\n                largestPrimeFactor\
    \ = factor\n            } else {\n                if largest % factor == 0 {\n\
    \                    largest = largest * factor\n                    largestPrimeFactor\
    \ = largestPrimeFactor * factor\n                } else {\n                  \
    \  largest = largest * factor\n                }\n            }\n        }\n \
    \   }\n    return largestPrimeFactor", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            } else {\n\
    \                maxFactorFound = true\n                maxFactor = factor\n \
    \           }\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    } else {\n        return 0\n    }", "    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $0 : $1 }", "    let mut i = 2\n \
    \   let mut largest = 1\n    while i * i <= n {\n        if n % i == 0 {\n   \
    \         largest = i\n        }\n        i += 2\n    }\n    return largest",
  "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    var currentFactor = Int()\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if currentFactor == 0 {\n                currentFactor\
    \ = factor\n            } else {\n                if currentFactor > maxFactor\
    \ {\n                    maxFactor = currentFactor\n                    maxFactorFound\
    \ = true\n                }\n                currentFactor = 0\n            }\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    } else\
    \ {\n        return n\n    }", "    var largest = 1\n    var prime = 2\n    var\
    \ i = 2\n    while i <= n {\n        if n % i == 0 {\n            largest = prime\n\
    \            prime = i\n        }\n        i += 1\n    }\n    return largest",
  "    let limit = sqrt(Double(n))\n    var factor = 2\n    var prime = 1\n    var\
    \ i = 2\n    while i <= limit {\n        if n % i == 0 {\n            prime =\
    \ i\n            factor = 1\n            while n % i == 0 {\n                n\
    \ /= i\n                factor++\n            }\n            break\n        }\n\
    \        i += 1\n    }\n    return factor", "    var maxFactor = Int()\n    var\
    \ maxFactorFound = false\n    var maxFactorFoundInt = Int()\n    var maxFactorFoundIntInt\
    \ = Int()\n    var maxFactorFoundDouble = Double()\n    var maxFactorFoundDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDouble = Double()\n    var maxFactorFoundDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDouble = Double()\n    var maxFactorFoundDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDouble = Double()\n    var\
    \ maxFactorFoundDoubleDoubleDoubleDoubleInt = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleInt = Double()\n\
    \    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDouble = Double()\n    var\
    \ maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleInt = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDouble", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    var i: Int = 0\n    for i =\
    \ 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    var largest = 1\n\
    \    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n       \
    \     largest = factor\n        }\n        n /= factor\n        factor += 1\n\
    \    }\n    return largest", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int\n    for i = 2; i <= n / 2; i += 1 {\n        if n %\
    \ i == 0 {\n            if max_factor < i {\n                max_factor = i\n\
    \                max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    var factor = 2\n    for factor < n {\n  \
    \      if n % factor == 0 {\n            if maxFactorFound == false {\n      \
    \          maxFactorFound = true\n                maxFactor = factor\n       \
    \     } else {\n                if factor > maxFactor {\n                    maxFactorFound\
    \ = true\n                    maxFactor = factor\n                }\n        \
    \    }\n        }\n        factor++\n    }\n    if maxFactorFound == false {\n\
    \        maxFactorFound = true\n        maxFactor = n\n    }\n    return maxFactor",
  "    let factors = prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ?\
    \ $1 : $0 }", "    if n < 2 {\n        return n\n    }\n    var largest = 1\n\
    \    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            largestPrimeFactor = i\n    \
    \    }\n    }\n    return largestPrimeFactor", "    var maxFactor = Int()\n  \
    \  var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound == false {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            } else {\n         \
    \       if maxFactor < factor {\n                    maxFactor = factor\n    \
    \            }\n            }\n        }\n    }\n    return maxFactor", "    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if maxFactorFound {\n             \
    \   break\n            } else {\n                maxFactorFound = true\n     \
    \           maxFactor = factor\n            }\n        }\n    }\n    return maxFactor",
  "    let limit = sqrt(Double(n))\n    var factor = 2\n    var prime = 1\n    while\
    \ factor <= limit {\n        if n % factor == 0 {\n            prime = factor\n\
    \            n /= factor\n        } else {\n            factor += 1\n        }\n\
    \    }\n    return prime", "    var factor: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var\
    \ g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   \
    \ var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var ", "    let max = (2..<n).reduce(1) { $0 % $1 }\n    return max", "    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if maxFactorFound {\n             \
    \   return factor\n            }\n            maxFactorFound = true\n        \
    \    maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n        return\
    \ maxFactor\n    }\n    return n", "    let mut i = 2\n    let mut largest = 1\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            largest = i\n  \
    \      }\n        i += 2\n    }\n    return largest", "    var largest = 1\n \
    \   var largestPrimeFactor = 1\n    for i := 2; i <= n/2; i++ {\n        if n%i\
    \ == 0 {\n            if largestPrimeFactor == 1 {\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largestPrimeFactor > i {\n   \
    \                 largestPrimeFactor = i\n                }\n            }\n \
    \       }\n    }\n    return largestPrimeFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactorFound = true\n                maxFactor = factor\n\
    \            } else {\n                if maxFactor != factor {\n            \
    \        return maxFactor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor", "    if n < 2 {\n       \
    \ return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    let primes = prime_factors(n)\n    return primes.reduce(max) { $0 > $1 ? $1\
    \ : $0 }", "    if n < 2 {\n        return n\n    }\n    var max_factor: Int =\
    \ 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    if n < 2 {\n        return n\n    }\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor", "    let factors = prime_factors(n)\n\
    \    return factors.reduce(max) { $0 > $1 ? $1 : $0 }", "    if n < 2 {\n    \
    \    return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorIndex = 0\n    var i = 2\n\n    while i < n && !maxFactorFound\
    \ {\n        if n % i == 0 {\n            maxFactorFound = true\n            maxFactor\
    \ = i\n            maxFactorIndex = i\n        }\n\n        i += 1\n    }\n\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n\n    return n", " \
    \   if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n   \
    \ if n % 2 == 0 {\n        return largest_prime_factor(n: n / 2)\n    }\n    if\
    \ n % 3 == 0 {\n        return largest_prime_factor(n: n / 3)\n    }\n    var\
    \ max_factor: Int\n    var max_factor_index: Int\n    var max_factor_count: Int\n\
    \    for max_factor_index in 2...n {\n        max_factor_count = 0\n        for\
    \ max_factor = 2...max_factor_index {\n            if max_factor % max_factor_index\
    \ == 0 {\n                max_factor_count++\n            }\n        }\n     \
    \   if max_factor_count > max_factor {\n            max_factor = max_factor_count\n\
    \        }\n    }\n    return max_factor", "    if n < 2 {\n        return n\n\
    \    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n\n    return n", "    let mut i = 2\n  \
    \  let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n        \
    \    largest = i\n        }\n        i += 2\n    }\n    return largest"]
stop_tokens:
- "\n}"
