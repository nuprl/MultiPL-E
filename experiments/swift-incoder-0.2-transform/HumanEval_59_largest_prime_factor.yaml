name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
  \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    if n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n\n    var maxFactor = Int()\n    var maxFactorFound = false\n    var i\
    \ = 2\n    var j = 2\n    var factor = 2\n\n    while i < n && !maxFactorFound\
    \ {\n        if n % i == 0 {\n            j += 1\n            if j > maxFactor\
    \ {\n                maxFactor = j\n                maxFactorFound = true\n  \
    \          }\n            factor *= i\n        }\n        i += 1\n    }\n\n  \
    \  return maxFactor", "    var largest = 1\n    var largestPrimeFactor = 1\n \
    \   for prime in 2...n {\n        if n % prime == 0 {\n            if largest\
    \ < prime {\n                largest = prime\n                largestPrimeFactor\
    \ = prime\n            }\n        } else {\n            if largest == prime {\n\
    \                largestPrimeFactor = prime\n            }\n        }\n    }\n\
    \    return largestPrimeFactor", "    let limit = Int(sqrt(Double(n)))\n    var\
    \ factor = 2\n    var i = 2\n    while i <= limit {\n        if n % i == 0 {\n\
    \            factor++\n            n /= i\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return factor", "    var largest = 1\n    var prime\
    \ = 2\n    var factor = 2\n    for factor <= n / 2 {\n        if n % factor ==\
    \ 0 {\n            largest = factor\n        }\n        if largest == 1 {\n  \
    \          largest = factor\n            prime = 2\n        }\n        if largest\
    \ % prime == 0 {\n            largest = prime\n        }\n        prime += 2\n\
    \    }\n    return largest", "    if n < 2 {\n        return n\n    }\n\n    var\
    \ max_factor: Int = 0\n    var max_factor_index: Int = 0\n    var i: Int = 0\n\
    \n    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor", "    let maxPrimeFactor\
    \ = Int(ceil(log2(n)))\n    var factor = 1\n    for _ in 0..<maxPrimeFactor {\n\
    \        if n % factor == 0 {\n            factor++\n        } else {\n      \
    \      break\n        }\n    }\n    return factor", "    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 2\n    var prime = 1\n    for _ in 0..<limit {\n        if n\
    \ % factor == 0 {\n            prime = factor\n        }\n        factor++\n \
    \   }\n    return prime", "    let factors = prime_factors(n)\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }", "    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if\
    \ largest < i {\n                largest = i\n                largestPrimeFactor\
    \ = 1\n            } else {\n                largestPrimeFactor = largestPrimeFactor\
    \ * i\n            }\n        }\n    }\n    return largestPrimeFactor", "    if\
    \ n < 2 {\n        return n\n    }\n\n    // Sieve of Eratosthenes\n    var primes\
    \ = make(map[Int]bool)\n    var prime_factors = make([]int, n)\n\n    for i :=\
    \ 2; i < n; i++ {\n        if primes[i] {\n            continue\n        }\n\n\
    \        for j := i * i; j < n; j += i {\n            primes[j] = true\n     \
    \   }\n    }\n\n    for i := 2; i < n; i++ {\n        if !primes[i] {\n      \
    \      continue\n        }\n\n        prime_factors = append(prime_factors, i)\n\
    \    }\n\n    return prime_factors[len(prime_factors)-1]", "    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            } else {\n                if maxFactor < factor {\n             \
    \       maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor", "    var largest = 1\n    var prime = 2\n    for number\
    \ in 2...n {\n        if number % prime == 0 {\n            largest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \        prime = number\n        }\n    }\n    return largest", "    let limit\
    \ = sqrt(Double(n))\n    var factor = 2\n    var prime = 1\n    while factor <=\
    \ limit {\n        if n % factor == 0 {\n            prime = factor\n        \
    \    break\n        }\n        factor += 1\n    }\n    return prime", "    if\
    \ n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var maxFactorFoundInt = Int()\n    var maxFactorFoundInt2 = Int()\n    for\
    \ var i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if maxFactorFoundInt\
    \ == 0 {\n                maxFactorFoundInt = i\n            } else {\n      \
    \          if maxFactorFoundInt != i {\n                    maxFactorFoundInt\
    \ = i\n                }\n            }\n        }\n    }\n    if maxFactorFoundInt\
    \ == 0 {\n        maxFactorFoundInt = 1\n    }\n    for var i = 2; i <= n / 2;\
    \ i += 1 {\n        if n % i == 0 {\n            if maxFactorFoundInt2 == 0 {\n\
    \                maxFactorFoundInt2 = i\n            } else {\n              \
    \  if maxFactorFoundInt2 != i {\n                    maxFactorFoundInt2 = i\n\
    \                }\n            }\n        }\n    }\n    if maxFactorFoundInt2\
    \ == 0 {\n        maxFactorFoundInt2 = 1\n    }\n    if maxFactorFoundInt > maxFactorFoundInt2\
    \ {\n        maxFactor = maxFactorFoundInt\n    } else {\n        maxFactor =\
    \ maxFactorFoundInt2\n    }\n    return maxFactor", "    if n < 2 {\n        return\
    \ n\n    }\n    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n \
    \   for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }", "    if n < 2 {\n     \
    \   return 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return 0", "    let maxFactor = primeFactors(n)\n\
    \    return maxFactor.count"]
stop_tokens:
- "\n}"
