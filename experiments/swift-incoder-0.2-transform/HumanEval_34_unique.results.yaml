language: swift
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for el in\
    \ l {\n        if !contains(seen, el) {\n            append(result, el)\n    \
    \        append(seen, el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpnz_ssf2i.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, el) {\n            ^~~~~~~~\n/tmp/tmpnz_ssf2i.swift:10:13:\
    \ error: cannot find 'append' in scope\n            append(result, el)\n     \
    \       ^~~~~~\n/tmp/tmpnz_ssf2i.swift:11:13: error: cannot find 'append' in scope\n\
    \            append(seen, el)\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for x in\
    \ l {\n        if !contains(seen, x) {\n            seen.append(x)\n         \
    \   result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpla_7ybla.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l {\n\
    \        if !contains(seen, x) {\n            seen.append(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpmaoyvg80.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for x in\
    \ l {\n        if !contains(seen, x) {\n            seen.append(x)\n         \
    \   result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpla_7ybla.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var seen = [Int]()\n    for x in l\
    \ {\n        if !seen.isEmpty {\n            if seen[seen.count - 1] == x {\n\
    \                continue\n            }\n            seen[seen.count - 1] = x\n\
    \        } else {\n            seen = [x]\n        }\n        result.append(x)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpp88x5fii/tmpp88x5fii.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8fe4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8fe1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8fe1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8fe1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp88x5fii                        0x000055f4ca57a785 <unavailable> + 6021

    5    libc.so.6                          0x00002ad8fe6b7460 __libc_start_main +
    245

    6    tmpp88x5fii                        0x000055f4ca57a339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpd4lf1k7u.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmphrn7a2kr.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpd4lf1k7u.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp1i9jxn7a.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkpe78j_7.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpobla1lmz.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
