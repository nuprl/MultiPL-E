name: HumanEval_97_multiply
language: swift
prompt: "\n/// Complete the function that takes two integers and returns \n/// the\
  \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19, b: 28)\n/// 72\n\
  /// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a: 14, b: -15)\n///\
  \ 20\nfunc multiply(a: Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
  \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
  \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
  \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
  \ == 0)"
completions: ["    var product = a * b\n    if product < 0 {\n        product = -product\n\
    \    }\n    return product", "    guard a >= 0 && b >= 0 else {\n        return\
    \ 0\n    }\n    var product = a * b\n    var remainder = a % b\n    while remainder\
    \ > 0 {\n        product *= 10\n        remainder -= 1\n    }\n    return product",
  "    var product = a * b\n    if product < 0 {\n        product *= -1\n    }\n \
    \   return product", '    return a * b', "    var result = a * b\n    \n    if\
    \ result < 0 {\n        result = -result\n    }\n    \n    return result", " \
    \   var product = a * b\n    if product < 0 {\n        product *= -1\n    }\n\
    \    return product", "    var product = a * b\n    var remainder = a % b\n  \
    \  while remainder > 0 {\n        product *= 10\n        remainder -= 1\n    }\n\
    \    return product", "    var product = a * b\n    var remainder = a % b\n  \
    \  while remainder != 0 {\n        product *= 10\n        remainder *= 10\n  \
    \  }\n    return product", "    let product = a / b\n    return product * b",
  '    return a / b', "    var product = a * b\n    var remainder = a % b\n    while\
    \ remainder > 0 {\n        product *= 10\n        remainder -= 1\n    }\n    return\
    \ product", '    return a * b', "    var product = a * b\n    var remainder =\
    \ a % b\n    while remainder > 0 {\n        product *= 10\n        remainder--\n\
    \    }\n    return product", "    var product = a * b\n    if product < 0 {\n\
    \        product *= -1\n    }\n    return product", '    return a * b', "    guard\
    \ a >= 0 && b >= 0 else {\n        return 0\n    }\n    let product = a / b\n\
    \    let remainder = a % b\n    return product * 10 + remainder", '    return
    a * b', "    var product = a * b\n    guard product != 0 else {\n        return\
    \ product\n    }\n    \n    var remainder = product % 10\n    product = product\
    \ / 10\n    \n    while product > 0 {\n        remainder = remainder * 10 + product\
    \ % 10\n        product = product / 10\n    }\n    \n    return remainder", " \
    \   var product = a * b\n    var unitDigits = product % 10\n    product /= 10\n\
    \    \n    if unitDigits > 0 {\n        product *= 10\n        product += unitDigits\n\
    \    }\n    \n    return product", "    var product = a * b\n    var remainder\
    \ = a % b\n    while remainder > 0 {\n        product *= 10\n        remainder\
    \ -= 1\n    }\n    return product"]
stop_tokens:
- "\n}"
